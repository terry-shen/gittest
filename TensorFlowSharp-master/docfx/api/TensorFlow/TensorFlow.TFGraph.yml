### YamlMime:ManagedReference
items:
- uid: TensorFlow.TFGraph
  id: TFGraph
  children:
  - TensorFlow.TFGraph.#ctor
  - TensorFlow.TFGraph.Abort(System.String,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.Abs(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Acos(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Add(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.AddGradients(TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFStatus)
  - TensorFlow.TFGraph.AddInitVariable(TensorFlow.TFOperation)
  - TensorFlow.TFGraph.AddManySparseToTensorsMap(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String,System.String)
  - TensorFlow.TFGraph.AddN(TensorFlow.TFOutput[],System.String)
  - TensorFlow.TFGraph.AddSparseToTensorsMap(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String,System.String)
  - TensorFlow.TFGraph.AdjustContrast(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.AdjustContrastv2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.AdjustHue(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.AdjustSaturation(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.All(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.AllCandidateSampler(TensorFlow.TFOutput,System.Int64,System.Int64,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.Any(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.ApplyDelayCompensatedGradientDescent(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.ApproximateEqual(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Single},System.String)
  - TensorFlow.TFGraph.ArgMax(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.ArgMin(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Asin(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Assert(TensorFlow.TFOutput,TensorFlow.TFOutput[],System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.AssignAddVariableOp(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.AssignSubVariableOp(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.AssignVariableOp(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.AsString(TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.String,System.String)
  - TensorFlow.TFGraph.Atan(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Atan2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.AudioSpectrogram(TensorFlow.TFOutput,System.Int64,System.Int64,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.AudioSummary(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Single,System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.AudioSummaryV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.AvgPool(TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  - TensorFlow.TFGraph.AvgPool3D(TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  - TensorFlow.TFGraph.AvgPool3DGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  - TensorFlow.TFGraph.AvgPoolGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  - TensorFlow.TFGraph.BatchDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  - TensorFlow.TFGraph.BatchMatMul(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.BatchNormWithGlobalNormalization(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Single,System.Boolean,System.String)
  - TensorFlow.TFGraph.BatchNormWithGlobalNormalizationGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Single,System.Boolean,System.String)
  - TensorFlow.TFGraph.BatchToSpace(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.String)
  - TensorFlow.TFGraph.BatchToSpaceND(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Betainc(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.BiasAdd(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String)
  - TensorFlow.TFGraph.BiasAddGrad(TensorFlow.TFOutput,System.String,System.String)
  - TensorFlow.TFGraph.BiasAddV1(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Bincount(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Bitcast(TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  - TensorFlow.TFGraph.BitwiseAnd(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.BitwiseOr(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.BitwiseXor(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.BroadcastArgs(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.BroadcastGradientArgs(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Bucketize(TensorFlow.TFOutput,System.Single[],System.String)
  - TensorFlow.TFGraph.CacheDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  - TensorFlow.TFGraph.Cast(TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  - TensorFlow.TFGraph.Ceil(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.CheckNumerics(TensorFlow.TFOutput,System.String,System.String)
  - TensorFlow.TFGraph.Cholesky(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.CholeskyGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Complex(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  - TensorFlow.TFGraph.ComplexAbs(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  - TensorFlow.TFGraph.ComputeAccidentalHits(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.Concat(TensorFlow.TFOutput,TensorFlow.TFOutput[],System.String)
  - TensorFlow.TFGraph.ConcatOffset(TensorFlow.TFOutput,TensorFlow.TFOutput[],System.String)
  - TensorFlow.TFGraph.ConcatV2(TensorFlow.TFOutput[],TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Conj(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Const(TensorFlow.TFTensor,System.String)
  - TensorFlow.TFGraph.Const(TensorFlow.TFTensor,TensorFlow.TFDataType,System.String)
  - TensorFlow.TFGraph.ControlTrigger(System.String)
  - TensorFlow.TFGraph.Conv2D(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.Nullable{System.Boolean},System.String,System.String)
  - TensorFlow.TFGraph.Conv2DBackpropFilter(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.Nullable{System.Boolean},System.String,System.String)
  - TensorFlow.TFGraph.Conv2DBackpropInput(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.Nullable{System.Boolean},System.String,System.String)
  - TensorFlow.TFGraph.Conv3D(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.String,System.String)
  - TensorFlow.TFGraph.Conv3DBackpropFilter(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.String)
  - TensorFlow.TFGraph.Conv3DBackpropFilterV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.String,System.String)
  - TensorFlow.TFGraph.Conv3DBackpropInput(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.String)
  - TensorFlow.TFGraph.Conv3DBackpropInputV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.String,System.String)
  - TensorFlow.TFGraph.Cos(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Cosh(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.CropAndResize(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.Nullable{System.Single},System.String)
  - TensorFlow.TFGraph.CropAndResizeGradBoxes(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String)
  - TensorFlow.TFGraph.CropAndResizeGradImage(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.String,System.String)
  - TensorFlow.TFGraph.Cross(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.CTCBeamSearchDecoder(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.Int64,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.CTCGreedyDecoder(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.CTCLoss(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.Cumprod(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.Cumsum(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.CurrentNameScope
  - TensorFlow.TFGraph.DecodeBase64(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.DecodeBmp(TensorFlow.TFOutput,System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.DecodeCSV(TensorFlow.TFOutput,TensorFlow.TFOutput[],System.String,System.String)
  - TensorFlow.TFGraph.DecodeCSV(TensorFlow.TFOutput,TensorFlow.TFOutput[],System.String,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.DecodeGif(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.DecodeJpeg(TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Single},System.String,System.String)
  - TensorFlow.TFGraph.DecodeJSONExample(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.DecodePng(TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{TensorFlow.TFDataType},System.String)
  - TensorFlow.TFGraph.DecodeRaw(TensorFlow.TFOutput,TensorFlow.TFDataType,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.DecodeWav(TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.DeleteSessionTensor(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.DenseToDenseSetOperation(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.DenseToSparseBatchDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  - TensorFlow.TFGraph.DenseToSparseSetOperation(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.DepthToSpace(TensorFlow.TFOutput,System.Int64,System.String)
  - TensorFlow.TFGraph.DepthwiseConv2dNative(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.String,System.String)
  - TensorFlow.TFGraph.DepthwiseConv2dNativeBackpropFilter(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.String,System.String)
  - TensorFlow.TFGraph.DepthwiseConv2dNativeBackpropInput(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.String,System.String)
  - TensorFlow.TFGraph.Dequantize(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String)
  - TensorFlow.TFGraph.DeserializeManySparse(TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  - TensorFlow.TFGraph.DestroyResourceOp(TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.Diag(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.DiagPart(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Digamma(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Dilation2D(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String)
  - TensorFlow.TFGraph.Dilation2DBackpropFilter(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String)
  - TensorFlow.TFGraph.Dilation2DBackpropInput(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String)
  - TensorFlow.TFGraph.Div(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.DrawBoundingBoxes(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Dropout(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFShape,System.Nullable{System.Int32},System.String)
  - TensorFlow.TFGraph.Dropout(TensorFlow.TFOutput,System.Double,TensorFlow.TFShape,System.Nullable{System.Int32},System.String)
  - TensorFlow.TFGraph.DynamicPartition(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.String)
  - TensorFlow.TFGraph.DynamicStitch(TensorFlow.TFOutput[],TensorFlow.TFOutput[],System.String)
  - TensorFlow.TFGraph.EditDistance(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.Elu(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.EluGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.EncodeBase64(TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.EncodeJpeg(TensorFlow.TFOutput,System.String,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String)
  - TensorFlow.TFGraph.EncodePng(TensorFlow.TFOutput,System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.EncodeWav(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Enter(TensorFlow.TFOutput,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.Equal(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Erf(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Erfc(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Exit(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Exp(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.ExpandDims(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Expm1(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.ExtractGlimpse(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.ExtractImagePatches(TensorFlow.TFOutput,System.Int64[],System.Int64[],System.Int64[],System.String,System.String)
  - TensorFlow.TFGraph.Fact(System.String)
  - TensorFlow.TFGraph.FakeQuantWithMinMaxArgs(TensorFlow.TFOutput,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.FakeQuantWithMinMaxArgs(TensorFlow.TFOutput,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.FakeQuantWithMinMaxArgsGradient(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.FakeQuantWithMinMaxArgsGradient(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.FakeQuantWithMinMaxVars(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.FakeQuantWithMinMaxVars(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.FakeQuantWithMinMaxVarsGradient(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.FakeQuantWithMinMaxVarsGradient(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.FakeQuantWithMinMaxVarsPerChannel(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.FakeQuantWithMinMaxVarsPerChannel(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.FakeQuantWithMinMaxVarsPerChannelGradient(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.FakeQuantWithMinMaxVarsPerChannelGradient(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.FFT(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.FFT2D(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.FFT3D(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.FIFOQueueV2(TensorFlow.TFDataType[],TensorFlow.TFShape[],System.Nullable{System.Int64},System.String,System.String,System.String)
  - TensorFlow.TFGraph.Fill(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.FixedLengthRecordDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.FixedLengthRecordReaderV2(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  - TensorFlow.TFGraph.FixedUnigramCandidateSampler(TensorFlow.TFOutput,System.Int64,System.Int64,System.Boolean,System.Int64,System.String,System.Nullable{System.Single},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Single[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.Floor(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.FloorDiv(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.FloorMod(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.FractionalAvgPool(TensorFlow.TFOutput,System.Single[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.FractionalAvgPoolGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.FractionalMaxPool(TensorFlow.TFOutput,System.Single[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.FractionalMaxPoolGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.FusedBatchNorm(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Single},System.String,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.FusedBatchNormGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Single},System.String,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.FusedPadConv2D(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.Int64[],System.String,System.String)
  - TensorFlow.TFGraph.FusedResizeAndPadConv2D(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.Int64[],System.String,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.Gather(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.GatherNd(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.GetEnumerator
  - TensorFlow.TFGraph.GetGlobalVariablesInitializer
  - TensorFlow.TFGraph.GetRandomSeeds(System.Nullable{System.Int32},System.Int32@,System.Int32@)
  - TensorFlow.TFGraph.GetSessionHandle(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.GetSessionHandleV2(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.GetSessionTensor(TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  - TensorFlow.TFGraph.GetShape(TensorFlow.TFOutput,TensorFlow.TFStatus)
  - TensorFlow.TFGraph.GetTensorNumDims(TensorFlow.TFOutput,TensorFlow.TFStatus)
  - TensorFlow.TFGraph.GetTensorShape(TensorFlow.TFOutput,TensorFlow.TFStatus)
  - TensorFlow.TFGraph.Greater(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.GreaterEqual(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.HashTableV2(TensorFlow.TFDataType,TensorFlow.TFDataType,System.String,System.String,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.HistogramSummary(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.HSVToRGB(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Identity(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.IdentityReaderV2(System.String,System.String,System.String)
  - TensorFlow.TFGraph.IFFT(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.IFFT2D(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.IFFT3D(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Igamma(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Igammac(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Imag(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  - TensorFlow.TFGraph.ImageSummary(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},TensorFlow.TFTensor,System.String)
  - TensorFlow.TFGraph.ImmutableConst(TensorFlow.TFDataType,TensorFlow.TFShape,System.String,System.String)
  - TensorFlow.TFGraph.Import(System.Byte[],System.String,TensorFlow.TFStatus)
  - TensorFlow.TFGraph.Import(System.Byte[],TensorFlow.TFImportGraphDefOptions,TensorFlow.TFStatus)
  - TensorFlow.TFGraph.Import(TensorFlow.TFBuffer,System.String,TensorFlow.TFStatus)
  - TensorFlow.TFGraph.Import(TensorFlow.TFBuffer,TensorFlow.TFImportGraphDefOptions,TensorFlow.TFStatus)
  - TensorFlow.TFGraph.ImportGraphDef(TensorFlow.TFBuffer,TensorFlow.TFImportGraphDefOptions,TensorFlow.TFOutput[],TensorFlow.TFStatus)
  - TensorFlow.TFGraph.InitializeTableFromTextFileV2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.Int64,System.Nullable{System.Int64},System.String,System.String)
  - TensorFlow.TFGraph.InitializeTableV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.InTopK(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.String)
  - TensorFlow.TFGraph.Inv(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Invert(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.InvertPermutation(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.InvGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.IRFFT(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.IRFFT2D(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.IRFFT3D(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.IsFinite(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.IsInf(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.IsNan(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Item(System.String)
  - TensorFlow.TFGraph.Iterator(System.String,System.String,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  - TensorFlow.TFGraph.IteratorDispose(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.IteratorGetNext(TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  - TensorFlow.TFGraph.L2Loss(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.LearnedUnigramCandidateSampler(TensorFlow.TFOutput,System.Int64,System.Int64,System.Boolean,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.Less(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.LessEqual(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Lgamma(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.LinSpace(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.ListDiff(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  - TensorFlow.TFGraph.Log(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Log1p(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.LogicalAnd(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.LogicalNot(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.LogicalOr(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.LogSoftmax(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.LogUniformCandidateSampler(TensorFlow.TFOutput,System.Int64,System.Int64,System.Boolean,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.LookupTableExportV2(TensorFlow.TFOutput,TensorFlow.TFDataType,TensorFlow.TFDataType,System.String)
  - TensorFlow.TFGraph.LookupTableFindV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.LookupTableImportV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.LookupTableInsertV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.LookupTableSizeV2(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.LoopCond(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.LRN(TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.String)
  - TensorFlow.TFGraph.LRNGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.String)
  - TensorFlow.TFGraph.MakeIterator(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.MapClear(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  - TensorFlow.TFGraph.MapIncompleteSize(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  - TensorFlow.TFGraph.MapPeek(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  - TensorFlow.TFGraph.MapSize(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  - TensorFlow.TFGraph.MapStage(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  - TensorFlow.TFGraph.MapUnstage(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  - TensorFlow.TFGraph.MapUnstageNoKey(TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  - TensorFlow.TFGraph.MatchingFiles(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.MatMul(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.MatrixBandPart(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.MatrixDeterminant(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.MatrixDiag(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.MatrixDiagPart(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.MatrixInverse(TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.MatrixSetDiag(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.MatrixSolve(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.MatrixSolveLs(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.MatrixTriangularSolve(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.Max(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.Maximum(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.MaxPool(TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  - TensorFlow.TFGraph.MaxPool3D(TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  - TensorFlow.TFGraph.MaxPool3DGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  - TensorFlow.TFGraph.MaxPool3DGradGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  - TensorFlow.TFGraph.MaxPoolGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  - TensorFlow.TFGraph.MaxPoolGradGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  - TensorFlow.TFGraph.MaxPoolGradGradWithArgmax(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String)
  - TensorFlow.TFGraph.MaxPoolGradWithArgmax(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String)
  - TensorFlow.TFGraph.MaxPoolWithArgmax(TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.Nullable{TensorFlow.TFDataType},System.String)
  - TensorFlow.TFGraph.Mean(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.Merge(TensorFlow.TFOutput[],System.String)
  - TensorFlow.TFGraph.MergeSummary(TensorFlow.TFOutput[],System.String)
  - TensorFlow.TFGraph.MergeV2Checkpoints(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.Mfcc(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.Min(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.Minimum(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.MirrorPad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String)
  - TensorFlow.TFGraph.MirrorPadGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String)
  - TensorFlow.TFGraph.Mod(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Mul(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Multinomial(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.MutableDenseHashTableV2(TensorFlow.TFOutput,TensorFlow.TFDataType,System.String,System.String,System.Nullable{System.Boolean},TensorFlow.TFShape,System.Nullable{System.Int64},System.Nullable{System.Single},System.String)
  - TensorFlow.TFGraph.MutableHashTableOfTensorsV2(TensorFlow.TFDataType,TensorFlow.TFDataType,System.String,System.String,System.Nullable{System.Boolean},TensorFlow.TFShape,System.String)
  - TensorFlow.TFGraph.MutableHashTableV2(TensorFlow.TFDataType,TensorFlow.TFDataType,System.String,System.String,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.Neg(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.NextIteration(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.NonMaxSuppression(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Single},System.String)
  - TensorFlow.TFGraph.NonMaxSuppressionV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.NoOp(System.String)
  - TensorFlow.TFGraph.NotEqual(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.OneHot(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.OnesLike(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.OrderedMapClear(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  - TensorFlow.TFGraph.OrderedMapIncompleteSize(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  - TensorFlow.TFGraph.OrderedMapPeek(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  - TensorFlow.TFGraph.OrderedMapSize(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  - TensorFlow.TFGraph.OrderedMapStage(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  - TensorFlow.TFGraph.OrderedMapUnstage(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  - TensorFlow.TFGraph.OrderedMapUnstageNoKey(TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  - TensorFlow.TFGraph.Pack(TensorFlow.TFOutput[],System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.Pad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.PaddedBatchDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFShape[],System.String)
  - TensorFlow.TFGraph.PaddingFIFOQueueV2(TensorFlow.TFDataType[],TensorFlow.TFShape[],System.Nullable{System.Int64},System.String,System.String,System.String)
  - TensorFlow.TFGraph.ParallelConcat(TensorFlow.TFOutput[],TensorFlow.TFShape,System.String)
  - TensorFlow.TFGraph.ParameterizedTruncatedNormal(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.ParseExample(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  - TensorFlow.TFGraph.ParseSingleSequenceExample(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFDataType[],TensorFlow.TFShape[],TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  - TensorFlow.TFGraph.ParseTensor(TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  - TensorFlow.TFGraph.Placeholder(TensorFlow.TFDataType,TensorFlow.TFShape,System.String)
  - TensorFlow.TFGraph.PlaceholderV2(TensorFlow.TFDataType,TensorFlow.TFShape,System.String)
  - TensorFlow.TFGraph.PlaceholderWithDefault(TensorFlow.TFOutput,TensorFlow.TFShape,System.String)
  - TensorFlow.TFGraph.Polygamma(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Pow(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.PreventGradient(TensorFlow.TFOutput,System.String,System.String)
  - TensorFlow.TFGraph.Print(TensorFlow.TFOutput,TensorFlow.TFOutput[],System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.PriorityQueueV2(TensorFlow.TFShape[],TensorFlow.TFDataType[],System.Nullable{System.Int64},System.String,System.String,System.String)
  - TensorFlow.TFGraph.Prod(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.Qr(TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.QuantizeAndDequantize(TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Single},System.Nullable{System.Single},System.String)
  - TensorFlow.TFGraph.QuantizeAndDequantizeV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.QuantizedAdd(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  - TensorFlow.TFGraph.QuantizedAvgPool(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String)
  - TensorFlow.TFGraph.QuantizedBatchNormWithGlobalNormalization(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.Single,System.Boolean,System.String)
  - TensorFlow.TFGraph.QuantizedBiasAdd(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  - TensorFlow.TFGraph.QuantizedConcat(TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],System.String)
  - TensorFlow.TFGraph.QuantizedConv2D(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.Nullable{TensorFlow.TFDataType},System.String)
  - TensorFlow.TFGraph.QuantizedInstanceNorm(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.String)
  - TensorFlow.TFGraph.QuantizedMatMul(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{TensorFlow.TFDataType},System.String)
  - TensorFlow.TFGraph.QuantizedMaxPool(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String)
  - TensorFlow.TFGraph.QuantizedMul(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  - TensorFlow.TFGraph.QuantizeDownAndShrinkRange(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  - TensorFlow.TFGraph.QuantizedRelu(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  - TensorFlow.TFGraph.QuantizedRelu6(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  - TensorFlow.TFGraph.QuantizedReluX(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  - TensorFlow.TFGraph.QuantizedReshape(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.QuantizedResizeBilinear(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.QuantizeV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.String,System.String)
  - TensorFlow.TFGraph.QueueCloseV2(TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.QueueDequeueManyV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.QueueDequeueUpToV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.QueueDequeueV2(TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.QueueEnqueueManyV2(TensorFlow.TFOutput,TensorFlow.TFOutput[],System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.QueueEnqueueV2(TensorFlow.TFOutput,TensorFlow.TFOutput[],System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.QueueSizeV2(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.RandomCrop(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.RandomGamma(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.RandomNormal(TensorFlow.TFShape,System.Double,System.Double,System.Nullable{System.Int32},System.String)
  - TensorFlow.TFGraph.RandomPoisson(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.RandomShuffle(TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.RandomShuffleQueueV2(TensorFlow.TFDataType[],TensorFlow.TFShape[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  - TensorFlow.TFGraph.RandomStandardNormal(TensorFlow.TFOutput,TensorFlow.TFDataType,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.RandomUniform(TensorFlow.TFOutput,TensorFlow.TFDataType,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.RandomUniformInt(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.Range(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.RangeDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  - TensorFlow.TFGraph.Rank(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.ReaderNumRecordsProducedV2(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.ReaderNumWorkUnitsCompletedV2(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.ReaderReadUpToV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.ReaderReadV2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.ReaderResetV2(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.ReaderRestoreStateV2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.ReaderSerializeStateV2(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.ReadFile(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.ReadVariableOp(TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  - TensorFlow.TFGraph.Real(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  - TensorFlow.TFGraph.RealDiv(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Reciprocal(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.ReciprocalGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.RecordInput(System.String,System.Nullable{System.Int64},System.Nullable{System.Single},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.ReduceJoin(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String,System.String)
  - TensorFlow.TFGraph.ReduceSum(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFOutput},System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.Relu(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Relu6(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Relu6Grad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.ReluGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.RemoteFusedGraphExecute(TensorFlow.TFOutput[],TensorFlow.TFDataType[],System.String,System.String)
  - TensorFlow.TFGraph.RepeatDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  - TensorFlow.TFGraph.RequantizationRange(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Requantize(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  - TensorFlow.TFGraph.Reshape(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.ResizeArea(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.ResizeBicubic(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.ResizeBilinear(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.ResizeBilinearGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.ResizeNearestNeighbor(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.ResizeNearestNeighborGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.ResourceApplyAdadelta(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.ResourceApplyAdagrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.ResourceApplyAdagradDA(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.ResourceApplyAdam(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.ResourceApplyCenteredRMSProp(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.ResourceApplyFtrl(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.ResourceApplyGradientDescent(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.ResourceApplyMomentum(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.ResourceApplyProximalAdagrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.ResourceApplyProximalGradientDescent(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.ResourceApplyRMSProp(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.ResourceGather(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.ResourceScatterAdd(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.ResourceSparseApplyAdadelta(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.ResourceSparseApplyAdagrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.ResourceSparseApplyAdagradDA(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.ResourceSparseApplyCenteredRMSProp(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.ResourceSparseApplyFtrl(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.ResourceSparseApplyMomentum(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.ResourceSparseApplyProximalAdagrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.ResourceSparseApplyProximalGradientDescent(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.ResourceSparseApplyRMSProp(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.ResourceStridedSliceAssign(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.Restore(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.RestoreSlice(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.RestoreV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],System.String)
  - TensorFlow.TFGraph.Reverse(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.ReverseSequence(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.ReverseV2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.RFFT(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.RFFT2D(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.RFFT3D(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.RGBToHSV(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Rint(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Round(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Rsqrt(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.RsqrtGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SampleDistortedBoundingBox(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Single},System.Single[],System.Single[],System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.Save(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],System.String)
  - TensorFlow.TFGraph.SaveSlices(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],System.String)
  - TensorFlow.TFGraph.SaveV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],System.String)
  - TensorFlow.TFGraph.ScalarSummary(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.ScatterNd(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SdcaFprint(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SdcaOptimizer(TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput,System.String,System.Single,System.Single,System.Int64,System.Int64,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.Seed
  - TensorFlow.TFGraph.SegmentMax(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SegmentMean(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SegmentMin(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SegmentProd(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SegmentSum(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Select(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SelfAdjointEig(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SelfAdjointEigV2(TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.SerializeManySparse(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SerializeSparse(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SetSize(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.SetTensorShape(TensorFlow.TFOutput,System.Int64[],TensorFlow.TFStatus)
  - TensorFlow.TFGraph.Shape(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  - TensorFlow.TFGraph.ShapeN(TensorFlow.TFOutput[],System.Nullable{TensorFlow.TFDataType},System.String)
  - TensorFlow.TFGraph.ShardedFilename(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.ShardedFilespec(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.ShuffleDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  - TensorFlow.TFGraph.Sigmoid(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SigmoidGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Sign(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Sin(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Sinh(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Size(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  - TensorFlow.TFGraph.SkipDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  - TensorFlow.TFGraph.Skipgram(System.String,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Single},System.String)
  - TensorFlow.TFGraph.Slice(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Softmax(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SoftmaxCrossEntropyWithLogits(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Softplus(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SoftplusGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Softsign(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SoftsignGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SpaceToBatch(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.String)
  - TensorFlow.TFGraph.SpaceToBatchND(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SpaceToDepth(TensorFlow.TFOutput,System.Int64,System.String)
  - TensorFlow.TFGraph.SparseAdd(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SparseAddGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SparseConcat(TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],System.Int64,System.String)
  - TensorFlow.TFGraph.SparseCross(TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],System.Boolean,System.Int64,System.Int64,TensorFlow.TFDataType,TensorFlow.TFDataType,System.String)
  - TensorFlow.TFGraph.SparseDenseCwiseAdd(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SparseDenseCwiseDiv(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SparseDenseCwiseMul(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SparseFillEmptyRows(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SparseFillEmptyRowsGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SparseMatMul(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.SparseReduceMax(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.SparseReduceMaxSparse(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.SparseReduceSum(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.SparseReduceSumSparse(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.SparseReorder(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SparseReshape(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SparseSegmentMean(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SparseSegmentMeanGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SparseSegmentSqrtN(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SparseSegmentSqrtNGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SparseSegmentSum(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SparseSoftmax(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SparseSoftmaxCrossEntropyWithLogits(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SparseSparseMaximum(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SparseSparseMinimum(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SparseSplit(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.String)
  - TensorFlow.TFGraph.SparseTensorDenseAdd(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SparseTensorDenseMatMul(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.SparseTensorSliceDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SparseToDense(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.SparseToSparseSetOperation(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.Split(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.String)
  - TensorFlow.TFGraph.SplitV(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.String)
  - TensorFlow.TFGraph.Sqrt(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SqrtGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Square(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.SquaredDifference(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Squeeze(TensorFlow.TFOutput,System.Int64[],System.String)
  - TensorFlow.TFGraph.Stage(TensorFlow.TFOutput[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  - TensorFlow.TFGraph.Stage(TensorFlow.TFOutput[],System.String,System.String,System.String)
  - TensorFlow.TFGraph.StageClear(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  - TensorFlow.TFGraph.StagePeek(TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  - TensorFlow.TFGraph.StageSize(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  - TensorFlow.TFGraph.StatelessRandomNormal(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  - TensorFlow.TFGraph.StatelessRandomUniform(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  - TensorFlow.TFGraph.StatelessTruncatedNormal(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  - TensorFlow.TFGraph.StopGradient(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.StridedSlice(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.StridedSliceGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.StringJoin(TensorFlow.TFOutput[],System.String,System.String)
  - TensorFlow.TFGraph.StringSplit(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.StringToHashBucket(TensorFlow.TFOutput,System.Int64,System.String)
  - TensorFlow.TFGraph.StringToHashBucketFast(TensorFlow.TFOutput,System.Int64,System.String)
  - TensorFlow.TFGraph.StringToHashBucketStrong(TensorFlow.TFOutput,System.Int64,System.Int64[],System.String)
  - TensorFlow.TFGraph.StringToNumber(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  - TensorFlow.TFGraph.Sub(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Substr(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Sum(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.Svd(TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.Switch(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.TakeDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  - TensorFlow.TFGraph.TakeManySparseFromTensorsMap(TensorFlow.TFOutput,TensorFlow.TFDataType,System.String,System.String,System.String)
  - TensorFlow.TFGraph.Tan(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Tanh(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.TanhGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.TensorArrayCloseV2(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.TensorArrayCloseV3(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.TensorArrayConcatV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,TensorFlow.TFShape,System.String)
  - TensorFlow.TFGraph.TensorArrayConcatV3(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,TensorFlow.TFShape,System.String)
  - TensorFlow.TFGraph.TensorArrayGatherV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,TensorFlow.TFShape,System.String)
  - TensorFlow.TFGraph.TensorArrayGatherV3(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,TensorFlow.TFShape,System.String)
  - TensorFlow.TFGraph.TensorArrayGradV2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String)
  - TensorFlow.TFGraph.TensorArrayGradV3(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String)
  - TensorFlow.TFGraph.TensorArrayReadV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  - TensorFlow.TFGraph.TensorArrayReadV3(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  - TensorFlow.TFGraph.TensorArrayScatterV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.TensorArrayScatterV3(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.TensorArraySizeV2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.TensorArraySizeV3(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.TensorArraySplitV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.TensorArraySplitV3(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.TensorArrayV2(TensorFlow.TFOutput,TensorFlow.TFDataType,TensorFlow.TFShape,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String)
  - TensorFlow.TFGraph.TensorArrayV3(TensorFlow.TFOutput,TensorFlow.TFDataType,TensorFlow.TFShape,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String)
  - TensorFlow.TFGraph.TensorArrayWriteV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.TensorArrayWriteV3(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.TensorDataset(TensorFlow.TFOutput[],TensorFlow.TFShape[],System.String)
  - TensorFlow.TFGraph.TensorSliceDataset(TensorFlow.TFOutput[],TensorFlow.TFShape[],System.String)
  - TensorFlow.TFGraph.TensorSummary(TensorFlow.TFOutput,System.String,System.String[],System.String,System.String)
  - TensorFlow.TFGraph.TensorSummaryV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.TextLineDataset(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.TextLineReaderV2(System.Nullable{System.Int64},System.String,System.String,System.String)
  - TensorFlow.TFGraph.TFRecordDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.TFRecordReaderV2(System.String,System.String,System.String,System.String)
  - TensorFlow.TFGraph.ThreadUnsafeUnigramCandidateSampler(TensorFlow.TFOutput,System.Int64,System.Int64,System.Boolean,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.Tile(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.TileGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.ToGraphDef(TensorFlow.TFBuffer,TensorFlow.TFStatus)
  - TensorFlow.TFGraph.TopK(TensorFlow.TFOutput,System.Int64,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.TopKV2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  - TensorFlow.TFGraph.Transpose(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.TruncateDiv(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.TruncatedNormal(TensorFlow.TFOutput,TensorFlow.TFDataType,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.TruncateMod(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.UniformCandidateSampler(TensorFlow.TFOutput,System.Int64,System.Int64,System.Boolean,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.Unique(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  - TensorFlow.TFGraph.UniqueWithCounts(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  - TensorFlow.TFGraph.Unpack(TensorFlow.TFOutput,System.Int64,System.Nullable{System.Int64},System.String)
  - TensorFlow.TFGraph.UnsortedSegmentMax(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.UnsortedSegmentSum(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Unstage(TensorFlow.TFDataType[],System.String,System.String,System.String)
  - TensorFlow.TFGraph.Unstage(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  - TensorFlow.TFGraph.VarHandleOp(TensorFlow.TFDataType,TensorFlow.TFShape,System.String,System.String,System.String)
  - TensorFlow.TFGraph.Variable(TensorFlow.TFOutput,TensorFlow.TFOutput@,System.String)
  - TensorFlow.TFGraph.Variable(TensorFlow.TFOutput,TensorFlow.TFOperation@,TensorFlow.TFOutput@,System.String)
  - TensorFlow.TFGraph.Variable(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.VarIsInitializedOp(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Where(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.While(TensorFlow.TFOutput[],TensorFlow.TFGraph.WhileConstructor,TensorFlow.TFStatus)
  - TensorFlow.TFGraph.WholeFileReaderV2(System.String,System.String,System.String)
  - TensorFlow.TFGraph.WithScope(System.String)
  - TensorFlow.TFGraph.WriteFile(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.ZerosLike(TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.Zeta(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  - TensorFlow.TFGraph.ZipDataset(TensorFlow.TFOutput[],TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  langs:
  - csharp
  name: TFGraph
  nameWithType: TFGraph
  fullName: TensorFlow.TFGraph
  type: Class
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Represents a computation graph.  Graphs may be shared between sessions and are thread safe.
  remarks: "<p>\n            Graphs consist of operations (represented by TFOperation objects), these can be named, or \n            the runtime will automatically assign a name.\n            </p>\n    <p>\n            For debugging purposes, you might want to group operations together, for this, call the\n            WithScope method with your new scope, which will create a new namespace for your object names.\n            </p>\n    <p>\n            For example, if you call WithScope (\"demo\"), and add an operation named \"add\" inside the\n            scope, the full name of the operation will be \"demo/add\", if you create a new scope inside, say\n            \"hot\", and add a \"sub\" operation there the result will be \"demo/hot/sub\".\n            </p>"
  syntax:
    content: 'public class TFGraph : TensorFlow.TFDisposable'
  inheritance:
  - System.Object
  - TensorFlow.TFDisposable
  implements: []
  inheritedMembers:
  - TensorFlow.TFDisposable.Dispose
  - TensorFlow.TFDisposable.Dispose(System.Boolean)
  - TensorFlow.TFDisposable.Handle
- uid: TensorFlow.TFGraph.#ctor
  id: '#ctor'
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TFGraph()
  nameWithType: TFGraph.TFGraph()
  fullName: TFGraph.TFGraph()
  type: Constructor
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Initializes a new instance of the <xref href="TensorFlow.TFGraph"></xref> class.
  syntax:
    content: public TFGraph ();
    parameters: []
  overload: TensorFlow.TFGraph.#ctor*
  exceptions: []
- uid: TensorFlow.TFGraph.Abort(System.String,System.Nullable{System.Boolean},System.String)
  id: Abort(System.String,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Abort(String, Nullable<Boolean>, String)
  nameWithType: TFGraph.Abort(String, Nullable<Boolean>, String)
  fullName: TFGraph.Abort(String, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Raise a exception to abort the process when called.
  remarks: "If exit_without_error is true, the process will exit normally,\n              otherwise it will exit with a SIGABORT signal.\n              \n              Returns nothing but an exception."
  syntax:
    content: public TensorFlow.TFOperation Abort (string error_msg = null, Nullable<bool> exit_without_error = null, string operName = null);
    parameters:
    - id: error_msg
      type: System.String
      description: >-
        Optional argument
                      A string which is the message associated with the exception.
    - id: exit_without_error
      type: System.Nullable{System.Boolean}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Abort'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.Abort*
  exceptions: []
- uid: TensorFlow.TFGraph.Abs(TensorFlow.TFOutput,System.String)
  id: Abs(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Abs(TFOutput, String)
  nameWithType: TFGraph.Abs(TFOutput, String)
  fullName: TFGraph.Abs(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the absolute value of a tensor.
  remarks: >-
    Given a tensor `x`, this operation returns a tensor containing the absolute
                  value of each element in `x`. For example, if x is an input element and y is
                  an output element, this operation computes \\(y = |x|\\).
  syntax:
    content: public TensorFlow.TFOutput Abs (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Abs'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Abs*
  exceptions: []
- uid: TensorFlow.TFGraph.Acos(TensorFlow.TFOutput,System.String)
  id: Acos(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Acos(TFOutput, String)
  nameWithType: TFGraph.Acos(TFOutput, String)
  fullName: TFGraph.Acos(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes acos of x element-wise.
  syntax:
    content: public TensorFlow.TFOutput Acos (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Acos'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Acos*
  exceptions: []
- uid: TensorFlow.TFGraph.Add(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: Add(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Add(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Add(TFOutput, TFOutput, String)
  fullName: TFGraph.Add(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns x + y element-wise.
  remarks: >-
    *NOTE*: `Add` supports broadcasting. `AddN` does not. More about broadcasting
                  [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
  syntax:
    content: public TensorFlow.TFOutput Add (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Add'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Add*
  exceptions: []
- uid: TensorFlow.TFGraph.AddGradients(TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFStatus)
  id: AddGradients(TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFStatus)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: AddGradients(TFOutput[], TFOutput[], TFOutput[], TFStatus)
  nameWithType: TFGraph.AddGradients(TFOutput[], TFOutput[], TFOutput[], TFStatus)
  fullName: TFGraph.AddGradients(TFOutput[], TFOutput[], TFOutput[], TFStatus)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: 'Adds a gradient: the operations needed to compute the partial derivatives of sum of <code>y</code>` wrt to <code>x</code>.'
  remarks: d(y[0] + y[1]+ ...)/dx[0], d(y[0] + y[1] + ...)/dx[1]z...
  syntax:
    content: public TensorFlow.TFOutput[] AddGradients (TensorFlow.TFOutput[] y, TensorFlow.TFOutput[] x, TensorFlow.TFOutput[] dx = null, TensorFlow.TFStatus status = null);
    parameters:
    - id: y
      type: TensorFlow.TFOutput[]
      description: The y elements.
    - id: x
      type: TensorFlow.TFOutput[]
      description: The x elements.
    - id: dx
      type: TensorFlow.TFOutput[]
      description: "Initial gradients, which represent the symbolic partial derivatives of some loss function `L` w.r.t. <code>y</code> ).   \n            If the parameter is null, the implementation will use dx for 'OnesLike' for all shapes in <code>y</code>"
    - id: status
      type: TensorFlow.TFStatus
      description: Status buffer, if specified a status code will be left here, if not specified, a <xref href="TensorFlow.TFException"></xref> exception is raised if there is an error.
    return:
      type: TensorFlow.TFOutput[]
      description: The partial derivatives, the size of the array is the same as the length of the <code>y</code> array.
  overload: TensorFlow.TFGraph.AddGradients*
  exceptions: []
- uid: TensorFlow.TFGraph.AddInitVariable(TensorFlow.TFOperation)
  id: AddInitVariable(TensorFlow.TFOperation)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: AddInitVariable(TFOperation)
  nameWithType: TFGraph.AddInitVariable(TFOperation)
  fullName: TFGraph.AddInitVariable(TFOperation)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Registers a specified variable as an initialization variable.
  remarks: >-
    <p>
                This is a convenience method to track the variables that need to be initialized in the graph,
                you can retrieve the list of all those variables by calling the <xref href="TensorFlow.TFGraph.GetGlobalVariablesInitializer"></xref>
                which will return this list and clear the state at that point.
                </p>
        <p>
                You typically use this method from helper methods to register all the variables that you want
                initialized, and a higher level method will retrieve all these variables and initialize them
                at their convenience.
                </p>
  syntax:
    content: public void AddInitVariable (TensorFlow.TFOperation variable);
    parameters:
    - id: variable
      type: TensorFlow.TFOperation
      description: Variable to register.
  overload: TensorFlow.TFGraph.AddInitVariable*
  exceptions: []
- uid: TensorFlow.TFGraph.AddManySparseToTensorsMap(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String,System.String)
  id: AddManySparseToTensorsMap(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: AddManySparseToTensorsMap(TFOutput, TFOutput, TFOutput, String, String, String)
  nameWithType: TFGraph.AddManySparseToTensorsMap(TFOutput, TFOutput, TFOutput, String, String, String)
  fullName: TFGraph.AddManySparseToTensorsMap(TFOutput, TFOutput, TFOutput, String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Add an `N`-minibatch `SparseTensor` to a `SparseTensorsMap`, return `N` handles.
  remarks: "A `SparseTensor` of rank `R` is represented by three tensors: `sparse_indices`,\n              `sparse_values`, and `sparse_shape`, where\n              \n              ```sparse_indices.shape[1] == sparse_shape.shape[0] == R```\n              \n              An `N`-minibatch of `SparseTensor` objects is represented as a `SparseTensor`\n              having a first `sparse_indices` column taking values between `[0, N)`, where\n              the minibatch size `N == sparse_shape[0]`.\n              \n              The input `SparseTensor` must have rank `R` greater than 1, and the first\n              dimension is treated as the minibatch dimension.  Elements of the `SparseTensor`\n              must be sorted in increasing order of this first dimension.  The stored\n              `SparseTensor` objects pointed to by each row of the output `sparse_handles`\n              will have rank `R-1`.\n              \n              The `SparseTensor` values can then be read out as part of a minibatch by passing\n              the given keys as vector elements to `TakeManySparseFromTensorsMap`.  To ensure\n              the correct `SparseTensorsMap` is accessed, ensure that the same\n              `container` and `shared_name` are passed to that Op.  If no `shared_name`\n              is provided here, instead use the *name* of the Operation created by calling\n              `AddManySparseToTensorsMap` as the `shared_name` passed to\n              `TakeManySparseFromTensorsMap`.  Ensure the Operations are colocated."
  syntax:
    content: public TensorFlow.TFOutput AddManySparseToTensorsMap (TensorFlow.TFOutput sparse_indices, TensorFlow.TFOutput sparse_values, TensorFlow.TFOutput sparse_shape, string container = null, string shared_name = null, string operName = null);
    parameters:
    - id: sparse_indices
      type: TensorFlow.TFOutput
      description: >-
        2-D.  The `indices` of the minibatch `SparseTensor`.
                      `sparse_indices[:, 0]` must be ordered values in `[0, N)`.
    - id: sparse_values
      type: TensorFlow.TFOutput
      description: 1-D.  The `values` of the minibatch `SparseTensor`.
    - id: sparse_shape
      type: TensorFlow.TFOutput
      description: >-
        1-D.  The `shape` of the minibatch `SparseTensor`.
                      The minibatch size `N == sparse_shape[0]`.
    - id: container
      type: System.String
      description: >-
        Optional argument
                      The container name for the `SparseTensorsMap` created by this op.
    - id: shared_name
      type: System.String
      description: >-
        Optional argument
                      The shared name for the `SparseTensorsMap` created by this op.
                      If blank, the new Operation's unique name is used.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'AddManySparseToTensorsMap'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        1-D.  The handles of the `SparseTensor` now stored in the
                      `SparseTensorsMap`.  Shape: `[N]`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.AddManySparseToTensorsMap*
  exceptions: []
- uid: TensorFlow.TFGraph.AddN(TensorFlow.TFOutput[],System.String)
  id: AddN(TensorFlow.TFOutput[],System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: AddN(TFOutput[], String)
  nameWithType: TFGraph.AddN(TFOutput[], String)
  fullName: TFGraph.AddN(TFOutput[], String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Add all input tensors element wise.
  syntax:
    content: public TensorFlow.TFOutput AddN (TensorFlow.TFOutput[] inputs, string operName = null);
    parameters:
    - id: inputs
      type: TensorFlow.TFOutput[]
      description: Must all be the same size and shape.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'AddN'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.AddN*
  exceptions: []
- uid: TensorFlow.TFGraph.AddSparseToTensorsMap(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String,System.String)
  id: AddSparseToTensorsMap(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: AddSparseToTensorsMap(TFOutput, TFOutput, TFOutput, String, String, String)
  nameWithType: TFGraph.AddSparseToTensorsMap(TFOutput, TFOutput, TFOutput, String, String, String)
  fullName: TFGraph.AddSparseToTensorsMap(TFOutput, TFOutput, TFOutput, String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Add a `SparseTensor` to a `SparseTensorsMap` return its handle.
  remarks: "A `SparseTensor` is represented by three tensors: `sparse_indices`,\n              `sparse_values`, and `sparse_shape`.\n              \n              This operator takes the given `SparseTensor` and adds it to a container\n              object (a `SparseTensorsMap`).  A unique key within this container is generated\n              in the form of an `int64`, and this is the value that is returned.\n              \n              The `SparseTensor` can then be read out as part of a minibatch by passing\n              the key as a vector element to `TakeManySparseFromTensorsMap`.  To ensure\n              the correct `SparseTensorsMap` is accessed, ensure that the same\n              `container` and `shared_name` are passed to that Op.  If no `shared_name`\n              is provided here, instead use the *name* of the Operation created by calling\n              `AddSparseToTensorsMap` as the `shared_name` passed to\n              `TakeManySparseFromTensorsMap`.  Ensure the Operations are colocated."
  syntax:
    content: public TensorFlow.TFOutput AddSparseToTensorsMap (TensorFlow.TFOutput sparse_indices, TensorFlow.TFOutput sparse_values, TensorFlow.TFOutput sparse_shape, string container = null, string shared_name = null, string operName = null);
    parameters:
    - id: sparse_indices
      type: TensorFlow.TFOutput
      description: 2-D.  The `indices` of the `SparseTensor`.
    - id: sparse_values
      type: TensorFlow.TFOutput
      description: 1-D.  The `values` of the `SparseTensor`.
    - id: sparse_shape
      type: TensorFlow.TFOutput
      description: 1-D.  The `shape` of the `SparseTensor`.
    - id: container
      type: System.String
      description: >-
        Optional argument
                      The container name for the `SparseTensorsMap` created by this op.
    - id: shared_name
      type: System.String
      description: >-
        Optional argument
                      The shared name for the `SparseTensorsMap` created by this op.
                      If blank, the new Operation's unique name is used.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'AddSparseToTensorsMap'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        0-D.  The handle of the `SparseTensor` now stored in the
                      `SparseTensorsMap`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.AddSparseToTensorsMap*
  exceptions: []
- uid: TensorFlow.TFGraph.AdjustContrast(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: AdjustContrast(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: AdjustContrast(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.AdjustContrast(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.AdjustContrast(TFOutput, TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Deprecated. Disallowed in GraphDef version &gt;= 2.
  syntax:
    content: public TensorFlow.TFOutput AdjustContrast (TensorFlow.TFOutput images, TensorFlow.TFOutput contrast_factor, TensorFlow.TFOutput min_value, TensorFlow.TFOutput max_value, string operName = null);
    parameters:
    - id: images
      type: TensorFlow.TFOutput
      description: To be added.
    - id: contrast_factor
      type: TensorFlow.TFOutput
      description: To be added.
    - id: min_value
      type: TensorFlow.TFOutput
      description: To be added.
    - id: max_value
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'AdjustContrast'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.AdjustContrast*
  exceptions: []
- uid: TensorFlow.TFGraph.AdjustContrastv2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: AdjustContrastv2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: AdjustContrastv2(TFOutput, TFOutput, String)
  nameWithType: TFGraph.AdjustContrastv2(TFOutput, TFOutput, String)
  fullName: TFGraph.AdjustContrastv2(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Adjust the contrast of one or more images.
  remarks: "`images` is a tensor of at least 3 dimensions.  The last 3 dimensions are\n              interpreted as `[height, width, channels]`.  The other dimensions only\n              represent a collection of images, such as `[batch, height, width, channels].`\n              \n              Contrast is adjusted independently for each channel of each image.\n              \n              For each channel, the Op first computes the mean of the image pixels in the\n              channel and then adjusts each component of each pixel to\n              `(x - mean) * contrast_factor + mean`."
  syntax:
    content: public TensorFlow.TFOutput AdjustContrastv2 (TensorFlow.TFOutput images, TensorFlow.TFOutput contrast_factor, string operName = null);
    parameters:
    - id: images
      type: TensorFlow.TFOutput
      description: Images to adjust.  At least 3-D.
    - id: contrast_factor
      type: TensorFlow.TFOutput
      description: A float multiplier for adjusting contrast.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'AdjustContrastv2'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The contrast-adjusted image or images.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.AdjustContrastv2*
  exceptions: []
- uid: TensorFlow.TFGraph.AdjustHue(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: AdjustHue(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: AdjustHue(TFOutput, TFOutput, String)
  nameWithType: TFGraph.AdjustHue(TFOutput, TFOutput, String)
  fullName: TFGraph.AdjustHue(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Adjust the hue of one or more images.
  remarks: "`images` is a tensor of at least 3 dimensions.  The last dimension is\n              interpretted as channels, and must be three.\n              \n              The input image is considered in the RGB colorspace. Conceptually, the RGB\n              colors are first mapped into HSV. A delta is then applied all the hue values,\n              and then remapped back to RGB colorspace."
  syntax:
    content: public TensorFlow.TFOutput AdjustHue (TensorFlow.TFOutput images, TensorFlow.TFOutput delta, string operName = null);
    parameters:
    - id: images
      type: TensorFlow.TFOutput
      description: Images to adjust.  At least 3-D.
    - id: delta
      type: TensorFlow.TFOutput
      description: A float delta to add to the hue.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'AdjustHue'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The hue-adjusted image or images.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.AdjustHue*
  exceptions: []
- uid: TensorFlow.TFGraph.AdjustSaturation(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: AdjustSaturation(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: AdjustSaturation(TFOutput, TFOutput, String)
  nameWithType: TFGraph.AdjustSaturation(TFOutput, TFOutput, String)
  fullName: TFGraph.AdjustSaturation(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Adjust the saturation of one or more images.
  remarks: "`images` is a tensor of at least 3 dimensions.  The last dimension is\n              interpretted as channels, and must be three.\n              \n              The input image is considered in the RGB colorspace. Conceptually, the RGB\n              colors are first mapped into HSV. A scale is then applied all the saturation\n              values, and then remapped back to RGB colorspace."
  syntax:
    content: public TensorFlow.TFOutput AdjustSaturation (TensorFlow.TFOutput images, TensorFlow.TFOutput scale, string operName = null);
    parameters:
    - id: images
      type: TensorFlow.TFOutput
      description: Images to adjust.  At least 3-D.
    - id: scale
      type: TensorFlow.TFOutput
      description: A float scale to add to the saturation.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'AdjustSaturation'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The hue-adjusted image or images.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.AdjustSaturation*
  exceptions: []
- uid: TensorFlow.TFGraph.All(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: All(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: All(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.All(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.All(TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the "logical and" of elements across dimensions of a tensor.
  remarks: >-
    Reduces `input` along the dimensions given in `reduction_indices`. Unless
                  `keep_dims` is true, the rank of the tensor is reduced by 1 for each entry in
                  `reduction_indices`. If `keep_dims` is true, the reduced dimensions are
                  retained with length 1.
  syntax:
    content: public TensorFlow.TFOutput All (TensorFlow.TFOutput input, TensorFlow.TFOutput reduction_indices, Nullable<bool> keep_dims = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: The tensor to reduce.
    - id: reduction_indices
      type: TensorFlow.TFOutput
      description: The dimensions to reduce.
    - id: keep_dims
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true, retain reduced dimensions with length 1.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'All'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The reduced tensor.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.All*
  exceptions: []
- uid: TensorFlow.TFGraph.AllCandidateSampler(TensorFlow.TFOutput,System.Int64,System.Int64,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  id: AllCandidateSampler(TensorFlow.TFOutput,System.Int64,System.Int64,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: AllCandidateSampler(TFOutput, Int64, Int64, Boolean, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.AllCandidateSampler(TFOutput, Int64, Int64, Boolean, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.AllCandidateSampler(TFOutput, Int64, Int64, Boolean, Nullable<Int64>, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Generates labels for candidate sampling with a learned unigram distribution.
  remarks: "See explanations of candidate sampling and the data formats at\n              go/candidate-sampling.\n              \n              For each batch, this op picks a single set of sampled candidate labels.\n              \n              The advantages of sampling candidates per-batch are simplicity and the\n              possibility of efficient dense matrix multiplication. The disadvantage is that\n              the sampled candidates must be chosen independently of the context and of the\n              true labels."
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> AllCandidateSampler (TensorFlow.TFOutput true_classes, long num_true, long num_sampled, bool unique, Nullable<long> seed = null, Nullable<long> seed2 = null, string operName = null);
    parameters:
    - id: true_classes
      type: TensorFlow.TFOutput
      description: >-
        A batch_size * num_true matrix, in which each row contains the
                      IDs of the num_true target_classes in the corresponding original label.
    - id: num_true
      type: System.Int64
      description: Number of true labels per context.
    - id: num_sampled
      type: System.Int64
      description: Number of candidates to produce.
    - id: unique
      type: System.Boolean
      description: >-
        If unique is true, we sample with rejection, so that all sampled
                      candidates in a batch are unique. This requires some approximation to
                      estimate the post-rejection sampling probabilities.
    - id: seed
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      If either seed or seed2 are set to be non-zero, the random number
                      generator is seeded by the given seed.  Otherwise, it is seeded by a
                      random seed.
    - id: seed2
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      An second seed to avoid seed collision.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'AllCandidateSampler'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      sampled_candidates: A vector of length num_sampled, in which each element is
                      the ID of a sampled candidate.
                      true_expected_count: A batch_size * num_true matrix, representing
                      the number of times each candidate is expected to occur in a batch
                      of sampled candidates. If unique=true, then this is a probability.
                      sampled_expected_count: A vector of length num_sampled, for each sampled
                      candidate representing the number of times the candidate is expected
                      to occur in a batch of sampled candidates.  If unique=true, then this is a
                      probability.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.AllCandidateSampler*
  exceptions: []
- uid: TensorFlow.TFGraph.Any(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: Any(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Any(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.Any(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.Any(TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the "logical or" of elements across dimensions of a tensor.
  remarks: >-
    Reduces `input` along the dimensions given in `reduction_indices`. Unless
                  `keep_dims` is true, the rank of the tensor is reduced by 1 for each entry in
                  `reduction_indices`. If `keep_dims` is true, the reduced dimensions are
                  retained with length 1.
  syntax:
    content: public TensorFlow.TFOutput Any (TensorFlow.TFOutput input, TensorFlow.TFOutput reduction_indices, Nullable<bool> keep_dims = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: The tensor to reduce.
    - id: reduction_indices
      type: TensorFlow.TFOutput
      description: The dimensions to reduce.
    - id: keep_dims
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true, retain reduced dimensions with length 1.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Any'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The reduced tensor.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Any*
  exceptions: []
- uid: TensorFlow.TFGraph.ApplyDelayCompensatedGradientDescent(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: ApplyDelayCompensatedGradientDescent(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ApplyDelayCompensatedGradientDescent(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ApplyDelayCompensatedGradientDescent(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ApplyDelayCompensatedGradientDescent(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: var -= alpha * (delta + lambda * delta * (var - shadow))
  remarks: Update '*shadow' by changing it to the new value of 'var'
  syntax:
    content: public TensorFlow.TFOperation ApplyDelayCompensatedGradientDescent (TensorFlow.TFOutput var, TensorFlow.TFOutput alpha, TensorFlow.TFOutput delta, TensorFlow.TFOutput lambda, TensorFlow.TFOutput shadow, Nullable<bool> use_locking = null, string operName = null);
    parameters:
    - id: var
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: alpha
      type: TensorFlow.TFOutput
      description: Scaling factor. Must be a scalar.
    - id: delta
      type: TensorFlow.TFOutput
      description: The change.
    - id: lambda
      type: TensorFlow.TFOutput
      description: The variance parameter.
    - id: shadow
      type: TensorFlow.TFOutput
      description: Same as "var".
    - id: use_locking
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If `True`, the subtraction will be protected by a lock;
                      otherwise the behavior is undefined, but may exhibit less contention.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ApplyDelayCompensatedGradientDescent'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.ApplyDelayCompensatedGradientDescent*
  exceptions: []
- uid: TensorFlow.TFGraph.ApproximateEqual(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Single},System.String)
  id: ApproximateEqual(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Single},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ApproximateEqual(TFOutput, TFOutput, Nullable<Single>, String)
  nameWithType: TFGraph.ApproximateEqual(TFOutput, TFOutput, Nullable<Single>, String)
  fullName: TFGraph.ApproximateEqual(TFOutput, TFOutput, Nullable<Single>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns the truth value of abs(x-y) &lt; tolerance element-wise.
  syntax:
    content: public TensorFlow.TFOutput ApproximateEqual (TensorFlow.TFOutput x, TensorFlow.TFOutput y, Nullable<float> tolerance = null, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: tolerance
      type: System.Nullable{System.Single}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ApproximateEqual'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ApproximateEqual*
  exceptions: []
- uid: TensorFlow.TFGraph.ArgMax(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: ArgMax(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ArgMax(TFOutput, TFOutput, String)
  nameWithType: TFGraph.ArgMax(TFOutput, TFOutput, String)
  fullName: TFGraph.ArgMax(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns the index with the largest value across dimensions of a tensor.
  remarks: Note that in case of ties the identity of the return value is not guaranteed.
  syntax:
    content: public TensorFlow.TFOutput ArgMax (TensorFlow.TFOutput input, TensorFlow.TFOutput dimension, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: To be added.
    - id: dimension
      type: TensorFlow.TFOutput
      description: >-
        int32, 0 &lt;= dimension &lt; rank(input).  Describes which dimension
                      of the input Tensor to reduce across. For vectors, use dimension = 0.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ArgMax'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ArgMax*
  exceptions: []
- uid: TensorFlow.TFGraph.ArgMin(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: ArgMin(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ArgMin(TFOutput, TFOutput, String)
  nameWithType: TFGraph.ArgMin(TFOutput, TFOutput, String)
  fullName: TFGraph.ArgMin(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns the index with the smallest value across dimensions of a tensor.
  remarks: Note that in case of ties the identity of the return value is not guaranteed.
  syntax:
    content: public TensorFlow.TFOutput ArgMin (TensorFlow.TFOutput input, TensorFlow.TFOutput dimension, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: To be added.
    - id: dimension
      type: TensorFlow.TFOutput
      description: >-
        int32, 0 &lt;= dimension &lt; rank(input).  Describes which dimension
                      of the input Tensor to reduce across. For vectors, use dimension = 0.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ArgMin'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ArgMin*
  exceptions: []
- uid: TensorFlow.TFGraph.Asin(TensorFlow.TFOutput,System.String)
  id: Asin(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Asin(TFOutput, String)
  nameWithType: TFGraph.Asin(TFOutput, String)
  fullName: TFGraph.Asin(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes asin of x element-wise.
  syntax:
    content: public TensorFlow.TFOutput Asin (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Asin'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Asin*
  exceptions: []
- uid: TensorFlow.TFGraph.Assert(TensorFlow.TFOutput,TensorFlow.TFOutput[],System.Nullable{System.Int64},System.String)
  id: Assert(TensorFlow.TFOutput,TensorFlow.TFOutput[],System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Assert(TFOutput, TFOutput[], Nullable<Int64>, String)
  nameWithType: TFGraph.Assert(TFOutput, TFOutput[], Nullable<Int64>, String)
  fullName: TFGraph.Assert(TFOutput, TFOutput[], Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Asserts that the given condition is true.
  remarks: >-
    If `condition` evaluates to false, print the list of tensors in `data`.
                  `summarize` determines how many entries of the tensors to print.
  syntax:
    content: public TensorFlow.TFOperation Assert (TensorFlow.TFOutput condition, TensorFlow.TFOutput[] data, Nullable<long> summarize = null, string operName = null);
    parameters:
    - id: condition
      type: TensorFlow.TFOutput
      description: The condition to evaluate.
    - id: data
      type: TensorFlow.TFOutput[]
      description: The tensors to print out when condition is false.
    - id: summarize
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      Print this many entries of each tensor.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Assert'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.Assert*
  exceptions: []
- uid: TensorFlow.TFGraph.AssignAddVariableOp(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: AssignAddVariableOp(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: AssignAddVariableOp(TFOutput, TFOutput, String)
  nameWithType: TFGraph.AssignAddVariableOp(TFOutput, TFOutput, String)
  fullName: TFGraph.AssignAddVariableOp(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Adds a value to the current value of a variable.
  remarks: "Any ReadVariableOp which depends directly or indirectly on this assign is\n              guaranteed to see the incremented value or a subsequent newer one.\n              \n              Outputs the incremented value, which can be used to totally order the\n              increments to this variable."
  syntax:
    content: public TensorFlow.TFOperation AssignAddVariableOp (TensorFlow.TFOutput resource, TensorFlow.TFOutput value, string operName = null);
    parameters:
    - id: resource
      type: TensorFlow.TFOutput
      description: handle to the resource in which to store the variable.
    - id: value
      type: TensorFlow.TFOutput
      description: the value by which the variable will be incremented.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'AssignAddVariableOp'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.AssignAddVariableOp*
  exceptions: []
- uid: TensorFlow.TFGraph.AssignSubVariableOp(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: AssignSubVariableOp(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: AssignSubVariableOp(TFOutput, TFOutput, String)
  nameWithType: TFGraph.AssignSubVariableOp(TFOutput, TFOutput, String)
  fullName: TFGraph.AssignSubVariableOp(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Subtracts a value from the current value of a variable.
  remarks: "Any ReadVariableOp which depends directly or indirectly on this assign is\n              guaranteed to see the incremented value or a subsequent newer one.\n              \n              Outputs the incremented value, which can be used to totally order the\n              increments to this variable."
  syntax:
    content: public TensorFlow.TFOperation AssignSubVariableOp (TensorFlow.TFOutput resource, TensorFlow.TFOutput value, string operName = null);
    parameters:
    - id: resource
      type: TensorFlow.TFOutput
      description: handle to the resource in which to store the variable.
    - id: value
      type: TensorFlow.TFOutput
      description: the value by which the variable will be incremented.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'AssignSubVariableOp'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.AssignSubVariableOp*
  exceptions: []
- uid: TensorFlow.TFGraph.AssignVariableOp(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: AssignVariableOp(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: AssignVariableOp(TFOutput, TFOutput, String)
  nameWithType: TFGraph.AssignVariableOp(TFOutput, TFOutput, String)
  fullName: TFGraph.AssignVariableOp(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Assigns a new value to a variable.
  remarks: >-
    Any ReadVariableOp with a control dependency on this op is guaranteed to return
                  this value or a subsequent newer value of the variable.
  syntax:
    content: public TensorFlow.TFOperation AssignVariableOp (TensorFlow.TFOutput resource, TensorFlow.TFOutput value, string operName = null);
    parameters:
    - id: resource
      type: TensorFlow.TFOutput
      description: handle to the resource in which to store the variable.
    - id: value
      type: TensorFlow.TFOutput
      description: the value to set the new tensor to use.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'AssignVariableOp'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.AssignVariableOp*
  exceptions: []
- uid: TensorFlow.TFGraph.AsString(TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.String,System.String)
  id: AsString(TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: AsString(TFOutput, Nullable<Int64>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Int64>, String, String)
  nameWithType: TFGraph.AsString(TFOutput, Nullable<Int64>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Int64>, String, String)
  fullName: TFGraph.AsString(TFOutput, Nullable<Int64>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Int64>, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Converts each entry in the given tensor to strings.  Supports many numeric
  remarks: types and boolean.
  syntax:
    content: public TensorFlow.TFOutput AsString (TensorFlow.TFOutput input, Nullable<long> precision = null, Nullable<bool> scientific = null, Nullable<bool> shortest = null, Nullable<long> width = null, string fill = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: To be added.
    - id: precision
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      The post-decimal precision to use for floating point numbers.
                      Only used if precision &gt; -1.
    - id: scientific
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      Use scientific notation for floating point numbers.
    - id: shortest
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      Use shortest representation (either scientific or standard) for
                      floating point numbers.
    - id: width
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      Pad pre-decimal numbers to this width.
                      Applies to both floating point and integer numbers.
                      Only used if width &gt; -1.
    - id: fill
      type: System.String
      description: >-
        Optional argument
                      The value to pad if width &gt; -1.  If empty, pads with spaces.
                      Another typical value is '0'.  String cannot be longer than 1 character.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'AsString'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.AsString*
  exceptions: []
- uid: TensorFlow.TFGraph.Atan(TensorFlow.TFOutput,System.String)
  id: Atan(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Atan(TFOutput, String)
  nameWithType: TFGraph.Atan(TFOutput, String)
  fullName: TFGraph.Atan(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes atan of x element-wise.
  syntax:
    content: public TensorFlow.TFOutput Atan (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Atan'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Atan*
  exceptions: []
- uid: TensorFlow.TFGraph.Atan2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: Atan2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Atan2(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Atan2(TFOutput, TFOutput, String)
  fullName: TFGraph.Atan2(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes arctangent of `y/x` element-wise, respecting signs of the arguments.
  remarks: >-
    This is the angle \( \theta \in [-\pi, \pi] \) such that
                  \[ x = r \cos(\theta) \]
                  and
                  \[ y = r \sin(\theta) \]
                  where \(r = \sqrt(x^2 + y^2) \).
  syntax:
    content: public TensorFlow.TFOutput Atan2 (TensorFlow.TFOutput y, TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Atan2'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Atan2*
  exceptions: []
- uid: TensorFlow.TFGraph.AudioSpectrogram(TensorFlow.TFOutput,System.Int64,System.Int64,System.Nullable{System.Boolean},System.String)
  id: AudioSpectrogram(TensorFlow.TFOutput,System.Int64,System.Int64,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: AudioSpectrogram(TFOutput, Int64, Int64, Nullable<Boolean>, String)
  nameWithType: TFGraph.AudioSpectrogram(TFOutput, Int64, Int64, Nullable<Boolean>, String)
  fullName: TFGraph.AudioSpectrogram(TFOutput, Int64, Int64, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Produces a visualization of audio data over time.
  remarks: "Spectrograms are a standard way of representing audio information as a series of\n              slices of frequency information, one slice for each window of time. By joining\n              these together into a sequence, they form a distinctive fingerprint of the sound\n              over time.\n              \n              This op expects to receive audio data as an input, stored as floats in the range\n              -1 to 1, together with a window width in samples, and a stride specifying how\n              far to move the window between slices. From this it generates a three\n              dimensional output. The lowest dimension has an amplitude value for each\n              frequency during that time slice. The next dimension is time, with successive\n              frequency slices. The final dimension is for the channels in the input, so a\n              stereo audio input would have two here for example.\n              \n              This means the layout when converted and saved as an image is rotated 90 degrees\n              clockwise from a typical spectrogram. Time is descending down the Y axis, and\n              the frequency decreases from left to right.\n              \n              Each value in the result represents the square root of the sum of the real and\n              imaginary parts of an FFT on the current window of samples. In this way, the\n              lowest dimension represents the power of each frequency in the current window,\n              and adjacent windows are concatenated in the next dimension.\n              \n              To get a more intuitive and visual look at what this operation does, you can run\n              tensorflow/examples/wav_to_spectrogram to read in an audio file and save out the\n              resulting spectrogram as a PNG image."
  syntax:
    content: public TensorFlow.TFOutput AudioSpectrogram (TensorFlow.TFOutput input, long window_size, long stride, Nullable<bool> magnitude_squared = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: Float representation of audio data.
    - id: window_size
      type: System.Int64
      description: >-
        How wide the input window is in samples. For the highest efficiency
                      this should be a power of two, but other values are accepted.
    - id: stride
      type: System.Int64
      description: How widely apart the center of adjacent sample windows should be.
    - id: magnitude_squared
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      Whether to return the squared magnitude or just the
                      magnitude. Using squared magnitude can avoid extra calculations.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'AudioSpectrogram'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        3D representation of the audio frequencies as an image.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.AudioSpectrogram*
  exceptions: []
- uid: TensorFlow.TFGraph.AudioSummary(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Single,System.Nullable{System.Int64},System.String)
  id: AudioSummary(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Single,System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: AudioSummary(TFOutput, TFOutput, Single, Nullable<Int64>, String)
  nameWithType: TFGraph.AudioSummary(TFOutput, TFOutput, Single, Nullable<Int64>, String)
  fullName: TFGraph.AudioSummary(TFOutput, TFOutput, Single, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Outputs a `Summary` protocol buffer with audio.
  remarks: "The summary has up to `max_outputs` summary values containing audio. The\n              audio is built from `tensor` which must be 3-D with shape `[batch_size,\n              frames, channels]` or 2-D with shape `[batch_size, frames]`. The values are\n              assumed to be in the range of `[-1.0, 1.0]` with a sample rate of `sample_rate`.\n              \n              The `tag` argument is a scalar `Tensor` of type `string`.  It is used to\n              build the `tag` of the summary values:\n              \n              *  If `max_outputs` is 1, the summary value tag is '*tag*/audio'.\n              *  If `max_outputs` is greater than 1, the summary value tags are\n                 generated sequentially as '*tag*/audio/0', '*tag*/audio/1', etc."
  syntax:
    content: public TensorFlow.TFOutput AudioSummary (TensorFlow.TFOutput tag, TensorFlow.TFOutput tensor, float sample_rate, Nullable<long> max_outputs = null, string operName = null);
    parameters:
    - id: tag
      type: TensorFlow.TFOutput
      description: Scalar. Used to build the `tag` attribute of the summary values.
    - id: tensor
      type: TensorFlow.TFOutput
      description: 2-D of shape `[batch_size, frames]`.
    - id: sample_rate
      type: System.Single
      description: The sample rate of the signal in hertz.
    - id: max_outputs
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      Max number of batch elements to generate audio for.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'AudioSummary'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Scalar. Serialized `Summary` protocol buffer.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.AudioSummary*
  exceptions: []
- uid: TensorFlow.TFGraph.AudioSummaryV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.String)
  id: AudioSummaryV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: AudioSummaryV2(TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
  nameWithType: TFGraph.AudioSummaryV2(TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
  fullName: TFGraph.AudioSummaryV2(TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Outputs a `Summary` protocol buffer with audio.
  remarks: "The summary has up to `max_outputs` summary values containing audio. The\n              audio is built from `tensor` which must be 3-D with shape `[batch_size,\n              frames, channels]` or 2-D with shape `[batch_size, frames]`. The values are\n              assumed to be in the range of `[-1.0, 1.0]` with a sample rate of `sample_rate`.\n              \n              The `tag` argument is a scalar `Tensor` of type `string`.  It is used to\n              build the `tag` of the summary values:\n              \n              *  If `max_outputs` is 1, the summary value tag is '*tag*/audio'.\n              *  If `max_outputs` is greater than 1, the summary value tags are\n                 generated sequentially as '*tag*/audio/0', '*tag*/audio/1', etc."
  syntax:
    content: public TensorFlow.TFOutput AudioSummaryV2 (TensorFlow.TFOutput tag, TensorFlow.TFOutput tensor, TensorFlow.TFOutput sample_rate, Nullable<long> max_outputs = null, string operName = null);
    parameters:
    - id: tag
      type: TensorFlow.TFOutput
      description: Scalar. Used to build the `tag` attribute of the summary values.
    - id: tensor
      type: TensorFlow.TFOutput
      description: 2-D of shape `[batch_size, frames]`.
    - id: sample_rate
      type: TensorFlow.TFOutput
      description: The sample rate of the signal in hertz.
    - id: max_outputs
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      Max number of batch elements to generate audio for.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'AudioSummaryV2'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Scalar. Serialized `Summary` protocol buffer.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.AudioSummaryV2*
  exceptions: []
- uid: TensorFlow.TFGraph.AvgPool(TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  id: AvgPool(TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: AvgPool(TFOutput, Int64[], Int64[], String, String, String)
  nameWithType: TFGraph.AvgPool(TFOutput, Int64[], Int64[], String, String, String)
  fullName: TFGraph.AvgPool(TFOutput, Int64[], Int64[], String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Performs average pooling on the input.
  remarks: >-
    Each entry in `output` is the mean of the corresponding size `ksize`
                  window in `value`.
  syntax:
    content: public TensorFlow.TFOutput AvgPool (TensorFlow.TFOutput value, long[] ksize, long[] strides, string padding, string data_format = null, string operName = null);
    parameters:
    - id: value
      type: TensorFlow.TFOutput
      description: 4-D with shape `[batch, height, width, channels]`.
    - id: ksize
      type: System.Int64[]
      description: The size of the sliding window for each dimension of `value`.
    - id: strides
      type: System.Int64[]
      description: The stride of the sliding window for each dimension of `value`.
    - id: padding
      type: System.String
      description: The type of padding algorithm to use.
    - id: data_format
      type: System.String
      description: >-
        Optional argument
                      Specify the data format of the input and output data. With the
                      default format "NHWC", the data is stored in the order of:
                          [batch, in_height, in_width, in_channels].
                      Alternatively, the format could be "NCHW", the data storage order of:
                          [batch, in_channels, in_height, in_width].
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'AvgPool'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The average pooled output tensor.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.AvgPool*
  exceptions: []
- uid: TensorFlow.TFGraph.AvgPool3D(TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  id: AvgPool3D(TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: AvgPool3D(TFOutput, Int64[], Int64[], String, String, String)
  nameWithType: TFGraph.AvgPool3D(TFOutput, Int64[], Int64[], String, String, String)
  fullName: TFGraph.AvgPool3D(TFOutput, Int64[], Int64[], String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Performs 3D average pooling on the input.
  syntax:
    content: public TensorFlow.TFOutput AvgPool3D (TensorFlow.TFOutput input, long[] ksize, long[] strides, string padding, string data_format = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: Shape `[batch, depth, rows, cols, channels]` tensor to pool over.
    - id: ksize
      type: System.Int64[]
      description: >-
        1-D tensor of length 5. The size of the window for each dimension of
                      the input tensor. Must have `ksize[0] = ksize[4] = 1`.
    - id: strides
      type: System.Int64[]
      description: >-
        1-D tensor of length 5. The stride of the sliding window for each
                      dimension of `input`. Must have `strides[0] = strides[4] = 1`.
    - id: padding
      type: System.String
      description: The type of padding algorithm to use.
    - id: data_format
      type: System.String
      description: >-
        Optional argument
                      The data format of the input and output data. With the
                      default format "NDHWC", the data is stored in the order of:
                          [batch, in_depth, in_height, in_width, in_channels].
                      Alternatively, the format could be "NCDHW", the data storage order is:
                          [batch, in_channels, in_depth, in_height, in_width].
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'AvgPool3D'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The average pooled output tensor.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.AvgPool3D*
  exceptions: []
- uid: TensorFlow.TFGraph.AvgPool3DGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  id: AvgPool3DGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: AvgPool3DGrad(TFOutput, TFOutput, Int64[], Int64[], String, String, String)
  nameWithType: TFGraph.AvgPool3DGrad(TFOutput, TFOutput, Int64[], Int64[], String, String, String)
  fullName: TFGraph.AvgPool3DGrad(TFOutput, TFOutput, Int64[], Int64[], String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes gradients of average pooling function.
  syntax:
    content: public TensorFlow.TFOutput AvgPool3DGrad (TensorFlow.TFOutput orig_input_shape, TensorFlow.TFOutput grad, long[] ksize, long[] strides, string padding, string data_format = null, string operName = null);
    parameters:
    - id: orig_input_shape
      type: TensorFlow.TFOutput
      description: The original input dimensions.
    - id: grad
      type: TensorFlow.TFOutput
      description: Output backprop of shape `[batch, depth, rows, cols, channels]`.
    - id: ksize
      type: System.Int64[]
      description: >-
        1-D tensor of length 5. The size of the window for each dimension of
                      the input tensor. Must have `ksize[0] = ksize[4] = 1`.
    - id: strides
      type: System.Int64[]
      description: >-
        1-D tensor of length 5. The stride of the sliding window for each
                      dimension of `input`. Must have `strides[0] = strides[4] = 1`.
    - id: padding
      type: System.String
      description: The type of padding algorithm to use.
    - id: data_format
      type: System.String
      description: >-
        Optional argument
                      The data format of the input and output data. With the
                      default format "NDHWC", the data is stored in the order of:
                          [batch, in_depth, in_height, in_width, in_channels].
                      Alternatively, the format could be "NCDHW", the data storage order is:
                          [batch, in_channels, in_depth, in_height, in_width].
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'AvgPool3DGrad'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The backprop for input.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.AvgPool3DGrad*
  exceptions: []
- uid: TensorFlow.TFGraph.AvgPoolGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  id: AvgPoolGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: AvgPoolGrad(TFOutput, TFOutput, Int64[], Int64[], String, String, String)
  nameWithType: TFGraph.AvgPoolGrad(TFOutput, TFOutput, Int64[], Int64[], String, String, String)
  fullName: TFGraph.AvgPoolGrad(TFOutput, TFOutput, Int64[], Int64[], String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes gradients of the average pooling function.
  syntax:
    content: public TensorFlow.TFOutput AvgPoolGrad (TensorFlow.TFOutput orig_input_shape, TensorFlow.TFOutput grad, long[] ksize, long[] strides, string padding, string data_format = null, string operName = null);
    parameters:
    - id: orig_input_shape
      type: TensorFlow.TFOutput
      description: 1-D.  Shape of the original input to `avg_pool`.
    - id: grad
      type: TensorFlow.TFOutput
      description: >-
        4-D with shape `[batch, height, width, channels]`.  Gradients w.r.t.
                      the output of `avg_pool`.
    - id: ksize
      type: System.Int64[]
      description: The size of the sliding window for each dimension of the input.
    - id: strides
      type: System.Int64[]
      description: The stride of the sliding window for each dimension of the input.
    - id: padding
      type: System.String
      description: The type of padding algorithm to use.
    - id: data_format
      type: System.String
      description: >-
        Optional argument
                      Specify the data format of the input and output data. With the
                      default format "NHWC", the data is stored in the order of:
                          [batch, in_height, in_width, in_channels].
                      Alternatively, the format could be "NCHW", the data storage order of:
                          [batch, in_channels, in_height, in_width].
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'AvgPoolGrad'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        4-D.  Gradients w.r.t. the input of `avg_pool`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.AvgPoolGrad*
  exceptions: []
- uid: TensorFlow.TFGraph.BatchDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  id: BatchDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: BatchDataset(TFOutput, TFOutput, TFDataType[], TFShape[], String)
  nameWithType: TFGraph.BatchDataset(TFOutput, TFOutput, TFDataType[], TFShape[], String)
  fullName: TFGraph.BatchDataset(TFOutput, TFOutput, TFDataType[], TFShape[], String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Creates a dataset that batches `batch_size` elements from `input_dataset`.
  syntax:
    content: public TensorFlow.TFOutput BatchDataset (TensorFlow.TFOutput input_dataset, TensorFlow.TFOutput batch_size, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);
    parameters:
    - id: input_dataset
      type: TensorFlow.TFOutput
      description: To be added.
    - id: batch_size
      type: TensorFlow.TFOutput
      description: >-
        A scalar representing the number of elements to accumulate in a
                      batch.
    - id: output_types
      type: TensorFlow.TFDataType[]
      description: To be added.
    - id: output_shapes
      type: TensorFlow.TFShape[]
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'BatchDataset'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.BatchDataset*
  exceptions: []
- uid: TensorFlow.TFGraph.BatchMatMul(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  id: BatchMatMul(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: BatchMatMul(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  nameWithType: TFGraph.BatchMatMul(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  fullName: TFGraph.BatchMatMul(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Multiplies slices of two tensors in batches.
  remarks: "Multiplies all slices of `Tensor` `x` and `y` (each slice can be\n              viewed as an element of a batch), and arranges the individual results\n              in a single output tensor of the same batch size. Each of the\n              individual slices can optionally be adjointed (to adjoint a matrix\n              means to transpose and conjugate it) before multiplication by setting\n              the `adj_x` or `adj_y` flag to `True`, which are by default `False`.\n              \n              The input tensors `x` and `y` are 2-D or higher with shape `[..., r_x, c_x]`\n              and `[..., r_y, c_y]`.\n              \n              The output tensor is 2-D or higher with shape `[..., r_o, c_o]`, where:\n              \n                  r_o = c_x if adj_x else r_x\n                  c_o = r_y if adj_y else c_y\n              \n              It is computed as:\n              \n                  output[..., :, :] = matrix(x[..., :, :]) * matrix(y[..., :, :])"
  syntax:
    content: public TensorFlow.TFOutput BatchMatMul (TensorFlow.TFOutput x, TensorFlow.TFOutput y, Nullable<bool> adj_x = null, Nullable<bool> adj_y = null, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: 2-D or higher with shape `[..., r_x, c_x]`.
    - id: y
      type: TensorFlow.TFOutput
      description: 2-D or higher with shape `[..., r_y, c_y]`.
    - id: adj_x
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If `True`, adjoint the slices of `x`. Defaults to `False`.
    - id: adj_y
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If `True`, adjoint the slices of `y`. Defaults to `False`.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'BatchMatMul'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        3-D or higher with shape `[..., r_o, c_o]`
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.BatchMatMul*
  exceptions: []
- uid: TensorFlow.TFGraph.BatchNormWithGlobalNormalization(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Single,System.Boolean,System.String)
  id: BatchNormWithGlobalNormalization(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Single,System.Boolean,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: BatchNormWithGlobalNormalization(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Single, Boolean, String)
  nameWithType: TFGraph.BatchNormWithGlobalNormalization(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Single, Boolean, String)
  fullName: TFGraph.BatchNormWithGlobalNormalization(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Single, Boolean, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Batch normalization.
  remarks: This op is deprecated. Prefer `tf.nn.batch_normalization`.
  syntax:
    content: public TensorFlow.TFOutput BatchNormWithGlobalNormalization (TensorFlow.TFOutput t, TensorFlow.TFOutput m, TensorFlow.TFOutput v, TensorFlow.TFOutput beta, TensorFlow.TFOutput gamma, float variance_epsilon, bool scale_after_normalization, string operName = null);
    parameters:
    - id: t
      type: TensorFlow.TFOutput
      description: A 4D input Tensor.
    - id: m
      type: TensorFlow.TFOutput
      description: >-
        A 1D mean Tensor with size matching the last dimension of t.
                      This is the first output from tf.nn.moments,
                      or a saved moving average thereof.
    - id: v
      type: TensorFlow.TFOutput
      description: >-
        A 1D variance Tensor with size matching the last dimension of t.
                      This is the second output from tf.nn.moments,
                      or a saved moving average thereof.
    - id: beta
      type: TensorFlow.TFOutput
      description: >-
        A 1D beta Tensor with size matching the last dimension of t.
                      An offset to be added to the normalized tensor.
    - id: gamma
      type: TensorFlow.TFOutput
      description: >-
        A 1D gamma Tensor with size matching the last dimension of t.
                      If "scale_after_normalization" is true, this tensor will be multiplied
                      with the normalized tensor.
    - id: variance_epsilon
      type: System.Single
      description: A small float number to avoid dividing by 0.
    - id: scale_after_normalization
      type: System.Boolean
      description: >-
        A bool indicating whether the resulted tensor
                      needs to be multiplied with gamma.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'BatchNormWithGlobalNormalization'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.BatchNormWithGlobalNormalization*
  exceptions: []
- uid: TensorFlow.TFGraph.BatchNormWithGlobalNormalizationGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Single,System.Boolean,System.String)
  id: BatchNormWithGlobalNormalizationGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Single,System.Boolean,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: BatchNormWithGlobalNormalizationGrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Single, Boolean, String)
  nameWithType: TFGraph.BatchNormWithGlobalNormalizationGrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Single, Boolean, String)
  fullName: TFGraph.BatchNormWithGlobalNormalizationGrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Single, Boolean, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Gradients for batch normalization.
  remarks: This op is deprecated. See `tf.nn.batch_normalization`.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> BatchNormWithGlobalNormalizationGrad (TensorFlow.TFOutput t, TensorFlow.TFOutput m, TensorFlow.TFOutput v, TensorFlow.TFOutput gamma, TensorFlow.TFOutput backprop, float variance_epsilon, bool scale_after_normalization, string operName = null);
    parameters:
    - id: t
      type: TensorFlow.TFOutput
      description: A 4D input Tensor.
    - id: m
      type: TensorFlow.TFOutput
      description: >-
        A 1D mean Tensor with size matching the last dimension of t.
                      This is the first output from tf.nn.moments,
                      or a saved moving average thereof.
    - id: v
      type: TensorFlow.TFOutput
      description: >-
        A 1D variance Tensor with size matching the last dimension of t.
                      This is the second output from tf.nn.moments,
                      or a saved moving average thereof.
    - id: gamma
      type: TensorFlow.TFOutput
      description: >-
        A 1D gamma Tensor with size matching the last dimension of t.
                      If "scale_after_normalization" is true, this Tensor will be multiplied
                      with the normalized Tensor.
    - id: backprop
      type: TensorFlow.TFOutput
      description: 4D backprop Tensor.
    - id: variance_epsilon
      type: System.Single
      description: A small float number to avoid dividing by 0.
    - id: scale_after_normalization
      type: System.Boolean
      description: >-
        A bool indicating whether the resulted tensor
                      needs to be multiplied with gamma.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'BatchNormWithGlobalNormalizationGrad'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      dx: 4D backprop tensor for input.
                      dm: 1D backprop tensor for mean.
                      dv: 1D backprop tensor for variance.
                      db: 1D backprop tensor for beta.
                      dg: 1D backprop tensor for gamma.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.BatchNormWithGlobalNormalizationGrad*
  exceptions: []
- uid: TensorFlow.TFGraph.BatchToSpace(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.String)
  id: BatchToSpace(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: BatchToSpace(TFOutput, TFOutput, Int64, String)
  nameWithType: TFGraph.BatchToSpace(TFOutput, TFOutput, Int64, String)
  fullName: TFGraph.BatchToSpace(TFOutput, TFOutput, Int64, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: BatchToSpace for 4-D tensors of type T.
  remarks: "This is a legacy version of the more general BatchToSpaceND.\n              \n              Rearranges (permutes) data from batch into blocks of spatial data, followed by\n              cropping. This is the reverse transformation of SpaceToBatch. More specifically,\n              this op outputs a copy of the input tensor where values from the `batch`\n              dimension are moved in spatial blocks to the `height` and `width` dimensions,\n              followed by cropping along the `height` and `width` dimensions."
  syntax:
    content: public TensorFlow.TFOutput BatchToSpace (TensorFlow.TFOutput input, TensorFlow.TFOutput crops, long block_size, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: >-
        4-D tensor with shape
                      `[batch*block_size*block_size, height_pad/block_size, width_pad/block_size,
                        depth]`. Note that the batch size of the input tensor must be divisible by
                      `block_size * block_size`.
    - id: crops
      type: TensorFlow.TFOutput
      description: "2-D tensor of non-negative integers with shape `[2, 2]`. It specifies\n              how many elements to crop from the intermediate result across the spatial\n              dimensions as follows:\n              \n                  crops = [[crop_top, crop_bottom], [crop_left, crop_right]]"
    - id: block_size
      type: System.Int64
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'BatchToSpace'.
    return:
      type: TensorFlow.TFOutput
      description: "4-D with shape `[batch, height, width, depth]`, where:\n              \n                    height = height_pad - crop_top - crop_bottom\n                    width = width_pad - crop_left - crop_right\n              \n              The attr `block_size` must be greater than one. It indicates the block size.\n              \n              Some examples:\n              \n              (1) For the following input of shape `[4, 1, 1, 1]` and block_size of 2:\n              \n              ```\n              [[[[1]]], [[[2]]], [[[3]]], [[[4]]]]\n              ```\n              \n              The output tensor has shape `[1, 2, 2, 1]` and value:\n              \n              ```\n              x = [[[[1], [2]], [[3], [4]]]]\n              ```\n              \n              (2) For the following input of shape `[4, 1, 1, 3]` and block_size of 2:\n              \n              ```\n              [[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]\n              ```\n              \n              The output tensor has shape `[1, 2, 2, 3]` and value:\n              \n              ```\n              x = [[[[1, 2, 3], [4, 5, 6]],\n                    [[7, 8, 9], [10, 11, 12]]]]\n              ```\n              \n              (3) For the following input of shape `[4, 2, 2, 1]` and block_size of 2:\n              \n              ```\n              x = [[[[1], [3]], [[9], [11]]],\n                   [[[2], [4]], [[10], [12]]],\n                   [[[5], [7]], [[13], [15]]],\n                   [[[6], [8]], [[14], [16]]]]\n              ```\n              \n              The output tensor has shape `[1, 4, 4, 1]` and value:\n              \n              ```\n              x = [[[1],   [2],  [3],  [4]],\n                   [[5],   [6],  [7],  [8]],\n                   [[9],  [10], [11],  [12]],\n                   [[13], [14], [15],  [16]]]\n              ```\n              \n              (4) For the following input of shape `[8, 1, 2, 1]` and block_size of 2:\n              \n              ```\n              x = [[[[1], [3]]], [[[9], [11]]], [[[2], [4]]], [[[10], [12]]],\n                   [[[5], [7]]], [[[13], [15]]], [[[6], [8]]], [[[14], [16]]]]\n              ```\n              \n              The output tensor has shape `[2, 2, 4, 1]` and value:\n              \n              ```\n              x = [[[[1], [3]], [[5], [7]]],\n                   [[[2], [4]], [[10], [12]]],\n                   [[[5], [7]], [[13], [15]]],\n                   [[[6], [8]], [[14], [16]]]]\n              ```\n              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result."
  overload: TensorFlow.TFGraph.BatchToSpace*
  exceptions: []
- uid: TensorFlow.TFGraph.BatchToSpaceND(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: BatchToSpaceND(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: BatchToSpaceND(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.BatchToSpaceND(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.BatchToSpaceND(TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: BatchToSpace for N-D tensors of type T.
  remarks: >-
    This operation reshapes the "batch" dimension 0 into `M + 1` dimensions of shape
                  `block_shape + [batch]`, interleaves these blocks back into the grid defined by
                  the spatial dimensions `[1, ..., M]`, to obtain a result with the same rank as
                  the input.  The spatial dimensions of this intermediate result are then
                  optionally cropped according to `crops` to produce the output.  This is the
                  reverse of SpaceToBatch.  See below for a precise description.
  syntax:
    content: public TensorFlow.TFOutput BatchToSpaceND (TensorFlow.TFOutput input, TensorFlow.TFOutput block_shape, TensorFlow.TFOutput crops, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: >-
        N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`,
                      where spatial_shape has M dimensions.
    - id: block_shape
      type: TensorFlow.TFOutput
      description: 1-D with shape `[M]`, all values must be &gt;= 1.
    - id: crops
      type: TensorFlow.TFOutput
      description: "2-D with shape `[M, 2]`, all values must be &gt;= 0.\n                `crops[i] = [crop_start, crop_end]` specifies the amount to crop from input\n                dimension `i + 1`, which corresponds to spatial dimension `i`.  It is\n                required that\n                `crop_start[i] + crop_end[i] &lt;= block_shape[i] * input_shape[i + 1]`.\n              \n              This operation is equivalent to the following steps:\n              \n              1. Reshape `input` to `reshaped` of shape:\n                   [block_shape[0], ..., block_shape[M-1],\n                    batch / prod(block_shape),\n                    input_shape[1], ..., input_shape[N-1]]\n              \n              2. Permute dimensions of `reshaped` to produce `permuted` of shape\n                   [batch / prod(block_shape),\n              \n                    input_shape[1], block_shape[0],\n                    ...,\n                    input_shape[M], block_shape[M-1],\n              \n                    input_shape[M+1], ..., input_shape[N-1]]\n              \n              3. Reshape `permuted` to produce `reshaped_permuted` of shape\n                   [batch / prod(block_shape),\n              \n                    input_shape[1] * block_shape[0],\n                    ...,\n                    input_shape[M] * block_shape[M-1],\n              \n                    input_shape[M+1],\n                    ...,\n                    input_shape[N-1]]\n              \n              4. Crop the start and end of dimensions `[1, ..., M]` of\n                 `reshaped_permuted` according to `crops` to produce the output of shape:\n                   [batch / prod(block_shape),\n              \n                    input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1],\n                    ...,\n                    input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],\n              \n                    input_shape[M+1], ..., input_shape[N-1]]\n              \n              Some examples:\n              \n              (1) For the following input of shape `[4, 1, 1, 1]`, `block_shape = [2, 2]`, and\n                  `crops = [[0, 0], [0, 0]]`:\n              \n              ```\n              [[[[1]]], [[[2]]], [[[3]]], [[[4]]]]\n              ```\n              \n              The output tensor has shape `[1, 2, 2, 1]` and value:\n              \n              ```\n              x = [[[[1], [2]], [[3], [4]]]]\n              ```\n              \n              (2) For the following input of shape `[4, 1, 1, 3]`, `block_shape = [2, 2]`, and\n                  `crops = [[0, 0], [0, 0]]`:\n              \n              ```\n              [[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]\n              ```\n              \n              The output tensor has shape `[1, 2, 2, 3]` and value:\n              \n              ```\n              x = [[[[1, 2, 3], [4, 5, 6]],\n                    [[7, 8, 9], [10, 11, 12]]]]\n              ```\n              \n              (3) For the following input of shape `[4, 2, 2, 1]`, `block_shape = [2, 2]`, and\n                  `crops = [[0, 0], [0, 0]]`:\n              \n              ```\n              x = [[[[1], [3]], [[9], [11]]],\n                   [[[2], [4]], [[10], [12]]],\n                   [[[5], [7]], [[13], [15]]],\n                   [[[6], [8]], [[14], [16]]]]\n              ```\n              \n              The output tensor has shape `[1, 4, 4, 1]` and value:\n              \n              ```\n              x = [[[1],   [2],  [3],  [4]],\n                   [[5],   [6],  [7],  [8]],\n                   [[9],  [10], [11],  [12]],\n                   [[13], [14], [15],  [16]]]\n              ```\n              \n              (4) For the following input of shape `[8, 1, 3, 1]`, `block_shape = [2, 2]`, and\n                  `crops = [[0, 0], [2, 0]]`:\n              \n              ```\n              x = [[[[0], [1], [3]]], [[[0], [9], [11]]],\n                   [[[0], [2], [4]]], [[[0], [10], [12]]],\n                   [[[0], [5], [7]]], [[[0], [13], [15]]],\n                   [[[0], [6], [8]]], [[[0], [14], [16]]]]\n              ```\n              \n              The output tensor has shape `[2, 2, 4, 1]` and value:\n              \n              ```\n              x = [[[[1],   [2],  [3],  [4]],\n                    [[5],   [6],  [7],  [8]]],\n                   [[[9],  [10], [11],  [12]],\n                    [[13], [14], [15],  [16]]]]\n              ```"
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'BatchToSpaceND'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.BatchToSpaceND*
  exceptions: []
- uid: TensorFlow.TFGraph.Betainc(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: Betainc(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Betainc(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.Betainc(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.Betainc(TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Compute the regularized incomplete beta integral \\(I_x(a, b)\\).
  remarks: "The regularized incomplete beta integral is defined as:\n              \n              \n              \\\\(I_x(a, b) = \\frac{B(x; a, b)}{B(a, b)}\\\\)\n              \n              where\n              \n              \n              \\\\(B(x; a, b) = \\int_0^x t^{a-1} (1 - t)^{b-1} dt\\\\)\n              \n              \n              is the incomplete beta function and \\\\(B(a, b)\\\\) is the *complete*\n              beta function."
  syntax:
    content: public TensorFlow.TFOutput Betainc (TensorFlow.TFOutput a, TensorFlow.TFOutput b, TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: a
      type: TensorFlow.TFOutput
      description: To be added.
    - id: b
      type: TensorFlow.TFOutput
      description: To be added.
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Betainc'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Betainc*
  exceptions: []
- uid: TensorFlow.TFGraph.BiasAdd(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String)
  id: BiasAdd(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: BiasAdd(TFOutput, TFOutput, String, String)
  nameWithType: TFGraph.BiasAdd(TFOutput, TFOutput, String, String)
  fullName: TFGraph.BiasAdd(TFOutput, TFOutput, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Adds `bias` to `value`.
  remarks: >-
    This is a special case of `tf.add` where `bias` is restricted to be 1-D.
                  Broadcasting is supported, so `value` may have any number of dimensions.
  syntax:
    content: public TensorFlow.TFOutput BiasAdd (TensorFlow.TFOutput value, TensorFlow.TFOutput bias, string data_format = null, string operName = null);
    parameters:
    - id: value
      type: TensorFlow.TFOutput
      description: Any number of dimensions.
    - id: bias
      type: TensorFlow.TFOutput
      description: 1-D with size the last dimension of `value`.
    - id: data_format
      type: System.String
      description: >-
        Optional argument
                      Specify the data format of the input and output data. With the
                      default format "NHWC", the bias tensor will be added to the last dimension
                      of the value tensor.
                      Alternatively, the format could be "NCHW", the data storage order of:
                          [batch, in_channels, in_height, in_width].
                      The tensor will be added to "in_channels", the third-to-the-last
                          dimension.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'BiasAdd'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Broadcasted sum of `value` and `bias`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.BiasAdd*
  exceptions: []
- uid: TensorFlow.TFGraph.BiasAddGrad(TensorFlow.TFOutput,System.String,System.String)
  id: BiasAddGrad(TensorFlow.TFOutput,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: BiasAddGrad(TFOutput, String, String)
  nameWithType: TFGraph.BiasAddGrad(TFOutput, String, String)
  fullName: TFGraph.BiasAddGrad(TFOutput, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: The backward operation for "BiasAdd" on the "bias" tensor.
  remarks: >-
    It accumulates all the values from out_backprop into the feature dimension.
                  For NHWC data format, the feature dimension is the last. For NCHW data format,
                  the feature dimension is the third-to-last.
  syntax:
    content: public TensorFlow.TFOutput BiasAddGrad (TensorFlow.TFOutput out_backprop, string data_format = null, string operName = null);
    parameters:
    - id: out_backprop
      type: TensorFlow.TFOutput
      description: Any number of dimensions.
    - id: data_format
      type: System.String
      description: >-
        Optional argument
                      Specify the data format of the input and output data. With the
                      default format "NHWC", the bias tensor will be added to the last dimension
                      of the value tensor.
                      Alternatively, the format could be "NCHW", the data storage order of:
                          [batch, in_channels, in_height, in_width].
                      The tensor will be added to "in_channels", the third-to-the-last
                          dimension.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'BiasAddGrad'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        1-D with size the feature dimension of `out_backprop`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.BiasAddGrad*
  exceptions: []
- uid: TensorFlow.TFGraph.BiasAddV1(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: BiasAddV1(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: BiasAddV1(TFOutput, TFOutput, String)
  nameWithType: TFGraph.BiasAddV1(TFOutput, TFOutput, String)
  fullName: TFGraph.BiasAddV1(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Adds `bias` to `value`.
  remarks: "This is a deprecated version of BiasAdd and will be soon removed.\n              \n              This is a special case of `tf.add` where `bias` is restricted to be 1-D.\n              Broadcasting is supported, so `value` may have any number of dimensions."
  syntax:
    content: public TensorFlow.TFOutput BiasAddV1 (TensorFlow.TFOutput value, TensorFlow.TFOutput bias, string operName = null);
    parameters:
    - id: value
      type: TensorFlow.TFOutput
      description: Any number of dimensions.
    - id: bias
      type: TensorFlow.TFOutput
      description: 1-D with size the last dimension of `value`.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'BiasAddV1'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Broadcasted sum of `value` and `bias`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.BiasAddV1*
  exceptions: []
- uid: TensorFlow.TFGraph.Bincount(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: Bincount(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Bincount(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.Bincount(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.Bincount(TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Counts the number of occurrences of each value in an integer array.
  remarks: "Outputs a vector with length `size` and the same dtype as `weights`. If\n              `weights` are empty, then index `i` stores the number of times the value `i` is\n              counted in `arr`. If `weights` are non-empty, then index `i` stores the sum of\n              the value in `weights` at each index where the corresponding value in `arr` is\n              `i`.\n              \n              Values in `arr` outside of the range [0, size) are ignored."
  syntax:
    content: public TensorFlow.TFOutput Bincount (TensorFlow.TFOutput arr, TensorFlow.TFOutput size, TensorFlow.TFOutput weights, string operName = null);
    parameters:
    - id: arr
      type: TensorFlow.TFOutput
      description: int32 `Tensor`.
    - id: size
      type: TensorFlow.TFOutput
      description: non-negative int32 scalar `Tensor`.
    - id: weights
      type: TensorFlow.TFOutput
      description: >-
        is an int32, int64, float32, or float64 `Tensor` with the same
                      shape as `arr`, or a length-0 `Tensor`, in which case it acts as all weights
                      equal to 1.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Bincount'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        1D `Tensor` with length equal to `size`. The counts or summed weights for
                      each value in the range [0, size).
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Bincount*
  exceptions: []
- uid: TensorFlow.TFGraph.Bitcast(TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  id: Bitcast(TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Bitcast(TFOutput, TFDataType, String)
  nameWithType: TFGraph.Bitcast(TFOutput, TFDataType, String)
  fullName: TFGraph.Bitcast(TFOutput, TFDataType, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Bitcasts a tensor from one type to another without copying data.
  remarks: "Given a tensor `input`, this operation returns a tensor that has the same buffer\n              data as `input` with datatype `type`.\n              \n              If the input datatype `T` is larger than the output datatype `type` then the\n              shape changes from [...] to [..., sizeof(`T`)/sizeof(`type`)].\n              \n              If `T` is smaller than `type`, the operator requires that the rightmost\n              dimension be equal to sizeof(`type`)/sizeof(`T`). The shape then goes from\n              [..., sizeof(`type`)/sizeof(`T`)] to [...].\n              \n              *NOTE*: Bitcast is implemented as a low-level cast, so machines with different\n              endian orderings will give different results."
  syntax:
    content: public TensorFlow.TFOutput Bitcast (TensorFlow.TFOutput input, TensorFlow.TFDataType type, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: To be added.
    - id: type
      type: TensorFlow.TFDataType
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Bitcast'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Bitcast*
  exceptions: []
- uid: TensorFlow.TFGraph.BitwiseAnd(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: BitwiseAnd(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: BitwiseAnd(TFOutput, TFOutput, String)
  nameWithType: TFGraph.BitwiseAnd(TFOutput, TFOutput, String)
  fullName: TFGraph.BitwiseAnd(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Elementwise computes the bitwise AND of `x` and `y`.
  remarks: >-
    The result will have those bits set, that are set in both `x` and `y`. The
                  computation is performed on the underlying representations of `x` and `y`.
  syntax:
    content: public TensorFlow.TFOutput BitwiseAnd (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'BitwiseAnd'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.BitwiseAnd*
  exceptions: []
- uid: TensorFlow.TFGraph.BitwiseOr(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: BitwiseOr(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: BitwiseOr(TFOutput, TFOutput, String)
  nameWithType: TFGraph.BitwiseOr(TFOutput, TFOutput, String)
  fullName: TFGraph.BitwiseOr(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Elementwise computes the bitwise OR of `x` and `y`.
  remarks: >-
    The result will have those bits set, that are set in `x`, `y` or both. The
                  computation is performed on the underlying representations of `x` and `y`.
  syntax:
    content: public TensorFlow.TFOutput BitwiseOr (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'BitwiseOr'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.BitwiseOr*
  exceptions: []
- uid: TensorFlow.TFGraph.BitwiseXor(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: BitwiseXor(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: BitwiseXor(TFOutput, TFOutput, String)
  nameWithType: TFGraph.BitwiseXor(TFOutput, TFOutput, String)
  fullName: TFGraph.BitwiseXor(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Elementwise computes the bitwise XOR of `x` and `y`.
  remarks: >-
    The result will have those bits set, that are different in `x` and `y`. The
                  computation is performed on the underlying representations of `x` and `y`.
  syntax:
    content: public TensorFlow.TFOutput BitwiseXor (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'BitwiseXor'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.BitwiseXor*
  exceptions: []
- uid: TensorFlow.TFGraph.BroadcastArgs(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: BroadcastArgs(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: BroadcastArgs(TFOutput, TFOutput, String)
  nameWithType: TFGraph.BroadcastArgs(TFOutput, TFOutput, String)
  fullName: TFGraph.BroadcastArgs(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Return the shape of s0 op s1 with broadcast.
  remarks: >-
    Given `s0` and `s1`, tensors that represent shapes, compute `r0`, the
                  broadcasted shape. `s0`, `s1` and `r0` are all integer vectors.
  syntax:
    content: public TensorFlow.TFOutput BroadcastArgs (TensorFlow.TFOutput s0, TensorFlow.TFOutput s1, string operName = null);
    parameters:
    - id: s0
      type: TensorFlow.TFOutput
      description: To be added.
    - id: s1
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'BroadcastArgs'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.BroadcastArgs*
  exceptions: []
- uid: TensorFlow.TFGraph.BroadcastGradientArgs(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: BroadcastGradientArgs(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: BroadcastGradientArgs(TFOutput, TFOutput, String)
  nameWithType: TFGraph.BroadcastGradientArgs(TFOutput, TFOutput, String)
  fullName: TFGraph.BroadcastGradientArgs(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Return the reduction indices for computing gradients of s0 op s1 with broadcast.
  remarks: This is typically used by gradient computations for a broadcasting operation.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput> BroadcastGradientArgs (TensorFlow.TFOutput s0, TensorFlow.TFOutput s1, string operName = null);
    parameters:
    - id: s0
      type: TensorFlow.TFOutput
      description: To be added.
    - id: s1
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'BroadcastGradientArgs'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: "Returns a tuple with multiple values, as follows:\n              r0: \n              r1: \n              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property."
  overload: TensorFlow.TFGraph.BroadcastGradientArgs*
  exceptions: []
- uid: TensorFlow.TFGraph.Bucketize(TensorFlow.TFOutput,System.Single[],System.String)
  id: Bucketize(TensorFlow.TFOutput,System.Single[],System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Bucketize(TFOutput, Single[], String)
  nameWithType: TFGraph.Bucketize(TFOutput, Single[], String)
  fullName: TFGraph.Bucketize(TFOutput, Single[], String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Bucketizes 'input' based on 'boundaries'.
  remarks: "For example, if the inputs are\n                  boundaries = [0, 10, 100]\n                  input = [[-5, 10000]\n                           [150,   10]\n                           [5,    100]]\n              \n              then the output will be\n                  output = [[0, 3]\n                            [3, 2]\n                            [1, 3]]"
  syntax:
    content: public TensorFlow.TFOutput Bucketize (TensorFlow.TFOutput input, float[] boundaries, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: Any shape of Tensor contains with int or float type.
    - id: boundaries
      type: System.Single[]
      description: A sorted list of floats gives the boundary of the buckets.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Bucketize'.
    return:
      type: TensorFlow.TFOutput
      description: "Same shape with 'input', each value of input replaced with bucket index.\n              \n              @compatibility(numpy)\n              Equivalent to np.digitize.\n              @end_compatibility\n              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result."
  overload: TensorFlow.TFGraph.Bucketize*
  exceptions: []
- uid: TensorFlow.TFGraph.CacheDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  id: CacheDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: CacheDataset(TFOutput, TFOutput, TFDataType[], TFShape[], String)
  nameWithType: TFGraph.CacheDataset(TFOutput, TFOutput, TFDataType[], TFShape[], String)
  fullName: TFGraph.CacheDataset(TFOutput, TFOutput, TFDataType[], TFShape[], String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Creates a dataset that caches elements from `input_dataset`.
  remarks: >-
    A CacheDataset will iterate over the input_dataset, and store tensors. If the
                  cache already exists, the cache will be used. If the cache is inappropriate
                  (e.g. cannot be opened, contains tensors of the wrong shape / size), an error
                  will the returned when used.
  syntax:
    content: public TensorFlow.TFOutput CacheDataset (TensorFlow.TFOutput input_dataset, TensorFlow.TFOutput filename, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);
    parameters:
    - id: input_dataset
      type: TensorFlow.TFOutput
      description: To be added.
    - id: filename
      type: TensorFlow.TFOutput
      description: >-
        A path on the filesystem where we should cache the dataset. Note: this
                      will be a directory.
    - id: output_types
      type: TensorFlow.TFDataType[]
      description: To be added.
    - id: output_shapes
      type: TensorFlow.TFShape[]
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'CacheDataset'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.CacheDataset*
  exceptions: []
- uid: TensorFlow.TFGraph.Cast(TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  id: Cast(TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Cast(TFOutput, TFDataType, String)
  nameWithType: TFGraph.Cast(TFOutput, TFDataType, String)
  fullName: TFGraph.Cast(TFOutput, TFDataType, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Cast x of type SrcT to y of DstT.
  syntax:
    content: public TensorFlow.TFOutput Cast (TensorFlow.TFOutput x, TensorFlow.TFDataType DstT, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: DstT
      type: TensorFlow.TFDataType
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Cast'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Cast*
  exceptions: []
- uid: TensorFlow.TFGraph.Ceil(TensorFlow.TFOutput,System.String)
  id: Ceil(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Ceil(TFOutput, String)
  nameWithType: TFGraph.Ceil(TFOutput, String)
  fullName: TFGraph.Ceil(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns element-wise smallest integer in not less than x.
  syntax:
    content: public TensorFlow.TFOutput Ceil (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Ceil'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Ceil*
  exceptions: []
- uid: TensorFlow.TFGraph.CheckNumerics(TensorFlow.TFOutput,System.String,System.String)
  id: CheckNumerics(TensorFlow.TFOutput,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: CheckNumerics(TFOutput, String, String)
  nameWithType: TFGraph.CheckNumerics(TFOutput, String, String)
  fullName: TFGraph.CheckNumerics(TFOutput, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Checks a tensor for NaN and Inf values.
  remarks: >-
    When run, reports an `InvalidArgument` error if `tensor` has any values
                  that are not a number (NaN) or infinity (Inf). Otherwise, passes `tensor` as-is.
  syntax:
    content: public TensorFlow.TFOutput CheckNumerics (TensorFlow.TFOutput tensor, string message, string operName = null);
    parameters:
    - id: tensor
      type: TensorFlow.TFOutput
      description: To be added.
    - id: message
      type: System.String
      description: Prefix of the error message.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'CheckNumerics'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.CheckNumerics*
  exceptions: []
- uid: TensorFlow.TFGraph.Cholesky(TensorFlow.TFOutput,System.String)
  id: Cholesky(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Cholesky(TFOutput, String)
  nameWithType: TFGraph.Cholesky(TFOutput, String)
  fullName: TFGraph.Cholesky(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the Cholesky decomposition of one or more square matrices.
  remarks: "The input is a tensor of shape `[..., M, M]` whose inner-most 2 dimensions\n              form square matrices.\n              \n              The input has to be symmetric and positive definite. Only the lower-triangular\n              part of the input will be used for this operation. The upper-triangular part\n              will not be read.\n              \n              The output is a tensor of the same shape as the input\n              containing the Cholesky decompositions for all input submatrices `[..., :, :]`.\n              \n              **Note**: The gradient computation on GPU is faster for large matrices but\n              not for large batch dimensions when the submatrices are small. In this\n              case it might be faster to use the CPU."
  syntax:
    content: public TensorFlow.TFOutput Cholesky (TensorFlow.TFOutput input, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: Shape is `[..., M, M]`.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Cholesky'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Shape is `[..., M, M]`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Cholesky*
  exceptions: []
- uid: TensorFlow.TFGraph.CholeskyGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: CholeskyGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: CholeskyGrad(TFOutput, TFOutput, String)
  nameWithType: TFGraph.CholeskyGrad(TFOutput, TFOutput, String)
  fullName: TFGraph.CholeskyGrad(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the reverse mode backpropagated gradient of the Cholesky algorithm.
  remarks: >-
    For an explanation see "Differentiation of the Cholesky algorithm" by
                  Iain Murray http://arxiv.org/abs/1602.07527.
  syntax:
    content: public TensorFlow.TFOutput CholeskyGrad (TensorFlow.TFOutput l, TensorFlow.TFOutput grad, string operName = null);
    parameters:
    - id: l
      type: TensorFlow.TFOutput
      description: >-
        Output of batch Cholesky algorithm l = cholesky(A). Shape is `[..., M, M]`.
                      Algorithm depends only on lower triangular part of the innermost matrices of
                      this tensor.
    - id: grad
      type: TensorFlow.TFOutput
      description: >-
        df/dl where f is some scalar function. Shape is `[..., M, M]`.
                      Algorithm depends only on lower triangular part of the innermost matrices of
                      this tensor.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'CholeskyGrad'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Symmetrized version of df/dA . Shape is `[..., M, M]`
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.CholeskyGrad*
  exceptions: []
- uid: TensorFlow.TFGraph.Complex(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  id: Complex(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Complex(TFOutput, TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.Complex(TFOutput, TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.Complex(TFOutput, TFOutput, Nullable<TFDataType>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Converts two real numbers to a complex number.
  remarks: "Given a tensor `real` representing the real part of a complex number, and a\n              tensor `imag` representing the imaginary part of a complex number, this\n              operation returns complex numbers elementwise of the form \\\\(a + bj\\\\), where\n              *a* represents the `real` part and *b* represents the `imag` part.\n              \n              The input tensors `real` and `imag` must have the same shape.\n              \n              For example:\n              \n              ```\n              # tensor 'real' is [2.25, 3.25]\n              # tensor `imag` is [4.75, 5.75]\n              tf.complex(real, imag) ==&gt; [[2.25 + 4.75j], [3.25 + 5.75j]]\n              ```"
  syntax:
    content: public TensorFlow.TFOutput Complex (TensorFlow.TFOutput real, TensorFlow.TFOutput imag, Nullable<TensorFlow.TFDataType> Tout = null, string operName = null);
    parameters:
    - id: real
      type: TensorFlow.TFOutput
      description: To be added.
    - id: imag
      type: TensorFlow.TFOutput
      description: To be added.
    - id: Tout
      type: System.Nullable{TensorFlow.TFDataType}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Complex'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Complex*
  exceptions: []
- uid: TensorFlow.TFGraph.ComplexAbs(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  id: ComplexAbs(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ComplexAbs(TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.ComplexAbs(TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.ComplexAbs(TFOutput, Nullable<TFDataType>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the complex absolute value of a tensor.
  remarks: >-
    Given a tensor `x` of complex numbers, this operation returns a tensor of type
                  `float` or `double` that is the absolute value of each element in `x`. All
                  elements in `x` must be complex numbers of the form \\(a + bj\\). The absolute
                  value is computed as \\( \sqrt{a^2 + b^2}\\).
  syntax:
    content: public TensorFlow.TFOutput ComplexAbs (TensorFlow.TFOutput x, Nullable<TensorFlow.TFDataType> Tout = null, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: Tout
      type: System.Nullable{TensorFlow.TFDataType}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ComplexAbs'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ComplexAbs*
  exceptions: []
- uid: TensorFlow.TFGraph.ComputeAccidentalHits(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  id: ComputeAccidentalHits(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ComputeAccidentalHits(TFOutput, TFOutput, Int64, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.ComputeAccidentalHits(TFOutput, TFOutput, Int64, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.ComputeAccidentalHits(TFOutput, TFOutput, Int64, Nullable<Int64>, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the ids of the positions in sampled_candidates that match true_labels.
  remarks: >-
    When doing log-odds NCE, the result of this op should be passed through a
                  SparseToDense op, then added to the logits of the sampled candidates. This has
                  the effect of 'removing' the sampled labels that match the true labels by
                  making the classifier sure that they are sampled labels.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> ComputeAccidentalHits (TensorFlow.TFOutput true_classes, TensorFlow.TFOutput sampled_candidates, long num_true, Nullable<long> seed = null, Nullable<long> seed2 = null, string operName = null);
    parameters:
    - id: true_classes
      type: TensorFlow.TFOutput
      description: The true_classes output of UnpackSparseLabels.
    - id: sampled_candidates
      type: TensorFlow.TFOutput
      description: The sampled_candidates output of CandidateSampler.
    - id: num_true
      type: System.Int64
      description: Number of true labels per context.
    - id: seed
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      If either seed or seed2 are set to be non-zero, the random number
                      generator is seeded by the given seed.  Otherwise, it is seeded by a
                      random seed.
    - id: seed2
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      An second seed to avoid seed collision.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ComputeAccidentalHits'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      indices: A vector of indices corresponding to rows of true_candidates.
                      ids: A vector of IDs of positions in sampled_candidates that match a true_label
                      for the row with the corresponding index in indices.
                      weights: A vector of the same length as indices and ids, in which each element
                      is -FLOAT_MAX.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.ComputeAccidentalHits*
  exceptions: []
- uid: TensorFlow.TFGraph.Concat(TensorFlow.TFOutput,TensorFlow.TFOutput[],System.String)
  id: Concat(TensorFlow.TFOutput,TensorFlow.TFOutput[],System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Concat(TFOutput, TFOutput[], String)
  nameWithType: TFGraph.Concat(TFOutput, TFOutput[], String)
  fullName: TFGraph.Concat(TFOutput, TFOutput[], String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Concatenates tensors along one dimension.
  syntax:
    content: public TensorFlow.TFOutput Concat (TensorFlow.TFOutput concat_dim, TensorFlow.TFOutput[] values, string operName = null);
    parameters:
    - id: concat_dim
      type: TensorFlow.TFOutput
      description: >-
        0-D.  The dimension along which to concatenate.  Must be in the
                      range [0, rank(values)).
    - id: values
      type: TensorFlow.TFOutput[]
      description: >-
        The `N` Tensors to concatenate. Their ranks and types must match,
                      and their sizes must match in all dimensions except `concat_dim`.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Concat'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        A `Tensor` with the concatenation of values stacked along the
                      `concat_dim` dimension.  This tensor's shape matches that of `values` except
                      in `concat_dim` where it has the sum of the sizes.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Concat*
  exceptions: []
- uid: TensorFlow.TFGraph.ConcatOffset(TensorFlow.TFOutput,TensorFlow.TFOutput[],System.String)
  id: ConcatOffset(TensorFlow.TFOutput,TensorFlow.TFOutput[],System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ConcatOffset(TFOutput, TFOutput[], String)
  nameWithType: TFGraph.ConcatOffset(TFOutput, TFOutput[], String)
  fullName: TFGraph.ConcatOffset(TFOutput, TFOutput[], String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes offsets of concat inputs within its output.
  remarks: "For example:\n              \n              ```\n              # 'x' is [2, 2, 7]\n              # 'y' is [2, 3, 7]\n              # 'z' is [2, 5, 7]\n              concat_offset(2, [x, y, z]) =&gt; [0, 0, 0], [0, 2, 0], [0, 5, 0]\n              ```\n              \n              This is typically used by gradient computations for a concat operation."
  syntax:
    content: public TensorFlow.TFOutput[] ConcatOffset (TensorFlow.TFOutput concat_dim, TensorFlow.TFOutput[] shape, string operName = null);
    parameters:
    - id: concat_dim
      type: TensorFlow.TFOutput
      description: The dimension along which to concatenate.
    - id: shape
      type: TensorFlow.TFOutput[]
      description: The `N` int32 vectors representing shape of tensors being concatenated.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ConcatOffset'.
    return:
      type: TensorFlow.TFOutput[]
      description: >-
        The `N` int32 vectors representing the starting offset
                      of input tensors within the concatenated output.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ConcatOffset*
  exceptions: []
- uid: TensorFlow.TFGraph.ConcatV2(TensorFlow.TFOutput[],TensorFlow.TFOutput,System.String)
  id: ConcatV2(TensorFlow.TFOutput[],TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ConcatV2(TFOutput[], TFOutput, String)
  nameWithType: TFGraph.ConcatV2(TFOutput[], TFOutput, String)
  fullName: TFGraph.ConcatV2(TFOutput[], TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Concatenates tensors along one dimension.
  syntax:
    content: public TensorFlow.TFOutput ConcatV2 (TensorFlow.TFOutput[] values, TensorFlow.TFOutput axis, string operName = null);
    parameters:
    - id: values
      type: TensorFlow.TFOutput[]
      description: >-
        List of `N` Tensors to concatenate. Their ranks and types must match,
                      and their sizes must match in all dimensions except `concat_dim`.
    - id: axis
      type: TensorFlow.TFOutput
      description: >-
        0-D.  The dimension along which to concatenate.  Must be in the
                      range [-rank(values), rank(values)).
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ConcatV2'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        A `Tensor` with the concatenation of values stacked along the
                      `concat_dim` dimension.  This tensor's shape matches that of `values` except
                      in `concat_dim` where it has the sum of the sizes.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ConcatV2*
  exceptions: []
- uid: TensorFlow.TFGraph.Conj(TensorFlow.TFOutput,System.String)
  id: Conj(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Conj(TFOutput, String)
  nameWithType: TFGraph.Conj(TFOutput, String)
  fullName: TFGraph.Conj(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns the complex conjugate of a complex number.
  remarks: "Given a tensor `input` of complex numbers, this operation returns a tensor of\n              complex numbers that are the complex conjugate of each element in `input`. The\n              complex numbers in `input` must be of the form \\\\(a + bj\\\\), where *a* is the\n              real part and *b* is the imaginary part.\n              \n              The complex conjugate returned by this operation is of the form \\\\(a - bj\\\\).\n              \n              For example:\n              \n              ```\n              # tensor 'input' is [-2.25 + 4.75j, 3.25 + 5.75j]\n              tf.conj(input) ==&gt; [-2.25 - 4.75j, 3.25 - 5.75j]\n              ```"
  syntax:
    content: public TensorFlow.TFOutput Conj (TensorFlow.TFOutput input, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Conj'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Conj*
  exceptions: []
- uid: TensorFlow.TFGraph.Const(TensorFlow.TFTensor,System.String)
  id: Const(TensorFlow.TFTensor,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Const(TFTensor, String)
  nameWithType: TFGraph.Const(TFTensor, String)
  fullName: TFGraph.Const(TFTensor, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Creates a constant operation from a TFTensor or constant
  remarks: >-
    Since TFTensor have implicit conversion operators, you can call this method with
                a constant like this: graph.Const (23)
  syntax:
    content: public TensorFlow.TFOutput Const (TensorFlow.TFTensor value, string operName = null);
    parameters:
    - id: value
      type: TensorFlow.TFTensor
      description: Value.
    - id: operName
      type: System.String
      description: Oper name.
    return:
      type: TensorFlow.TFOutput
      description: To be added.
  overload: TensorFlow.TFGraph.Const*
  exceptions: []
- uid: TensorFlow.TFGraph.Const(TensorFlow.TFTensor,TensorFlow.TFDataType,System.String)
  id: Const(TensorFlow.TFTensor,TensorFlow.TFDataType,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Const(TFTensor, TFDataType, String)
  nameWithType: TFGraph.Const(TFTensor, TFDataType, String)
  fullName: TFGraph.Const(TFTensor, TFDataType, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns a constant tensor.
  syntax:
    content: public TensorFlow.TFOutput Const (TensorFlow.TFTensor value, TensorFlow.TFDataType dtype, string operName = null);
    parameters:
    - id: value
      type: TensorFlow.TFTensor
      description: Attr `value` is the tensor to return.
    - id: dtype
      type: TensorFlow.TFDataType
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Const'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Const*
  exceptions: []
- uid: TensorFlow.TFGraph.ControlTrigger(System.String)
  id: ControlTrigger(System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ControlTrigger(String)
  nameWithType: TFGraph.ControlTrigger(String)
  fullName: TFGraph.ControlTrigger(String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Does nothing. Serves as a control trigger for scheduling.
  remarks: Only useful as a placeholder for control edges.
  syntax:
    content: public TensorFlow.TFOperation ControlTrigger (string operName = null);
    parameters:
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ControlTrigger'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.ControlTrigger*
  exceptions: []
- uid: TensorFlow.TFGraph.Conv2D(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.Nullable{System.Boolean},System.String,System.String)
  id: Conv2D(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.Nullable{System.Boolean},System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Conv2D(TFOutput, TFOutput, Int64[], String, Nullable<Boolean>, String, String)
  nameWithType: TFGraph.Conv2D(TFOutput, TFOutput, Int64[], String, Nullable<Boolean>, String, String)
  fullName: TFGraph.Conv2D(TFOutput, TFOutput, Int64[], String, Nullable<Boolean>, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes a 2-D convolution given 4-D `input` and `filter` tensors.
  remarks: "Given an input tensor of shape `[batch, in_height, in_width, in_channels]`\n              and a filter / kernel tensor of shape\n              `[filter_height, filter_width, in_channels, out_channels]`, this op\n              performs the following:\n              \n              1. Flattens the filter to a 2-D matrix with shape\n                 `[filter_height * filter_width * in_channels, output_channels]`.\n              2. Extracts image patches from the input tensor to form a *virtual*\n                 tensor of shape `[batch, out_height, out_width,\n                 filter_height * filter_width * in_channels]`.\n              3. For each patch, right-multiplies the filter matrix and the image patch\n                 vector.\n              \n              In detail, with the default NHWC format,\n              \n                  output[b, i, j, k] =\n                      sum_{di, dj, q} input[b, strides[1] * i + di, strides[2] * j + dj, q] *\n                                      filter[di, dj, q, k]\n              \n              Must have `strides[0] = strides[3] = 1`.  For the most common case of the same\n              horizontal and vertices strides, `strides = [1, stride, stride, 1]`."
  syntax:
    content: public TensorFlow.TFOutput Conv2D (TensorFlow.TFOutput input, TensorFlow.TFOutput filter, long[] strides, string padding, Nullable<bool> use_cudnn_on_gpu = null, string data_format = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: >-
        A 4-D tensor. The dimension order is interpreted according to the value
                      of `data_format`, see below for details.
    - id: filter
      type: TensorFlow.TFOutput
      description: >-
        A 4-D tensor of shape
                      `[filter_height, filter_width, in_channels, out_channels]`
    - id: strides
      type: System.Int64[]
      description: >-
        1-D tensor of length 4.  The stride of the sliding window for each
                      dimension of `input`. The dimension order is determined by the value of
                        `data_format`, see below for details.
    - id: padding
      type: System.String
      description: The type of padding algorithm to use.
    - id: use_cudnn_on_gpu
      type: System.Nullable{System.Boolean}
      description: Optional argument
    - id: data_format
      type: System.String
      description: >-
        Optional argument
                      Specify the data format of the input and output data. With the
                      default format "NHWC", the data is stored in the order of:
                          [batch, height, width, channels].
                      Alternatively, the format could be "NCHW", the data storage order of:
                          [batch, channels, height, width].
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Conv2D'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        A 4-D tensor. The dimension order is determined by the value of
                      `data_format`, see below for details.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Conv2D*
  exceptions: []
- uid: TensorFlow.TFGraph.Conv2DBackpropFilter(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.Nullable{System.Boolean},System.String,System.String)
  id: Conv2DBackpropFilter(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.Nullable{System.Boolean},System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Conv2DBackpropFilter(TFOutput, TFOutput, TFOutput, Int64[], String, Nullable<Boolean>, String, String)
  nameWithType: TFGraph.Conv2DBackpropFilter(TFOutput, TFOutput, TFOutput, Int64[], String, Nullable<Boolean>, String, String)
  fullName: TFGraph.Conv2DBackpropFilter(TFOutput, TFOutput, TFOutput, Int64[], String, Nullable<Boolean>, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the gradients of convolution with respect to the filter.
  syntax:
    content: public TensorFlow.TFOutput Conv2DBackpropFilter (TensorFlow.TFOutput input, TensorFlow.TFOutput filter_sizes, TensorFlow.TFOutput out_backprop, long[] strides, string padding, Nullable<bool> use_cudnn_on_gpu = null, string data_format = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: 4-D with shape `[batch, in_height, in_width, in_channels]`.
    - id: filter_sizes
      type: TensorFlow.TFOutput
      description: >-
        An integer vector representing the tensor shape of `filter`,
                      where `filter` is a 4-D
                      `[filter_height, filter_width, in_channels, out_channels]` tensor.
    - id: out_backprop
      type: TensorFlow.TFOutput
      description: >-
        4-D with shape `[batch, out_height, out_width, out_channels]`.
                      Gradients w.r.t. the output of the convolution.
    - id: strides
      type: System.Int64[]
      description: >-
        The stride of the sliding window for each dimension of the input
                      of the convolution. Must be in the same order as the dimension specified with
                      format.
    - id: padding
      type: System.String
      description: The type of padding algorithm to use.
    - id: use_cudnn_on_gpu
      type: System.Nullable{System.Boolean}
      description: Optional argument
    - id: data_format
      type: System.String
      description: >-
        Optional argument
                      Specify the data format of the input and output data. With the
                      default format "NHWC", the data is stored in the order of:
                          [batch, in_height, in_width, in_channels].
                      Alternatively, the format could be "NCHW", the data storage order of:
                          [batch, in_channels, in_height, in_width].
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Conv2DBackpropFilter'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        4-D with shape
                      `[filter_height, filter_width, in_channels, out_channels]`.  Gradient w.r.t.
                      the `filter` input of the convolution.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Conv2DBackpropFilter*
  exceptions: []
- uid: TensorFlow.TFGraph.Conv2DBackpropInput(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.Nullable{System.Boolean},System.String,System.String)
  id: Conv2DBackpropInput(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.Nullable{System.Boolean},System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Conv2DBackpropInput(TFOutput, TFOutput, TFOutput, Int64[], String, Nullable<Boolean>, String, String)
  nameWithType: TFGraph.Conv2DBackpropInput(TFOutput, TFOutput, TFOutput, Int64[], String, Nullable<Boolean>, String, String)
  fullName: TFGraph.Conv2DBackpropInput(TFOutput, TFOutput, TFOutput, Int64[], String, Nullable<Boolean>, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the gradients of convolution with respect to the input.
  syntax:
    content: public TensorFlow.TFOutput Conv2DBackpropInput (TensorFlow.TFOutput input_sizes, TensorFlow.TFOutput filter, TensorFlow.TFOutput out_backprop, long[] strides, string padding, Nullable<bool> use_cudnn_on_gpu = null, string data_format = null, string operName = null);
    parameters:
    - id: input_sizes
      type: TensorFlow.TFOutput
      description: >-
        An integer vector representing the shape of `input`,
                      where `input` is a 4-D `[batch, height, width, channels]` tensor.
    - id: filter
      type: TensorFlow.TFOutput
      description: >-
        4-D with shape
                      `[filter_height, filter_width, in_channels, out_channels]`.
    - id: out_backprop
      type: TensorFlow.TFOutput
      description: >-
        4-D with shape `[batch, out_height, out_width, out_channels]`.
                      Gradients w.r.t. the output of the convolution.
    - id: strides
      type: System.Int64[]
      description: >-
        The stride of the sliding window for each dimension of the input
                      of the convolution. Must be in the same order as the dimension specified with
                      format.
    - id: padding
      type: System.String
      description: The type of padding algorithm to use.
    - id: use_cudnn_on_gpu
      type: System.Nullable{System.Boolean}
      description: Optional argument
    - id: data_format
      type: System.String
      description: >-
        Optional argument
                      Specify the data format of the input and output data. With the
                      default format "NHWC", the data is stored in the order of:
                          [batch, in_height, in_width, in_channels].
                      Alternatively, the format could be "NCHW", the data storage order of:
                          [batch, in_channels, in_height, in_width].
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Conv2DBackpropInput'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        4-D with shape `[batch, in_height, in_width, in_channels]`.  Gradient
                      w.r.t. the input of the convolution.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Conv2DBackpropInput*
  exceptions: []
- uid: TensorFlow.TFGraph.Conv3D(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.String,System.String)
  id: Conv3D(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Conv3D(TFOutput, TFOutput, Int64[], String, String, String)
  nameWithType: TFGraph.Conv3D(TFOutput, TFOutput, Int64[], String, String, String)
  fullName: TFGraph.Conv3D(TFOutput, TFOutput, Int64[], String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes a 3-D convolution given 5-D `input` and `filter` tensors.
  remarks: "In signal processing, cross-correlation is a measure of similarity of\n              two waveforms as a function of a time-lag applied to one of them. This\n              is also known as a sliding dot product or sliding inner-product.\n              \n              Our Conv3D implements a form of cross-correlation."
  syntax:
    content: public TensorFlow.TFOutput Conv3D (TensorFlow.TFOutput input, TensorFlow.TFOutput filter, long[] strides, string padding, string data_format = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: Shape `[batch, in_depth, in_height, in_width, in_channels]`.
    - id: filter
      type: TensorFlow.TFOutput
      description: >-
        Shape `[filter_depth, filter_height, filter_width, in_channels,
                      out_channels]`. `in_channels` must match between `input` and `filter`.
    - id: strides
      type: System.Int64[]
      description: >-
        1-D tensor of length 5. The stride of the sliding window for each
                      dimension of `input`. Must have `strides[0] = strides[4] = 1`.
    - id: padding
      type: System.String
      description: The type of padding algorithm to use.
    - id: data_format
      type: System.String
      description: >-
        Optional argument
                      The data format of the input and output data. With the
                      default format "NDHWC", the data is stored in the order of:
                          [batch, in_depth, in_height, in_width, in_channels].
                      Alternatively, the format could be "NCDHW", the data storage order is:
                          [batch, in_channels, in_depth, in_height, in_width].
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Conv3D'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Conv3D*
  exceptions: []
- uid: TensorFlow.TFGraph.Conv3DBackpropFilter(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.String)
  id: Conv3DBackpropFilter(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Conv3DBackpropFilter(TFOutput, TFOutput, TFOutput, Int64[], String, String)
  nameWithType: TFGraph.Conv3DBackpropFilter(TFOutput, TFOutput, TFOutput, Int64[], String, String)
  fullName: TFGraph.Conv3DBackpropFilter(TFOutput, TFOutput, TFOutput, Int64[], String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the gradients of 3-D convolution with respect to the filter.
  syntax:
    content: public TensorFlow.TFOutput Conv3DBackpropFilter (TensorFlow.TFOutput input, TensorFlow.TFOutput filter, TensorFlow.TFOutput out_backprop, long[] strides, string padding, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: Shape `[batch, depth, rows, cols, in_channels]`.
    - id: filter
      type: TensorFlow.TFOutput
      description: >-
        Shape `[depth, rows, cols, in_channels, out_channels]`.
                      `in_channels` must match between `input` and `filter`.
    - id: out_backprop
      type: TensorFlow.TFOutput
      description: >-
        Backprop signal of shape `[batch, out_depth, out_rows, out_cols,
                      out_channels]`.
    - id: strides
      type: System.Int64[]
      description: >-
        1-D tensor of length 5. The stride of the sliding window for each
                      dimension of `input`. Must have `strides[0] = strides[4] = 1`.
    - id: padding
      type: System.String
      description: The type of padding algorithm to use.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Conv3DBackpropFilter'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Conv3DBackpropFilter*
  exceptions: []
- uid: TensorFlow.TFGraph.Conv3DBackpropFilterV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.String,System.String)
  id: Conv3DBackpropFilterV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Conv3DBackpropFilterV2(TFOutput, TFOutput, TFOutput, Int64[], String, String, String)
  nameWithType: TFGraph.Conv3DBackpropFilterV2(TFOutput, TFOutput, TFOutput, Int64[], String, String, String)
  fullName: TFGraph.Conv3DBackpropFilterV2(TFOutput, TFOutput, TFOutput, Int64[], String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the gradients of 3-D convolution with respect to the filter.
  syntax:
    content: public TensorFlow.TFOutput Conv3DBackpropFilterV2 (TensorFlow.TFOutput input, TensorFlow.TFOutput filter_sizes, TensorFlow.TFOutput out_backprop, long[] strides, string padding, string data_format = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: Shape `[batch, depth, rows, cols, in_channels]`.
    - id: filter_sizes
      type: TensorFlow.TFOutput
      description: >-
        An integer vector representing the tensor shape of `filter`,
                      where `filter` is a 5-D
                      `[filter_depth, filter_height, filter_width, in_channels, out_channels]`
                      tensor.
    - id: out_backprop
      type: TensorFlow.TFOutput
      description: >-
        Backprop signal of shape `[batch, out_depth, out_rows, out_cols,
                      out_channels]`.
    - id: strides
      type: System.Int64[]
      description: >-
        1-D tensor of length 5. The stride of the sliding window for each
                      dimension of `input`. Must have `strides[0] = strides[4] = 1`.
    - id: padding
      type: System.String
      description: The type of padding algorithm to use.
    - id: data_format
      type: System.String
      description: >-
        Optional argument
                      The data format of the input and output data. With the
                      default format "NDHWC", the data is stored in the order of:
                          [batch, in_depth, in_height, in_width, in_channels].
                      Alternatively, the format could be "NCDHW", the data storage order is:
                          [batch, in_channels, in_depth, in_height, in_width].
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Conv3DBackpropFilterV2'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Conv3DBackpropFilterV2*
  exceptions: []
- uid: TensorFlow.TFGraph.Conv3DBackpropInput(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.String)
  id: Conv3DBackpropInput(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Conv3DBackpropInput(TFOutput, TFOutput, TFOutput, Int64[], String, String)
  nameWithType: TFGraph.Conv3DBackpropInput(TFOutput, TFOutput, TFOutput, Int64[], String, String)
  fullName: TFGraph.Conv3DBackpropInput(TFOutput, TFOutput, TFOutput, Int64[], String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the gradients of 3-D convolution with respect to the input.
  syntax:
    content: public TensorFlow.TFOutput Conv3DBackpropInput (TensorFlow.TFOutput input, TensorFlow.TFOutput filter, TensorFlow.TFOutput out_backprop, long[] strides, string padding, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: Shape `[batch, depth, rows, cols, in_channels]`.
    - id: filter
      type: TensorFlow.TFOutput
      description: >-
        Shape `[depth, rows, cols, in_channels, out_channels]`.
                      `in_channels` must match between `input` and `filter`.
    - id: out_backprop
      type: TensorFlow.TFOutput
      description: >-
        Backprop signal of shape `[batch, out_depth, out_rows, out_cols,
                      out_channels]`.
    - id: strides
      type: System.Int64[]
      description: >-
        1-D tensor of length 5. The stride of the sliding window for each
                      dimension of `input`. Must have `strides[0] = strides[4] = 1`.
    - id: padding
      type: System.String
      description: The type of padding algorithm to use.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Conv3DBackpropInput'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Conv3DBackpropInput*
  exceptions: []
- uid: TensorFlow.TFGraph.Conv3DBackpropInputV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.String,System.String)
  id: Conv3DBackpropInputV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Conv3DBackpropInputV2(TFOutput, TFOutput, TFOutput, Int64[], String, String, String)
  nameWithType: TFGraph.Conv3DBackpropInputV2(TFOutput, TFOutput, TFOutput, Int64[], String, String, String)
  fullName: TFGraph.Conv3DBackpropInputV2(TFOutput, TFOutput, TFOutput, Int64[], String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the gradients of 3-D convolution with respect to the input.
  syntax:
    content: public TensorFlow.TFOutput Conv3DBackpropInputV2 (TensorFlow.TFOutput input_sizes, TensorFlow.TFOutput filter, TensorFlow.TFOutput out_backprop, long[] strides, string padding, string data_format = null, string operName = null);
    parameters:
    - id: input_sizes
      type: TensorFlow.TFOutput
      description: >-
        An integer vector representing the tensor shape of `input`,
                      where `input` is a 5-D
                      `[batch, depth, rows, cols, in_channels]` tensor.
    - id: filter
      type: TensorFlow.TFOutput
      description: >-
        Shape `[depth, rows, cols, in_channels, out_channels]`.
                      `in_channels` must match between `input` and `filter`.
    - id: out_backprop
      type: TensorFlow.TFOutput
      description: >-
        Backprop signal of shape `[batch, out_depth, out_rows, out_cols,
                      out_channels]`.
    - id: strides
      type: System.Int64[]
      description: >-
        1-D tensor of length 5. The stride of the sliding window for each
                      dimension of `input`. Must have `strides[0] = strides[4] = 1`.
    - id: padding
      type: System.String
      description: The type of padding algorithm to use.
    - id: data_format
      type: System.String
      description: >-
        Optional argument
                      The data format of the input and output data. With the
                      default format "NDHWC", the data is stored in the order of:
                          [batch, in_depth, in_height, in_width, in_channels].
                      Alternatively, the format could be "NCDHW", the data storage order is:
                          [batch, in_channels, in_depth, in_height, in_width].
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Conv3DBackpropInputV2'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Conv3DBackpropInputV2*
  exceptions: []
- uid: TensorFlow.TFGraph.Cos(TensorFlow.TFOutput,System.String)
  id: Cos(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Cos(TFOutput, String)
  nameWithType: TFGraph.Cos(TFOutput, String)
  fullName: TFGraph.Cos(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes cos of x element-wise.
  syntax:
    content: public TensorFlow.TFOutput Cos (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Cos'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Cos*
  exceptions: []
- uid: TensorFlow.TFGraph.Cosh(TensorFlow.TFOutput,System.String)
  id: Cosh(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Cosh(TFOutput, String)
  nameWithType: TFGraph.Cosh(TFOutput, String)
  fullName: TFGraph.Cosh(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes hyperbolic cosine of x element-wise.
  syntax:
    content: public TensorFlow.TFOutput Cosh (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Cosh'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Cosh*
  exceptions: []
- uid: TensorFlow.TFGraph.CropAndResize(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.Nullable{System.Single},System.String)
  id: CropAndResize(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.Nullable{System.Single},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: CropAndResize(TFOutput, TFOutput, TFOutput, TFOutput, String, Nullable<Single>, String)
  nameWithType: TFGraph.CropAndResize(TFOutput, TFOutput, TFOutput, TFOutput, String, Nullable<Single>, String)
  fullName: TFGraph.CropAndResize(TFOutput, TFOutput, TFOutput, TFOutput, String, Nullable<Single>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Extracts crops from the input image tensor and bilinearly resizes them (possibly
  remarks: "with aspect ratio change) to a common output size specified by `crop_size`. This\n              is more general than the `crop_to_bounding_box` op which extracts a fixed size\n              slice from the input image and does not allow resizing or aspect ratio change.\n              \n              Returns a tensor with `crops` from the input `image` at positions defined at the\n              bounding box locations in `boxes`. The cropped boxes are all resized (with\n              bilinear interpolation) to a fixed `size = [crop_height, crop_width]`. The\n              result is a 4-D tensor `[num_boxes, crop_height, crop_width, depth]`."
  syntax:
    content: public TensorFlow.TFOutput CropAndResize (TensorFlow.TFOutput image, TensorFlow.TFOutput boxes, TensorFlow.TFOutput box_ind, TensorFlow.TFOutput crop_size, string method = null, Nullable<float> extrapolation_value = null, string operName = null);
    parameters:
    - id: image
      type: TensorFlow.TFOutput
      description: >-
        A 4-D tensor of shape `[batch, image_height, image_width, depth]`.
                      Both `image_height` and `image_width` need to be positive.
    - id: boxes
      type: TensorFlow.TFOutput
      description: >-
        A 2-D tensor of shape `[num_boxes, 4]`. The `i`-th row of the tensor
                      specifies the coordinates of a box in the `box_ind[i]` image and is specified
                      in normalized coordinates `[y1, x1, y2, x2]`. A normalized coordinate value of
                      `y` is mapped to the image coordinate at `y * (image_height - 1)`, so as the
                      `[0, 1]` interval of normalized image height is mapped to
                      `[0, image_height - 1]` in image height coordinates. We do allow `y1` &gt; `y2`, in
                      which case the sampled crop is an up-down flipped version of the original
                      image. The width dimension is treated similarly. Normalized coordinates
                      outside the `[0, 1]` range are allowed, in which case we use
                      `extrapolation_value` to extrapolate the input image values.
    - id: box_ind
      type: TensorFlow.TFOutput
      description: >-
        A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.
                      The value of `box_ind[i]` specifies the image that the `i`-th box refers to.
    - id: crop_size
      type: TensorFlow.TFOutput
      description: >-
        A 1-D tensor of 2 elements, `size = [crop_height, crop_width]`. All
                      cropped image patches are resized to this size. The aspect ratio of the image
                      content is not preserved. Both `crop_height` and `crop_width` need to be
                      positive.
    - id: method
      type: System.String
      description: >-
        Optional argument
                      A string specifying the interpolation method. Only 'bilinear' is
                      supported for now.
    - id: extrapolation_value
      type: System.Nullable{System.Single}
      description: >-
        Optional argument
                      Value used for extrapolation, when applicable.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'CropAndResize'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        A 4-D tensor of shape `[num_boxes, crop_height, crop_width, depth]`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.CropAndResize*
  exceptions: []
- uid: TensorFlow.TFGraph.CropAndResizeGradBoxes(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String)
  id: CropAndResizeGradBoxes(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: CropAndResizeGradBoxes(TFOutput, TFOutput, TFOutput, TFOutput, String, String)
  nameWithType: TFGraph.CropAndResizeGradBoxes(TFOutput, TFOutput, TFOutput, TFOutput, String, String)
  fullName: TFGraph.CropAndResizeGradBoxes(TFOutput, TFOutput, TFOutput, TFOutput, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the gradient of the crop_and_resize op wrt the input boxes tensor.
  syntax:
    content: public TensorFlow.TFOutput CropAndResizeGradBoxes (TensorFlow.TFOutput grads, TensorFlow.TFOutput image, TensorFlow.TFOutput boxes, TensorFlow.TFOutput box_ind, string method = null, string operName = null);
    parameters:
    - id: grads
      type: TensorFlow.TFOutput
      description: A 4-D tensor of shape `[num_boxes, crop_height, crop_width, depth]`.
    - id: image
      type: TensorFlow.TFOutput
      description: >-
        A 4-D tensor of shape `[batch, image_height, image_width, depth]`.
                      Both `image_height` and `image_width` need to be positive.
    - id: boxes
      type: TensorFlow.TFOutput
      description: >-
        A 2-D tensor of shape `[num_boxes, 4]`. The `i`-th row of the tensor
                      specifies the coordinates of a box in the `box_ind[i]` image and is specified
                      in normalized coordinates `[y1, x1, y2, x2]`. A normalized coordinate value of
                      `y` is mapped to the image coordinate at `y * (image_height - 1)`, so as the
                      `[0, 1]` interval of normalized image height is mapped to
                      `[0, image_height - 1] in image height coordinates. We do allow y1 &gt; y2, in
                      which case the sampled crop is an up-down flipped version of the original
                      image. The width dimension is treated similarly. Normalized coordinates
                      outside the `[0, 1]` range are allowed, in which case we use
                      `extrapolation_value` to extrapolate the input image values.
    - id: box_ind
      type: TensorFlow.TFOutput
      description: >-
        A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.
                      The value of `box_ind[i]` specifies the image that the `i`-th box refers to.
    - id: method
      type: System.String
      description: >-
        Optional argument
                      A string specifying the interpolation method. Only 'bilinear' is
                      supported for now.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'CropAndResizeGradBoxes'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        A 2-D tensor of shape `[num_boxes, 4]`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.CropAndResizeGradBoxes*
  exceptions: []
- uid: TensorFlow.TFGraph.CropAndResizeGradImage(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.String,System.String)
  id: CropAndResizeGradImage(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: CropAndResizeGradImage(TFOutput, TFOutput, TFOutput, TFOutput, TFDataType, String, String)
  nameWithType: TFGraph.CropAndResizeGradImage(TFOutput, TFOutput, TFOutput, TFOutput, TFDataType, String, String)
  fullName: TFGraph.CropAndResizeGradImage(TFOutput, TFOutput, TFOutput, TFOutput, TFDataType, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the gradient of the crop_and_resize op wrt the input image tensor.
  syntax:
    content: public TensorFlow.TFOutput CropAndResizeGradImage (TensorFlow.TFOutput grads, TensorFlow.TFOutput boxes, TensorFlow.TFOutput box_ind, TensorFlow.TFOutput image_size, TensorFlow.TFDataType T, string method = null, string operName = null);
    parameters:
    - id: grads
      type: TensorFlow.TFOutput
      description: A 4-D tensor of shape `[num_boxes, crop_height, crop_width, depth]`.
    - id: boxes
      type: TensorFlow.TFOutput
      description: >-
        A 2-D tensor of shape `[num_boxes, 4]`. The `i`-th row of the tensor
                      specifies the coordinates of a box in the `box_ind[i]` image and is specified
                      in normalized coordinates `[y1, x1, y2, x2]`. A normalized coordinate value of
                      `y` is mapped to the image coordinate at `y * (image_height - 1)`, so as the
                      `[0, 1]` interval of normalized image height is mapped to
                      `[0, image_height - 1] in image height coordinates. We do allow y1 &gt; y2, in
                      which case the sampled crop is an up-down flipped version of the original
                      image. The width dimension is treated similarly. Normalized coordinates
                      outside the `[0, 1]` range are allowed, in which case we use
                      `extrapolation_value` to extrapolate the input image values.
    - id: box_ind
      type: TensorFlow.TFOutput
      description: >-
        A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.
                      The value of `box_ind[i]` specifies the image that the `i`-th box refers to.
    - id: image_size
      type: TensorFlow.TFOutput
      description: >-
        A 1-D tensor with value `[batch, image_height, image_width, depth]`
                      containing the original image size. Both `image_height` and `image_width` need
                      to be positive.
    - id: T
      type: TensorFlow.TFDataType
      description: To be added.
    - id: method
      type: System.String
      description: >-
        Optional argument
                      A string specifying the interpolation method. Only 'bilinear' is
                      supported for now.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'CropAndResizeGradImage'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        A 4-D tensor of shape `[batch, image_height, image_width, depth]`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.CropAndResizeGradImage*
  exceptions: []
- uid: TensorFlow.TFGraph.Cross(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: Cross(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Cross(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Cross(TFOutput, TFOutput, String)
  fullName: TFGraph.Cross(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Compute the pairwise cross product.
  remarks: >-
    `a` and `b` must be the same shape; they can either be simple 3-element vectors,
                  or any shape where the innermost dimension is 3. In the latter case, each pair
                  of corresponding 3-element vectors is cross-multiplied independently.
  syntax:
    content: public TensorFlow.TFOutput Cross (TensorFlow.TFOutput a, TensorFlow.TFOutput b, string operName = null);
    parameters:
    - id: a
      type: TensorFlow.TFOutput
      description: A tensor containing 3-element vectors.
    - id: b
      type: TensorFlow.TFOutput
      description: Another tensor, of same type and shape as `a`.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Cross'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Pairwise cross product of the vectors in `a` and `b`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Cross*
  exceptions: []
- uid: TensorFlow.TFGraph.CTCBeamSearchDecoder(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.Int64,System.Nullable{System.Boolean},System.String)
  id: CTCBeamSearchDecoder(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.Int64,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: CTCBeamSearchDecoder(TFOutput, TFOutput, Int64, Int64, Nullable<Boolean>, String)
  nameWithType: TFGraph.CTCBeamSearchDecoder(TFOutput, TFOutput, Int64, Int64, Nullable<Boolean>, String)
  fullName: TFGraph.CTCBeamSearchDecoder(TFOutput, TFOutput, Int64, Int64, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Performs beam search decoding on the logits given in input.
  remarks: >-
    A note about the attribute merge_repeated: For the beam search decoder,
                  this means that if consecutive entries in a beam are the same, only
                  the first of these is emitted.  That is, when the top path is "A B B B B",
                  "A B" is returned if merge_repeated = True but "A B B B B" is
                  returned if merge_repeated = False.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput> CTCBeamSearchDecoder (TensorFlow.TFOutput inputs, TensorFlow.TFOutput sequence_length, long beam_width, long top_paths, Nullable<bool> merge_repeated = null, string operName = null);
    parameters:
    - id: inputs
      type: TensorFlow.TFOutput
      description: '3-D, shape: `(max_time x batch_size x num_classes)`, the logits.'
    - id: sequence_length
      type: TensorFlow.TFOutput
      description: A vector containing sequence lengths, size `(batch)`.
    - id: beam_width
      type: System.Int64
      description: A scalar &gt;= 0 (beam search beam width).
    - id: top_paths
      type: System.Int64
      description: A scalar &gt;= 0, &lt;= beam_width (controls output size).
    - id: merge_repeated
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true, merge repeated classes in output.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'CTCBeamSearchDecoder'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      decoded_indices: A list (length: top_paths) of indices matrices.  Matrix j,
                      size `(total_decoded_outputs[j] x 2)`, has indices of a
                      `SparseTensor&lt;int64, 2&gt;`.  The rows store: [batch, time].
                      decoded_values: A list (length: top_paths) of values vectors.  Vector j,
                      size `(length total_decoded_outputs[j])`, has the values of a
                      `SparseTensor&lt;int64, 2&gt;`.  The vector stores the decoded classes for beam j.
                      decoded_shape: A list (length: top_paths) of shape vector.  Vector j,
                      size `(2)`, stores the shape of the decoded `SparseTensor[j]`.
                      Its values are: `[batch_size, max_decoded_length[j]]`.
                      log_probability: A matrix, shaped: `(batch_size x top_paths)`.  The
                      sequence log-probabilities.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.CTCBeamSearchDecoder*
  exceptions: []
- uid: TensorFlow.TFGraph.CTCGreedyDecoder(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: CTCGreedyDecoder(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: CTCGreedyDecoder(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.CTCGreedyDecoder(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.CTCGreedyDecoder(TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Performs greedy decoding on the logits given in inputs.
  remarks: "A note about the attribute merge_repeated: if enabled, when\n              consecutive logits' maximum indices are the same, only the first of\n              these is emitted.  Labeling the blank '*', the sequence \"A B B * B B\"\n              becomes \"A B B\" if merge_repeated = True and \"A B B B B\" if\n              merge_repeated = False.\n              \n              Regardless of the value of merge_repeated, if the maximum index of a given\n              time and batch corresponds to the blank, index `(num_classes - 1)`, no new\n              element is emitted."
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> CTCGreedyDecoder (TensorFlow.TFOutput inputs, TensorFlow.TFOutput sequence_length, Nullable<bool> merge_repeated = null, string operName = null);
    parameters:
    - id: inputs
      type: TensorFlow.TFOutput
      description: '3-D, shape: `(max_time x batch_size x num_classes)`, the logits.'
    - id: sequence_length
      type: TensorFlow.TFOutput
      description: A vector containing sequence lengths, size `(batch_size)`.
    - id: merge_repeated
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If True, merge repeated classes in output.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'CTCGreedyDecoder'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      decoded_indices: Indices matrix, size `(total_decoded_outputs x 2)`,
                      of a `SparseTensor&lt;int64, 2&gt;`.  The rows store: [batch, time].
                      decoded_values: Values vector, size: `(total_decoded_outputs)`,
                      of a `SparseTensor&lt;int64, 2&gt;`.  The vector stores the decoded classes.
                      decoded_shape: Shape vector, size `(2)`, of the decoded SparseTensor.
                      Values are: `[batch_size, max_decoded_length]`.
                      log_probability: Matrix, size `(batch_size x 1)`, containing sequence
                      log-probabilities.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.CTCGreedyDecoder*
  exceptions: []
- uid: TensorFlow.TFGraph.CTCLoss(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  id: CTCLoss(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: CTCLoss(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, String)
  nameWithType: TFGraph.CTCLoss(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, String)
  fullName: TFGraph.CTCLoss(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Calculates the CTC Loss (log probability) for each batch entry.  Also calculates
  remarks: >-
    the gradient.  This class performs the softmax operation for you, so inputs
                  should be e.g. linear projections of outputs by an LSTM.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput> CTCLoss (TensorFlow.TFOutput inputs, TensorFlow.TFOutput labels_indices, TensorFlow.TFOutput labels_values, TensorFlow.TFOutput sequence_length, Nullable<bool> preprocess_collapse_repeated = null, Nullable<bool> ctc_merge_repeated = null, Nullable<bool> ignore_longer_outputs_than_inputs = null, string operName = null);
    parameters:
    - id: inputs
      type: TensorFlow.TFOutput
      description: '3-D, shape: `(max_time x batch_size x num_classes)`, the logits.'
    - id: labels_indices
      type: TensorFlow.TFOutput
      description: >-
        The indices of a `SparseTensor&lt;int32, 2&gt;`.
                      `labels_indices(i, :) == [b, t]` means `labels_values(i)` stores the id for
                      `(batch b, time t)`.
    - id: labels_values
      type: TensorFlow.TFOutput
      description: The values (labels) associated with the given batch and time.
    - id: sequence_length
      type: TensorFlow.TFOutput
      description: A vector containing sequence lengths (batch).
    - id: preprocess_collapse_repeated
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      Scalar, if true then repeated labels are
                      collapsed prior to the CTC calculation.
    - id: ctc_merge_repeated
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      Scalar.  If set to false, *during* CTC calculation
                      repeated non-blank labels will not be merged and are interpreted as
                      individual labels.  This is a simplified version of CTC.
    - id: ignore_longer_outputs_than_inputs
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      Scalar. If set to true, during CTC
                      calculation, items that have longer output sequences than input sequences
                      are skipped: they don't contribute to the loss term and have zero-gradient.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'CTCLoss'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      loss: A vector (batch) containing log-probabilities.
                      gradient: The gradient of `loss`.  3-D, shape:
                      `(max_time x batch_size x num_classes)`.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.CTCLoss*
  exceptions: []
- uid: TensorFlow.TFGraph.Cumprod(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  id: Cumprod(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Cumprod(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  nameWithType: TFGraph.Cumprod(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  fullName: TFGraph.Cumprod(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Compute the cumulative product of the tensor `x` along `axis`.
  remarks: "By default, this op performs an inclusive cumprod, which means that the first\n              element of the input is identical to the first element of the output:\n              \n              ```python\n              tf.cumprod([a, b, c])  # =&gt; [a, a * b, a * b * c]\n              ```\n              \n              By setting the `exclusive` kwarg to `True`, an exclusive cumprod is\n              performed instead:\n              \n              ```python\n              tf.cumprod([a, b, c], exclusive=True)  # =&gt; [1, a, a * b]\n              ```\n              \n              By setting the `reverse` kwarg to `True`, the cumprod is performed in the\n              opposite direction:\n              \n              ```python\n              tf.cumprod([a, b, c], reverse=True)  # =&gt; [a * b * c, b * c, c]\n              ```\n              \n              This is more efficient than using separate `tf.reverse` ops.\n              \n              The `reverse` and `exclusive` kwargs can also be combined:\n              \n              ```python\n              tf.cumprod([a, b, c], exclusive=True, reverse=True)  # =&gt; [b * c, c, 1]\n              ```"
  syntax:
    content: public TensorFlow.TFOutput Cumprod (TensorFlow.TFOutput x, TensorFlow.TFOutput axis, Nullable<bool> exclusive = null, Nullable<bool> reverse = null, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: axis
      type: TensorFlow.TFOutput
      description: To be added.
    - id: exclusive
      type: System.Nullable{System.Boolean}
      description: Optional argument
    - id: reverse
      type: System.Nullable{System.Boolean}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Cumprod'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Cumprod*
  exceptions: []
- uid: TensorFlow.TFGraph.Cumsum(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  id: Cumsum(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Cumsum(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  nameWithType: TFGraph.Cumsum(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  fullName: TFGraph.Cumsum(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Compute the cumulative sum of the tensor `x` along `axis`.
  remarks: "By default, this op performs an inclusive cumsum, which means that the first\n              element of the input is identical to the first element of the output:\n              \n              ```python\n              tf.cumsum([a, b, c])  # =&gt; [a, a + b, a + b + c]\n              ```\n              \n              By setting the `exclusive` kwarg to `True`, an exclusive cumsum is\n              performed instead:\n              \n              ```python\n              tf.cumsum([a, b, c], exclusive=True)  # =&gt; [0, a, a + b]\n              ```\n              \n              By setting the `reverse` kwarg to `True`, the cumsum is performed in the\n              opposite direction:\n              \n              ```python\n              tf.cumsum([a, b, c], reverse=True)  # =&gt; [a + b + c, b + c, c]\n              ```\n              \n              This is more efficient than using separate `tf.reverse` ops.\n              \n              The `reverse` and `exclusive` kwargs can also be combined:\n              \n              ```python\n              tf.cumsum([a, b, c], exclusive=True, reverse=True)  # =&gt; [b + c, c, 0]\n              ```"
  syntax:
    content: public TensorFlow.TFOutput Cumsum (TensorFlow.TFOutput x, TensorFlow.TFOutput axis, Nullable<bool> exclusive = null, Nullable<bool> reverse = null, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: axis
      type: TensorFlow.TFOutput
      description: To be added.
    - id: exclusive
      type: System.Nullable{System.Boolean}
      description: Optional argument
    - id: reverse
      type: System.Nullable{System.Boolean}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Cumsum'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Cumsum*
  exceptions: []
- uid: TensorFlow.TFGraph.CurrentNameScope
  id: CurrentNameScope
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: CurrentNameScope
  nameWithType: TFGraph.CurrentNameScope
  fullName: TFGraph.CurrentNameScope
  type: Property
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns the current name scope in use, to change this, use the WithScope method.
  syntax:
    content: public string CurrentNameScope { get; }
    return:
      type: System.String
      description: The current name scope.
  overload: TensorFlow.TFGraph.CurrentNameScope*
  exceptions: []
- uid: TensorFlow.TFGraph.DecodeBase64(TensorFlow.TFOutput,System.String)
  id: DecodeBase64(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: DecodeBase64(TFOutput, String)
  nameWithType: TFGraph.DecodeBase64(TFOutput, String)
  fullName: TFGraph.DecodeBase64(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Decode web-safe base64-encoded strings.
  remarks: >-
    Input may or may not have padding at the end. See EncodeBase64 for padding.
                  Web-safe means that input must use - and _ instead of + and /.
  syntax:
    content: public TensorFlow.TFOutput DecodeBase64 (TensorFlow.TFOutput input, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: Base64 strings to decode.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'DecodeBase64'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Decoded strings.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.DecodeBase64*
  exceptions: []
- uid: TensorFlow.TFGraph.DecodeBmp(TensorFlow.TFOutput,System.Nullable{System.Int64},System.String)
  id: DecodeBmp(TensorFlow.TFOutput,System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: DecodeBmp(TFOutput, Nullable<Int64>, String)
  nameWithType: TFGraph.DecodeBmp(TFOutput, Nullable<Int64>, String)
  fullName: TFGraph.DecodeBmp(TFOutput, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Decode the first frame of a BMP-encoded image to a uint8 tensor.
  remarks: "The attr `channels` indicates the desired number of color channels for the\n              decoded image.\n              \n              Accepted values are:\n              \n              *   0: Use the number of channels in the BMP-encoded image.\n              *   3: output an RGB image.\n              *   4: output an RGBA image."
  syntax:
    content: public TensorFlow.TFOutput DecodeBmp (TensorFlow.TFOutput contents, Nullable<long> channels = null, string operName = null);
    parameters:
    - id: contents
      type: TensorFlow.TFOutput
      description: 0-D.  The BMP-encoded image.
    - id: channels
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'DecodeBmp'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        3-D with shape `[height, width, channels]`. RGB order
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.DecodeBmp*
  exceptions: []
- uid: TensorFlow.TFGraph.DecodeCSV(TensorFlow.TFOutput,TensorFlow.TFOutput[],System.String,System.String)
  id: DecodeCSV(TensorFlow.TFOutput,TensorFlow.TFOutput[],System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: DecodeCSV(TFOutput, TFOutput[], String, String)
  nameWithType: TFGraph.DecodeCSV(TFOutput, TFOutput[], String, String)
  fullName: TFGraph.DecodeCSV(TFOutput, TFOutput[], String, String)
  type: Method
  assemblies: []
  namespace: TensorFlow
  summary: Convert CSV records to tensors. Each column maps to one tensor.
  remarks: >-
    RFC 4180 format is expected for the CSV records.
                  (https://tools.ietf.org/html/rfc4180)
                  Note that we allow leading and trailing spaces with int or float field.
  syntax:
    content: public TensorFlow.TFOutput[] DecodeCSV (TensorFlow.TFOutput records, TensorFlow.TFOutput[] record_defaults, string field_delim = null, string operName = null);
    parameters:
    - id: records
      type: TensorFlow.TFOutput
      description: >-
        Each string is a record/row in the csv and all records should have
                      the same format.
    - id: record_defaults
      type: TensorFlow.TFOutput[]
      description: >-
        One tensor per column of the input record, with either a
                      scalar default value for that column or empty if the column is required.
    - id: field_delim
      type: System.String
      description: >-
        Optional argument
                      delimiter to separate fields in a record.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'DecodeCSV'.
    return:
      type: TensorFlow.TFOutput[]
      description: >-
        Each tensor will have the same shape as records.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.DecodeCSV*
  exceptions: []
- uid: TensorFlow.TFGraph.DecodeCSV(TensorFlow.TFOutput,TensorFlow.TFOutput[],System.String,System.Nullable{System.Boolean},System.String)
  id: DecodeCSV(TensorFlow.TFOutput,TensorFlow.TFOutput[],System.String,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: DecodeCSV(TFOutput, TFOutput[], String, Nullable<Boolean>, String)
  nameWithType: TFGraph.DecodeCSV(TFOutput, TFOutput[], String, Nullable<Boolean>, String)
  fullName: TFGraph.DecodeCSV(TFOutput, TFOutput[], String, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Convert CSV records to tensors. Each column maps to one tensor.
  remarks: >-
    RFC 4180 format is expected for the CSV records.
                  (https://tools.ietf.org/html/rfc4180)
                  Note that we allow leading and trailing spaces with int or float field.
  syntax:
    content: public TensorFlow.TFOutput[] DecodeCSV (TensorFlow.TFOutput records, TensorFlow.TFOutput[] record_defaults, string field_delim = null, Nullable<bool> use_quote_delim = null, string operName = null);
    parameters:
    - id: records
      type: TensorFlow.TFOutput
      description: >-
        Each string is a record/row in the csv and all records should have
                      the same format.
    - id: record_defaults
      type: TensorFlow.TFOutput[]
      description: >-
        One tensor per column of the input record, with either a
                      scalar default value for that column or empty if the column is required.
    - id: field_delim
      type: System.String
      description: >-
        Optional argument
                      char delimiter to separate fields in a record.
    - id: use_quote_delim
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If false, treats double quotation marks as regular
                      characters inside of the string fields (ignoring RFC 4180, Section 2,
                      Bullet 5).
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'DecodeCSV'.
    return:
      type: TensorFlow.TFOutput[]
      description: >-
        Each tensor will have the same shape as records.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.DecodeCSV*
  exceptions: []
- uid: TensorFlow.TFGraph.DecodeGif(TensorFlow.TFOutput,System.String)
  id: DecodeGif(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: DecodeGif(TFOutput, String)
  nameWithType: TFGraph.DecodeGif(TFOutput, String)
  fullName: TFGraph.DecodeGif(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Decode the first frame of a GIF-encoded image to a uint8 tensor.
  remarks: "GIF with frame or transparency compression are not supported\n              convert animated GIF from compressed to uncompressed by:\n              \n                  convert $src.gif -coalesce $dst.gif\n              \n              This op also supports decoding JPEGs and PNGs, though it is cleaner to use\n              `tf.image.decode_image`."
  syntax:
    content: public TensorFlow.TFOutput DecodeGif (TensorFlow.TFOutput contents, string operName = null);
    parameters:
    - id: contents
      type: TensorFlow.TFOutput
      description: 0-D.  The GIF-encoded image.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'DecodeGif'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        4-D with shape `[num_frames, height, width, 3]`. RGB order
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.DecodeGif*
  exceptions: []
- uid: TensorFlow.TFGraph.DecodeJpeg(TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Single},System.String,System.String)
  id: DecodeJpeg(TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Single},System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: DecodeJpeg(TFOutput, Nullable<Int64>, Nullable<Int64>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Single>, String, String)
  nameWithType: TFGraph.DecodeJpeg(TFOutput, Nullable<Int64>, Nullable<Int64>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Single>, String, String)
  fullName: TFGraph.DecodeJpeg(TFOutput, Nullable<Int64>, Nullable<Int64>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Single>, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Decode a JPEG-encoded image to a uint8 tensor.
  remarks: "The attr `channels` indicates the desired number of color channels for the\n              decoded image.\n              \n              Accepted values are:\n              \n              *   0: Use the number of channels in the JPEG-encoded image.\n              *   1: output a grayscale image.\n              *   3: output an RGB image.\n              \n              If needed, the JPEG-encoded image is transformed to match the requested number\n              of color channels.\n              \n              The attr `ratio` allows downscaling the image by an integer factor during\n              decoding.  Allowed values are: 1, 2, 4, and 8.  This is much faster than\n              downscaling the image later.\n              \n              This op also supports decoding PNGs and non-animated GIFs since the interface is\n              the same, though it is cleaner to use `tf.image.decode_image`."
  syntax:
    content: public TensorFlow.TFOutput DecodeJpeg (TensorFlow.TFOutput contents, Nullable<long> channels = null, Nullable<long> ratio = null, Nullable<bool> fancy_upscaling = null, Nullable<bool> try_recover_truncated = null, Nullable<float> acceptable_fraction = null, string dct_method = null, string operName = null);
    parameters:
    - id: contents
      type: TensorFlow.TFOutput
      description: 0-D.  The JPEG-encoded image.
    - id: channels
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      Number of color channels for the decoded image.
    - id: ratio
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      Downscaling ratio.
    - id: fancy_upscaling
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true use a slower but nicer upscaling of the
                      chroma planes (yuv420/422 only).
    - id: try_recover_truncated
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true try to recover an image from truncated input.
    - id: acceptable_fraction
      type: System.Nullable{System.Single}
      description: >-
        Optional argument
                      The minimum required fraction of lines before a truncated
                      input is accepted.
    - id: dct_method
      type: System.String
      description: >-
        Optional argument
                      string specifying a hint about the algorithm used for
                      decompression.  Defaults to "" which maps to a system-specific
                      default.  Currently valid values are ["INTEGER_FAST",
                      "INTEGER_ACCURATE"].  The hint may be ignored (e.g., the internal
                      jpeg library changes to a version that does not have that specific
                      option.)
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'DecodeJpeg'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        3-D with shape `[height, width, channels]`..
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.DecodeJpeg*
  exceptions: []
- uid: TensorFlow.TFGraph.DecodeJSONExample(TensorFlow.TFOutput,System.String)
  id: DecodeJSONExample(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: DecodeJSONExample(TFOutput, String)
  nameWithType: TFGraph.DecodeJSONExample(TFOutput, String)
  fullName: TFGraph.DecodeJSONExample(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Convert JSON-encoded Example records to binary protocol buffer strings.
  remarks: >-
    This op translates a tensor containing Example records, encoded using
                  the [standard JSON
                  mapping](https://developers.google.com/protocol-buffers/docs/proto3#json),
                  into a tensor containing the same records encoded as binary protocol
                  buffers. The resulting tensor can then be fed to any of the other
                  Example-parsing ops.
  syntax:
    content: public TensorFlow.TFOutput DecodeJSONExample (TensorFlow.TFOutput json_examples, string operName = null);
    parameters:
    - id: json_examples
      type: TensorFlow.TFOutput
      description: >-
        Each string is a JSON object serialized according to the JSON
                      mapping of the Example proto.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'DecodeJSONExample'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Each string is a binary Example protocol buffer corresponding
                      to the respective element of `json_examples`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.DecodeJSONExample*
  exceptions: []
- uid: TensorFlow.TFGraph.DecodePng(TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{TensorFlow.TFDataType},System.String)
  id: DecodePng(TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: DecodePng(TFOutput, Nullable<Int64>, Nullable<TFDataType>, String)
  nameWithType: TFGraph.DecodePng(TFOutput, Nullable<Int64>, Nullable<TFDataType>, String)
  fullName: TFGraph.DecodePng(TFOutput, Nullable<Int64>, Nullable<TFDataType>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Decode a PNG-encoded image to a uint8 or uint16 tensor.
  remarks: "The attr `channels` indicates the desired number of color channels for the\n              decoded image.\n              \n              Accepted values are:\n              \n              *   0: Use the number of channels in the PNG-encoded image.\n              *   1: output a grayscale image.\n              *   3: output an RGB image.\n              *   4: output an RGBA image.\n              \n              If needed, the PNG-encoded image is transformed to match the requested number\n              of color channels.\n              \n              This op also supports decoding JPEGs and non-animated GIFs since the interface\n              is the same, though it is cleaner to use `tf.image.decode_image`."
  syntax:
    content: public TensorFlow.TFOutput DecodePng (TensorFlow.TFOutput contents, Nullable<long> channels = null, Nullable<TensorFlow.TFDataType> dtype = null, string operName = null);
    parameters:
    - id: contents
      type: TensorFlow.TFOutput
      description: 0-D.  The PNG-encoded image.
    - id: channels
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      Number of color channels for the decoded image.
    - id: dtype
      type: System.Nullable{TensorFlow.TFDataType}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'DecodePng'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        3-D with shape `[height, width, channels]`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.DecodePng*
  exceptions: []
- uid: TensorFlow.TFGraph.DecodeRaw(TensorFlow.TFOutput,TensorFlow.TFDataType,System.Nullable{System.Boolean},System.String)
  id: DecodeRaw(TensorFlow.TFOutput,TensorFlow.TFDataType,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: DecodeRaw(TFOutput, TFDataType, Nullable<Boolean>, String)
  nameWithType: TFGraph.DecodeRaw(TFOutput, TFDataType, Nullable<Boolean>, String)
  fullName: TFGraph.DecodeRaw(TFOutput, TFDataType, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Reinterpret the bytes of a string as a vector of numbers.
  syntax:
    content: public TensorFlow.TFOutput DecodeRaw (TensorFlow.TFOutput bytes, TensorFlow.TFDataType out_type, Nullable<bool> little_endian = null, string operName = null);
    parameters:
    - id: bytes
      type: TensorFlow.TFOutput
      description: All the elements must have the same length.
    - id: out_type
      type: TensorFlow.TFDataType
      description: To be added.
    - id: little_endian
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      Whether the input `bytes` are in little-endian order.
                      Ignored for `out_type` values that are stored in a single byte like
                      `uint8`.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'DecodeRaw'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        A Tensor with one more dimension than the input `bytes`.  The
                      added dimension will have size equal to the length of the elements
                      of `bytes` divided by the number of bytes to represent `out_type`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.DecodeRaw*
  exceptions: []
- uid: TensorFlow.TFGraph.DecodeWav(TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  id: DecodeWav(TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: DecodeWav(TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.DecodeWav(TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.DecodeWav(TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Decode a 16-bit PCM WAV file to a float tensor.
  remarks: "The -32768 to 32767 signed 16-bit values will be scaled to -1.0 to 1.0 in float.\n              \n              When desired_channels is set, if the input contains fewer channels than this\n              then the last channel will be duplicated to give the requested number, else if\n              the input has more channels than requested then the additional channels will be\n              ignored.\n              \n              If desired_samples is set, then the audio will be cropped or padded with zeroes\n              to the requested length.\n              \n              The first output contains a Tensor with the content of the audio samples. The\n              lowest dimension will be the number of channels, and the second will be the\n              number of samples. For example, a ten-sample-long stereo WAV file should give an\n              output shape of [10, 2]."
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput> DecodeWav (TensorFlow.TFOutput contents, Nullable<long> desired_channels = null, Nullable<long> desired_samples = null, string operName = null);
    parameters:
    - id: contents
      type: TensorFlow.TFOutput
      description: The WAV-encoded audio, usually from a file.
    - id: desired_channels
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      Number of sample channels wanted.
    - id: desired_samples
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      Length of audio requested.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'DecodeWav'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      audio: 2-D with shape `[length, channels]`.
                      sample_rate: Scalar holding the sample rate found in the WAV header.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.DecodeWav*
  exceptions: []
- uid: TensorFlow.TFGraph.DeleteSessionTensor(TensorFlow.TFOutput,System.String)
  id: DeleteSessionTensor(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: DeleteSessionTensor(TFOutput, String)
  nameWithType: TFGraph.DeleteSessionTensor(TFOutput, String)
  fullName: TFGraph.DeleteSessionTensor(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Delete the tensor specified by its handle in the session.
  syntax:
    content: public TensorFlow.TFOperation DeleteSessionTensor (TensorFlow.TFOutput handle, string operName = null);
    parameters:
    - id: handle
      type: TensorFlow.TFOutput
      description: The handle for a tensor stored in the session state.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'DeleteSessionTensor'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.DeleteSessionTensor*
  exceptions: []
- uid: TensorFlow.TFGraph.DenseToDenseSetOperation(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.Nullable{System.Boolean},System.String)
  id: DenseToDenseSetOperation(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: DenseToDenseSetOperation(TFOutput, TFOutput, String, Nullable<Boolean>, String)
  nameWithType: TFGraph.DenseToDenseSetOperation(TFOutput, TFOutput, String, Nullable<Boolean>, String)
  fullName: TFGraph.DenseToDenseSetOperation(TFOutput, TFOutput, String, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Applies set operation along last dimension of 2 `Tensor` inputs.
  remarks: "See SetOperationOp::SetOperationFromContext for values of `set_operation`.\n              \n              Output `result` is a `SparseTensor` represented by `result_indices`,\n              `result_values`, and `result_shape`. For `set1` and `set2` ranked `n`, this\n              has rank `n` and the same 1st `n-1` dimensions as `set1` and `set2`. The `nth`\n              dimension contains the result of `set_operation` applied to the corresponding\n              `[0...n-1]` dimension of `set`."
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> DenseToDenseSetOperation (TensorFlow.TFOutput set1, TensorFlow.TFOutput set2, string set_operation, Nullable<bool> validate_indices = null, string operName = null);
    parameters:
    - id: set1
      type: TensorFlow.TFOutput
      description: >-
        `Tensor` with rank `n`. 1st `n-1` dimensions must be the same as `set2`.
                      Dimension `n` contains values in a set, duplicates are allowed but ignored.
    - id: set2
      type: TensorFlow.TFOutput
      description: >-
        `Tensor` with rank `n`. 1st `n-1` dimensions must be the same as `set1`.
                      Dimension `n` contains values in a set, duplicates are allowed but ignored.
    - id: set_operation
      type: System.String
      description: To be added.
    - id: validate_indices
      type: System.Nullable{System.Boolean}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'DenseToDenseSetOperation'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      result_indices: 2D indices of a `SparseTensor`.
                      result_values: 1D values of a `SparseTensor`.
                      result_shape: 1D `Tensor` shape of a `SparseTensor`. `result_shape[0...n-1]` is
                      the same as the 1st `n-1` dimensions of `set1` and `set2`, `result_shape[n]`
                      is the max result set size across all `0...n-1` dimensions.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.DenseToDenseSetOperation*
  exceptions: []
- uid: TensorFlow.TFGraph.DenseToSparseBatchDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  id: DenseToSparseBatchDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: DenseToSparseBatchDataset(TFOutput, TFOutput, TFOutput, TFDataType[], TFShape[], String)
  nameWithType: TFGraph.DenseToSparseBatchDataset(TFOutput, TFOutput, TFOutput, TFDataType[], TFShape[], String)
  fullName: TFGraph.DenseToSparseBatchDataset(TFOutput, TFOutput, TFOutput, TFDataType[], TFShape[], String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Creates a dataset that yields a SparseTensor for each element of the input.
  syntax:
    content: public TensorFlow.TFOutput DenseToSparseBatchDataset (TensorFlow.TFOutput input_dataset, TensorFlow.TFOutput batch_size, TensorFlow.TFOutput row_shape, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);
    parameters:
    - id: input_dataset
      type: TensorFlow.TFOutput
      description: A handle to an input dataset. Must have a single component.
    - id: batch_size
      type: TensorFlow.TFOutput
      description: >-
        A scalar representing the number of elements to accumulate in a
                      batch.
    - id: row_shape
      type: TensorFlow.TFOutput
      description: >-
        A vector representing the dense shape of each row in the produced
                      SparseTensor.
    - id: output_types
      type: TensorFlow.TFDataType[]
      description: To be added.
    - id: output_shapes
      type: TensorFlow.TFShape[]
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'DenseToSparseBatchDataset'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.DenseToSparseBatchDataset*
  exceptions: []
- uid: TensorFlow.TFGraph.DenseToSparseSetOperation(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.Nullable{System.Boolean},System.String)
  id: DenseToSparseSetOperation(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: DenseToSparseSetOperation(TFOutput, TFOutput, TFOutput, TFOutput, String, Nullable<Boolean>, String)
  nameWithType: TFGraph.DenseToSparseSetOperation(TFOutput, TFOutput, TFOutput, TFOutput, String, Nullable<Boolean>, String)
  fullName: TFGraph.DenseToSparseSetOperation(TFOutput, TFOutput, TFOutput, TFOutput, String, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Applies set operation along last dimension of `Tensor` and `SparseTensor`.
  remarks: "See SetOperationOp::SetOperationFromContext for values of `set_operation`.\n              \n              Input `set2` is a `SparseTensor` represented by `set2_indices`, `set2_values`,\n              and `set2_shape`. For `set2` ranked `n`, 1st `n-1` dimensions must be the same\n              as `set1`. Dimension `n` contains values in a set, duplicates are allowed but\n              ignored.\n              \n              If `validate_indices` is `True`, this op validates the order and range of `set2`\n              indices.\n              \n              Output `result` is a `SparseTensor` represented by `result_indices`,\n              `result_values`, and `result_shape`. For `set1` and `set2` ranked `n`, this\n              has rank `n` and the same 1st `n-1` dimensions as `set1` and `set2`. The `nth`\n              dimension contains the result of `set_operation` applied to the corresponding\n              `[0...n-1]` dimension of `set`."
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> DenseToSparseSetOperation (TensorFlow.TFOutput set1, TensorFlow.TFOutput set2_indices, TensorFlow.TFOutput set2_values, TensorFlow.TFOutput set2_shape, string set_operation, Nullable<bool> validate_indices = null, string operName = null);
    parameters:
    - id: set1
      type: TensorFlow.TFOutput
      description: >-
        `Tensor` with rank `n`. 1st `n-1` dimensions must be the same as `set2`.
                      Dimension `n` contains values in a set, duplicates are allowed but ignored.
    - id: set2_indices
      type: TensorFlow.TFOutput
      description: >-
        2D `Tensor`, indices of a `SparseTensor`. Must be in row-major
                      order.
    - id: set2_values
      type: TensorFlow.TFOutput
      description: >-
        1D `Tensor`, values of a `SparseTensor`. Must be in row-major
                      order.
    - id: set2_shape
      type: TensorFlow.TFOutput
      description: >-
        1D `Tensor`, shape of a `SparseTensor`. `set2_shape[0...n-1]` must
                      be the same as the 1st `n-1` dimensions of `set1`, `result_shape[n]` is the
                      max set size across `n-1` dimensions.
    - id: set_operation
      type: System.String
      description: To be added.
    - id: validate_indices
      type: System.Nullable{System.Boolean}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'DenseToSparseSetOperation'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      result_indices: 2D indices of a `SparseTensor`.
                      result_values: 1D values of a `SparseTensor`.
                      result_shape: 1D `Tensor` shape of a `SparseTensor`. `result_shape[0...n-1]` is
                      the same as the 1st `n-1` dimensions of `set1` and `set2`, `result_shape[n]`
                      is the max result set size across all `0...n-1` dimensions.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.DenseToSparseSetOperation*
  exceptions: []
- uid: TensorFlow.TFGraph.DepthToSpace(TensorFlow.TFOutput,System.Int64,System.String)
  id: DepthToSpace(TensorFlow.TFOutput,System.Int64,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: DepthToSpace(TFOutput, Int64, String)
  nameWithType: TFGraph.DepthToSpace(TFOutput, Int64, String)
  fullName: TFGraph.DepthToSpace(TFOutput, Int64, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: DepthToSpace for tensors of type T.
  remarks: "Rearranges data from depth into blocks of spatial data.\n              This is the reverse transformation of SpaceToDepth. More specifically,\n              this op outputs a copy of the input tensor where values from the `depth`\n              dimension are moved in spatial blocks to the `height` and `width` dimensions.\n              The attr `block_size` indicates the input block size and how the data is moved.\n              \n                * Chunks of data of size `block_size * block_size` from depth are rearranged\n                  into non-overlapping blocks of size `block_size x block_size`\n                * The width the output tensor is `input_depth * block_size`, whereas the\n                  height is `input_height * block_size`.\n                * The depth of the input tensor must be divisible by\n                  `block_size * block_size`.\n              \n              That is, assuming the input is in the shape:\n              `[batch, height, width, depth]`,\n              the shape of the output will be:\n              `[batch, height*block_size, width*block_size, depth/(block_size*block_size)]`\n              \n              This operation requires that the input tensor be of rank 4, and that\n              `block_size` be &gt;=1 and that `block_size * block_size` be a divisor of the\n              input depth.\n              \n              This operation is useful for resizing the activations between convolutions\n              (but keeping all data), e.g. instead of pooling. It is also useful for training\n              purely convolutional models.\n              \n              For example, given this input of shape `[1, 1, 1, 4]`, and a block size of 2:\n              \n              ```\n              x = [[[[1, 2, 3, 4]]]]\n              \n              ```\n              \n              This operation will output a tensor of shape `[1, 2, 2, 1]`:\n              \n              ```\n                 [[[[1], [2]],\n                   [[3], [4]]]]\n              ```\n              \n              Here, the input has a batch of 1 and each batch element has shape `[1, 1, 4]`,\n              the corresponding output will have 2x2 elements and will have a depth of\n              1 channel (1 = `4 / (block_size * block_size)`).\n              The output element shape is `[2, 2, 1]`.\n              \n              For an input tensor with larger depth, here of shape `[1, 1, 1, 12]`, e.g.\n              \n              ```\n              x = [[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]]]]\n              ```\n              \n              This operation, for block size of 2, will return the following tensor of shape\n              `[1, 2, 2, 3]`\n              \n              ```\n                 [[[[1, 2, 3], [4, 5, 6]],\n                   [[7, 8, 9], [10, 11, 12]]]]\n              \n              ```\n              \n              Similarly, for the following input of shape `[1 2 2 4]`, and a block size of 2:\n              \n              ```\n              x =  [[[[1, 2, 3, 4],\n                     [5, 6, 7, 8]],\n                    [[9, 10, 11, 12],\n                     [13, 14, 15, 16]]]]\n              ```\n              \n              the operator will return the following tensor of shape `[1 4 4 1]`:\n              \n              ```\n              x = [[ [1],   [2],  [5],  [6]],\n                   [ [3],   [4],  [7],  [8]],\n                   [ [9],  [10], [13],  [14]],\n                   [ [11], [12], [15],  [16]]]\n              \n              ```"
  syntax:
    content: public TensorFlow.TFOutput DepthToSpace (TensorFlow.TFOutput input, long block_size, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: To be added.
    - id: block_size
      type: System.Int64
      description: The size of the spatial block, same as in Space2Depth.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'DepthToSpace'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.DepthToSpace*
  exceptions: []
- uid: TensorFlow.TFGraph.DepthwiseConv2dNative(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.String,System.String)
  id: DepthwiseConv2dNative(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: DepthwiseConv2dNative(TFOutput, TFOutput, Int64[], String, String, String)
  nameWithType: TFGraph.DepthwiseConv2dNative(TFOutput, TFOutput, Int64[], String, String, String)
  fullName: TFGraph.DepthwiseConv2dNative(TFOutput, TFOutput, Int64[], String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes a 2-D depthwise convolution given 4-D `input` and `filter` tensors.
  remarks: "Given an input tensor of shape `[batch, in_height, in_width, in_channels]`\n              and a filter / kernel tensor of shape\n              `[filter_height, filter_width, in_channels, channel_multiplier]`, containing\n              `in_channels` convolutional filters of depth 1, `depthwise_conv2d` applies\n              a different filter to each input channel (expanding from 1 channel to\n              `channel_multiplier` channels for each), then concatenates the results\n              together. Thus, the output has `in_channels * channel_multiplier` channels.\n              \n              ```\n              for k in 0..in_channels-1\n                for q in 0..channel_multiplier-1\n                  output[b, i, j, k * channel_multiplier + q] =\n                    sum_{di, dj} input[b, strides[1] * i + di, strides[2] * j + dj, k] *\n                                      filter[di, dj, k, q]\n              ```\n              \n              Must have `strides[0] = strides[3] = 1`.  For the most common case of the same\n              horizontal and vertices strides, `strides = [1, stride, stride, 1]`."
  syntax:
    content: public TensorFlow.TFOutput DepthwiseConv2dNative (TensorFlow.TFOutput input, TensorFlow.TFOutput filter, long[] strides, string padding, string data_format = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: To be added.
    - id: filter
      type: TensorFlow.TFOutput
      description: To be added.
    - id: strides
      type: System.Int64[]
      description: >-
        1-D of length 4.  The stride of the sliding window for each dimension
                      of `input`.
    - id: padding
      type: System.String
      description: The type of padding algorithm to use.
    - id: data_format
      type: System.String
      description: >-
        Optional argument
                      Specify the data format of the input and output data. With the
                      default format "NHWC", the data is stored in the order of:
                          [batch, height, width, channels].
                      Alternatively, the format could be "NCHW", the data storage order of:
                          [batch, channels, height, width].
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'DepthwiseConv2dNative'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.DepthwiseConv2dNative*
  exceptions: []
- uid: TensorFlow.TFGraph.DepthwiseConv2dNativeBackpropFilter(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.String,System.String)
  id: DepthwiseConv2dNativeBackpropFilter(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: DepthwiseConv2dNativeBackpropFilter(TFOutput, TFOutput, TFOutput, Int64[], String, String, String)
  nameWithType: TFGraph.DepthwiseConv2dNativeBackpropFilter(TFOutput, TFOutput, TFOutput, Int64[], String, String, String)
  fullName: TFGraph.DepthwiseConv2dNativeBackpropFilter(TFOutput, TFOutput, TFOutput, Int64[], String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the gradients of depthwise convolution with respect to the filter.
  syntax:
    content: public TensorFlow.TFOutput DepthwiseConv2dNativeBackpropFilter (TensorFlow.TFOutput input, TensorFlow.TFOutput filter_sizes, TensorFlow.TFOutput out_backprop, long[] strides, string padding, string data_format = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: >-
        4-D with shape based on `data_format`.  For example, if
                      `data_format` is 'NHWC' then `input` is a 4-D `[batch, in_height,
                      in_width, in_channels]` tensor.
    - id: filter_sizes
      type: TensorFlow.TFOutput
      description: >-
        An integer vector representing the tensor shape of `filter`,
                      where `filter` is a 4-D
                      `[filter_height, filter_width, in_channels, depthwise_multiplier]` tensor.
    - id: out_backprop
      type: TensorFlow.TFOutput
      description: >-
        4-D with shape  based on `data_format`.
                      For example, if `data_format` is 'NHWC' then
                      out_backprop shape is `[batch, out_height, out_width, out_channels]`.
                      Gradients w.r.t. the output of the convolution.
    - id: strides
      type: System.Int64[]
      description: >-
        The stride of the sliding window for each dimension of the input
                      of the convolution.
    - id: padding
      type: System.String
      description: The type of padding algorithm to use.
    - id: data_format
      type: System.String
      description: >-
        Optional argument
                      Specify the data format of the input and output data. With the
                      default format "NHWC", the data is stored in the order of:
                          [batch, height, width, channels].
                      Alternatively, the format could be "NCHW", the data storage order of:
                          [batch, channels, height, width].
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'DepthwiseConv2dNativeBackpropFilter'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        4-D with shape
                      `[filter_height, filter_width, in_channels, out_channels]`.  Gradient w.r.t.
                      the `filter` input of the convolution.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.DepthwiseConv2dNativeBackpropFilter*
  exceptions: []
- uid: TensorFlow.TFGraph.DepthwiseConv2dNativeBackpropInput(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.String,System.String)
  id: DepthwiseConv2dNativeBackpropInput(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: DepthwiseConv2dNativeBackpropInput(TFOutput, TFOutput, TFOutput, Int64[], String, String, String)
  nameWithType: TFGraph.DepthwiseConv2dNativeBackpropInput(TFOutput, TFOutput, TFOutput, Int64[], String, String, String)
  fullName: TFGraph.DepthwiseConv2dNativeBackpropInput(TFOutput, TFOutput, TFOutput, Int64[], String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the gradients of depthwise convolution with respect to the input.
  syntax:
    content: public TensorFlow.TFOutput DepthwiseConv2dNativeBackpropInput (TensorFlow.TFOutput input_sizes, TensorFlow.TFOutput filter, TensorFlow.TFOutput out_backprop, long[] strides, string padding, string data_format = null, string operName = null);
    parameters:
    - id: input_sizes
      type: TensorFlow.TFOutput
      description: >-
        An integer vector representing the shape of `input`, based
                      on `data_format`.  For example, if `data_format` is 'NHWC' then
                       `input` is a 4-D `[batch, height, width, channels]` tensor.
    - id: filter
      type: TensorFlow.TFOutput
      description: >-
        4-D with shape
                      `[filter_height, filter_width, in_channels, depthwise_multiplier]`.
    - id: out_backprop
      type: TensorFlow.TFOutput
      description: >-
        4-D with shape  based on `data_format`.
                      For example, if `data_format` is 'NHWC' then
                      out_backprop shape is `[batch, out_height, out_width, out_channels]`.
                      Gradients w.r.t. the output of the convolution.
    - id: strides
      type: System.Int64[]
      description: >-
        The stride of the sliding window for each dimension of the input
                      of the convolution.
    - id: padding
      type: System.String
      description: The type of padding algorithm to use.
    - id: data_format
      type: System.String
      description: >-
        Optional argument
                      Specify the data format of the input and output data. With the
                      default format "NHWC", the data is stored in the order of:
                          [batch, height, width, channels].
                      Alternatively, the format could be "NCHW", the data storage order of:
                          [batch, channels, height, width].
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'DepthwiseConv2dNativeBackpropInput'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        4-D with shape according to `data_format`.  For example, if
                      `data_format` is 'NHWC', output shape is `[batch, in_height,
                      in_width, in_channels]`.  Gradient w.r.t. the input of the
                      convolution.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.DepthwiseConv2dNativeBackpropInput*
  exceptions: []
- uid: TensorFlow.TFGraph.Dequantize(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String)
  id: Dequantize(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Dequantize(TFOutput, TFOutput, TFOutput, String, String)
  nameWithType: TFGraph.Dequantize(TFOutput, TFOutput, TFOutput, String, String)
  fullName: TFGraph.Dequantize(TFOutput, TFOutput, TFOutput, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Dequantize the 'input' tensor into a float Tensor.
  remarks: "[min_range, max_range] are scalar floats that specify the range for\n              the 'input' data. The 'mode' attribute controls exactly which calculations are\n              used to convert the float values to their quantized equivalents.\n              \n              In 'MIN_COMBINED' mode, each value of the tensor will undergo the following:\n              \n              ```\n              if T == qint8, in[i] += (range(T) + 1)/ 2.0\n              out[i] = min_range + (in[i]* (max_range - min_range) / range(T))\n              ```\n              here `range(T) = numeric_limits&lt;T&gt;::max() - numeric_limits&lt;T&gt;::min()`\n              \n              *MIN_COMBINED Mode Example*\n              \n              If the input comes from a QuantizedRelu6, the output type is\n              quint8 (range of 0-255) but the possible range of QuantizedRelu6 is\n              0-6.  The min_range and max_range values are therefore 0.0 and 6.0.\n              Dequantize on quint8 will take each value, cast to float, and multiply\n              by 6 / 255.\n              Note that if quantizedtype is qint8, the operation will additionally add\n              each value by 128 prior to casting.\n              \n              If the mode is 'MIN_FIRST', then this approach is used:\n              \n              ```c++\n              number_of_steps = 1 &lt;&lt; (# of bits in T)\n              range_adjust = number_of_steps / (number_of_steps - 1)\n              range = (range_max - range_min) * range_adjust\n              range_scale = range / number_of_steps\n              const double offset_input = static_cast&lt;double&gt;(input) - lowest_quantized;\n              result = range_min + ((input - numeric_limits&lt;T&gt;::min()) * range_scale)\n              ```"
  syntax:
    content: public TensorFlow.TFOutput Dequantize (TensorFlow.TFOutput input, TensorFlow.TFOutput min_range, TensorFlow.TFOutput max_range, string mode = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: To be added.
    - id: min_range
      type: TensorFlow.TFOutput
      description: The minimum scalar value possibly produced for the input.
    - id: max_range
      type: TensorFlow.TFOutput
      description: The maximum scalar value possibly produced for the input.
    - id: mode
      type: System.String
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Dequantize'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Dequantize*
  exceptions: []
- uid: TensorFlow.TFGraph.DeserializeManySparse(TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  id: DeserializeManySparse(TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: DeserializeManySparse(TFOutput, TFDataType, String)
  nameWithType: TFGraph.DeserializeManySparse(TFOutput, TFDataType, String)
  fullName: TFGraph.DeserializeManySparse(TFOutput, TFDataType, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Deserialize and concatenate `SparseTensors` from a serialized minibatch.
  remarks: "The input `serialized_sparse` must be a string matrix of shape `[N x 3]` where\n              `N` is the minibatch size and the rows correspond to packed outputs of\n              `SerializeSparse`.  The ranks of the original `SparseTensor` objects\n              must all match.  When the final `SparseTensor` is created, it has rank one\n              higher than the ranks of the incoming `SparseTensor` objects\n              (they have been concatenated along a new row dimension).\n              \n              The output `SparseTensor` object's shape values for all dimensions but the\n              first are the max across the input `SparseTensor` objects' shape values\n              for the corresponding dimensions.  Its first shape value is `N`, the minibatch\n              size.\n              \n              The input `SparseTensor` objects' indices are assumed ordered in\n              standard lexicographic order.  If this is not the case, after this\n              step run `SparseReorder` to restore index ordering.\n              \n              For example, if the serialized input is a `[2 x 3]` matrix representing two\n              original `SparseTensor` objects:\n              \n                  index = [ 0]\n                          [10]\n                          [20]\n                  values = [1, 2, 3]\n                  shape = [50]\n              \n              and\n              \n                  index = [ 2]\n                          [10]\n                  values = [4, 5]\n                  shape = [30]\n              \n              then the final deserialized `SparseTensor` will be:\n              \n                  index = [0  0]\n                          [0 10]\n                          [0 20]\n                          [1  2]\n                          [1 10]\n                  values = [1, 2, 3, 4, 5]\n                  shape = [2 50]"
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> DeserializeManySparse (TensorFlow.TFOutput serialized_sparse, TensorFlow.TFDataType dtype, string operName = null);
    parameters:
    - id: serialized_sparse
      type: TensorFlow.TFOutput
      description: >-
        2-D, The `N` serialized `SparseTensor` objects.
                      Must have 3 columns.
    - id: dtype
      type: TensorFlow.TFDataType
      description: The `dtype` of the serialized `SparseTensor` objects.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'DeserializeManySparse'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: "Returns a tuple with multiple values, as follows:\n              sparse_indices: \n              sparse_values: \n              sparse_shape: \n              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property."
  overload: TensorFlow.TFGraph.DeserializeManySparse*
  exceptions: []
- uid: TensorFlow.TFGraph.DestroyResourceOp(TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: DestroyResourceOp(TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: DestroyResourceOp(TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.DestroyResourceOp(TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.DestroyResourceOp(TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Deletes the resource specified by the handle.
  remarks: >-
    All subsequent operations using the resource will result in a NotFound
                  error status.
  syntax:
    content: public TensorFlow.TFOperation DestroyResourceOp (TensorFlow.TFOutput resource, Nullable<bool> ignore_lookup_error = null, string operName = null);
    parameters:
    - id: resource
      type: TensorFlow.TFOutput
      description: handle to the resource to delete.
    - id: ignore_lookup_error
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      whether to ignore the error when the resource
                      doesn't exist.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'DestroyResourceOp'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.DestroyResourceOp*
  exceptions: []
- uid: TensorFlow.TFGraph.Diag(TensorFlow.TFOutput,System.String)
  id: Diag(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Diag(TFOutput, String)
  nameWithType: TFGraph.Diag(TFOutput, String)
  fullName: TFGraph.Diag(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns a diagonal tensor with a given diagonal values.
  remarks: "Given a `diagonal`, this operation returns a tensor with the `diagonal` and\n              everything else padded with zeros. The diagonal is computed as follows:\n              \n              Assume `diagonal` has dimensions [D1,..., Dk], then the output is a tensor of\n              rank 2k with dimensions [D1,..., Dk, D1,..., Dk] where:\n              \n              `output[i1,..., ik, i1,..., ik] = diagonal[i1, ..., ik]` and 0 everywhere else.\n              \n              For example:\n              \n              ```\n              # 'diagonal' is [1, 2, 3, 4]\n              tf.diag(diagonal) ==&gt; [[1, 0, 0, 0]\n                                     [0, 2, 0, 0]\n                                     [0, 0, 3, 0]\n                                     [0, 0, 0, 4]]\n              ```"
  syntax:
    content: public TensorFlow.TFOutput Diag (TensorFlow.TFOutput diagonal, string operName = null);
    parameters:
    - id: diagonal
      type: TensorFlow.TFOutput
      description: Rank k tensor where k is at most 3.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Diag'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Diag*
  exceptions: []
- uid: TensorFlow.TFGraph.DiagPart(TensorFlow.TFOutput,System.String)
  id: DiagPart(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: DiagPart(TFOutput, String)
  nameWithType: TFGraph.DiagPart(TFOutput, String)
  fullName: TFGraph.DiagPart(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns the diagonal part of the tensor.
  remarks: "This operation returns a tensor with the `diagonal` part\n              of the `input`. The `diagonal` part is computed as follows:\n              \n              Assume `input` has dimensions `[D1,..., Dk, D1,..., Dk]`, then the output is a\n              tensor of rank `k` with dimensions `[D1,..., Dk]` where:\n              \n              `diagonal[i1,..., ik] = input[i1, ..., ik, i1,..., ik]`.\n              \n              For example:\n              \n              ```\n              # 'input' is [[1, 0, 0, 0]\n                            [0, 2, 0, 0]\n                            [0, 0, 3, 0]\n                            [0, 0, 0, 4]]\n              \n              tf.diag_part(input) ==&gt; [1, 2, 3, 4]\n              ```"
  syntax:
    content: public TensorFlow.TFOutput DiagPart (TensorFlow.TFOutput input, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: Rank k tensor where k is 2, 4, or 6.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'DiagPart'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The extracted diagonal.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.DiagPart*
  exceptions: []
- uid: TensorFlow.TFGraph.Digamma(TensorFlow.TFOutput,System.String)
  id: Digamma(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Digamma(TFOutput, String)
  nameWithType: TFGraph.Digamma(TFOutput, String)
  fullName: TFGraph.Digamma(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes Psi, the derivative of Lgamma (the log of the absolute value of
  remarks: '`Gamma(x)`), element-wise.'
  syntax:
    content: public TensorFlow.TFOutput Digamma (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Digamma'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Digamma*
  exceptions: []
- uid: TensorFlow.TFGraph.Dilation2D(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String)
  id: Dilation2D(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Dilation2D(TFOutput, TFOutput, Int64[], Int64[], String, String)
  nameWithType: TFGraph.Dilation2D(TFOutput, TFOutput, Int64[], Int64[], String, String)
  fullName: TFGraph.Dilation2D(TFOutput, TFOutput, Int64[], Int64[], String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the grayscale dilation of 4-D `input` and 3-D `filter` tensors.
  remarks: "The `input` tensor has shape `[batch, in_height, in_width, depth]` and the\n              `filter` tensor has shape `[filter_height, filter_width, depth]`, i.e., each\n              input channel is processed independently of the others with its own structuring\n              function. The `output` tensor has shape\n              `[batch, out_height, out_width, depth]`. The spatial dimensions of the output\n              tensor depend on the `padding` algorithm. We currently only support the default\n              \"NHWC\" `data_format`.\n              \n              In detail, the grayscale morphological 2-D dilation is the max-sum correlation\n              (for consistency with `conv2d`, we use unmirrored filters):\n              \n                  output[b, y, x, c] =\n                     max_{dy, dx} input[b,\n                                        strides[1] * y + rates[1] * dy,\n                                        strides[2] * x + rates[2] * dx,\n                                        c] +\n                                  filter[dy, dx, c]\n              \n              Max-pooling is a special case when the filter has size equal to the pooling\n              kernel size and contains all zeros.\n              \n              Note on duality: The dilation of `input` by the `filter` is equal to the\n              negation of the erosion of `-input` by the reflected `filter`."
  syntax:
    content: public TensorFlow.TFOutput Dilation2D (TensorFlow.TFOutput input, TensorFlow.TFOutput filter, long[] strides, long[] rates, string padding, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: 4-D with shape `[batch, in_height, in_width, depth]`.
    - id: filter
      type: TensorFlow.TFOutput
      description: 3-D with shape `[filter_height, filter_width, depth]`.
    - id: strides
      type: System.Int64[]
      description: >-
        The stride of the sliding window for each dimension of the input
                      tensor. Must be: `[1, stride_height, stride_width, 1]`.
    - id: rates
      type: System.Int64[]
      description: >-
        The input stride for atrous morphological dilation. Must be:
                      `[1, rate_height, rate_width, 1]`.
    - id: padding
      type: System.String
      description: The type of padding algorithm to use.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Dilation2D'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        4-D with shape `[batch, out_height, out_width, depth]`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Dilation2D*
  exceptions: []
- uid: TensorFlow.TFGraph.Dilation2DBackpropFilter(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String)
  id: Dilation2DBackpropFilter(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Dilation2DBackpropFilter(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
  nameWithType: TFGraph.Dilation2DBackpropFilter(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
  fullName: TFGraph.Dilation2DBackpropFilter(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the gradient of morphological 2-D dilation with respect to the filter.
  syntax:
    content: public TensorFlow.TFOutput Dilation2DBackpropFilter (TensorFlow.TFOutput input, TensorFlow.TFOutput filter, TensorFlow.TFOutput out_backprop, long[] strides, long[] rates, string padding, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: 4-D with shape `[batch, in_height, in_width, depth]`.
    - id: filter
      type: TensorFlow.TFOutput
      description: 3-D with shape `[filter_height, filter_width, depth]`.
    - id: out_backprop
      type: TensorFlow.TFOutput
      description: 4-D with shape `[batch, out_height, out_width, depth]`.
    - id: strides
      type: System.Int64[]
      description: >-
        1-D of length 4. The stride of the sliding window for each dimension of
                      the input tensor. Must be: `[1, stride_height, stride_width, 1]`.
    - id: rates
      type: System.Int64[]
      description: >-
        1-D of length 4. The input stride for atrous morphological dilation.
                      Must be: `[1, rate_height, rate_width, 1]`.
    - id: padding
      type: System.String
      description: The type of padding algorithm to use.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Dilation2DBackpropFilter'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        3-D with shape `[filter_height, filter_width, depth]`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Dilation2DBackpropFilter*
  exceptions: []
- uid: TensorFlow.TFGraph.Dilation2DBackpropInput(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String)
  id: Dilation2DBackpropInput(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Dilation2DBackpropInput(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
  nameWithType: TFGraph.Dilation2DBackpropInput(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
  fullName: TFGraph.Dilation2DBackpropInput(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the gradient of morphological 2-D dilation with respect to the input.
  syntax:
    content: public TensorFlow.TFOutput Dilation2DBackpropInput (TensorFlow.TFOutput input, TensorFlow.TFOutput filter, TensorFlow.TFOutput out_backprop, long[] strides, long[] rates, string padding, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: 4-D with shape `[batch, in_height, in_width, depth]`.
    - id: filter
      type: TensorFlow.TFOutput
      description: 3-D with shape `[filter_height, filter_width, depth]`.
    - id: out_backprop
      type: TensorFlow.TFOutput
      description: 4-D with shape `[batch, out_height, out_width, depth]`.
    - id: strides
      type: System.Int64[]
      description: >-
        1-D of length 4. The stride of the sliding window for each dimension of
                      the input tensor. Must be: `[1, stride_height, stride_width, 1]`.
    - id: rates
      type: System.Int64[]
      description: >-
        1-D of length 4. The input stride for atrous morphological dilation.
                      Must be: `[1, rate_height, rate_width, 1]`.
    - id: padding
      type: System.String
      description: The type of padding algorithm to use.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Dilation2DBackpropInput'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        4-D with shape `[batch, in_height, in_width, depth]`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Dilation2DBackpropInput*
  exceptions: []
- uid: TensorFlow.TFGraph.Div(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: Div(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Div(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Div(TFOutput, TFOutput, String)
  fullName: TFGraph.Div(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns x / y element-wise.
  remarks: >-
    *NOTE*: `Div` supports broadcasting. More about broadcasting
                  [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
  syntax:
    content: public TensorFlow.TFOutput Div (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Div'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Div*
  exceptions: []
- uid: TensorFlow.TFGraph.DrawBoundingBoxes(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: DrawBoundingBoxes(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: DrawBoundingBoxes(TFOutput, TFOutput, String)
  nameWithType: TFGraph.DrawBoundingBoxes(TFOutput, TFOutput, String)
  fullName: TFGraph.DrawBoundingBoxes(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Draw bounding boxes on a batch of images.
  remarks: "Outputs a copy of `images` but draws on top of the pixels zero or more bounding\n              boxes specified by the locations in `boxes`. The coordinates of the each\n              bounding box in `boxes` are encoded as `[y_min, x_min, y_max, x_max]`. The\n              bounding box coordinates are floats in `[0.0, 1.0]` relative to the width and\n              height of the underlying image.\n              \n              For example, if an image is 100 x 200 pixels and the bounding box is\n              `[0.1, 0.2, 0.5, 0.9]`, the bottom-left and upper-right coordinates of the\n              bounding box will be `(10, 40)` to `(50, 180)`.\n              \n              Parts of the bounding box may fall outside the image."
  syntax:
    content: public TensorFlow.TFOutput DrawBoundingBoxes (TensorFlow.TFOutput images, TensorFlow.TFOutput boxes, string operName = null);
    parameters:
    - id: images
      type: TensorFlow.TFOutput
      description: 4-D with shape `[batch, height, width, depth]`. A batch of images.
    - id: boxes
      type: TensorFlow.TFOutput
      description: >-
        3-D with shape `[batch, num_bounding_boxes, 4]` containing bounding
                      boxes.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'DrawBoundingBoxes'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        4-D with the same shape as `images`. The batch of input images with
                      bounding boxes drawn on the images.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.DrawBoundingBoxes*
  exceptions: []
- uid: TensorFlow.TFGraph.Dropout(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFShape,System.Nullable{System.Int32},System.String)
  id: Dropout(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFShape,System.Nullable{System.Int32},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Dropout(TFOutput, TFOutput, TFShape, Nullable<Int32>, String)
  nameWithType: TFGraph.Dropout(TFOutput, TFOutput, TFShape, Nullable<Int32>, String)
  fullName: TFGraph.Dropout(TFOutput, TFOutput, TFShape, Nullable<Int32>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes dropout.
  remarks: "With probability keep_prob, outputs the input element scaled up by 1 / keep_prob, \n            otherwise outputs 0. The scaling is so that the expected sum is unchanged."
  syntax:
    content: public TensorFlow.TFOutput Dropout (TensorFlow.TFOutput x, TensorFlow.TFOutput keep_prob, TensorFlow.TFShape noise_shape = null, Nullable<int> seed = null, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: A tensor.
    - id: keep_prob
      type: TensorFlow.TFOutput
      description: A scalar Tensor with the same type as x. The probability that each element is kept.
    - id: noise_shape
      type: TensorFlow.TFShape
      description: A 1-D Tensor of type int32, representing the shape for randomly generated keep/drop flags.
    - id: seed
      type: System.Nullable{System.Int32}
      description: Integer seed used for the random distribution, using the TensorFlow SetRandomSeed .
    - id: operName
      type: System.String
      description: Operation name, optional.
    return:
      type: TensorFlow.TFOutput
      description: To be added.
  overload: TensorFlow.TFGraph.Dropout*
  exceptions: []
- uid: TensorFlow.TFGraph.Dropout(TensorFlow.TFOutput,System.Double,TensorFlow.TFShape,System.Nullable{System.Int32},System.String)
  id: Dropout(TensorFlow.TFOutput,System.Double,TensorFlow.TFShape,System.Nullable{System.Int32},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Dropout(TFOutput, Double, TFShape, Nullable<Int32>, String)
  nameWithType: TFGraph.Dropout(TFOutput, Double, TFShape, Nullable<Int32>, String)
  fullName: TFGraph.Dropout(TFOutput, Double, TFShape, Nullable<Int32>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes dropout.
  remarks: "With probability keep_prob, outputs the input element scaled up by 1 / keep_prob, \n            otherwise outputs 0. The scaling is so that the expected sum is unchanged."
  syntax:
    content: public TensorFlow.TFOutput Dropout (TensorFlow.TFOutput x, double keep_prob, TensorFlow.TFShape noise_shape = null, Nullable<int> seed = null, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: A tensor.
    - id: keep_prob
      type: System.Double
      description: A scalar Tensor with the same type as x. The probability that each element is kept.
    - id: noise_shape
      type: TensorFlow.TFShape
      description: A 1-D Tensor of type int32, representing the shape for randomly generated keep/drop flags.
    - id: seed
      type: System.Nullable{System.Int32}
      description: Integer seed used for the random distribution, using the TensorFlow SetRandomSeed .
    - id: operName
      type: System.String
      description: Operation name, optional.
    return:
      type: TensorFlow.TFOutput
      description: To be added.
  overload: TensorFlow.TFGraph.Dropout*
  exceptions: []
- uid: TensorFlow.TFGraph.DynamicPartition(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.String)
  id: DynamicPartition(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: DynamicPartition(TFOutput, TFOutput, Int64, String)
  nameWithType: TFGraph.DynamicPartition(TFOutput, TFOutput, Int64, String)
  fullName: TFGraph.DynamicPartition(TFOutput, TFOutput, Int64, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Partitions `data` into `num_partitions` tensors using indices from `partitions`.
  remarks: "For each index tuple `js` of size `partitions.ndim`, the slice `data[js, ...]`\n              becomes part of `outputs[partitions[js]]`.  The slices with `partitions[js] = i`\n              are placed in `outputs[i]` in lexicographic order of `js`, and the first\n              dimension of `outputs[i]` is the number of entries in `partitions` equal to `i`.\n              In detail,\n              \n              ```python\n                  outputs[i].shape = [sum(partitions == i)] + data.shape[partitions.ndim:]\n              \n                  outputs[i] = pack([data[js, ...] for js if partitions[js] == i])\n              ```\n              \n              `data.shape` must start with `partitions.shape`.\n              \n              For example:\n              \n              ```python\n                  # Scalar partitions.\n                  partitions = 1\n                  num_partitions = 2\n                  data = [10, 20]\n                  outputs[0] = []  # Empty with shape [0, 2]\n                  outputs[1] = [[10, 20]]\n              \n                  # Vector partitions.\n                  partitions = [0, 0, 1, 1, 0]\n                  num_partitions = 2\n                  data = [10, 20, 30, 40, 50]\n                  outputs[0] = [10, 20, 50]\n                  outputs[1] = [30, 40]\n              ```\n              \n              See `dynamic_stitch` for an example on how to merge partitions back.\n              \n              &lt;div style=\"width:70%; margin:auto; margin-bottom:10px; margin-top:20px;\"&gt;\n              &lt;img style=\"width:100%\" src=\"https://www.tensorflow.org/images/DynamicPartition.png\" alt&gt;\n              &lt;/div&gt;"
  syntax:
    content: public TensorFlow.TFOutput[] DynamicPartition (TensorFlow.TFOutput data, TensorFlow.TFOutput partitions, long num_partitions, string operName = null);
    parameters:
    - id: data
      type: TensorFlow.TFOutput
      description: To be added.
    - id: partitions
      type: TensorFlow.TFOutput
      description: Any shape.  Indices in the range `[0, num_partitions)`.
    - id: num_partitions
      type: System.Int64
      description: The number of partitions to output.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'DynamicPartition'.
    return:
      type: TensorFlow.TFOutput[]
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.DynamicPartition*
  exceptions: []
- uid: TensorFlow.TFGraph.DynamicStitch(TensorFlow.TFOutput[],TensorFlow.TFOutput[],System.String)
  id: DynamicStitch(TensorFlow.TFOutput[],TensorFlow.TFOutput[],System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: DynamicStitch(TFOutput[], TFOutput[], String)
  nameWithType: TFGraph.DynamicStitch(TFOutput[], TFOutput[], String)
  fullName: TFGraph.DynamicStitch(TFOutput[], TFOutput[], String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Interleave the values from the `data` tensors into a single tensor.
  remarks: "Builds a merged tensor such that\n              \n              ```python\n                  merged[indices[m][i, ..., j], ...] = data[m][i, ..., j, ...]\n              ```\n              \n              For example, if each `indices[m]` is scalar or vector, we have\n              \n              ```python\n                  # Scalar indices:\n                  merged[indices[m], ...] = data[m][...]\n              \n                  # Vector indices:\n                  merged[indices[m][i], ...] = data[m][i, ...]\n              ```\n              \n              Each `data[i].shape` must start with the corresponding `indices[i].shape`,\n              and the rest of `data[i].shape` must be constant w.r.t. `i`.  That is, we\n              must have `data[i].shape = indices[i].shape + constant`.  In terms of this\n              `constant`, the output shape is\n              \n                  merged.shape = [max(indices)] + constant\n              \n              Values are merged in order, so if an index appears in both `indices[m][i]` and\n              `indices[n][j]` for `(m,i) &lt; (n,j)` the slice `data[n][j]` will appear in the\n              merged result.\n              \n              For example:\n              \n              ```python\n                  indices[0] = 6\n                  indices[1] = [4, 1]\n                  indices[2] = [[5, 2], [0, 3]]\n                  data[0] = [61, 62]\n                  data[1] = [[41, 42], [11, 12]]\n                  data[2] = [[[51, 52], [21, 22]], [[1, 2], [31, 32]]]\n                  merged = [[1, 2], [11, 12], [21, 22], [31, 32], [41, 42],\n                            [51, 52], [61, 62]]\n              ```\n              \n              This method can be used to merge partitions created by `dynamic_partition`\n              as illustrated on the following example:\n              \n              ```python\n                  # Apply function (increments x_i) on elements for which a certain condition\n                  # apply (x_i != -1 in this example).\n                  x=tf.constant([0.1, -1., 5.2, 4.3, -1., 7.4])\n                  condition_mask=tf.not_equal(x,tf.constant(-1.))\n                  partitioned_data = tf.dynamic_partition(\n                      x, tf.cast(condition_mask, tf.int32) , 2)\n                  partitioned_data[1] = partitioned_data[1] + 1.0\n                  condition_indices = tf.dynamic_partition(\n                      tf.range(tf.shape(x)[0]), tf.cast(condition_mask, tf.int32) , 2)\n                  x = tf.dynamic_stitch(condition_indices, partitioned_data)\n                  # Here x=[1.1, -1., 6.2, 5.3, -1, 8.4], the -1. values remain\n                  # unchanged.\n              ```\n              \n              &lt;div style=\"width:70%; margin:auto; margin-bottom:10px; margin-top:20px;\"&gt;\n              &lt;img style=\"width:100%\" src=\"https://www.tensorflow.org/images/DynamicStitch.png\" alt&gt;\n              &lt;/div&gt;"
  syntax:
    content: public TensorFlow.TFOutput DynamicStitch (TensorFlow.TFOutput[] indices, TensorFlow.TFOutput[] data, string operName = null);
    parameters:
    - id: indices
      type: TensorFlow.TFOutput[]
      description: To be added.
    - id: data
      type: TensorFlow.TFOutput[]
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'DynamicStitch'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.DynamicStitch*
  exceptions: []
- uid: TensorFlow.TFGraph.EditDistance(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: EditDistance(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: EditDistance(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.EditDistance(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.EditDistance(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the (possibly normalized) Levenshtein Edit Distance.
  remarks: "The inputs are variable-length sequences provided by SparseTensors\n                (hypothesis_indices, hypothesis_values, hypothesis_shape)\n              and\n                (truth_indices, truth_values, truth_shape).\n              \n              The inputs are:"
  syntax:
    content: public TensorFlow.TFOutput EditDistance (TensorFlow.TFOutput hypothesis_indices, TensorFlow.TFOutput hypothesis_values, TensorFlow.TFOutput hypothesis_shape, TensorFlow.TFOutput truth_indices, TensorFlow.TFOutput truth_values, TensorFlow.TFOutput truth_shape, Nullable<bool> normalize = null, string operName = null);
    parameters:
    - id: hypothesis_indices
      type: TensorFlow.TFOutput
      description: >-
        The indices of the hypothesis list SparseTensor.
                      This is an N x R int64 matrix.
    - id: hypothesis_values
      type: TensorFlow.TFOutput
      description: >-
        The values of the hypothesis list SparseTensor.
                      This is an N-length vector.
    - id: hypothesis_shape
      type: TensorFlow.TFOutput
      description: >-
        The shape of the hypothesis list SparseTensor.
                      This is an R-length vector.
    - id: truth_indices
      type: TensorFlow.TFOutput
      description: >-
        The indices of the truth list SparseTensor.
                      This is an M x R int64 matrix.
    - id: truth_values
      type: TensorFlow.TFOutput
      description: >-
        The values of the truth list SparseTensor.
                      This is an M-length vector.
    - id: truth_shape
      type: TensorFlow.TFOutput
      description: truth indices, vector.
    - id: normalize
      type: System.Nullable{System.Boolean}
      description: "Optional argument\n              boolean (if true, edit distances are normalized by length of truth).\n              \n              The output is:"
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'EditDistance'.
    return:
      type: TensorFlow.TFOutput
      description: "A dense float tensor with rank R - 1.\n              \n              For the example input:\n              \n                  // hypothesis represents a 2x1 matrix with variable-length values:\n                  //   (0,0) = [\"a\"]\n                  //   (1,0) = [\"b\"]\n                  hypothesis_indices = [[0, 0, 0],\n                                        [1, 0, 0]]\n                  hypothesis_values = [\"a\", \"b\"]\n                  hypothesis_shape = [2, 1, 1]\n              \n                  // truth represents a 2x2 matrix with variable-length values:\n                  //   (0,0) = []\n                  //   (0,1) = [\"a\"]\n                  //   (1,0) = [\"b\", \"c\"]\n                  //   (1,1) = [\"a\"]\n                  truth_indices = [[0, 1, 0],\n                                   [1, 0, 0],\n                                   [1, 0, 1],\n                                   [1, 1, 0]]\n                  truth_values = [\"a\", \"b\", \"c\", \"a\"]\n                  truth_shape = [2, 2, 2]\n                  normalize = true\n              \n              The output will be:\n              \n                  // output is a 2x2 matrix with edit distances normalized by truth lengths.\n                  output = [[inf, 1.0],  // (0,0): no truth, (0,1): no hypothesis\n                            [0.5, 1.0]]  // (1,0): addition, (1,1): no hypothesis\n              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result."
  overload: TensorFlow.TFGraph.EditDistance*
  exceptions: []
- uid: TensorFlow.TFGraph.Elu(TensorFlow.TFOutput,System.String)
  id: Elu(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Elu(TFOutput, String)
  nameWithType: TFGraph.Elu(TFOutput, String)
  fullName: TFGraph.Elu(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: 'Computes exponential linear: `exp(features) - 1` if &lt; 0, `features` otherwise.'
  remarks: >-
    See [Fast and Accurate Deep Network Learning by Exponential Linear Units (ELUs)
                  ](http://arxiv.org/abs/1511.07289)
  syntax:
    content: public TensorFlow.TFOutput Elu (TensorFlow.TFOutput features, string operName = null);
    parameters:
    - id: features
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Elu'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Elu*
  exceptions: []
- uid: TensorFlow.TFGraph.EluGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: EluGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: EluGrad(TFOutput, TFOutput, String)
  nameWithType: TFGraph.EluGrad(TFOutput, TFOutput, String)
  fullName: TFGraph.EluGrad(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes gradients for the exponential linear (Elu) operation.
  syntax:
    content: public TensorFlow.TFOutput EluGrad (TensorFlow.TFOutput gradients, TensorFlow.TFOutput outputs, string operName = null);
    parameters:
    - id: gradients
      type: TensorFlow.TFOutput
      description: The backpropagated gradients to the corresponding Elu operation.
    - id: outputs
      type: TensorFlow.TFOutput
      description: The outputs of the corresponding Elu operation.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'EluGrad'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The gradients: `gradients * (outputs + 1)` if outputs &lt; 0,
                      `gradients` otherwise.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.EluGrad*
  exceptions: []
- uid: TensorFlow.TFGraph.EncodeBase64(TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: EncodeBase64(TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: EncodeBase64(TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.EncodeBase64(TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.EncodeBase64(TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Encode strings into web-safe base64 format.
  remarks: "Refer to the following article for more information on base64 format:\n              en.wikipedia.org/wiki/Base64. Base64 strings may have padding with '=' at the\n              end so that the encoded has length multiple of 4. See Padding section of the\n              link above.\n              \n              Web-safe means that the encoder uses - and _ instead of + and /."
  syntax:
    content: public TensorFlow.TFOutput EncodeBase64 (TensorFlow.TFOutput input, Nullable<bool> pad = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: Strings to be encoded.
    - id: pad
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      Bool whether padding is applied at the ends.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'EncodeBase64'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Input strings encoded in base64.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.EncodeBase64*
  exceptions: []
- uid: TensorFlow.TFGraph.EncodeJpeg(TensorFlow.TFOutput,System.String,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String)
  id: EncodeJpeg(TensorFlow.TFOutput,System.String,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: EncodeJpeg(TFOutput, String, Nullable<Int64>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, String, Nullable<Int64>, Nullable<Int64>, String, String)
  nameWithType: TFGraph.EncodeJpeg(TFOutput, String, Nullable<Int64>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, String, Nullable<Int64>, Nullable<Int64>, String, String)
  fullName: TFGraph.EncodeJpeg(TFOutput, String, Nullable<Int64>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, String, Nullable<Int64>, Nullable<Int64>, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: JPEG-encode an image.
  remarks: "`image` is a 3-D uint8 Tensor of shape `[height, width, channels]`.\n              \n              The attr `format` can be used to override the color format of the encoded\n              output.  Values can be:\n              \n              *   `''`: Use a default format based on the number of channels in the image.\n              *   `grayscale`: Output a grayscale JPEG image.  The `channels` dimension\n                  of `image` must be 1.\n              *   `rgb`: Output an RGB JPEG image. The `channels` dimension\n                  of `image` must be 3.\n              \n              If `format` is not specified or is the empty string, a default format is picked\n              in function of the number of channels in `image`:\n              \n              *   1: Output a grayscale image.\n              *   3: Output an RGB image."
  syntax:
    content: public TensorFlow.TFOutput EncodeJpeg (TensorFlow.TFOutput image, string format = null, Nullable<long> quality = null, Nullable<bool> progressive = null, Nullable<bool> optimize_size = null, Nullable<bool> chroma_downsampling = null, string density_unit = null, Nullable<long> x_density = null, Nullable<long> y_density = null, string xmp_metadata = null, string operName = null);
    parameters:
    - id: image
      type: TensorFlow.TFOutput
      description: 3-D with shape `[height, width, channels]`.
    - id: format
      type: System.String
      description: >-
        Optional argument
                      Per pixel image format.
    - id: quality
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      Quality of the compression from 0 to 100 (higher is better and slower).
    - id: progressive
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If True, create a JPEG that loads progressively (coarse to fine).
    - id: optimize_size
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If True, spend CPU/RAM to reduce size with no quality change.
    - id: chroma_downsampling
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      See http://en.wikipedia.org/wiki/Chroma_subsampling.
    - id: density_unit
      type: System.String
      description: >-
        Optional argument
                      Unit used to specify `x_density` and `y_density`:
                      pixels per inch (`'in'`) or centimeter (`'cm'`).
    - id: x_density
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      Horizontal pixels per density unit.
    - id: y_density
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      Vertical pixels per density unit.
    - id: xmp_metadata
      type: System.String
      description: >-
        Optional argument
                      If not empty, embed this XMP metadata in the image header.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'EncodeJpeg'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        0-D. JPEG-encoded image.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.EncodeJpeg*
  exceptions: []
- uid: TensorFlow.TFGraph.EncodePng(TensorFlow.TFOutput,System.Nullable{System.Int64},System.String)
  id: EncodePng(TensorFlow.TFOutput,System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: EncodePng(TFOutput, Nullable<Int64>, String)
  nameWithType: TFGraph.EncodePng(TFOutput, Nullable<Int64>, String)
  fullName: TFGraph.EncodePng(TFOutput, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: PNG-encode an image.
  remarks: "`image` is a 3-D uint8 or uint16 Tensor of shape `[height, width, channels]`\n              where `channels` is:\n              \n              *   1: for grayscale.\n              *   2: for grayscale + alpha.\n              *   3: for RGB.\n              *   4: for RGBA.\n              \n              The ZLIB compression level, `compression`, can be -1 for the PNG-encoder\n              default or a value from 0 to 9.  9 is the highest compression level, generating\n              the smallest output, but is slower."
  syntax:
    content: public TensorFlow.TFOutput EncodePng (TensorFlow.TFOutput image, Nullable<long> compression = null, string operName = null);
    parameters:
    - id: image
      type: TensorFlow.TFOutput
      description: 3-D with shape `[height, width, channels]`.
    - id: compression
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      Compression level.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'EncodePng'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        0-D. PNG-encoded image.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.EncodePng*
  exceptions: []
- uid: TensorFlow.TFGraph.EncodeWav(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: EncodeWav(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: EncodeWav(TFOutput, TFOutput, String)
  nameWithType: TFGraph.EncodeWav(TFOutput, TFOutput, String)
  fullName: TFGraph.EncodeWav(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Encode audio data using the WAV file format.
  remarks: "This operation will generate a string suitable to be saved out to create a .wav\n              audio file. It will be encoded in the 16-bit PCM format. It takes in float\n              values in the range -1.0f to 1.0f, and any outside that value will be clamped to\n              that range.\n              \n              `audio` is a 2-D float Tensor of shape `[length, channels]`.\n              `sample_rate` is a scalar Tensor holding the rate to use (e.g. 44100)."
  syntax:
    content: public TensorFlow.TFOutput EncodeWav (TensorFlow.TFOutput audio, TensorFlow.TFOutput sample_rate, string operName = null);
    parameters:
    - id: audio
      type: TensorFlow.TFOutput
      description: 2-D with shape `[length, channels]`.
    - id: sample_rate
      type: TensorFlow.TFOutput
      description: Scalar containing the sample frequency.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'EncodeWav'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        0-D. WAV-encoded file contents.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.EncodeWav*
  exceptions: []
- uid: TensorFlow.TFGraph.Enter(TensorFlow.TFOutput,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.String)
  id: Enter(TensorFlow.TFOutput,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Enter(TFOutput, String, Nullable<Boolean>, Nullable<Int64>, String)
  nameWithType: TFGraph.Enter(TFOutput, String, Nullable<Boolean>, Nullable<Int64>, String)
  fullName: TFGraph.Enter(TFOutput, String, Nullable<Boolean>, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Creates or finds a child frame, and makes `data` available to the child frame.
  remarks: >-
    This op is used together with `Exit` to create loops in the graph.
                  The unique `frame_name` is used by the `Executor` to identify frames. If
                  `is_constant` is true, `output` is a constant in the child frame; otherwise
                  it may be changed in the child frame. At most `parallel_iterations` iterations
                  are run in parallel in the child frame.
  syntax:
    content: public TensorFlow.TFOutput Enter (TensorFlow.TFOutput data, string frame_name, Nullable<bool> is_constant = null, Nullable<long> parallel_iterations = null, string operName = null);
    parameters:
    - id: data
      type: TensorFlow.TFOutput
      description: The tensor to be made available to the child frame.
    - id: frame_name
      type: System.String
      description: The name of the child frame.
    - id: is_constant
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true, the output is constant within the child frame.
    - id: parallel_iterations
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      The number of iterations allowed to run in parallel.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Enter'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The same tensor as `data`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Enter*
  exceptions: []
- uid: TensorFlow.TFGraph.Equal(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: Equal(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Equal(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Equal(TFOutput, TFOutput, String)
  fullName: TFGraph.Equal(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns the truth value of (x == y) element-wise.
  remarks: >-
    *NOTE*: `Equal` supports broadcasting. More about broadcasting
                  [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
  syntax:
    content: public TensorFlow.TFOutput Equal (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Equal'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Equal*
  exceptions: []
- uid: TensorFlow.TFGraph.Erf(TensorFlow.TFOutput,System.String)
  id: Erf(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Erf(TFOutput, String)
  nameWithType: TFGraph.Erf(TFOutput, String)
  fullName: TFGraph.Erf(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the Gauss error function of `x` element-wise.
  syntax:
    content: public TensorFlow.TFOutput Erf (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Erf'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Erf*
  exceptions: []
- uid: TensorFlow.TFGraph.Erfc(TensorFlow.TFOutput,System.String)
  id: Erfc(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Erfc(TFOutput, String)
  nameWithType: TFGraph.Erfc(TFOutput, String)
  fullName: TFGraph.Erfc(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the complementary error function of `x` element-wise.
  syntax:
    content: public TensorFlow.TFOutput Erfc (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Erfc'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Erfc*
  exceptions: []
- uid: TensorFlow.TFGraph.Exit(TensorFlow.TFOutput,System.String)
  id: Exit(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Exit(TFOutput, String)
  nameWithType: TFGraph.Exit(TFOutput, String)
  fullName: TFGraph.Exit(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Exits the current frame to its parent frame.
  remarks: Exit makes its input `data` available to the parent frame.
  syntax:
    content: public TensorFlow.TFOutput Exit (TensorFlow.TFOutput data, string operName = null);
    parameters:
    - id: data
      type: TensorFlow.TFOutput
      description: The tensor to be made available to the parent frame.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Exit'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The same tensor as `data`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Exit*
  exceptions: []
- uid: TensorFlow.TFGraph.Exp(TensorFlow.TFOutput,System.String)
  id: Exp(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Exp(TFOutput, String)
  nameWithType: TFGraph.Exp(TFOutput, String)
  fullName: TFGraph.Exp(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes exponential of x element-wise.  \\(y = e^x\\).
  syntax:
    content: public TensorFlow.TFOutput Exp (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Exp'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Exp*
  exceptions: []
- uid: TensorFlow.TFGraph.ExpandDims(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: ExpandDims(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ExpandDims(TFOutput, TFOutput, String)
  nameWithType: TFGraph.ExpandDims(TFOutput, TFOutput, String)
  fullName: TFGraph.ExpandDims(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Inserts a dimension of 1 into a tensor's shape.
  remarks: "Given a tensor `input`, this operation inserts a dimension of 1 at the\n              dimension index `dim` of `input`'s shape. The dimension index `dim` starts at\n              zero; if you specify a negative number for `dim` it is counted backward from\n              the end.\n              \n              This operation is useful if you want to add a batch dimension to a single\n              element. For example, if you have a single image of shape `[height, width,\n              channels]`, you can make it a batch of 1 image with `expand_dims(image, 0)`,\n              which will make the shape `[1, height, width, channels]`.\n              \n              Other examples:\n              \n              ```\n              # 't' is a tensor of shape [2]\n              shape(expand_dims(t, 0)) ==&gt; [1, 2]\n              shape(expand_dims(t, 1)) ==&gt; [2, 1]\n              shape(expand_dims(t, -1)) ==&gt; [2, 1]\n              \n              # 't2' is a tensor of shape [2, 3, 5]\n              shape(expand_dims(t2, 0)) ==&gt; [1, 2, 3, 5]\n              shape(expand_dims(t2, 2)) ==&gt; [2, 3, 1, 5]\n              shape(expand_dims(t2, 3)) ==&gt; [2, 3, 5, 1]\n              ```\n              \n              This operation requires that:\n              \n              `-1-input.dims() &lt;= dim &lt;= input.dims()`\n              \n              This operation is related to `squeeze()`, which removes dimensions of\n              size 1."
  syntax:
    content: public TensorFlow.TFOutput ExpandDims (TensorFlow.TFOutput input, TensorFlow.TFOutput dim, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: To be added.
    - id: dim
      type: TensorFlow.TFOutput
      description: >-
        0-D (scalar). Specifies the dimension index at which to
                      expand the shape of `input`.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ExpandDims'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Contains the same data as `input`, but its shape has an additional
                      dimension of size 1 added.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ExpandDims*
  exceptions: []
- uid: TensorFlow.TFGraph.Expm1(TensorFlow.TFOutput,System.String)
  id: Expm1(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Expm1(TFOutput, String)
  nameWithType: TFGraph.Expm1(TFOutput, String)
  fullName: TFGraph.Expm1(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes exponential of x - 1 element-wise.
  remarks: I.e., \\(y = (\exp x) - 1\\).
  syntax:
    content: public TensorFlow.TFOutput Expm1 (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Expm1'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Expm1*
  exceptions: []
- uid: TensorFlow.TFGraph.ExtractGlimpse(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  id: ExtractGlimpse(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ExtractGlimpse(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, String)
  nameWithType: TFGraph.ExtractGlimpse(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, String)
  fullName: TFGraph.ExtractGlimpse(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Extracts a glimpse from the input tensor.
  remarks: "Returns a set of windows called glimpses extracted at location\n              `offsets` from the input tensor. If the windows only partially\n              overlaps the inputs, the non overlapping areas will be filled with\n              random noise.\n              \n              The result is a 4-D tensor of shape `[batch_size, glimpse_height,\n              glimpse_width, channels]`. The channels and batch dimensions are the\n              same as that of the input tensor. The height and width of the output\n              windows are specified in the `size` parameter.\n              \n              The argument `normalized` and `centered` controls how the windows are built:\n              \n              * If the coordinates are normalized but not centered, 0.0 and 1.0\n                correspond to the minimum and maximum of each height and width\n                dimension.\n              * If the coordinates are both normalized and centered, they range from\n                -1.0 to 1.0. The coordinates (-1.0, -1.0) correspond to the upper\n                left corner, the lower right corner is located at (1.0, 1.0) and the\n                center is at (0, 0).\n              * If the coordinates are not normalized they are interpreted as\n                numbers of pixels."
  syntax:
    content: public TensorFlow.TFOutput ExtractGlimpse (TensorFlow.TFOutput input, TensorFlow.TFOutput size, TensorFlow.TFOutput offsets, Nullable<bool> centered = null, Nullable<bool> normalized = null, Nullable<bool> uniform_noise = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: A 4-D float tensor of shape `[batch_size, height, width, channels]`.
    - id: size
      type: TensorFlow.TFOutput
      description: >-
        A 1-D tensor of 2 elements containing the size of the glimpses
                      to extract.  The glimpse height must be specified first, following
                      by the glimpse width.
    - id: offsets
      type: TensorFlow.TFOutput
      description: >-
        A 2-D integer tensor of shape `[batch_size, 2]` containing
                      the y, x locations of the center of each window.
    - id: centered
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      indicates if the offset coordinates are centered relative to
                      the image, in which case the (0, 0) offset is relative to the center
                      of the input images. If false, the (0,0) offset corresponds to the
                      upper left corner of the input images.
    - id: normalized
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      indicates if the offset coordinates are normalized.
    - id: uniform_noise
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      indicates if the noise should be generated using a
                      uniform distribution or a Gaussian distribution.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ExtractGlimpse'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        A tensor representing the glimpses `[batch_size,
                      glimpse_height, glimpse_width, channels]`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ExtractGlimpse*
  exceptions: []
- uid: TensorFlow.TFGraph.ExtractImagePatches(TensorFlow.TFOutput,System.Int64[],System.Int64[],System.Int64[],System.String,System.String)
  id: ExtractImagePatches(TensorFlow.TFOutput,System.Int64[],System.Int64[],System.Int64[],System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ExtractImagePatches(TFOutput, Int64[], Int64[], Int64[], String, String)
  nameWithType: TFGraph.ExtractImagePatches(TFOutput, Int64[], Int64[], Int64[], String, String)
  fullName: TFGraph.ExtractImagePatches(TFOutput, Int64[], Int64[], Int64[], String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Extract `patches` from `images` and put them in the "depth" output dimension.
  syntax:
    content: public TensorFlow.TFOutput ExtractImagePatches (TensorFlow.TFOutput images, long[] ksizes, long[] strides, long[] rates, string padding, string operName = null);
    parameters:
    - id: images
      type: TensorFlow.TFOutput
      description: 4-D Tensor with shape `[batch, in_rows, in_cols, depth]`.
    - id: ksizes
      type: System.Int64[]
      description: The size of the sliding window for each dimension of `images`.
    - id: strides
      type: System.Int64[]
      description: >-
        1-D of length 4. How far the centers of two consecutive patches are in
                      the images. Must be: `[1, stride_rows, stride_cols, 1]`.
    - id: rates
      type: System.Int64[]
      description: >-
        1-D of length 4. Must be: `[1, rate_rows, rate_cols, 1]`. This is the
                      input stride, specifying how far two consecutive patch samples are in the
                      input. Equivalent to extracting patches with
                      `patch_sizes_eff = patch_sizes + (patch_sizes - 1) * (rates - 1)`, followed by
                      subsampling them spatially by a factor of `rates`.
    - id: padding
      type: System.String
      description: "The type of padding algorithm to use.\n              \n              We specify the size-related attributes as:\n              \n              ```python\n                    ksizes = [1, ksize_rows, ksize_cols, 1]\n                    strides = [1, strides_rows, strides_cols, 1]\n                    rates = [1, rates_rows, rates_cols, 1]\n              ```"
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ExtractImagePatches'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        4-D Tensor with shape `[batch, out_rows, out_cols, ksize_rows *
                      ksize_cols * depth]` containing image patches with size
                      `ksize_rows x ksize_cols x depth` vectorized in the "depth" dimension.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ExtractImagePatches*
  exceptions: []
- uid: TensorFlow.TFGraph.Fact(System.String)
  id: Fact(System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Fact(String)
  nameWithType: TFGraph.Fact(String)
  fullName: TFGraph.Fact(String)
  type: Method
  assemblies: []
  namespace: TensorFlow
  summary: Output a fact about factorials.
  syntax:
    content: public TensorFlow.TFOutput Fact (string operName = null);
    parameters:
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Fact'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Fact*
  exceptions: []
- uid: TensorFlow.TFGraph.FakeQuantWithMinMaxArgs(TensorFlow.TFOutput,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int64},System.String)
  id: FakeQuantWithMinMaxArgs(TensorFlow.TFOutput,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: FakeQuantWithMinMaxArgs(TFOutput, Nullable<Single>, Nullable<Single>, Nullable<Int64>, String)
  nameWithType: TFGraph.FakeQuantWithMinMaxArgs(TFOutput, Nullable<Single>, Nullable<Single>, Nullable<Int64>, String)
  fullName: TFGraph.FakeQuantWithMinMaxArgs(TFOutput, Nullable<Single>, Nullable<Single>, Nullable<Int64>, String)
  type: Method
  assemblies: []
  namespace: TensorFlow
  summary: Fake-quantize the 'inputs' tensor, type float to 'outputs' tensor of same type.
  remarks: "Attributes [min; max] define the clamping range for the 'inputs' data.  Op\n              divides this range into 255 steps (total of 256 values), then replaces each\n              'inputs' value with the closest of the quantized step values.\n              'num_bits' is the bitwidth of the quantization; between 2 and 8, inclusive.\n              \n              Quantization is called fake since the output is still in floating point."
  syntax:
    content: public TensorFlow.TFOutput FakeQuantWithMinMaxArgs (TensorFlow.TFOutput inputs, Nullable<float> min = null, Nullable<float> max = null, Nullable<long> num_bits = null, string operName = null);
    parameters:
    - id: inputs
      type: TensorFlow.TFOutput
      description: To be added.
    - id: min
      type: System.Nullable{System.Single}
      description: Optional argument
    - id: max
      type: System.Nullable{System.Single}
      description: Optional argument
    - id: num_bits
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'FakeQuantWithMinMaxArgs'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.FakeQuantWithMinMaxArgs*
  exceptions: []
- uid: TensorFlow.TFGraph.FakeQuantWithMinMaxArgs(TensorFlow.TFOutput,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String)
  id: FakeQuantWithMinMaxArgs(TensorFlow.TFOutput,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: FakeQuantWithMinMaxArgs(TFOutput, Nullable<Single>, Nullable<Single>, Nullable<Int64>, Nullable<Boolean>, String)
  nameWithType: TFGraph.FakeQuantWithMinMaxArgs(TFOutput, Nullable<Single>, Nullable<Single>, Nullable<Int64>, Nullable<Boolean>, String)
  fullName: TFGraph.FakeQuantWithMinMaxArgs(TFOutput, Nullable<Single>, Nullable<Single>, Nullable<Int64>, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Fake-quantize the 'inputs' tensor, type float to 'outputs' tensor of same type.
  remarks: "Attributes `[min; max]` define the clamping range for the `inputs` data.\n              `inputs` values are quantized into the quantization range (`[0; 2^num_bits - 1]`\n              when `narrow_range` is false and `[1; 2^num_bits - 1]` when it is true) and\n              then de-quantized and output as floats in `[min; max]` interval.\n              `num_bits` is the bitwidth of the quantization; between 2 and 8, inclusive.\n              \n              Quantization is called fake since the output is still in floating point."
  syntax:
    content: public TensorFlow.TFOutput FakeQuantWithMinMaxArgs (TensorFlow.TFOutput inputs, Nullable<float> min = null, Nullable<float> max = null, Nullable<long> num_bits = null, Nullable<bool> narrow_range = null, string operName = null);
    parameters:
    - id: inputs
      type: TensorFlow.TFOutput
      description: To be added.
    - id: min
      type: System.Nullable{System.Single}
      description: Optional argument
    - id: max
      type: System.Nullable{System.Single}
      description: Optional argument
    - id: num_bits
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: narrow_range
      type: System.Nullable{System.Boolean}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'FakeQuantWithMinMaxArgs'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.FakeQuantWithMinMaxArgs*
  exceptions: []
- uid: TensorFlow.TFGraph.FakeQuantWithMinMaxArgsGradient(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int64},System.String)
  id: FakeQuantWithMinMaxArgsGradient(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: FakeQuantWithMinMaxArgsGradient(TFOutput, TFOutput, Nullable<Single>, Nullable<Single>, Nullable<Int64>, String)
  nameWithType: TFGraph.FakeQuantWithMinMaxArgsGradient(TFOutput, TFOutput, Nullable<Single>, Nullable<Single>, Nullable<Int64>, String)
  fullName: TFGraph.FakeQuantWithMinMaxArgsGradient(TFOutput, TFOutput, Nullable<Single>, Nullable<Single>, Nullable<Int64>, String)
  type: Method
  assemblies: []
  namespace: TensorFlow
  summary: Compute gradients for a FakeQuantWithMinMaxArgs operation.
  syntax:
    content: public TensorFlow.TFOutput FakeQuantWithMinMaxArgsGradient (TensorFlow.TFOutput gradients, TensorFlow.TFOutput inputs, Nullable<float> min = null, Nullable<float> max = null, Nullable<long> num_bits = null, string operName = null);
    parameters:
    - id: gradients
      type: TensorFlow.TFOutput
      description: Backpropagated gradients above the FakeQuantWithMinMaxArgs operation.
    - id: inputs
      type: TensorFlow.TFOutput
      description: Values passed as inputs to the FakeQuantWithMinMaxArgs operation.
    - id: min
      type: System.Nullable{System.Single}
      description: Optional argument
    - id: max
      type: System.Nullable{System.Single}
      description: Optional argument
    - id: num_bits
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'FakeQuantWithMinMaxArgsGradient'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Backpropagated gradients below the FakeQuantWithMinMaxArgs operation:
                      `gradients * (inputs &gt;= min && inputs &lt;= max)`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.FakeQuantWithMinMaxArgsGradient*
  exceptions: []
- uid: TensorFlow.TFGraph.FakeQuantWithMinMaxArgsGradient(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String)
  id: FakeQuantWithMinMaxArgsGradient(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: FakeQuantWithMinMaxArgsGradient(TFOutput, TFOutput, Nullable<Single>, Nullable<Single>, Nullable<Int64>, Nullable<Boolean>, String)
  nameWithType: TFGraph.FakeQuantWithMinMaxArgsGradient(TFOutput, TFOutput, Nullable<Single>, Nullable<Single>, Nullable<Int64>, Nullable<Boolean>, String)
  fullName: TFGraph.FakeQuantWithMinMaxArgsGradient(TFOutput, TFOutput, Nullable<Single>, Nullable<Single>, Nullable<Int64>, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Compute gradients for a FakeQuantWithMinMaxArgs operation.
  syntax:
    content: public TensorFlow.TFOutput FakeQuantWithMinMaxArgsGradient (TensorFlow.TFOutput gradients, TensorFlow.TFOutput inputs, Nullable<float> min = null, Nullable<float> max = null, Nullable<long> num_bits = null, Nullable<bool> narrow_range = null, string operName = null);
    parameters:
    - id: gradients
      type: TensorFlow.TFOutput
      description: Backpropagated gradients above the FakeQuantWithMinMaxArgs operation.
    - id: inputs
      type: TensorFlow.TFOutput
      description: Values passed as inputs to the FakeQuantWithMinMaxArgs operation.
    - id: min
      type: System.Nullable{System.Single}
      description: Optional argument
    - id: max
      type: System.Nullable{System.Single}
      description: Optional argument
    - id: num_bits
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: narrow_range
      type: System.Nullable{System.Boolean}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'FakeQuantWithMinMaxArgsGradient'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Backpropagated gradients below the FakeQuantWithMinMaxArgs operation:
                      `gradients * (inputs &gt;= min && inputs &lt;= max)`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.FakeQuantWithMinMaxArgsGradient*
  exceptions: []
- uid: TensorFlow.TFGraph.FakeQuantWithMinMaxVars(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.String)
  id: FakeQuantWithMinMaxVars(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: FakeQuantWithMinMaxVars(TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
  nameWithType: TFGraph.FakeQuantWithMinMaxVars(TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
  fullName: TFGraph.FakeQuantWithMinMaxVars(TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
  type: Method
  assemblies: []
  namespace: TensorFlow
  summary: Fake-quantize the 'inputs' tensor of type float via global float scalars `min`
  remarks: "and `max` to 'outputs' tensor of same shape as `inputs`.\n              \n              [min; max] is the clamping range for the 'inputs' data.  Op divides this range\n              into 255 steps (total of 256 values), then replaces each 'inputs' value with the\n              closest of the quantized step values.\n              'num_bits' is the bitwidth of the quantization; between 2 and 8, inclusive.\n              \n              This operation has a gradient and thus allows for training `min` and `max` values."
  syntax:
    content: public TensorFlow.TFOutput FakeQuantWithMinMaxVars (TensorFlow.TFOutput inputs, TensorFlow.TFOutput min, TensorFlow.TFOutput max, Nullable<long> num_bits = null, string operName = null);
    parameters:
    - id: inputs
      type: TensorFlow.TFOutput
      description: To be added.
    - id: min
      type: TensorFlow.TFOutput
      description: To be added.
    - id: max
      type: TensorFlow.TFOutput
      description: To be added.
    - id: num_bits
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'FakeQuantWithMinMaxVars'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.FakeQuantWithMinMaxVars*
  exceptions: []
- uid: TensorFlow.TFGraph.FakeQuantWithMinMaxVars(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String)
  id: FakeQuantWithMinMaxVars(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: FakeQuantWithMinMaxVars(TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Boolean>, String)
  nameWithType: TFGraph.FakeQuantWithMinMaxVars(TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Boolean>, String)
  fullName: TFGraph.FakeQuantWithMinMaxVars(TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Fake-quantize the 'inputs' tensor of type float via global float scalars `min`
  remarks: "and `max` to 'outputs' tensor of same shape as `inputs`.\n              \n              `[min; max]` define the clamping range for the `inputs` data.\n              `inputs` values are quantized into the quantization range (`[0; 2^num_bits - 1]`\n              when `narrow_range` is false and `[1; 2^num_bits - 1]` when it is true) and\n              then de-quantized and output as floats in `[min; max]` interval.\n              `num_bits` is the bitwidth of the quantization; between 2 and 8, inclusive.\n              \n              This operation has a gradient and thus allows for training `min` and `max`\n              values."
  syntax:
    content: public TensorFlow.TFOutput FakeQuantWithMinMaxVars (TensorFlow.TFOutput inputs, TensorFlow.TFOutput min, TensorFlow.TFOutput max, Nullable<long> num_bits = null, Nullable<bool> narrow_range = null, string operName = null);
    parameters:
    - id: inputs
      type: TensorFlow.TFOutput
      description: To be added.
    - id: min
      type: TensorFlow.TFOutput
      description: To be added.
    - id: max
      type: TensorFlow.TFOutput
      description: To be added.
    - id: num_bits
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: narrow_range
      type: System.Nullable{System.Boolean}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'FakeQuantWithMinMaxVars'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.FakeQuantWithMinMaxVars*
  exceptions: []
- uid: TensorFlow.TFGraph.FakeQuantWithMinMaxVarsGradient(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String)
  id: FakeQuantWithMinMaxVarsGradient(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: FakeQuantWithMinMaxVarsGradient(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Boolean>, String)
  nameWithType: TFGraph.FakeQuantWithMinMaxVarsGradient(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Boolean>, String)
  fullName: TFGraph.FakeQuantWithMinMaxVarsGradient(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Compute gradients for a FakeQuantWithMinMaxVars operation.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> FakeQuantWithMinMaxVarsGradient (TensorFlow.TFOutput gradients, TensorFlow.TFOutput inputs, TensorFlow.TFOutput min, TensorFlow.TFOutput max, Nullable<long> num_bits = null, Nullable<bool> narrow_range = null, string operName = null);
    parameters:
    - id: gradients
      type: TensorFlow.TFOutput
      description: Backpropagated gradients above the FakeQuantWithMinMaxVars operation.
    - id: inputs
      type: TensorFlow.TFOutput
      description: >-
        Values passed as inputs to the FakeQuantWithMinMaxVars operation.
                      min, max: Quantization interval, scalar floats.
    - id: min
      type: TensorFlow.TFOutput
      description: To be added.
    - id: max
      type: TensorFlow.TFOutput
      description: To be added.
    - id: num_bits
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      The bitwidth of the quantization; between 2 and 8, inclusive.
    - id: narrow_range
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      Whether to quantize into 2^num_bits - 1 distinct values.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'FakeQuantWithMinMaxVarsGradient'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      backprops_wrt_input: Backpropagated gradients w.r.t. inputs:
                      `gradients * (inputs &gt;= min && inputs &lt;= max)`.
                      backprop_wrt_min: Backpropagated gradients w.r.t. min parameter:
                      `sum(gradients * (inputs &lt; min))`.
                      backprop_wrt_max: Backpropagated gradients w.r.t. max parameter:
                      `sum(gradients * (inputs &gt; max))`.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.FakeQuantWithMinMaxVarsGradient*
  exceptions: []
- uid: TensorFlow.TFGraph.FakeQuantWithMinMaxVarsGradient(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.String)
  id: FakeQuantWithMinMaxVarsGradient(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: FakeQuantWithMinMaxVarsGradient(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
  nameWithType: TFGraph.FakeQuantWithMinMaxVarsGradient(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
  fullName: TFGraph.FakeQuantWithMinMaxVarsGradient(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
  type: Method
  assemblies: []
  namespace: TensorFlow
  summary: Compute gradients for a FakeQuantWithMinMaxVars operation.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> FakeQuantWithMinMaxVarsGradient (TensorFlow.TFOutput gradients, TensorFlow.TFOutput inputs, TensorFlow.TFOutput min, TensorFlow.TFOutput max, Nullable<long> num_bits = null, string operName = null);
    parameters:
    - id: gradients
      type: TensorFlow.TFOutput
      description: Backpropagated gradients above the FakeQuantWithMinMaxVars operation.
    - id: inputs
      type: TensorFlow.TFOutput
      description: >-
        Values passed as inputs to the FakeQuantWithMinMaxVars operation.
                      min, max: Quantization interval, scalar floats.
    - id: min
      type: TensorFlow.TFOutput
      description: To be added.
    - id: max
      type: TensorFlow.TFOutput
      description: To be added.
    - id: num_bits
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      The bitwidth of the quantization; between 2 and 8, inclusive.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'FakeQuantWithMinMaxVarsGradient'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      backprops_wrt_input: Backpropagated gradients w.r.t. inputs:
                      `gradients * (inputs &gt;= min && inputs &lt;= max)`.
                      backprop_wrt_min: Backpropagated gradients w.r.t. min parameter:
                      `sum(gradients * (inputs &lt; min))`.
                      backprop_wrt_max: Backpropagated gradients w.r.t. max parameter:
                      `sum(gradients * (inputs &gt; max))`.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.FakeQuantWithMinMaxVarsGradient*
  exceptions: []
- uid: TensorFlow.TFGraph.FakeQuantWithMinMaxVarsPerChannel(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.String)
  id: FakeQuantWithMinMaxVarsPerChannel(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: FakeQuantWithMinMaxVarsPerChannel(TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
  nameWithType: TFGraph.FakeQuantWithMinMaxVarsPerChannel(TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
  fullName: TFGraph.FakeQuantWithMinMaxVarsPerChannel(TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
  type: Method
  assemblies: []
  namespace: TensorFlow
  summary: "Fake-quantize the 'inputs' tensor of type float and one of the shapes: `[d]`,"
  remarks: "`[b, d]` `[b, h, w, d]` via per-channel floats `min` and `max` of shape `[d]`\n              to 'outputs' tensor of same shape as `inputs`.\n              \n              [min; max] is the clamping range for the 'inputs' data in the corresponding\n              depth channel.  Op divides this range into 255 steps (total of 256 values), then\n              replaces each 'inputs' value with the closest of the quantized step values.\n              'num_bits' is the bitwidth of the quantization; between 2 and 8, inclusive.\n              \n              This operation has a gradient and thus allows for training `min` and `max` values."
  syntax:
    content: public TensorFlow.TFOutput FakeQuantWithMinMaxVarsPerChannel (TensorFlow.TFOutput inputs, TensorFlow.TFOutput min, TensorFlow.TFOutput max, Nullable<long> num_bits = null, string operName = null);
    parameters:
    - id: inputs
      type: TensorFlow.TFOutput
      description: To be added.
    - id: min
      type: TensorFlow.TFOutput
      description: To be added.
    - id: max
      type: TensorFlow.TFOutput
      description: To be added.
    - id: num_bits
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'FakeQuantWithMinMaxVarsPerChannel'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.FakeQuantWithMinMaxVarsPerChannel*
  exceptions: []
- uid: TensorFlow.TFGraph.FakeQuantWithMinMaxVarsPerChannel(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String)
  id: FakeQuantWithMinMaxVarsPerChannel(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: FakeQuantWithMinMaxVarsPerChannel(TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Boolean>, String)
  nameWithType: TFGraph.FakeQuantWithMinMaxVarsPerChannel(TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Boolean>, String)
  fullName: TFGraph.FakeQuantWithMinMaxVarsPerChannel(TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: "Fake-quantize the 'inputs' tensor of type float and one of the shapes: `[d]`,"
  remarks: "`[b, d]` `[b, h, w, d]` via per-channel floats `min` and `max` of shape `[d]`\n              to 'outputs' tensor of same shape as `inputs`.\n              \n              `[min; max]` define the clamping range for the `inputs` data.\n              `inputs` values are quantized into the quantization range (`[0; 2^num_bits - 1]`\n              when `narrow_range` is false and `[1; 2^num_bits - 1]` when it is true) and\n              then de-quantized and output as floats in `[min; max]` interval.\n              `num_bits` is the bitwidth of the quantization; between 2 and 8, inclusive.\n              \n              This operation has a gradient and thus allows for training `min` and `max`\n              values."
  syntax:
    content: public TensorFlow.TFOutput FakeQuantWithMinMaxVarsPerChannel (TensorFlow.TFOutput inputs, TensorFlow.TFOutput min, TensorFlow.TFOutput max, Nullable<long> num_bits = null, Nullable<bool> narrow_range = null, string operName = null);
    parameters:
    - id: inputs
      type: TensorFlow.TFOutput
      description: To be added.
    - id: min
      type: TensorFlow.TFOutput
      description: To be added.
    - id: max
      type: TensorFlow.TFOutput
      description: To be added.
    - id: num_bits
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: narrow_range
      type: System.Nullable{System.Boolean}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'FakeQuantWithMinMaxVarsPerChannel'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.FakeQuantWithMinMaxVarsPerChannel*
  exceptions: []
- uid: TensorFlow.TFGraph.FakeQuantWithMinMaxVarsPerChannelGradient(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.String)
  id: FakeQuantWithMinMaxVarsPerChannelGradient(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: FakeQuantWithMinMaxVarsPerChannelGradient(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
  nameWithType: TFGraph.FakeQuantWithMinMaxVarsPerChannelGradient(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
  fullName: TFGraph.FakeQuantWithMinMaxVarsPerChannelGradient(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
  type: Method
  assemblies: []
  namespace: TensorFlow
  summary: Compute gradients for a FakeQuantWithMinMaxVarsPerChannel operation.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> FakeQuantWithMinMaxVarsPerChannelGradient (TensorFlow.TFOutput gradients, TensorFlow.TFOutput inputs, TensorFlow.TFOutput min, TensorFlow.TFOutput max, Nullable<long> num_bits = null, string operName = null);
    parameters:
    - id: gradients
      type: TensorFlow.TFOutput
      description: >-
        Backpropagated gradients above the FakeQuantWithMinMaxVars operation,
                      shape one of: `[d]`, `[b, d]`,  `[b, h, w, d]`.
    - id: inputs
      type: TensorFlow.TFOutput
      description: >-
        Values passed as inputs to the FakeQuantWithMinMaxVars operation, shape
                        same as `gradients`.
                      min, max: Quantization interval, floats of shape `[d]`.
    - id: min
      type: TensorFlow.TFOutput
      description: To be added.
    - id: max
      type: TensorFlow.TFOutput
      description: To be added.
    - id: num_bits
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      The bitwidth of the quantization; between 2 and 8, inclusive.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'FakeQuantWithMinMaxVarsPerChannelGradient'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      backprops_wrt_input: Backpropagated gradients w.r.t. inputs, shape same as
                      `inputs`:
                        `gradients * (inputs &gt;= min && inputs &lt;= max)`.
                      backprop_wrt_min: Backpropagated gradients w.r.t. min parameter, shape `[d]`:
                      `sum_per_d(gradients * (inputs &lt; min))`.
                      backprop_wrt_max: Backpropagated gradients w.r.t. max parameter, shape `[d]`:
                      `sum_per_d(gradients * (inputs &gt; max))`.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.FakeQuantWithMinMaxVarsPerChannelGradient*
  exceptions: []
- uid: TensorFlow.TFGraph.FakeQuantWithMinMaxVarsPerChannelGradient(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String)
  id: FakeQuantWithMinMaxVarsPerChannelGradient(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: FakeQuantWithMinMaxVarsPerChannelGradient(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Boolean>, String)
  nameWithType: TFGraph.FakeQuantWithMinMaxVarsPerChannelGradient(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Boolean>, String)
  fullName: TFGraph.FakeQuantWithMinMaxVarsPerChannelGradient(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Compute gradients for a FakeQuantWithMinMaxVarsPerChannel operation.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> FakeQuantWithMinMaxVarsPerChannelGradient (TensorFlow.TFOutput gradients, TensorFlow.TFOutput inputs, TensorFlow.TFOutput min, TensorFlow.TFOutput max, Nullable<long> num_bits = null, Nullable<bool> narrow_range = null, string operName = null);
    parameters:
    - id: gradients
      type: TensorFlow.TFOutput
      description: >-
        Backpropagated gradients above the FakeQuantWithMinMaxVars operation,
                      shape one of: `[d]`, `[b, d]`,  `[b, h, w, d]`.
    - id: inputs
      type: TensorFlow.TFOutput
      description: >-
        Values passed as inputs to the FakeQuantWithMinMaxVars operation, shape
                        same as `gradients`.
                      min, max: Quantization interval, floats of shape `[d]`.
    - id: min
      type: TensorFlow.TFOutput
      description: To be added.
    - id: max
      type: TensorFlow.TFOutput
      description: To be added.
    - id: num_bits
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      The bitwidth of the quantization; between 2 and 8, inclusive.
    - id: narrow_range
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      Whether to quantize into 2^num_bits - 1 distinct values.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'FakeQuantWithMinMaxVarsPerChannelGradient'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      backprops_wrt_input: Backpropagated gradients w.r.t. inputs, shape same as
                      `inputs`:
                        `gradients * (inputs &gt;= min && inputs &lt;= max)`.
                      backprop_wrt_min: Backpropagated gradients w.r.t. min parameter, shape `[d]`:
                      `sum_per_d(gradients * (inputs &lt; min))`.
                      backprop_wrt_max: Backpropagated gradients w.r.t. max parameter, shape `[d]`:
                      `sum_per_d(gradients * (inputs &gt; max))`.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.FakeQuantWithMinMaxVarsPerChannelGradient*
  exceptions: []
- uid: TensorFlow.TFGraph.FFT(TensorFlow.TFOutput,System.String)
  id: FFT(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: FFT(TFOutput, String)
  nameWithType: TFGraph.FFT(TFOutput, String)
  fullName: TFGraph.FFT(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Fast Fourier transform.
  remarks: >-
    Computes the 1-dimensional discrete Fourier transform over the inner-most
                  dimension of `input`.
  syntax:
    content: public TensorFlow.TFOutput FFT (TensorFlow.TFOutput input, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: A complex64 tensor.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'FFT'.
    return:
      type: TensorFlow.TFOutput
      description: "A complex64 tensor of the same shape as `input`. The inner-most\n                dimension of `input` is replaced with its 1D Fourier transform.\n              \n              @compatibility(numpy)\n              Equivalent to np.fft.fft\n              @end_compatibility\n              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result."
  overload: TensorFlow.TFGraph.FFT*
  exceptions: []
- uid: TensorFlow.TFGraph.FFT2D(TensorFlow.TFOutput,System.String)
  id: FFT2D(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: FFT2D(TFOutput, String)
  nameWithType: TFGraph.FFT2D(TFOutput, String)
  fullName: TFGraph.FFT2D(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: 2D fast Fourier transform.
  remarks: >-
    Computes the 2-dimensional discrete Fourier transform over the inner-most
                  2 dimensions of `input`.
  syntax:
    content: public TensorFlow.TFOutput FFT2D (TensorFlow.TFOutput input, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: A complex64 tensor.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'FFT2D'.
    return:
      type: TensorFlow.TFOutput
      description: "A complex64 tensor of the same shape as `input`. The inner-most 2\n                dimensions of `input` are replaced with their 2D Fourier transform.\n              \n              @compatibility(numpy)\n              Equivalent to np.fft.fft2\n              @end_compatibility\n              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result."
  overload: TensorFlow.TFGraph.FFT2D*
  exceptions: []
- uid: TensorFlow.TFGraph.FFT3D(TensorFlow.TFOutput,System.String)
  id: FFT3D(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: FFT3D(TFOutput, String)
  nameWithType: TFGraph.FFT3D(TFOutput, String)
  fullName: TFGraph.FFT3D(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: 3D fast Fourier transform.
  remarks: >-
    Computes the 3-dimensional discrete Fourier transform over the inner-most 3
                  dimensions of `input`.
  syntax:
    content: public TensorFlow.TFOutput FFT3D (TensorFlow.TFOutput input, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: A complex64 tensor.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'FFT3D'.
    return:
      type: TensorFlow.TFOutput
      description: "A complex64 tensor of the same shape as `input`. The inner-most 3\n                dimensions of `input` are replaced with their 3D Fourier transform.\n              \n              @compatibility(numpy)\n              Equivalent to np.fft.fftn with 3 dimensions.\n              @end_compatibility\n              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result."
  overload: TensorFlow.TFGraph.FFT3D*
  exceptions: []
- uid: TensorFlow.TFGraph.FIFOQueueV2(TensorFlow.TFDataType[],TensorFlow.TFShape[],System.Nullable{System.Int64},System.String,System.String,System.String)
  id: FIFOQueueV2(TensorFlow.TFDataType[],TensorFlow.TFShape[],System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: FIFOQueueV2(TFDataType[], TFShape[], Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.FIFOQueueV2(TFDataType[], TFShape[], Nullable<Int64>, String, String, String)
  fullName: TFGraph.FIFOQueueV2(TFDataType[], TFShape[], Nullable<Int64>, String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: A queue that produces elements in first-in first-out order.
  syntax:
    content: public TensorFlow.TFOutput FIFOQueueV2 (TensorFlow.TFDataType[] component_types, TensorFlow.TFShape[] shapes = null, Nullable<long> capacity = null, string container = null, string shared_name = null, string operName = null);
    parameters:
    - id: component_types
      type: TensorFlow.TFDataType[]
      description: The type of each component in a value.
    - id: shapes
      type: TensorFlow.TFShape[]
      description: >-
        Optional argument
                      The shape of each component in a value. The length of this attr must
                      be either 0 or the same as the length of component_types. If the length of
                      this attr is 0, the shapes of queue elements are not constrained, and
                      only one element may be dequeued at a time.
    - id: capacity
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      The upper bound on the number of elements in this queue.
                      Negative numbers mean no limit.
    - id: container
      type: System.String
      description: >-
        Optional argument
                      If non-empty, this queue is placed in the given container.
                      Otherwise, a default container is used.
    - id: shared_name
      type: System.String
      description: >-
        Optional argument
                      If non-empty, this queue will be shared under the given name
                      across multiple sessions.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'FIFOQueueV2'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The handle to the queue.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.FIFOQueueV2*
  exceptions: []
- uid: TensorFlow.TFGraph.Fill(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: Fill(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Fill(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Fill(TFOutput, TFOutput, String)
  fullName: TFGraph.Fill(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Creates a tensor filled with a scalar value.
  remarks: "This operation creates a tensor of shape `dims` and fills it with `value`.\n              \n              For example:\n              \n              ```\n              # Output tensor has shape [2, 3].\n              fill([2, 3], 9) ==&gt; [[9, 9, 9]\n                                   [9, 9, 9]]\n              ```"
  syntax:
    content: public TensorFlow.TFOutput Fill (TensorFlow.TFOutput dims, TensorFlow.TFOutput value, string operName = null);
    parameters:
    - id: dims
      type: TensorFlow.TFOutput
      description: 1-D. Represents the shape of the output tensor.
    - id: value
      type: TensorFlow.TFOutput
      description: "0-D (scalar). Value to fill the returned tensor.\n              \n              @compatibility(numpy)\n              Equivalent to np.full\n              @end_compatibility"
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Fill'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Fill*
  exceptions: []
- uid: TensorFlow.TFGraph.FixedLengthRecordDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: FixedLengthRecordDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: FixedLengthRecordDataset(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.FixedLengthRecordDataset(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.FixedLengthRecordDataset(TFOutput, TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Creates a dataset that emits the records from one or more binary files.
  syntax:
    content: public TensorFlow.TFOutput FixedLengthRecordDataset (TensorFlow.TFOutput filenames, TensorFlow.TFOutput header_bytes, TensorFlow.TFOutput record_bytes, TensorFlow.TFOutput footer_bytes, string operName = null);
    parameters:
    - id: filenames
      type: TensorFlow.TFOutput
      description: >-
        A scalar or a vector containing the name(s) of the file(s) to be
                      read.
    - id: header_bytes
      type: TensorFlow.TFOutput
      description: >-
        A scalar representing the number of bytes to skip at the
                      beginning of a file.
    - id: record_bytes
      type: TensorFlow.TFOutput
      description: A scalar representing the number of bytes in each record.
    - id: footer_bytes
      type: TensorFlow.TFOutput
      description: >-
        A scalar representing the number of bytes to skip at the end
                      of a file.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'FixedLengthRecordDataset'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.FixedLengthRecordDataset*
  exceptions: []
- uid: TensorFlow.TFGraph.FixedLengthRecordReaderV2(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  id: FixedLengthRecordReaderV2(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: FixedLengthRecordReaderV2(Int64, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.FixedLengthRecordReaderV2(Int64, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.FixedLengthRecordReaderV2(Int64, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: A Reader that outputs fixed-length records from a file.
  syntax:
    content: public TensorFlow.TFOutput FixedLengthRecordReaderV2 (long record_bytes, Nullable<long> header_bytes = null, Nullable<long> footer_bytes = null, Nullable<long> hop_bytes = null, string container = null, string shared_name = null, string operName = null);
    parameters:
    - id: record_bytes
      type: System.Int64
      description: Number of bytes in the record.
    - id: header_bytes
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      Number of bytes in the header, defaults to 0.
    - id: footer_bytes
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      Number of bytes in the footer, defaults to 0.
    - id: hop_bytes
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      Number of bytes to hop before each read. Default of 0 means using
                      record_bytes.
    - id: container
      type: System.String
      description: >-
        Optional argument
                      If non-empty, this reader is placed in the given container.
                      Otherwise, a default container is used.
    - id: shared_name
      type: System.String
      description: >-
        Optional argument
                      If non-empty, this reader is named in the given bucket
                      with this shared_name. Otherwise, the node name is used instead.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'FixedLengthRecordReaderV2'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The handle to reference the Reader.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.FixedLengthRecordReaderV2*
  exceptions: []
- uid: TensorFlow.TFGraph.FixedUnigramCandidateSampler(TensorFlow.TFOutput,System.Int64,System.Int64,System.Boolean,System.Int64,System.String,System.Nullable{System.Single},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Single[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  id: FixedUnigramCandidateSampler(TensorFlow.TFOutput,System.Int64,System.Int64,System.Boolean,System.Int64,System.String,System.Nullable{System.Single},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Single[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: FixedUnigramCandidateSampler(TFOutput, Int64, Int64, Boolean, Int64, String, Nullable<Single>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Single[], Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.FixedUnigramCandidateSampler(TFOutput, Int64, Int64, Boolean, Int64, String, Nullable<Single>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Single[], Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.FixedUnigramCandidateSampler(TFOutput, Int64, Int64, Boolean, Int64, String, Nullable<Single>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Single[], Nullable<Int64>, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Generates labels for candidate sampling with a learned unigram distribution.
  remarks: "A unigram sampler could use a fixed unigram distribution read from a\n              file or passed in as an in-memory array instead of building up the distribution\n              from data on the fly. There is also an option to skew the distribution by\n              applying a distortion power to the weights.\n              \n              The vocabulary file should be in CSV-like format, with the last field\n              being the weight associated with the word.\n              \n              For each batch, this op picks a single set of sampled candidate labels.\n              \n              The advantages of sampling candidates per-batch are simplicity and the\n              possibility of efficient dense matrix multiplication. The disadvantage is that\n              the sampled candidates must be chosen independently of the context and of the\n              true labels."
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> FixedUnigramCandidateSampler (TensorFlow.TFOutput true_classes, long num_true, long num_sampled, bool unique, long range_max, string vocab_file = null, Nullable<float> distortion = null, Nullable<long> num_reserved_ids = null, Nullable<long> num_shards = null, Nullable<long> shard = null, float[] unigrams = null, Nullable<long> seed = null, Nullable<long> seed2 = null, string operName = null);
    parameters:
    - id: true_classes
      type: TensorFlow.TFOutput
      description: >-
        A batch_size * num_true matrix, in which each row contains the
                      IDs of the num_true target_classes in the corresponding original label.
    - id: num_true
      type: System.Int64
      description: Number of true labels per context.
    - id: num_sampled
      type: System.Int64
      description: Number of candidates to randomly sample.
    - id: unique
      type: System.Boolean
      description: >-
        If unique is true, we sample with rejection, so that all sampled
                      candidates in a batch are unique. This requires some approximation to
                      estimate the post-rejection sampling probabilities.
    - id: range_max
      type: System.Int64
      description: The sampler will sample integers from the interval [0, range_max).
    - id: vocab_file
      type: System.String
      description: >-
        Optional argument
                      Each valid line in this file (which should have a CSV-like format)
                      corresponds to a valid word ID. IDs are in sequential order, starting from
                      num_reserved_ids. The last entry in each line is expected to be a value
                      corresponding to the count or relative probability. Exactly one of vocab_file
                      and unigrams needs to be passed to this op.
    - id: distortion
      type: System.Nullable{System.Single}
      description: >-
        Optional argument
                      The distortion is used to skew the unigram probability distribution.
                      Each weight is first raised to the distortion's power before adding to the
                      internal unigram distribution. As a result, distortion = 1.0 gives regular
                      unigram sampling (as defined by the vocab file), and distortion = 0.0 gives
                      a uniform distribution.
    - id: num_reserved_ids
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      Optionally some reserved IDs can be added in the range [0,
                      ..., num_reserved_ids) by the users. One use case is that a special unknown
                      word token is used as ID 0. These IDs will have a sampling probability of 0.
    - id: num_shards
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      A sampler can be used to sample from a subset of the original range
                      in order to speed up the whole computation through parallelism. This parameter
                      (together with 'shard') indicates the number of partitions that are being
                      used in the overall computation.
    - id: shard
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      A sampler can be used to sample from a subset of the original range
                      in order to speed up the whole computation through parallelism. This parameter
                      (together with 'num_shards') indicates the particular partition number of a
                      sampler op, when partitioning is being used.
    - id: unigrams
      type: System.Single[]
      description: >-
        Optional argument
                      A list of unigram counts or probabilities, one per ID in sequential
                      order. Exactly one of vocab_file and unigrams should be passed to this op.
    - id: seed
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      If either seed or seed2 are set to be non-zero, the random number
                      generator is seeded by the given seed.  Otherwise, it is seeded by a
                      random seed.
    - id: seed2
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      An second seed to avoid seed collision.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'FixedUnigramCandidateSampler'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      sampled_candidates: A vector of length num_sampled, in which each element is
                      the ID of a sampled candidate.
                      true_expected_count: A batch_size * num_true matrix, representing
                      the number of times each candidate is expected to occur in a batch
                      of sampled candidates. If unique=true, then this is a probability.
                      sampled_expected_count: A vector of length num_sampled, for each sampled
                      candidate representing the number of times the candidate is expected
                      to occur in a batch of sampled candidates.  If unique=true, then this is a
                      probability.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.FixedUnigramCandidateSampler*
  exceptions: []
- uid: TensorFlow.TFGraph.Floor(TensorFlow.TFOutput,System.String)
  id: Floor(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Floor(TFOutput, String)
  nameWithType: TFGraph.Floor(TFOutput, String)
  fullName: TFGraph.Floor(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns element-wise largest integer not greater than x.
  syntax:
    content: public TensorFlow.TFOutput Floor (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Floor'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Floor*
  exceptions: []
- uid: TensorFlow.TFGraph.FloorDiv(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: FloorDiv(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: FloorDiv(TFOutput, TFOutput, String)
  nameWithType: TFGraph.FloorDiv(TFOutput, TFOutput, String)
  fullName: TFGraph.FloorDiv(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns x // y element-wise.
  remarks: >-
    *NOTE*: `FloorDiv` supports broadcasting. More about broadcasting
                  [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
  syntax:
    content: public TensorFlow.TFOutput FloorDiv (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'FloorDiv'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.FloorDiv*
  exceptions: []
- uid: TensorFlow.TFGraph.FloorMod(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: FloorMod(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: FloorMod(TFOutput, TFOutput, String)
  nameWithType: TFGraph.FloorMod(TFOutput, TFOutput, String)
  fullName: TFGraph.FloorMod(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns element-wise remainder of division. When `x &lt; 0` xor `y &lt; 0` is
  remarks: "true, this follows Python semantics in that the result here is consistent\n              with a flooring divide. E.g. `floor(x / y) * y + mod(x, y) = x`.\n              \n              *NOTE*: `FloorMod` supports broadcasting. More about broadcasting\n              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)"
  syntax:
    content: public TensorFlow.TFOutput FloorMod (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'FloorMod'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.FloorMod*
  exceptions: []
- uid: TensorFlow.TFGraph.FractionalAvgPool(TensorFlow.TFOutput,System.Single[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  id: FractionalAvgPool(TensorFlow.TFOutput,System.Single[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: FractionalAvgPool(TFOutput, Single[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.FractionalAvgPool(TFOutput, Single[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.FractionalAvgPool(TFOutput, Single[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Int64>, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Performs fractional average pooling on the input.
  remarks: >-
    Fractional average pooling is similar to Fractional max pooling in the pooling
                  region generation step. The only difference is that after pooling regions are
                  generated, a mean operation is performed instead of a max operation in each
                  pooling region.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> FractionalAvgPool (TensorFlow.TFOutput value, float[] pooling_ratio, Nullable<bool> pseudo_random = null, Nullable<bool> overlapping = null, Nullable<bool> deterministic = null, Nullable<long> seed = null, Nullable<long> seed2 = null, string operName = null);
    parameters:
    - id: value
      type: TensorFlow.TFOutput
      description: 4-D with shape `[batch, height, width, channels]`.
    - id: pooling_ratio
      type: System.Single[]
      description: >-
        Pooling ratio for each dimension of `value`, currently only
                      supports row and col dimension and should be &gt;= 1.0. For example, a valid
                      pooling ratio looks like [1.0, 1.44, 1.73, 1.0]. The first and last elements
                      must be 1.0 because we don't allow pooling on batch and channels
                      dimensions. 1.44 and 1.73 are pooling ratio on height and width dimensions
                      respectively.
    - id: pseudo_random
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      When set to True, generates the pooling sequence in a
                      pseudorandom fashion, otherwise, in a random fashion. Check paper [Benjamin
                      Graham, Fractional Max-Pooling](http://arxiv.org/abs/1412.6071) for
                      difference between pseudorandom and random.
    - id: overlapping
      type: System.Nullable{System.Boolean}
      description: "Optional argument\n              When set to True, it means when pooling, the values at the boundary\n              of adjacent pooling cells are used by both cells. For example:\n              \n              `index  0  1  2  3  4`\n              \n              `value  20 5  16 3  7`\n              \n              If the pooling sequence is [0, 2, 4], then 16, at index 2 will be used twice.\n              The result would be [41/3, 26/3] for fractional avg pooling."
    - id: deterministic
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      When set to True, a fixed pooling region will be used when
                      iterating over a FractionalAvgPool node in the computation graph. Mainly used
                      in unit test to make FractionalAvgPool deterministic.
    - id: seed
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      If either seed or seed2 are set to be non-zero, the random number
                      generator is seeded by the given seed.  Otherwise, it is seeded by a
                      random seed.
    - id: seed2
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      An second seed to avoid seed collision.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'FractionalAvgPool'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      output: output tensor after fractional avg pooling.
                      row_pooling_sequence: row pooling sequence, needed to calculate gradient.
                      col_pooling_sequence: column pooling sequence, needed to calculate gradient.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.FractionalAvgPool*
  exceptions: []
- uid: TensorFlow.TFGraph.FractionalAvgPoolGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: FractionalAvgPoolGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: FractionalAvgPoolGrad(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.FractionalAvgPoolGrad(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.FractionalAvgPoolGrad(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes gradient of the FractionalAvgPool function.
  remarks: >-
    Unlike FractionalMaxPoolGrad, we don't need to find arg_max for
                  FractionalAvgPoolGrad, we just need to evenly back-propagate each element of
                  out_backprop to those indices that form the same pooling cell. Therefore, we
                  just need to know the shape of original input tensor, instead of the whole
                  tensor.
  syntax:
    content: public TensorFlow.TFOutput FractionalAvgPoolGrad (TensorFlow.TFOutput orig_input_tensor_shape, TensorFlow.TFOutput out_backprop, TensorFlow.TFOutput row_pooling_sequence, TensorFlow.TFOutput col_pooling_sequence, Nullable<bool> overlapping = null, string operName = null);
    parameters:
    - id: orig_input_tensor_shape
      type: TensorFlow.TFOutput
      description: Original input tensor shape for `fractional_avg_pool`
    - id: out_backprop
      type: TensorFlow.TFOutput
      description: >-
        4-D with shape `[batch, height, width, channels]`.  Gradients
                      w.r.t. the output of `fractional_avg_pool`.
    - id: row_pooling_sequence
      type: TensorFlow.TFOutput
      description: >-
        row pooling sequence, form pooling region with
                      col_pooling_sequence.
    - id: col_pooling_sequence
      type: TensorFlow.TFOutput
      description: >-
        column pooling sequence, form pooling region with
                      row_pooling sequence.
    - id: overlapping
      type: System.Nullable{System.Boolean}
      description: "Optional argument\n              When set to True, it means when pooling, the values at the boundary\n              of adjacent pooling cells are used by both cells. For example:\n              \n              `index  0  1  2  3  4`\n              \n              `value  20 5  16 3  7`\n              \n              If the pooling sequence is [0, 2, 4], then 16, at index 2 will be used twice.\n              The result would be [41/3, 26/3] for fractional avg pooling."
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'FractionalAvgPoolGrad'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        4-D.  Gradients w.r.t. the input of `fractional_avg_pool`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.FractionalAvgPoolGrad*
  exceptions: []
- uid: TensorFlow.TFGraph.FractionalMaxPool(TensorFlow.TFOutput,System.Single[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  id: FractionalMaxPool(TensorFlow.TFOutput,System.Single[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: FractionalMaxPool(TFOutput, Single[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.FractionalMaxPool(TFOutput, Single[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.FractionalMaxPool(TFOutput, Single[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Int64>, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Performs fractional max pooling on the input.
  remarks: "Fractional max pooling is slightly different than regular max pooling.  In\n              regular max pooling, you downsize an input set by taking the maximum value of\n              smaller N x N subsections of the set (often 2x2), and try to reduce the set by\n              a factor of N, where N is an integer.  Fractional max pooling, as you might\n              expect from the word \"fractional\", means that the overall reduction ratio N\n              does not have to be an integer.\n              \n              The sizes of the pooling regions are generated randomly but are fairly uniform.\n              For example, let's look at the height dimension, and the constraints on the\n              list of rows that will be pool boundaries.\n              \n              First we define the following:\n              \n              1.  input_row_length : the number of rows from the input set\n              2.  output_row_length : which will be smaller than the input\n              3.  alpha = input_row_length / output_row_length : our reduction ratio\n              4.  K = floor(alpha)\n              5.  row_pooling_sequence : this is the result list of pool boundary rows\n              \n              Then, row_pooling_sequence should satisfy:\n              \n              1.  a[0] = 0 : the first value of the sequence is 0\n              2.  a[end] = input_row_length : the last value of the sequence is the size\n              3.  K &lt;= (a[i+1] - a[i]) &lt;= K+1 : all intervals are K or K+1 size\n              4.  length(row_pooling_sequence) = output_row_length+1\n              \n              For more details on fractional max pooling, see this paper:\n              [Benjamin Graham, Fractional Max-Pooling](http://arxiv.org/abs/1412.6071)"
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> FractionalMaxPool (TensorFlow.TFOutput value, float[] pooling_ratio, Nullable<bool> pseudo_random = null, Nullable<bool> overlapping = null, Nullable<bool> deterministic = null, Nullable<long> seed = null, Nullable<long> seed2 = null, string operName = null);
    parameters:
    - id: value
      type: TensorFlow.TFOutput
      description: 4-D with shape `[batch, height, width, channels]`.
    - id: pooling_ratio
      type: System.Single[]
      description: >-
        Pooling ratio for each dimension of `value`, currently only
                      supports row and col dimension and should be &gt;= 1.0. For example, a valid
                      pooling ratio looks like [1.0, 1.44, 1.73, 1.0]. The first and last elements
                      must be 1.0 because we don't allow pooling on batch and channels
                      dimensions. 1.44 and 1.73 are pooling ratio on height and width dimensions
                      respectively.
    - id: pseudo_random
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      When set to True, generates the pooling sequence in a
                      pseudorandom fashion, otherwise, in a random fashion. Check paper [Benjamin
                      Graham, Fractional Max-Pooling](http://arxiv.org/abs/1412.6071) for
                      difference between pseudorandom and random.
    - id: overlapping
      type: System.Nullable{System.Boolean}
      description: "Optional argument\n              When set to True, it means when pooling, the values at the boundary\n              of adjacent pooling cells are used by both cells. For example:\n              \n              `index  0  1  2  3  4`\n              \n              `value  20 5  16 3  7`\n              \n              If the pooling sequence is [0, 2, 4], then 16, at index 2 will be used twice.\n              The result would be [20, 16] for fractional max pooling."
    - id: deterministic
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      When set to True, a fixed pooling region will be used when
                      iterating over a FractionalMaxPool node in the computation graph. Mainly used
                      in unit test to make FractionalMaxPool deterministic.
    - id: seed
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      If either seed or seed2 are set to be non-zero, the random number
                      generator is seeded by the given seed.  Otherwise, it is seeded by a
                      random seed.
    - id: seed2
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      An second seed to avoid seed collision.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'FractionalMaxPool'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      output: output tensor after fractional max pooling.
                      row_pooling_sequence: row pooling sequence, needed to calculate gradient.
                      col_pooling_sequence: column pooling sequence, needed to calculate gradient.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.FractionalMaxPool*
  exceptions: []
- uid: TensorFlow.TFGraph.FractionalMaxPoolGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: FractionalMaxPoolGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: FractionalMaxPoolGrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.FractionalMaxPoolGrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.FractionalMaxPoolGrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes gradient of the FractionalMaxPool function.
  syntax:
    content: public TensorFlow.TFOutput FractionalMaxPoolGrad (TensorFlow.TFOutput orig_input, TensorFlow.TFOutput orig_output, TensorFlow.TFOutput out_backprop, TensorFlow.TFOutput row_pooling_sequence, TensorFlow.TFOutput col_pooling_sequence, Nullable<bool> overlapping = null, string operName = null);
    parameters:
    - id: orig_input
      type: TensorFlow.TFOutput
      description: Original input for `fractional_max_pool`
    - id: orig_output
      type: TensorFlow.TFOutput
      description: Original output for `fractional_max_pool`
    - id: out_backprop
      type: TensorFlow.TFOutput
      description: >-
        4-D with shape `[batch, height, width, channels]`.  Gradients
                      w.r.t. the output of `fractional_max_pool`.
    - id: row_pooling_sequence
      type: TensorFlow.TFOutput
      description: >-
        row pooling sequence, form pooling region with
                      col_pooling_sequence.
    - id: col_pooling_sequence
      type: TensorFlow.TFOutput
      description: >-
        column pooling sequence, form pooling region with
                      row_pooling sequence.
    - id: overlapping
      type: System.Nullable{System.Boolean}
      description: "Optional argument\n              When set to True, it means when pooling, the values at the boundary\n              of adjacent pooling cells are used by both cells. For example:\n              \n              `index  0  1  2  3  4`\n              \n              `value  20 5  16 3  7`\n              \n              If the pooling sequence is [0, 2, 4], then 16, at index 2 will be used twice.\n              The result would be [20, 16] for fractional max pooling."
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'FractionalMaxPoolGrad'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        4-D.  Gradients w.r.t. the input of `fractional_max_pool`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.FractionalMaxPoolGrad*
  exceptions: []
- uid: TensorFlow.TFGraph.FusedBatchNorm(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Single},System.String,System.Nullable{System.Boolean},System.String)
  id: FusedBatchNorm(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Single},System.String,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: FusedBatchNorm(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Single>, String, Nullable<Boolean>, String)
  nameWithType: TFGraph.FusedBatchNorm(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Single>, String, Nullable<Boolean>, String)
  fullName: TFGraph.FusedBatchNorm(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Single>, String, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Batch normalization.
  remarks: >-
    Note that the size of 4D Tensors are defined by either "NHWC" or "NCHW".
                  The size of 1D Tensors matches the dimension C of the 4D Tensors.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> FusedBatchNorm (TensorFlow.TFOutput x, TensorFlow.TFOutput scale, TensorFlow.TFOutput offset, TensorFlow.TFOutput mean, TensorFlow.TFOutput variance, Nullable<float> epsilon = null, string data_format = null, Nullable<bool> is_training = null, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: A 4D Tensor for input data.
    - id: scale
      type: TensorFlow.TFOutput
      description: A 1D Tensor for scaling factor, to scale the normalized x.
    - id: offset
      type: TensorFlow.TFOutput
      description: A 1D Tensor for offset, to shift to the normalized x.
    - id: mean
      type: TensorFlow.TFOutput
      description: >-
        A 1D Tensor for population mean. Used for inference only;
                      must be empty for training.
    - id: variance
      type: TensorFlow.TFOutput
      description: >-
        A 1D Tensor for population variance. Used for inference only;
                      must be empty for training.
    - id: epsilon
      type: System.Nullable{System.Single}
      description: >-
        Optional argument
                      A small float number added to the variance of x.
    - id: data_format
      type: System.String
      description: >-
        Optional argument
                      The data format for x and y. Either "NHWC" (default) or "NCHW".
    - id: is_training
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      A bool value to indicate the operation is for training (default)
                      or inference.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'FusedBatchNorm'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      y: A 4D Tensor for output data.
                      batch_mean: A 1D Tensor for the computed batch mean, to be used by TensorFlow
                      to compute the running mean.
                      batch_variance: A 1D Tensor for the computed batch variance, to be used by
                      TensorFlow to compute the running variance.
                      reserve_space_1: A 1D Tensor for the computed batch mean, to be reused
                      in the gradient computation.
                      reserve_space_2: A 1D Tensor for the computed batch variance (inverted variance
                      in the cuDNN case), to be used in the gradient computation.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.FusedBatchNorm*
  exceptions: []
- uid: TensorFlow.TFGraph.FusedBatchNormGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Single},System.String,System.Nullable{System.Boolean},System.String)
  id: FusedBatchNormGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Single},System.String,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: FusedBatchNormGrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Single>, String, Nullable<Boolean>, String)
  nameWithType: TFGraph.FusedBatchNormGrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Single>, String, Nullable<Boolean>, String)
  fullName: TFGraph.FusedBatchNormGrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Single>, String, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Gradient for batch normalization.
  remarks: >-
    Note that the size of 4D Tensors are defined by either "NHWC" or "NCHW".
                  The size of 1D Tensors matches the dimension C of the 4D Tensors.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> FusedBatchNormGrad (TensorFlow.TFOutput y_backprop, TensorFlow.TFOutput x, TensorFlow.TFOutput scale, TensorFlow.TFOutput reserve_space_1, TensorFlow.TFOutput reserve_space_2, Nullable<float> epsilon = null, string data_format = null, Nullable<bool> is_training = null, string operName = null);
    parameters:
    - id: y_backprop
      type: TensorFlow.TFOutput
      description: A 4D Tensor for the gradient with respect to y.
    - id: x
      type: TensorFlow.TFOutput
      description: A 4D Tensor for input data.
    - id: scale
      type: TensorFlow.TFOutput
      description: A 1D Tensor for scaling factor, to scale the normalized x.
    - id: reserve_space_1
      type: TensorFlow.TFOutput
      description: >-
        A 1D Tensor for the computed batch mean, to be reused
                      in the gradient computation.
    - id: reserve_space_2
      type: TensorFlow.TFOutput
      description: >-
        A 1D Tensor for the computed batch variance (inverted variance
                      in the cuDNN case), to be used in the gradient computation.
    - id: epsilon
      type: System.Nullable{System.Single}
      description: >-
        Optional argument
                      A small float number added to the variance of x.
    - id: data_format
      type: System.String
      description: >-
        Optional argument
                      The data format for y_backprop, x, x_backprop.
                      Either "NHWC" (default) or "NCHW".
    - id: is_training
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      A bool value to indicate the operation is for training (default)
                      or inference.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'FusedBatchNormGrad'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      x_backprop: A 4D Tensor for the gradient with respect to x.
                      scale_backprop: A 1D Tensor for the gradient with respect to scale.
                      offset_backprop: A 1D Tensor for the gradient with respect to offset.
                      reserve_space_3: Unused placeholder to match the mean input in FusedBatchNorm.
                      reserve_space_4: Unused placeholder to match the variance input
                      in FusedBatchNorm.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.FusedBatchNormGrad*
  exceptions: []
- uid: TensorFlow.TFGraph.FusedPadConv2D(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.Int64[],System.String,System.String)
  id: FusedPadConv2D(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.Int64[],System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: FusedPadConv2D(TFOutput, TFOutput, TFOutput, String, Int64[], String, String)
  nameWithType: TFGraph.FusedPadConv2D(TFOutput, TFOutput, TFOutput, String, Int64[], String, String)
  fullName: TFGraph.FusedPadConv2D(TFOutput, TFOutput, TFOutput, String, Int64[], String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Performs a padding as a preprocess during a convolution.
  remarks: >-
    Similar to FusedResizeAndPadConv2d, this op allows for an optimized
                  implementation where the spatial padding transformation stage is fused with the
                  im2col lookup, but in this case without the bilinear filtering required for
                  resizing. Fusing the padding prevents the need to write out the intermediate
                  results as whole tensors, reducing memory pressure, and we can get some latency
                  gains by merging the transformation calculations.
                  The data_format attribute for Conv2D isn't supported by this op, and 'NHWC'
                  order is used instead.
                  Internally this op uses a single per-graph scratch buffer, which means that it
                  will block if multiple versions are being run in parallel. This is because this
                  operator is primarily an optimization to minimize memory usage.
  syntax:
    content: public TensorFlow.TFOutput FusedPadConv2D (TensorFlow.TFOutput input, TensorFlow.TFOutput paddings, TensorFlow.TFOutput filter, string mode, long[] strides, string padding, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: 4-D with shape `[batch, in_height, in_width, in_channels]`.
    - id: paddings
      type: TensorFlow.TFOutput
      description: >-
        A two-column matrix specifying the padding sizes. The number of
                      rows must be the same as the rank of `input`.
    - id: filter
      type: TensorFlow.TFOutput
      description: >-
        4-D with shape
                      `[filter_height, filter_width, in_channels, out_channels]`.
    - id: mode
      type: System.String
      description: To be added.
    - id: strides
      type: System.Int64[]
      description: >-
        1-D of length 4.  The stride of the sliding window for each dimension
                      of `input`. Must be in the same order as the dimension specified with format.
    - id: padding
      type: System.String
      description: The type of padding algorithm to use.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'FusedPadConv2D'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.FusedPadConv2D*
  exceptions: []
- uid: TensorFlow.TFGraph.FusedResizeAndPadConv2D(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.Int64[],System.String,System.Nullable{System.Boolean},System.String)
  id: FusedResizeAndPadConv2D(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.Int64[],System.String,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: FusedResizeAndPadConv2D(TFOutput, TFOutput, TFOutput, TFOutput, String, Int64[], String, Nullable<Boolean>, String)
  nameWithType: TFGraph.FusedResizeAndPadConv2D(TFOutput, TFOutput, TFOutput, TFOutput, String, Int64[], String, Nullable<Boolean>, String)
  fullName: TFGraph.FusedResizeAndPadConv2D(TFOutput, TFOutput, TFOutput, TFOutput, String, Int64[], String, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Performs a resize and padding as a preprocess during a convolution.
  remarks: >-
    It's often possible to do spatial transformations more efficiently as part of
                  the packing stage of a convolution, so this op allows for an optimized
                  implementation where these stages are fused together. This prevents the need to
                  write out the intermediate results as whole tensors, reducing memory pressure,
                  and we can get some latency gains by merging the transformation calculations.
                  The data_format attribute for Conv2D isn't supported by this op, and defaults to
                  'NHWC' order.
                  Internally this op uses a single per-graph scratch buffer, which means that it
                  will block if multiple versions are being run in parallel. This is because this
                  operator is primarily an optimization to minimize memory usage.
  syntax:
    content: public TensorFlow.TFOutput FusedResizeAndPadConv2D (TensorFlow.TFOutput input, TensorFlow.TFOutput size, TensorFlow.TFOutput paddings, TensorFlow.TFOutput filter, string mode, long[] strides, string padding, Nullable<bool> resize_align_corners = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: 4-D with shape `[batch, in_height, in_width, in_channels]`.
    - id: size
      type: TensorFlow.TFOutput
      description: >-
        A 1-D int32 Tensor of 2 elements: `new_height, new_width`.  The
                      new size for the images.
    - id: paddings
      type: TensorFlow.TFOutput
      description: >-
        A two-column matrix specifying the padding sizes. The number of
                      rows must be the same as the rank of `input`.
    - id: filter
      type: TensorFlow.TFOutput
      description: >-
        4-D with shape
                      `[filter_height, filter_width, in_channels, out_channels]`.
    - id: mode
      type: System.String
      description: To be added.
    - id: strides
      type: System.Int64[]
      description: >-
        1-D of length 4.  The stride of the sliding window for each dimension
                      of `input`. Must be in the same order as the dimension specified with format.
    - id: padding
      type: System.String
      description: The type of padding algorithm to use.
    - id: resize_align_corners
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true, rescale input by (new_height - 1) / (height - 1),
                      which exactly aligns the 4 corners of images and resized images. If false, rescale
                      by new_height / height. Treat similarly the width dimension.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'FusedResizeAndPadConv2D'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.FusedResizeAndPadConv2D*
  exceptions: []
- uid: TensorFlow.TFGraph.Gather(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: Gather(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Gather(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.Gather(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.Gather(TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Gather slices from `params` according to `indices`.
  remarks: "`indices` must be an integer tensor of any dimension (usually 0-D or 1-D).\n              Produces an output tensor with shape `indices.shape + params.shape[1:]` where:\n              \n              ```python\n                  # Scalar indices\n                  output[:, ..., :] = params[indices, :, ... :]\n              \n                  # Vector indices\n                  output[i, :, ..., :] = params[indices[i], :, ... :]\n              \n                  # Higher rank indices\n                  output[i, ..., j, :, ... :] = params[indices[i, ..., j], :, ..., :]\n              ```\n              \n              If `indices` is a permutation and `len(indices) == params.shape[0]` then\n              this operation will permute `params` accordingly.\n              \n              `validate_indices`: DEPRECATED. If this operation is assigned to CPU, values in\n              `indices` are always validated to be within range. If assigned to GPU,\n              out-of-bound indices result in safe but unspecified behavior, which may include\n              raising an error.\n              \n              &lt;div style=\"width:70%; margin:auto; margin-bottom:10px; margin-top:20px;\"&gt;\n              &lt;img style=\"width:100%\" src=\"https://www.tensorflow.org/images/Gather.png\" alt&gt;\n              &lt;/div&gt;"
  syntax:
    content: public TensorFlow.TFOutput Gather (TensorFlow.TFOutput parameters, TensorFlow.TFOutput indices, Nullable<bool> validate_indices = null, string operName = null);
    parameters:
    - id: parameters
      type: TensorFlow.TFOutput
      description: To be added.
    - id: indices
      type: TensorFlow.TFOutput
      description: To be added.
    - id: validate_indices
      type: System.Nullable{System.Boolean}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Gather'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Gather*
  exceptions: []
- uid: TensorFlow.TFGraph.GatherNd(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: GatherNd(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: GatherNd(TFOutput, TFOutput, String)
  nameWithType: TFGraph.GatherNd(TFOutput, TFOutput, String)
  fullName: TFGraph.GatherNd(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Gather values or slices from `params` according to `indices`.
  remarks: "`indices` is an integer tensor containing indices into `params`.  The last\n              dimension of `indices` can be at most the rank of `params`:\n              \n                  indices.shape[-1] &lt;= params.rank\n              \n              The last dimension of `indices` corresponds to elements\n              (if `indices.shape[-1] = params.rank`) or slices\n              (if `indices.shape[-1] &lt; params.rank`) along dimension `indices.shape[-1]`\n              of `params`.  The output tensor has shape\n              \n                  indices.shape[:-1] + params.shape[indices.shape[-1]:]\n              \n              Some examples below.\n              \n              Simple indexing into a matrix:\n              \n              ```python\n                  indices = [[0, 0], [1, 1]]\n                  params = [['a', 'b'], ['c', 'd']]\n                  output = ['a', 'd']\n              ```\n              \n              Slice indexing into a matrix:\n              \n              ```python\n                  indices = [[1], [0]]\n                  params = [['a', 'b'], ['c', 'd']]\n                  output = [['c', 'd'], ['a', 'b']]\n              ```\n              \n              Indexing into a 3-tensor:\n              \n              ```python\n                  indices = [[1]]\n                  params = [[['a0', 'b0'], ['c0', 'd0']],\n                            [['a1', 'b1'], ['c1', 'd1']]]\n                  output = [[['a1', 'b1'], ['c1', 'd1']]]\n              \n              \n                  indices = [[0, 1], [1, 0]]\n                  params = [[['a0', 'b0'], ['c0', 'd0']],\n                            [['a1', 'b1'], ['c1', 'd1']]]\n                  output = [['c0', 'd0'], ['a1', 'b1']]\n              \n              \n                  indices = [[0, 0, 1], [1, 0, 1]]\n                  params = [[['a0', 'b0'], ['c0', 'd0']],\n                            [['a1', 'b1'], ['c1', 'd1']]]\n                  output = ['b0', 'b1']\n              ```\n              \n              Batched indexing into a matrix:\n              \n              ```python\n                  indices = [[[0, 0]], [[0, 1]]]\n                  params = [['a', 'b'], ['c', 'd']]\n                  output = [['a'], ['b']]\n              ```\n              \n              Batched slice indexing into a matrix:\n              \n              ```python\n                  indices = [[[1]], [[0]]]\n                  params = [['a', 'b'], ['c', 'd']]\n                  output = [[['c', 'd']], [['a', 'b']]]\n              ```\n              \n              Batched indexing into a 3-tensor:\n              \n              ```python\n                  indices = [[[1]], [[0]]]\n                  params = [[['a0', 'b0'], ['c0', 'd0']],\n                            [['a1', 'b1'], ['c1', 'd1']]]\n                  output = [[[['a1', 'b1'], ['c1', 'd1']]],\n                            [[['a0', 'b0'], ['c0', 'd0']]]]\n              \n                  indices = [[[0, 1], [1, 0]], [[0, 0], [1, 1]]]\n                  params = [[['a0', 'b0'], ['c0', 'd0']],\n                            [['a1', 'b1'], ['c1', 'd1']]]\n                  output = [[['c0', 'd0'], ['a1', 'b1']],\n                            [['a0', 'b0'], ['c1', 'd1']]]\n              \n              \n                  indices = [[[0, 0, 1], [1, 0, 1]], [[0, 1, 1], [1, 1, 0]]]\n                  params = [[['a0', 'b0'], ['c0', 'd0']],\n                            [['a1', 'b1'], ['c1', 'd1']]]\n                  output = [['b0', 'b1'], ['d0', 'c1']]\n              ```"
  syntax:
    content: public TensorFlow.TFOutput GatherNd (TensorFlow.TFOutput parameters, TensorFlow.TFOutput indices, string operName = null);
    parameters:
    - id: parameters
      type: TensorFlow.TFOutput
      description: The tensor from which to gather values.
    - id: indices
      type: TensorFlow.TFOutput
      description: Index tensor.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'GatherNd'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Values from `params` gathered from indices given by `indices`, with
                      shape `indices.shape[:-1] + params.shape[indices.shape[-1]:]`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.GatherNd*
  exceptions: []
- uid: TensorFlow.TFGraph.GetEnumerator
  id: GetEnumerator
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: TFGraph.GetEnumerator()
  fullName: TFGraph.GetEnumerator()
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns the enumerator that returns all the TFOperations in a graph.
  syntax:
    content: >-
      [System.Runtime.CompilerServices.IteratorStateMachine(typeof(TensorFlow.TFGraph/<GetEnumerator>d__23))]

      public System.Collections.Generic.IEnumerable<TensorFlow.TFOperation> GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{TensorFlow.TFOperation}
      description: The enumerator.
  overload: TensorFlow.TFGraph.GetEnumerator*
  exceptions: []
  attributes:
  - type: System.Runtime.CompilerServices.IteratorStateMachine
- uid: TensorFlow.TFGraph.GetGlobalVariablesInitializer
  id: GetGlobalVariablesInitializer
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: GetGlobalVariablesInitializer()
  nameWithType: TFGraph.GetGlobalVariablesInitializer()
  fullName: TFGraph.GetGlobalVariablesInitializer()
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Gets the list of all registered global variables.
  remarks: >-
    After this method is invoked the list of pending initialization variables
                is cleared.
  syntax:
    content: public TensorFlow.TFOperation[] GetGlobalVariablesInitializer ();
    parameters: []
    return:
      type: TensorFlow.TFOperation[]
      description: The array of variables that should be initialized.
  overload: TensorFlow.TFGraph.GetGlobalVariablesInitializer*
  exceptions: []
- uid: TensorFlow.TFGraph.GetRandomSeeds(System.Nullable{System.Int32},System.Int32@,System.Int32@)
  id: GetRandomSeeds(System.Nullable{System.Int32},System.Int32@,System.Int32@)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: GetRandomSeeds(Nullable<Int32>, Int32, Int32)
  nameWithType: TFGraph.GetRandomSeeds(Nullable<Int32>, Int32, Int32)
  fullName: TFGraph.GetRandomSeeds(Nullable<Int32>, Int32, Int32)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns the graph and local seeds based on an optionally set incoming seed value.
  remarks: "This helper function returns two seeds derived from graph-level and op-level seeds.\n            Many random operations internally use the two seeds to allow user to change \n            the seed globally for a graph, or for only specific operations."
  syntax:
    content: public void GetRandomSeeds (Nullable<int> operationSeed, out int graphSeed, out int localSeed);
    parameters:
    - id: operationSeed
      type: System.Nullable{System.Int32}
      description: The seed value that might be set.
    - id: graphSeed
      type: System.Int32
      description: Returned graph seed.
    - id: localSeed
      type: System.Int32
      description: Returned local seed.
  overload: TensorFlow.TFGraph.GetRandomSeeds*
  exceptions: []
- uid: TensorFlow.TFGraph.GetSessionHandle(TensorFlow.TFOutput,System.String)
  id: GetSessionHandle(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: GetSessionHandle(TFOutput, String)
  nameWithType: TFGraph.GetSessionHandle(TFOutput, String)
  fullName: TFGraph.GetSessionHandle(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Store the input tensor in the state of the current session.
  syntax:
    content: public TensorFlow.TFOutput GetSessionHandle (TensorFlow.TFOutput value, string operName = null);
    parameters:
    - id: value
      type: TensorFlow.TFOutput
      description: The tensor to be stored.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'GetSessionHandle'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The handle for the tensor stored in the session state, represented
                      as a string.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.GetSessionHandle*
  exceptions: []
- uid: TensorFlow.TFGraph.GetSessionHandleV2(TensorFlow.TFOutput,System.String)
  id: GetSessionHandleV2(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: GetSessionHandleV2(TFOutput, String)
  nameWithType: TFGraph.GetSessionHandleV2(TFOutput, String)
  fullName: TFGraph.GetSessionHandleV2(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Store the input tensor in the state of the current session.
  syntax:
    content: public TensorFlow.TFOutput GetSessionHandleV2 (TensorFlow.TFOutput value, string operName = null);
    parameters:
    - id: value
      type: TensorFlow.TFOutput
      description: The tensor to be stored.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'GetSessionHandleV2'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The handle for the tensor stored in the session state, represented
                      as a ResourceHandle object.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.GetSessionHandleV2*
  exceptions: []
- uid: TensorFlow.TFGraph.GetSessionTensor(TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  id: GetSessionTensor(TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: GetSessionTensor(TFOutput, TFDataType, String)
  nameWithType: TFGraph.GetSessionTensor(TFOutput, TFDataType, String)
  fullName: TFGraph.GetSessionTensor(TFOutput, TFDataType, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Get the value of the tensor specified by its handle.
  syntax:
    content: public TensorFlow.TFOutput GetSessionTensor (TensorFlow.TFOutput handle, TensorFlow.TFDataType dtype, string operName = null);
    parameters:
    - id: handle
      type: TensorFlow.TFOutput
      description: The handle for a tensor stored in the session state.
    - id: dtype
      type: TensorFlow.TFDataType
      description: The type of the output value.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'GetSessionTensor'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The tensor for the given handle.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.GetSessionTensor*
  exceptions: []
- uid: TensorFlow.TFGraph.GetShape(TensorFlow.TFOutput,TensorFlow.TFStatus)
  id: GetShape(TensorFlow.TFOutput,TensorFlow.TFStatus)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: GetShape(TFOutput, TFStatus)
  nameWithType: TFGraph.GetShape(TFOutput, TFStatus)
  fullName: TFGraph.GetShape(TFOutput, TFStatus)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns the tensor shape for the specific output pparameters as an array of longs.
  syntax:
    content: public long[] GetShape (TensorFlow.TFOutput output, TensorFlow.TFStatus status = null);
    parameters:
    - id: output
      type: TensorFlow.TFOutput
      description: The output operation to probe.
    - id: status
      type: TensorFlow.TFStatus
      description: Status buffer, if specified a status code will be left here, if not specified, a <xref href="TensorFlow.TFException"></xref> exception is raised if there is an error.
    return:
      type: System.Int64[]
      description: null for single dimension, .
  overload: TensorFlow.TFGraph.GetShape*
  exceptions: []
- uid: TensorFlow.TFGraph.GetTensorNumDims(TensorFlow.TFOutput,TensorFlow.TFStatus)
  id: GetTensorNumDims(TensorFlow.TFOutput,TensorFlow.TFStatus)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: GetTensorNumDims(TFOutput, TFStatus)
  nameWithType: TFGraph.GetTensorNumDims(TFOutput, TFStatus)
  fullName: TFGraph.GetTensorNumDims(TFOutput, TFStatus)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  syntax:
    content: public int GetTensorNumDims (TensorFlow.TFOutput output, TensorFlow.TFStatus status = null);
    parameters:
    - id: output
      type: TensorFlow.TFOutput
      description: To be added.
    - id: status
      type: TensorFlow.TFStatus
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: TensorFlow.TFGraph.GetTensorNumDims*
  exceptions: []
- uid: TensorFlow.TFGraph.GetTensorShape(TensorFlow.TFOutput,TensorFlow.TFStatus)
  id: GetTensorShape(TensorFlow.TFOutput,TensorFlow.TFStatus)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: GetTensorShape(TFOutput, TFStatus)
  nameWithType: TFGraph.GetTensorShape(TFOutput, TFStatus)
  fullName: TFGraph.GetTensorShape(TFOutput, TFStatus)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns the shape of a tensor specified in <code>output</code>.
  syntax:
    content: public long[] GetTensorShape (TensorFlow.TFOutput output, TensorFlow.TFStatus status = null);
    parameters:
    - id: output
      type: TensorFlow.TFOutput
      description: The tensor that you want to look up.
    - id: status
      type: TensorFlow.TFStatus
      description: Status buffer, if specified a status code will be left here, if not specified, a <xref href="TensorFlow.TFException"></xref> exception is raised if there is an error.
    return:
      type: System.Int64[]
      description: The tensor shape.    If the number of dimensions in the shape is unknown or the shape is, a scalar, the values in the array will be zero. Otherwise, each element of will be set corresponding to the size of the dimension. An  unknown dimension is represented by -1.
  overload: TensorFlow.TFGraph.GetTensorShape*
  exceptions: []
- uid: TensorFlow.TFGraph.Greater(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: Greater(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Greater(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Greater(TFOutput, TFOutput, String)
  fullName: TFGraph.Greater(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns the truth value of (x &gt; y) element-wise.
  remarks: >-
    *NOTE*: `Greater` supports broadcasting. More about broadcasting
                  [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
  syntax:
    content: public TensorFlow.TFOutput Greater (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Greater'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Greater*
  exceptions: []
- uid: TensorFlow.TFGraph.GreaterEqual(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: GreaterEqual(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: GreaterEqual(TFOutput, TFOutput, String)
  nameWithType: TFGraph.GreaterEqual(TFOutput, TFOutput, String)
  fullName: TFGraph.GreaterEqual(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns the truth value of (x &gt;= y) element-wise.
  remarks: >-
    *NOTE*: `GreaterEqual` supports broadcasting. More about broadcasting
                  [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
  syntax:
    content: public TensorFlow.TFOutput GreaterEqual (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'GreaterEqual'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.GreaterEqual*
  exceptions: []
- uid: TensorFlow.TFGraph.HashTableV2(TensorFlow.TFDataType,TensorFlow.TFDataType,System.String,System.String,System.Nullable{System.Boolean},System.String)
  id: HashTableV2(TensorFlow.TFDataType,TensorFlow.TFDataType,System.String,System.String,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: HashTableV2(TFDataType, TFDataType, String, String, Nullable<Boolean>, String)
  nameWithType: TFGraph.HashTableV2(TFDataType, TFDataType, String, String, Nullable<Boolean>, String)
  fullName: TFGraph.HashTableV2(TFDataType, TFDataType, String, String, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Creates a non-initialized hash table.
  remarks: >-
    This op creates a hash table, specifying the type of its keys and values.
                  Before using the table you will have to initialize it.  After initialization the
                  table will be immutable.
  syntax:
    content: public TensorFlow.TFOutput HashTableV2 (TensorFlow.TFDataType key_dtype, TensorFlow.TFDataType value_dtype, string container = null, string shared_name = null, Nullable<bool> use_node_name_sharing = null, string operName = null);
    parameters:
    - id: key_dtype
      type: TensorFlow.TFDataType
      description: Type of the table keys.
    - id: value_dtype
      type: TensorFlow.TFDataType
      description: Type of the table values.
    - id: container
      type: System.String
      description: >-
        Optional argument
                      If non-empty, this table is placed in the given container.
                      Otherwise, a default container is used.
    - id: shared_name
      type: System.String
      description: >-
        Optional argument
                      If non-empty, this table is shared under the given name across
                      multiple sessions.
    - id: use_node_name_sharing
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true and shared_name is empty, the table is shared
                      using the node name.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'HashTableV2'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Handle to a table.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.HashTableV2*
  exceptions: []
- uid: TensorFlow.TFGraph.HistogramSummary(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: HistogramSummary(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: HistogramSummary(TFOutput, TFOutput, String)
  nameWithType: TFGraph.HistogramSummary(TFOutput, TFOutput, String)
  fullName: TFGraph.HistogramSummary(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Outputs a `Summary` protocol buffer with a histogram.
  remarks: "The generated\n              [`Summary`](https://www.tensorflow.org/code/tensorflow/core/framework/summary.proto)\n              has one summary value containing a histogram for `values`.\n              \n              This op reports an `InvalidArgument` error if any value is not finite."
  syntax:
    content: public TensorFlow.TFOutput HistogramSummary (TensorFlow.TFOutput tag, TensorFlow.TFOutput values, string operName = null);
    parameters:
    - id: tag
      type: TensorFlow.TFOutput
      description: Scalar.  Tag to use for the `Summary.Value`.
    - id: values
      type: TensorFlow.TFOutput
      description: Any shape. Values to use to build the histogram.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'HistogramSummary'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Scalar. Serialized `Summary` protocol buffer.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.HistogramSummary*
  exceptions: []
- uid: TensorFlow.TFGraph.HSVToRGB(TensorFlow.TFOutput,System.String)
  id: HSVToRGB(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: HSVToRGB(TFOutput, String)
  nameWithType: TFGraph.HSVToRGB(TFOutput, String)
  fullName: TFGraph.HSVToRGB(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Convert one or more images from HSV to RGB.
  remarks: "Outputs a tensor of the same shape as the `images` tensor, containing the RGB\n              value of the pixels. The output is only well defined if the value in `images`\n              are in `[0,1]`.\n              \n              See `rgb_to_hsv` for a description of the HSV encoding."
  syntax:
    content: public TensorFlow.TFOutput HSVToRGB (TensorFlow.TFOutput images, string operName = null);
    parameters:
    - id: images
      type: TensorFlow.TFOutput
      description: 1-D or higher rank. HSV data to convert. Last dimension must be size 3.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'HSVToRGB'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        `images` converted to RGB.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.HSVToRGB*
  exceptions: []
- uid: TensorFlow.TFGraph.Identity(TensorFlow.TFOutput,System.String)
  id: Identity(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Identity(TFOutput, String)
  nameWithType: TFGraph.Identity(TFOutput, String)
  fullName: TFGraph.Identity(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Return a tensor with the same shape and contents as the input tensor or value.
  syntax:
    content: public TensorFlow.TFOutput Identity (TensorFlow.TFOutput input, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Identity'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Identity*
  exceptions: []
- uid: TensorFlow.TFGraph.IdentityReaderV2(System.String,System.String,System.String)
  id: IdentityReaderV2(System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: IdentityReaderV2(String, String, String)
  nameWithType: TFGraph.IdentityReaderV2(String, String, String)
  fullName: TFGraph.IdentityReaderV2(String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: A Reader that outputs the queued work as both the key and value.
  remarks: >-
    To use, enqueue strings in a Queue.  ReaderRead will take the front
                  work string and output (work, work).
  syntax:
    content: public TensorFlow.TFOutput IdentityReaderV2 (string container = null, string shared_name = null, string operName = null);
    parameters:
    - id: container
      type: System.String
      description: >-
        Optional argument
                      If non-empty, this reader is placed in the given container.
                      Otherwise, a default container is used.
    - id: shared_name
      type: System.String
      description: >-
        Optional argument
                      If non-empty, this reader is named in the given bucket
                      with this shared_name. Otherwise, the node name is used instead.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'IdentityReaderV2'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The handle to reference the Reader.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.IdentityReaderV2*
  exceptions: []
- uid: TensorFlow.TFGraph.IFFT(TensorFlow.TFOutput,System.String)
  id: IFFT(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: IFFT(TFOutput, String)
  nameWithType: TFGraph.IFFT(TFOutput, String)
  fullName: TFGraph.IFFT(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Inverse fast Fourier transform.
  remarks: >-
    Computes the inverse 1-dimensional discrete Fourier transform over the
                  inner-most dimension of `input`.
  syntax:
    content: public TensorFlow.TFOutput IFFT (TensorFlow.TFOutput input, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: A complex64 tensor.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'IFFT'.
    return:
      type: TensorFlow.TFOutput
      description: "A complex64 tensor of the same shape as `input`. The inner-most\n                dimension of `input` is replaced with its inverse 1D Fourier transform.\n              \n              @compatibility(numpy)\n              Equivalent to np.fft.ifft\n              @end_compatibility\n              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result."
  overload: TensorFlow.TFGraph.IFFT*
  exceptions: []
- uid: TensorFlow.TFGraph.IFFT2D(TensorFlow.TFOutput,System.String)
  id: IFFT2D(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: IFFT2D(TFOutput, String)
  nameWithType: TFGraph.IFFT2D(TFOutput, String)
  fullName: TFGraph.IFFT2D(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Inverse 2D fast Fourier transform.
  remarks: >-
    Computes the inverse 2-dimensional discrete Fourier transform over the
                  inner-most 2 dimensions of `input`.
  syntax:
    content: public TensorFlow.TFOutput IFFT2D (TensorFlow.TFOutput input, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: A complex64 tensor.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'IFFT2D'.
    return:
      type: TensorFlow.TFOutput
      description: "A complex64 tensor of the same shape as `input`. The inner-most 2\n                dimensions of `input` are replaced with their inverse 2D Fourier transform.\n              \n              @compatibility(numpy)\n              Equivalent to np.fft.ifft2\n              @end_compatibility\n              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result."
  overload: TensorFlow.TFGraph.IFFT2D*
  exceptions: []
- uid: TensorFlow.TFGraph.IFFT3D(TensorFlow.TFOutput,System.String)
  id: IFFT3D(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: IFFT3D(TFOutput, String)
  nameWithType: TFGraph.IFFT3D(TFOutput, String)
  fullName: TFGraph.IFFT3D(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Inverse 3D fast Fourier transform.
  remarks: >-
    Computes the inverse 3-dimensional discrete Fourier transform over the
                  inner-most 3 dimensions of `input`.
  syntax:
    content: public TensorFlow.TFOutput IFFT3D (TensorFlow.TFOutput input, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: A complex64 tensor.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'IFFT3D'.
    return:
      type: TensorFlow.TFOutput
      description: "A complex64 tensor of the same shape as `input`. The inner-most 3\n                dimensions of `input` are replaced with their inverse 3D Fourier transform.\n              \n              @compatibility(numpy)\n              Equivalent to np.fft.ifftn with 3 dimensions.\n              @end_compatibility\n              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result."
  overload: TensorFlow.TFGraph.IFFT3D*
  exceptions: []
- uid: TensorFlow.TFGraph.Igamma(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: Igamma(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Igamma(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Igamma(TFOutput, TFOutput, String)
  fullName: TFGraph.Igamma(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Compute the lower regularized incomplete Gamma function `Q(a, x)`.
  remarks: "The lower regularized incomplete Gamma function is defined as:\n              \n              \n              \\\\(P(a, x) = gamma(a, x) / Gamma(a) = 1 - Q(a, x)\\\\)\n              \n              where\n              \n              \\\\(gamma(a, x) = int_{0}^{x} t^{a-1} exp(-t) dt\\\\)\n              \n              is the lower incomplete Gamma function.\n              \n              Note, above `Q(a, x)` (`Igammac`) is the upper regularized complete\n              Gamma function."
  syntax:
    content: public TensorFlow.TFOutput Igamma (TensorFlow.TFOutput a, TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: a
      type: TensorFlow.TFOutput
      description: To be added.
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Igamma'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Igamma*
  exceptions: []
- uid: TensorFlow.TFGraph.Igammac(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: Igammac(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Igammac(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Igammac(TFOutput, TFOutput, String)
  fullName: TFGraph.Igammac(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Compute the upper regularized incomplete Gamma function `Q(a, x)`.
  remarks: "The upper regularized incomplete Gamma function is defined as:\n              \n              \\\\(Q(a, x) = Gamma(a, x) / Gamma(a) = 1 - P(a, x)\\\\)\n              \n              where\n              \n              \\\\(Gamma(a, x) = int_{x}^{\\infty} t^{a-1} exp(-t) dt\\\\)\n              \n              is the upper incomplete Gama function.\n              \n              Note, above `P(a, x)` (`Igamma`) is the lower regularized complete\n              Gamma function."
  syntax:
    content: public TensorFlow.TFOutput Igammac (TensorFlow.TFOutput a, TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: a
      type: TensorFlow.TFOutput
      description: To be added.
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Igammac'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Igammac*
  exceptions: []
- uid: TensorFlow.TFGraph.Imag(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  id: Imag(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Imag(TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.Imag(TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.Imag(TFOutput, Nullable<TFDataType>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns the imaginary part of a complex number.
  remarks: "Given a tensor `input` of complex numbers, this operation returns a tensor of\n              type `float` that is the imaginary part of each element in `input`. All\n              elements in `input` must be complex numbers of the form \\\\(a + bj\\\\), where *a*\n              is the real part and *b* is the imaginary part returned by this operation.\n              \n              For example:\n              \n              ```\n              # tensor 'input' is [-2.25 + 4.75j, 3.25 + 5.75j]\n              tf.imag(input) ==&gt; [4.75, 5.75]\n              ```"
  syntax:
    content: public TensorFlow.TFOutput Imag (TensorFlow.TFOutput input, Nullable<TensorFlow.TFDataType> Tout = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: To be added.
    - id: Tout
      type: System.Nullable{TensorFlow.TFDataType}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Imag'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Imag*
  exceptions: []
- uid: TensorFlow.TFGraph.ImageSummary(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},TensorFlow.TFTensor,System.String)
  id: ImageSummary(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},TensorFlow.TFTensor,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ImageSummary(TFOutput, TFOutput, Nullable<Int64>, TFTensor, String)
  nameWithType: TFGraph.ImageSummary(TFOutput, TFOutput, Nullable<Int64>, TFTensor, String)
  fullName: TFGraph.ImageSummary(TFOutput, TFOutput, Nullable<Int64>, TFTensor, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Outputs a `Summary` protocol buffer with images.
  remarks: "The summary has up to `max_images` summary values containing images. The\n              images are built from `tensor` which must be 4-D with shape `[batch_size,\n              height, width, channels]` and where `channels` can be:\n              \n              *  1: `tensor` is interpreted as Grayscale.\n              *  3: `tensor` is interpreted as RGB.\n              *  4: `tensor` is interpreted as RGBA.\n              \n              The images have the same number of channels as the input tensor. For float\n              input, the values are normalized one image at a time to fit in the range\n              `[0, 255]`.  `uint8` values are unchanged.  The op uses two different\n              normalization algorithms:\n              \n              *  If the input values are all positive, they are rescaled so the largest one\n                 is 255.\n              \n              *  If any input value is negative, the values are shifted so input value 0.0\n                 is at 127.  They are then rescaled so that either the smallest value is 0,\n                 or the largest one is 255.\n              \n              The `tag` argument is a scalar `Tensor` of type `string`.  It is used to\n              build the `tag` of the summary values:\n              \n              *  If `max_images` is 1, the summary value tag is '*tag*/image'.\n              *  If `max_images` is greater than 1, the summary value tags are\n                 generated sequentially as '*tag*/image/0', '*tag*/image/1', etc.\n              \n              The `bad_color` argument is the color to use in the generated images for\n              non-finite input values.  It is a `unit8` 1-D tensor of length `channels`.\n              Each element must be in the range `[0, 255]` (It represents the value of a\n              pixel in the output image).  Non-finite values in the input tensor are\n              replaced by this tensor in the output image.  The default value is the color\n              red."
  syntax:
    content: public TensorFlow.TFOutput ImageSummary (TensorFlow.TFOutput tag, TensorFlow.TFOutput tensor, Nullable<long> max_images = null, TensorFlow.TFTensor bad_color = null, string operName = null);
    parameters:
    - id: tag
      type: TensorFlow.TFOutput
      description: Scalar. Used to build the `tag` attribute of the summary values.
    - id: tensor
      type: TensorFlow.TFOutput
      description: >-
        4-D of shape `[batch_size, height, width, channels]` where
                      `channels` is 1, 3, or 4.
    - id: max_images
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      Max number of batch elements to generate images for.
    - id: bad_color
      type: TensorFlow.TFTensor
      description: >-
        Optional argument
                      Color to use for pixels with non-finite values.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ImageSummary'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Scalar. Serialized `Summary` protocol buffer.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ImageSummary*
  exceptions: []
- uid: TensorFlow.TFGraph.ImmutableConst(TensorFlow.TFDataType,TensorFlow.TFShape,System.String,System.String)
  id: ImmutableConst(TensorFlow.TFDataType,TensorFlow.TFShape,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ImmutableConst(TFDataType, TFShape, String, String)
  nameWithType: TFGraph.ImmutableConst(TFDataType, TFShape, String, String)
  fullName: TFGraph.ImmutableConst(TFDataType, TFShape, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns immutable tensor from memory region.
  remarks: The current implementation memmaps the tensor from a file.
  syntax:
    content: public TensorFlow.TFOutput ImmutableConst (TensorFlow.TFDataType dtype, TensorFlow.TFShape shape, string memory_region_name, string operName = null);
    parameters:
    - id: dtype
      type: TensorFlow.TFDataType
      description: Type of the returned tensor.
    - id: shape
      type: TensorFlow.TFShape
      description: Shape of the returned tensor.
    - id: memory_region_name
      type: System.String
      description: >-
        Name of readonly memory region used by the tensor, see
                      NewReadOnlyMemoryRegionFromFile in tensorflow::Env.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ImmutableConst'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ImmutableConst*
  exceptions: []
- uid: TensorFlow.TFGraph.Import(System.Byte[],System.String,TensorFlow.TFStatus)
  id: Import(System.Byte[],System.String,TensorFlow.TFStatus)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Import(Byte[], String, TFStatus)
  nameWithType: TFGraph.Import(Byte[], String, TFStatus)
  fullName: TFGraph.Import(Byte[], String, TFStatus)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Import a serialized graph held in a byte array into this graph, using the specified prefix.
  syntax:
    content: public void Import (byte[] buffer, string prefix = "", TensorFlow.TFStatus status = null);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: A byte array containing the serialized graph.
    - id: prefix
      type: System.String
      description: A prefix that will be prepended to names of nodes in the graph when they are imported into the graph.
    - id: status
      type: TensorFlow.TFStatus
      description: Status buffer, if specified a status code will be left here, if not specified, a <xref href="TensorFlow.TFException"></xref> exception is raised if there is an error.
  overload: TensorFlow.TFGraph.Import*
  exceptions: []
- uid: TensorFlow.TFGraph.Import(System.Byte[],TensorFlow.TFImportGraphDefOptions,TensorFlow.TFStatus)
  id: Import(System.Byte[],TensorFlow.TFImportGraphDefOptions,TensorFlow.TFStatus)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Import(Byte[], TFImportGraphDefOptions, TFStatus)
  nameWithType: TFGraph.Import(Byte[], TFImportGraphDefOptions, TFStatus)
  fullName: TFGraph.Import(Byte[], TFImportGraphDefOptions, TFStatus)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Import a serialized graph held in a byte array into this graph, using the specified import options.
  syntax:
    content: public void Import (byte[] buffer, TensorFlow.TFImportGraphDefOptions options, TensorFlow.TFStatus status = null);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: A byte array containing the serialized graph.
    - id: options
      type: TensorFlow.TFImportGraphDefOptions
      description: Importing graph options.
    - id: status
      type: TensorFlow.TFStatus
      description: Status buffer, if specified a status code will be left here, if not specified, a <xref href="TensorFlow.TFException"></xref> exception is raised if there is an error.
  overload: TensorFlow.TFGraph.Import*
  exceptions: []
- uid: TensorFlow.TFGraph.Import(TensorFlow.TFBuffer,System.String,TensorFlow.TFStatus)
  id: Import(TensorFlow.TFBuffer,System.String,TensorFlow.TFStatus)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Import(TFBuffer, String, TFStatus)
  nameWithType: TFGraph.Import(TFBuffer, String, TFStatus)
  fullName: TFGraph.Import(TFBuffer, String, TFStatus)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Import a serialized graph into this graph, using the specified prefix.
  syntax:
    content: public void Import (TensorFlow.TFBuffer graphDef, string prefix = "", TensorFlow.TFStatus status = null);
    parameters:
    - id: graphDef
      type: TensorFlow.TFBuffer
      description: A buffer containing the serialized graph.
    - id: prefix
      type: System.String
      description: A prefix that will be prepended to names of nodes in the <code>graphDef</code> when they are imported into the graph.
    - id: status
      type: TensorFlow.TFStatus
      description: Status buffer, if specified a status code will be left here, if not specified, a <xref href="TensorFlow.TFException"></xref> exception is raised if there is an error.
  overload: TensorFlow.TFGraph.Import*
  exceptions: []
- uid: TensorFlow.TFGraph.Import(TensorFlow.TFBuffer,TensorFlow.TFImportGraphDefOptions,TensorFlow.TFStatus)
  id: Import(TensorFlow.TFBuffer,TensorFlow.TFImportGraphDefOptions,TensorFlow.TFStatus)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Import(TFBuffer, TFImportGraphDefOptions, TFStatus)
  nameWithType: TFGraph.Import(TFBuffer, TFImportGraphDefOptions, TFStatus)
  fullName: TFGraph.Import(TFBuffer, TFImportGraphDefOptions, TFStatus)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Import a serialized graph into this graph, using the specified importing options.
  syntax:
    content: public void Import (TensorFlow.TFBuffer graphDef, TensorFlow.TFImportGraphDefOptions options, TensorFlow.TFStatus status = null);
    parameters:
    - id: graphDef
      type: TensorFlow.TFBuffer
      description: A buffer containing the serialized graph.
    - id: options
      type: TensorFlow.TFImportGraphDefOptions
      description: Importing graph options.
    - id: status
      type: TensorFlow.TFStatus
      description: Status buffer, if specified a status code will be left here, if not specified, a <xref href="TensorFlow.TFException"></xref> exception is raised if there is an error.
  overload: TensorFlow.TFGraph.Import*
  exceptions: []
- uid: TensorFlow.TFGraph.ImportGraphDef(TensorFlow.TFBuffer,TensorFlow.TFImportGraphDefOptions,TensorFlow.TFOutput[],TensorFlow.TFStatus)
  id: ImportGraphDef(TensorFlow.TFBuffer,TensorFlow.TFImportGraphDefOptions,TensorFlow.TFOutput[],TensorFlow.TFStatus)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ImportGraphDef(TFBuffer, TFImportGraphDefOptions, TFOutput[], TFStatus)
  nameWithType: TFGraph.ImportGraphDef(TFBuffer, TFImportGraphDefOptions, TFOutput[], TFStatus)
  fullName: TFGraph.ImportGraphDef(TFBuffer, TFImportGraphDefOptions, TFOutput[], TFStatus)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Imports a graph serialized into the graph
  syntax:
    content: public void ImportGraphDef (TensorFlow.TFBuffer graphDef, TensorFlow.TFImportGraphDefOptions options, TensorFlow.TFOutput[] returnOutputs, TensorFlow.TFStatus status = null);
    parameters:
    - id: graphDef
      type: TensorFlow.TFBuffer
      description: Serialized graph definition (in protocol buffer format).
    - id: options
      type: TensorFlow.TFImportGraphDefOptions
      description: Import options.
    - id: returnOutputs
      type: TensorFlow.TFOutput[]
      description: Array large enough to contain all the return options.
    - id: status
      type: TensorFlow.TFStatus
      description: Status buffer, if specified a status code will be left here, if not specified, a <xref href="TensorFlow.TFException"></xref> exception is raised if there is an error.
  overload: TensorFlow.TFGraph.ImportGraphDef*
  exceptions: []
- uid: TensorFlow.TFGraph.InitializeTableFromTextFileV2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.Int64,System.Nullable{System.Int64},System.String,System.String)
  id: InitializeTableFromTextFileV2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.Int64,System.Nullable{System.Int64},System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: InitializeTableFromTextFileV2(TFOutput, TFOutput, Int64, Int64, Nullable<Int64>, String, String)
  nameWithType: TFGraph.InitializeTableFromTextFileV2(TFOutput, TFOutput, Int64, Int64, Nullable<Int64>, String, String)
  fullName: TFGraph.InitializeTableFromTextFileV2(TFOutput, TFOutput, Int64, Int64, Nullable<Int64>, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Initializes a table from a text file.
  remarks: "It inserts one key-value pair into the table for each line of the file.\n              The key and value is extracted from the whole line content, elements from the\n              split line based on `delimiter` or the line number (starting from zero).\n              Where to extract the key and value from a line is specified by `key_index` and\n              `value_index`.\n              \n              - A value of -1 means use the line number(starting from zero), expects `int64`.\n              - A value of -2 means use the whole line content, expects `string`.\n              - A value &gt;= 0 means use the index (starting at zero) of the split line based\n                on `delimiter`."
  syntax:
    content: public TensorFlow.TFOperation InitializeTableFromTextFileV2 (TensorFlow.TFOutput table_handle, TensorFlow.TFOutput filename, long key_index, long value_index, Nullable<long> vocab_size = null, string delimiter = null, string operName = null);
    parameters:
    - id: table_handle
      type: TensorFlow.TFOutput
      description: Handle to a table which will be initialized.
    - id: filename
      type: TensorFlow.TFOutput
      description: Filename of a vocabulary text file.
    - id: key_index
      type: System.Int64
      description: Column index in a line to get the table `key` values from.
    - id: value_index
      type: System.Int64
      description: >-
        Column index that represents information of a line to get the table
                      `value` values from.
    - id: vocab_size
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      Number of elements of the file, use -1 if unknown.
    - id: delimiter
      type: System.String
      description: >-
        Optional argument
                      Delimiter to separate fields in a line.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'InitializeTableFromTextFileV2'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.InitializeTableFromTextFileV2*
  exceptions: []
- uid: TensorFlow.TFGraph.InitializeTableV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: InitializeTableV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: InitializeTableV2(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.InitializeTableV2(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.InitializeTableV2(TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Table initializer that takes two tensors for keys and values respectively.
  syntax:
    content: public TensorFlow.TFOperation InitializeTableV2 (TensorFlow.TFOutput table_handle, TensorFlow.TFOutput keys, TensorFlow.TFOutput values, string operName = null);
    parameters:
    - id: table_handle
      type: TensorFlow.TFOutput
      description: Handle to a table which will be initialized.
    - id: keys
      type: TensorFlow.TFOutput
      description: Keys of type Tkey.
    - id: values
      type: TensorFlow.TFOutput
      description: Values of type Tval.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'InitializeTableV2'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.InitializeTableV2*
  exceptions: []
- uid: TensorFlow.TFGraph.InTopK(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.String)
  id: InTopK(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: InTopK(TFOutput, TFOutput, Int64, String)
  nameWithType: TFGraph.InTopK(TFOutput, TFOutput, Int64, String)
  fullName: TFGraph.InTopK(TFOutput, TFOutput, Int64, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Says whether the targets are in the top `K` predictions.
  remarks: "This outputs a `batch_size` bool array, an entry `out[i]` is `true` if the\n              prediction for the target class is among the top `k` predictions among\n              all predictions for example `i`. Note that the behavior of `InTopK` differs\n              from the `TopK` op in its handling of ties; if multiple classes have the\n              same prediction value and straddle the top-`k` boundary, all of those\n              classes are considered to be in the top `k`.\n              \n              More formally, let\n              \n                \\\\(predictions_i\\\\) be the predictions for all classes for example `i`,\n                \\\\(targets_i\\\\) be the target class for example `i`,\n                \\\\(out_i\\\\) be the output for example `i`,\n              \n              $$out_i = predictions_{i, targets_i} \\in TopKIncludingTies(predictions_i)$$"
  syntax:
    content: public TensorFlow.TFOutput InTopK (TensorFlow.TFOutput predictions, TensorFlow.TFOutput targets, long k, string operName = null);
    parameters:
    - id: predictions
      type: TensorFlow.TFOutput
      description: A `batch_size` x `classes` tensor.
    - id: targets
      type: TensorFlow.TFOutput
      description: A `batch_size` vector of class ids.
    - id: k
      type: System.Int64
      description: Number of top elements to look at for computing precision.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'InTopK'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Computed Precision at `k` as a `bool Tensor`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.InTopK*
  exceptions: []
- uid: TensorFlow.TFGraph.Inv(TensorFlow.TFOutput,System.String)
  id: Inv(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Inv(TFOutput, String)
  nameWithType: TFGraph.Inv(TFOutput, String)
  fullName: TFGraph.Inv(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the reciprocal of x element-wise.
  remarks: I.e., \\(y = 1 / x\\).
  syntax:
    content: public TensorFlow.TFOutput Inv (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Inv'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Inv*
  exceptions: []
- uid: TensorFlow.TFGraph.Invert(TensorFlow.TFOutput,System.String)
  id: Invert(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Invert(TFOutput, String)
  nameWithType: TFGraph.Invert(TFOutput, String)
  fullName: TFGraph.Invert(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Flips all bits elementwise.
  remarks: >-
    The result will have exactly those bits set, that are not set in `x`. The
                  computation is performed on the underlying representation of x.
  syntax:
    content: public TensorFlow.TFOutput Invert (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Invert'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Invert*
  exceptions: []
- uid: TensorFlow.TFGraph.InvertPermutation(TensorFlow.TFOutput,System.String)
  id: InvertPermutation(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: InvertPermutation(TFOutput, String)
  nameWithType: TFGraph.InvertPermutation(TFOutput, String)
  fullName: TFGraph.InvertPermutation(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the inverse permutation of a tensor.
  remarks: "This operation computes the inverse of an index permutation. It takes a 1-D\n              integer tensor `x`, which represents the indices of a zero-based array, and\n              swaps each value with its index position. In other words, for an output tensor\n              `y` and an input tensor `x`, this operation computes the following:\n              \n              `y[x[i]] = i for i in [0, 1, ..., len(x) - 1]`\n              \n              The values must include 0. There can be no duplicate values or negative values.\n              \n              For example:\n              \n              ```\n              # tensor `x` is [3, 4, 0, 2, 1]\n              invert_permutation(x) ==&gt; [2, 4, 3, 0, 1]\n              ```"
  syntax:
    content: public TensorFlow.TFOutput InvertPermutation (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: 1-D.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'InvertPermutation'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        1-D.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.InvertPermutation*
  exceptions: []
- uid: TensorFlow.TFGraph.InvGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: InvGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: InvGrad(TFOutput, TFOutput, String)
  nameWithType: TFGraph.InvGrad(TFOutput, TFOutput, String)
  fullName: TFGraph.InvGrad(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the gradient for the inverse of `x` wrt its input.
  remarks: >-
    Specifically, `grad = -dy * y*y`, where `y = 1/x`, and `dy`
                  is the corresponding input gradient.
  syntax:
    content: public TensorFlow.TFOutput InvGrad (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'InvGrad'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.InvGrad*
  exceptions: []
- uid: TensorFlow.TFGraph.IRFFT(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: IRFFT(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: IRFFT(TFOutput, TFOutput, String)
  nameWithType: TFGraph.IRFFT(TFOutput, TFOutput, String)
  fullName: TFGraph.IRFFT(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Inverse real-valued fast Fourier transform.
  remarks: "Computes the inverse 1-dimensional discrete Fourier transform of a real-valued\n              signal over the inner-most dimension of `input`.\n              \n              The inner-most dimension of `input` is assumed to be the result of `RFFT`: the\n              `fft_length / 2 + 1` unique components of the DFT of a real-valued signal. If\n              `fft_length` is not provided, it is computed from the size of the inner-most\n              dimension of `input` (`fft_length = 2 * (inner - 1)`). If the FFT length used to\n              compute `input` is odd, it should be provided since it cannot be inferred\n              properly.\n              \n              Along the axis `IRFFT` is computed on, if `fft_length / 2 + 1` is smaller\n              than the corresponding dimension of `input`, the dimension is cropped. If it is\n              larger, the dimension is padded with zeros."
  syntax:
    content: public TensorFlow.TFOutput IRFFT (TensorFlow.TFOutput input, TensorFlow.TFOutput fft_length, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: A complex64 tensor.
    - id: fft_length
      type: TensorFlow.TFOutput
      description: An int32 tensor of shape [1]. The FFT length.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'IRFFT'.
    return:
      type: TensorFlow.TFOutput
      description: "A float32 tensor of the same rank as `input`. The inner-most\n                dimension of `input` is replaced with the `fft_length` samples of its inverse\n                1D Fourier transform.\n              \n              @compatibility(numpy)\n              Equivalent to np.fft.irfft\n              @end_compatibility\n              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result."
  overload: TensorFlow.TFGraph.IRFFT*
  exceptions: []
- uid: TensorFlow.TFGraph.IRFFT2D(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: IRFFT2D(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: IRFFT2D(TFOutput, TFOutput, String)
  nameWithType: TFGraph.IRFFT2D(TFOutput, TFOutput, String)
  fullName: TFGraph.IRFFT2D(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Inverse 2D real-valued fast Fourier transform.
  remarks: "Computes the inverse 2-dimensional discrete Fourier transform of a real-valued\n              signal over the inner-most 2 dimensions of `input`.\n              \n              The inner-most 2 dimensions of `input` are assumed to be the result of `RFFT2D`:\n              The inner-most dimension contains the `fft_length / 2 + 1` unique components of\n              the DFT of a real-valued signal. If `fft_length` is not provided, it is computed\n              from the size of the inner-most 2 dimensions of `input`. If the FFT length used\n              to compute `input` is odd, it should be provided since it cannot be inferred\n              properly.\n              \n              Along each axis `IRFFT2D` is computed on, if `fft_length` (or\n              `fft_length / 2 + 1` for the inner-most dimension) is smaller than the\n              corresponding dimension of `input`, the dimension is cropped. If it is larger,\n              the dimension is padded with zeros."
  syntax:
    content: public TensorFlow.TFOutput IRFFT2D (TensorFlow.TFOutput input, TensorFlow.TFOutput fft_length, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: A complex64 tensor.
    - id: fft_length
      type: TensorFlow.TFOutput
      description: An int32 tensor of shape [2]. The FFT length for each dimension.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'IRFFT2D'.
    return:
      type: TensorFlow.TFOutput
      description: "A float32 tensor of the same rank as `input`. The inner-most 2\n                dimensions of `input` are replaced with the `fft_length` samples of their\n                inverse 2D Fourier transform.\n              \n              @compatibility(numpy)\n              Equivalent to np.fft.irfft2\n              @end_compatibility\n              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result."
  overload: TensorFlow.TFGraph.IRFFT2D*
  exceptions: []
- uid: TensorFlow.TFGraph.IRFFT3D(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: IRFFT3D(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: IRFFT3D(TFOutput, TFOutput, String)
  nameWithType: TFGraph.IRFFT3D(TFOutput, TFOutput, String)
  fullName: TFGraph.IRFFT3D(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Inverse 3D real-valued fast Fourier transform.
  remarks: "Computes the inverse 3-dimensional discrete Fourier transform of a real-valued\n              signal over the inner-most 3 dimensions of `input`.\n              \n              The inner-most 3 dimensions of `input` are assumed to be the result of `RFFT3D`:\n              The inner-most dimension contains the `fft_length / 2 + 1` unique components of\n              the DFT of a real-valued signal. If `fft_length` is not provided, it is computed\n              from the size of the inner-most 3 dimensions of `input`. If the FFT length used\n              to compute `input` is odd, it should be provided since it cannot be inferred\n              properly.\n              \n              Along each axis `IRFFT3D` is computed on, if `fft_length` (or\n              `fft_length / 2 + 1` for the inner-most dimension) is smaller than the\n              corresponding dimension of `input`, the dimension is cropped. If it is larger,\n              the dimension is padded with zeros."
  syntax:
    content: public TensorFlow.TFOutput IRFFT3D (TensorFlow.TFOutput input, TensorFlow.TFOutput fft_length, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: A complex64 tensor.
    - id: fft_length
      type: TensorFlow.TFOutput
      description: An int32 tensor of shape [3]. The FFT length for each dimension.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'IRFFT3D'.
    return:
      type: TensorFlow.TFOutput
      description: "A float32 tensor of the same rank as `input`. The inner-most 3\n                dimensions of `input` are replaced with the `fft_length` samples of their\n                inverse 3D real Fourier transform.\n              \n              @compatibility(numpy)\n              Equivalent to np.irfftn with 3 dimensions.\n              @end_compatibility\n              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result."
  overload: TensorFlow.TFGraph.IRFFT3D*
  exceptions: []
- uid: TensorFlow.TFGraph.IsFinite(TensorFlow.TFOutput,System.String)
  id: IsFinite(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: IsFinite(TFOutput, String)
  nameWithType: TFGraph.IsFinite(TFOutput, String)
  fullName: TFGraph.IsFinite(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns which elements of x are finite.
  remarks: >-
    @compatibility(numpy)
                  Equivalent to np.isfinite
                  @end_compatibility
  syntax:
    content: public TensorFlow.TFOutput IsFinite (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'IsFinite'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.IsFinite*
  exceptions: []
- uid: TensorFlow.TFGraph.IsInf(TensorFlow.TFOutput,System.String)
  id: IsInf(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: IsInf(TFOutput, String)
  nameWithType: TFGraph.IsInf(TFOutput, String)
  fullName: TFGraph.IsInf(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns which elements of x are Inf.
  remarks: >-
    @compatibility(numpy)
                  Equivalent to np.isinf
                  @end_compatibility
  syntax:
    content: public TensorFlow.TFOutput IsInf (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'IsInf'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.IsInf*
  exceptions: []
- uid: TensorFlow.TFGraph.IsNan(TensorFlow.TFOutput,System.String)
  id: IsNan(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: IsNan(TFOutput, String)
  nameWithType: TFGraph.IsNan(TFOutput, String)
  fullName: TFGraph.IsNan(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns which elements of x are NaN.
  remarks: >-
    @compatibility(numpy)
                  Equivalent to np.isnan
                  @end_compatibility
  syntax:
    content: public TensorFlow.TFOutput IsNan (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'IsNan'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.IsNan*
  exceptions: []
- uid: TensorFlow.TFGraph.Item(System.String)
  id: Item(System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Item(String)
  nameWithType: TFGraph.Item(String)
  fullName: TFGraph.Item(String)
  type: Property
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Gets the <xref href="TensorFlow.TFGraph"></xref> with the specified name, or null if the named operation does not exist in the graph.
  syntax:
    content: public TensorFlow.TFOperation this[string name] { get; }
    parameters:
    - id: name
      type: System.String
      description: Name to lookup.
    return:
      type: TensorFlow.TFOperation
      description: To be added.
  overload: TensorFlow.TFGraph.Item*
  exceptions: []
- uid: TensorFlow.TFGraph.Iterator(System.String,System.String,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  id: Iterator(System.String,System.String,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Iterator(String, String, TFDataType[], TFShape[], String)
  nameWithType: TFGraph.Iterator(String, String, TFDataType[], TFShape[], String)
  fullName: TFGraph.Iterator(String, String, TFDataType[], TFShape[], String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: A container for an iterator resource.
  syntax:
    content: public TensorFlow.TFOutput Iterator (string shared_name, string container, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);
    parameters:
    - id: shared_name
      type: System.String
      description: To be added.
    - id: container
      type: System.String
      description: To be added.
    - id: output_types
      type: TensorFlow.TFDataType[]
      description: To be added.
    - id: output_shapes
      type: TensorFlow.TFShape[]
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Iterator'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        A handle to the iterator that can be passed to a "MakeIterator"
                      or "IteratorGetNext" op.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Iterator*
  exceptions: []
- uid: TensorFlow.TFGraph.IteratorDispose(TensorFlow.TFOutput,System.String)
  id: IteratorDispose(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: IteratorDispose(TFOutput, String)
  nameWithType: TFGraph.IteratorDispose(TFOutput, String)
  fullName: TFGraph.IteratorDispose(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Releases any resources used by the given iterator.
  syntax:
    content: public TensorFlow.TFOperation IteratorDispose (TensorFlow.TFOutput iterator, string operName = null);
    parameters:
    - id: iterator
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'IteratorDispose'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.IteratorDispose*
  exceptions: []
- uid: TensorFlow.TFGraph.IteratorGetNext(TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  id: IteratorGetNext(TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: IteratorGetNext(TFOutput, TFDataType[], TFShape[], String)
  nameWithType: TFGraph.IteratorGetNext(TFOutput, TFDataType[], TFShape[], String)
  fullName: TFGraph.IteratorGetNext(TFOutput, TFDataType[], TFShape[], String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Gets the next output from the given iterator.
  syntax:
    content: public TensorFlow.TFOutput[] IteratorGetNext (TensorFlow.TFOutput iterator, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);
    parameters:
    - id: iterator
      type: TensorFlow.TFOutput
      description: To be added.
    - id: output_types
      type: TensorFlow.TFDataType[]
      description: To be added.
    - id: output_shapes
      type: TensorFlow.TFShape[]
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'IteratorGetNext'.
    return:
      type: TensorFlow.TFOutput[]
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.IteratorGetNext*
  exceptions: []
- uid: TensorFlow.TFGraph.L2Loss(TensorFlow.TFOutput,System.String)
  id: L2Loss(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: L2Loss(TFOutput, String)
  nameWithType: TFGraph.L2Loss(TFOutput, String)
  fullName: TFGraph.L2Loss(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: L2 Loss.
  remarks: "Computes half the L2 norm of a tensor without the `sqrt`:\n              \n                  output = sum(t ** 2) / 2"
  syntax:
    content: public TensorFlow.TFOutput L2Loss (TensorFlow.TFOutput t, string operName = null);
    parameters:
    - id: t
      type: TensorFlow.TFOutput
      description: Typically 2-D, but may have any dimensions.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'L2Loss'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        0-D.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.L2Loss*
  exceptions: []
- uid: TensorFlow.TFGraph.LearnedUnigramCandidateSampler(TensorFlow.TFOutput,System.Int64,System.Int64,System.Boolean,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  id: LearnedUnigramCandidateSampler(TensorFlow.TFOutput,System.Int64,System.Int64,System.Boolean,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: LearnedUnigramCandidateSampler(TFOutput, Int64, Int64, Boolean, Int64, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.LearnedUnigramCandidateSampler(TFOutput, Int64, Int64, Boolean, Int64, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.LearnedUnigramCandidateSampler(TFOutput, Int64, Int64, Boolean, Int64, Nullable<Int64>, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Generates labels for candidate sampling with a learned unigram distribution.
  remarks: "See explanations of candidate sampling and the data formats at\n              go/candidate-sampling.\n              \n              For each batch, this op picks a single set of sampled candidate labels.\n              \n              The advantages of sampling candidates per-batch are simplicity and the\n              possibility of efficient dense matrix multiplication. The disadvantage is that\n              the sampled candidates must be chosen independently of the context and of the\n              true labels."
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> LearnedUnigramCandidateSampler (TensorFlow.TFOutput true_classes, long num_true, long num_sampled, bool unique, long range_max, Nullable<long> seed = null, Nullable<long> seed2 = null, string operName = null);
    parameters:
    - id: true_classes
      type: TensorFlow.TFOutput
      description: >-
        A batch_size * num_true matrix, in which each row contains the
                      IDs of the num_true target_classes in the corresponding original label.
    - id: num_true
      type: System.Int64
      description: Number of true labels per context.
    - id: num_sampled
      type: System.Int64
      description: Number of candidates to randomly sample.
    - id: unique
      type: System.Boolean
      description: >-
        If unique is true, we sample with rejection, so that all sampled
                      candidates in a batch are unique. This requires some approximation to
                      estimate the post-rejection sampling probabilities.
    - id: range_max
      type: System.Int64
      description: The sampler will sample integers from the interval [0, range_max).
    - id: seed
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      If either seed or seed2 are set to be non-zero, the random number
                      generator is seeded by the given seed.  Otherwise, it is seeded by a
                      random seed.
    - id: seed2
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      An second seed to avoid seed collision.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'LearnedUnigramCandidateSampler'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      sampled_candidates: A vector of length num_sampled, in which each element is
                      the ID of a sampled candidate.
                      true_expected_count: A batch_size * num_true matrix, representing
                      the number of times each candidate is expected to occur in a batch
                      of sampled candidates. If unique=true, then this is a probability.
                      sampled_expected_count: A vector of length num_sampled, for each sampled
                      candidate representing the number of times the candidate is expected
                      to occur in a batch of sampled candidates.  If unique=true, then this is a
                      probability.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.LearnedUnigramCandidateSampler*
  exceptions: []
- uid: TensorFlow.TFGraph.Less(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: Less(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Less(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Less(TFOutput, TFOutput, String)
  fullName: TFGraph.Less(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns the truth value of (x &lt; y) element-wise.
  remarks: >-
    *NOTE*: `Less` supports broadcasting. More about broadcasting
                  [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
  syntax:
    content: public TensorFlow.TFOutput Less (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Less'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Less*
  exceptions: []
- uid: TensorFlow.TFGraph.LessEqual(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: LessEqual(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: LessEqual(TFOutput, TFOutput, String)
  nameWithType: TFGraph.LessEqual(TFOutput, TFOutput, String)
  fullName: TFGraph.LessEqual(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns the truth value of (x &lt;= y) element-wise.
  remarks: >-
    *NOTE*: `LessEqual` supports broadcasting. More about broadcasting
                  [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
  syntax:
    content: public TensorFlow.TFOutput LessEqual (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'LessEqual'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.LessEqual*
  exceptions: []
- uid: TensorFlow.TFGraph.Lgamma(TensorFlow.TFOutput,System.String)
  id: Lgamma(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Lgamma(TFOutput, String)
  nameWithType: TFGraph.Lgamma(TFOutput, String)
  fullName: TFGraph.Lgamma(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the log of the absolute value of `Gamma(x)` element-wise.
  syntax:
    content: public TensorFlow.TFOutput Lgamma (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Lgamma'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Lgamma*
  exceptions: []
- uid: TensorFlow.TFGraph.LinSpace(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: LinSpace(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: LinSpace(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.LinSpace(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.LinSpace(TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Generates values in an interval.
  remarks: "A sequence of `num` evenly-spaced values are generated beginning at `start`.\n              If `num &gt; 1`, the values in the sequence increase by `stop - start / num - 1`,\n              so that the last one is exactly `stop`.\n              \n              For example:\n              \n              ```\n              tf.linspace(10.0, 12.0, 3, name=\"linspace\") =&gt; [ 10.0  11.0  12.0]\n              ```"
  syntax:
    content: public TensorFlow.TFOutput LinSpace (TensorFlow.TFOutput start, TensorFlow.TFOutput stop, TensorFlow.TFOutput num, string operName = null);
    parameters:
    - id: start
      type: TensorFlow.TFOutput
      description: First entry in the range.
    - id: stop
      type: TensorFlow.TFOutput
      description: Last entry in the range.
    - id: num
      type: TensorFlow.TFOutput
      description: Number of values to generate.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'LinSpace'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        1-D. The generated values.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.LinSpace*
  exceptions: []
- uid: TensorFlow.TFGraph.ListDiff(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  id: ListDiff(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ListDiff(TFOutput, TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.ListDiff(TFOutput, TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.ListDiff(TFOutput, TFOutput, Nullable<TFDataType>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the difference between two lists of numbers or strings.
  remarks: "Given a list `x` and a list `y`, this operation returns a list `out` that\n              represents all values that are in `x` but not in `y`. The returned list `out`\n              is sorted in the same order that the numbers appear in `x` (duplicates are\n              preserved). This operation also returns a list `idx` that represents the\n              position of each `out` element in `x`. In other words:\n              \n              `out[i] = x[idx[i]] for i in [0, 1, ..., len(out) - 1]`\n              \n              For example, given this input:\n              \n              ```\n              x = [1, 2, 3, 4, 5, 6]\n              y = [1, 3, 5]\n              ```\n              \n              This operation would return:\n              \n              ```\n              out ==&gt; [2, 4, 6]\n              idx ==&gt; [1, 3, 5]\n              ```"
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput> ListDiff (TensorFlow.TFOutput x, TensorFlow.TFOutput y, Nullable<TensorFlow.TFDataType> out_idx = null, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: 1-D. Values to keep.
    - id: y
      type: TensorFlow.TFOutput
      description: 1-D. Values to remove.
    - id: out_idx
      type: System.Nullable{TensorFlow.TFDataType}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ListDiff'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      output: 1-D. Values present in `x` but not in `y`.
                      idx: 1-D. Positions of `x` values preserved in `out`.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.ListDiff*
  exceptions: []
- uid: TensorFlow.TFGraph.Log(TensorFlow.TFOutput,System.String)
  id: Log(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Log(TFOutput, String)
  nameWithType: TFGraph.Log(TFOutput, String)
  fullName: TFGraph.Log(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes natural logarithm of x element-wise.
  remarks: I.e., \\(y = \log_e x\\).
  syntax:
    content: public TensorFlow.TFOutput Log (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Log'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Log*
  exceptions: []
- uid: TensorFlow.TFGraph.Log1p(TensorFlow.TFOutput,System.String)
  id: Log1p(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Log1p(TFOutput, String)
  nameWithType: TFGraph.Log1p(TFOutput, String)
  fullName: TFGraph.Log1p(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes natural logarithm of (1 + x) element-wise.
  remarks: I.e., \\(y = \log_e (1 + x)\\).
  syntax:
    content: public TensorFlow.TFOutput Log1p (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Log1p'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Log1p*
  exceptions: []
- uid: TensorFlow.TFGraph.LogicalAnd(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: LogicalAnd(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: LogicalAnd(TFOutput, TFOutput, String)
  nameWithType: TFGraph.LogicalAnd(TFOutput, TFOutput, String)
  fullName: TFGraph.LogicalAnd(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns the truth value of x AND y element-wise.
  remarks: >-
    *NOTE*: `LogicalAnd` supports broadcasting. More about broadcasting
                  [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
  syntax:
    content: public TensorFlow.TFOutput LogicalAnd (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'LogicalAnd'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.LogicalAnd*
  exceptions: []
- uid: TensorFlow.TFGraph.LogicalNot(TensorFlow.TFOutput,System.String)
  id: LogicalNot(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: LogicalNot(TFOutput, String)
  nameWithType: TFGraph.LogicalNot(TFOutput, String)
  fullName: TFGraph.LogicalNot(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns the truth value of NOT x element-wise.
  syntax:
    content: public TensorFlow.TFOutput LogicalNot (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'LogicalNot'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.LogicalNot*
  exceptions: []
- uid: TensorFlow.TFGraph.LogicalOr(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: LogicalOr(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: LogicalOr(TFOutput, TFOutput, String)
  nameWithType: TFGraph.LogicalOr(TFOutput, TFOutput, String)
  fullName: TFGraph.LogicalOr(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns the truth value of x OR y element-wise.
  remarks: >-
    *NOTE*: `LogicalOr` supports broadcasting. More about broadcasting
                  [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
  syntax:
    content: public TensorFlow.TFOutput LogicalOr (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'LogicalOr'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.LogicalOr*
  exceptions: []
- uid: TensorFlow.TFGraph.LogSoftmax(TensorFlow.TFOutput,System.String)
  id: LogSoftmax(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: LogSoftmax(TFOutput, String)
  nameWithType: TFGraph.LogSoftmax(TFOutput, String)
  fullName: TFGraph.LogSoftmax(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes log softmax activations.
  remarks: "For each batch `i` and class `j` we have\n              \n                  logsoftmax[i, j] = logits[i, j] - log(sum(exp(logits[i])))"
  syntax:
    content: public TensorFlow.TFOutput LogSoftmax (TensorFlow.TFOutput logits, string operName = null);
    parameters:
    - id: logits
      type: TensorFlow.TFOutput
      description: 2-D with shape `[batch_size, num_classes]`.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'LogSoftmax'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Same shape as `logits`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.LogSoftmax*
  exceptions: []
- uid: TensorFlow.TFGraph.LogUniformCandidateSampler(TensorFlow.TFOutput,System.Int64,System.Int64,System.Boolean,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  id: LogUniformCandidateSampler(TensorFlow.TFOutput,System.Int64,System.Int64,System.Boolean,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: LogUniformCandidateSampler(TFOutput, Int64, Int64, Boolean, Int64, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.LogUniformCandidateSampler(TFOutput, Int64, Int64, Boolean, Int64, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.LogUniformCandidateSampler(TFOutput, Int64, Int64, Boolean, Int64, Nullable<Int64>, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Generates labels for candidate sampling with a log-uniform distribution.
  remarks: "See explanations of candidate sampling and the data formats at\n              go/candidate-sampling.\n              \n              For each batch, this op picks a single set of sampled candidate labels.\n              \n              The advantages of sampling candidates per-batch are simplicity and the\n              possibility of efficient dense matrix multiplication. The disadvantage is that\n              the sampled candidates must be chosen independently of the context and of the\n              true labels."
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> LogUniformCandidateSampler (TensorFlow.TFOutput true_classes, long num_true, long num_sampled, bool unique, long range_max, Nullable<long> seed = null, Nullable<long> seed2 = null, string operName = null);
    parameters:
    - id: true_classes
      type: TensorFlow.TFOutput
      description: >-
        A batch_size * num_true matrix, in which each row contains the
                      IDs of the num_true target_classes in the corresponding original label.
    - id: num_true
      type: System.Int64
      description: Number of true labels per context.
    - id: num_sampled
      type: System.Int64
      description: Number of candidates to randomly sample.
    - id: unique
      type: System.Boolean
      description: >-
        If unique is true, we sample with rejection, so that all sampled
                      candidates in a batch are unique. This requires some approximation to
                      estimate the post-rejection sampling probabilities.
    - id: range_max
      type: System.Int64
      description: The sampler will sample integers from the interval [0, range_max).
    - id: seed
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      If either seed or seed2 are set to be non-zero, the random number
                      generator is seeded by the given seed.  Otherwise, it is seeded by a
                      random seed.
    - id: seed2
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      An second seed to avoid seed collision.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'LogUniformCandidateSampler'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      sampled_candidates: A vector of length num_sampled, in which each element is
                      the ID of a sampled candidate.
                      true_expected_count: A batch_size * num_true matrix, representing
                      the number of times each candidate is expected to occur in a batch
                      of sampled candidates. If unique=true, then this is a probability.
                      sampled_expected_count: A vector of length num_sampled, for each sampled
                      candidate representing the number of times the candidate is expected
                      to occur in a batch of sampled candidates.  If unique=true, then this is a
                      probability.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.LogUniformCandidateSampler*
  exceptions: []
- uid: TensorFlow.TFGraph.LookupTableExportV2(TensorFlow.TFOutput,TensorFlow.TFDataType,TensorFlow.TFDataType,System.String)
  id: LookupTableExportV2(TensorFlow.TFOutput,TensorFlow.TFDataType,TensorFlow.TFDataType,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: LookupTableExportV2(TFOutput, TFDataType, TFDataType, String)
  nameWithType: TFGraph.LookupTableExportV2(TFOutput, TFDataType, TFDataType, String)
  fullName: TFGraph.LookupTableExportV2(TFOutput, TFDataType, TFDataType, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Outputs all keys and values in the table.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput> LookupTableExportV2 (TensorFlow.TFOutput table_handle, TensorFlow.TFDataType Tkeys, TensorFlow.TFDataType Tvalues, string operName = null);
    parameters:
    - id: table_handle
      type: TensorFlow.TFOutput
      description: Handle to the table.
    - id: Tkeys
      type: TensorFlow.TFDataType
      description: To be added.
    - id: Tvalues
      type: TensorFlow.TFDataType
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'LookupTableExportV2'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      keys: Vector of all keys present in the table.
                      values: Tensor of all values in the table. Indexed in parallel with `keys`.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.LookupTableExportV2*
  exceptions: []
- uid: TensorFlow.TFGraph.LookupTableFindV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: LookupTableFindV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: LookupTableFindV2(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.LookupTableFindV2(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.LookupTableFindV2(TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Looks up keys in a table, outputs the corresponding values.
  remarks: "The tensor `keys` must of the same type as the keys of the table.\n              The output `values` is of the type of the table values.\n              \n              The scalar `default_value` is the value output for keys not present in the\n              table. It must also be of the same type as the table values."
  syntax:
    content: public TensorFlow.TFOutput LookupTableFindV2 (TensorFlow.TFOutput table_handle, TensorFlow.TFOutput keys, TensorFlow.TFOutput default_value, string operName = null);
    parameters:
    - id: table_handle
      type: TensorFlow.TFOutput
      description: Handle to the table.
    - id: keys
      type: TensorFlow.TFOutput
      description: Any shape.  Keys to look up.
    - id: default_value
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'LookupTableFindV2'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Same shape as `keys`.  Values found in the table, or `default_values`
                      for missing keys.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.LookupTableFindV2*
  exceptions: []
- uid: TensorFlow.TFGraph.LookupTableImportV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: LookupTableImportV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: LookupTableImportV2(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.LookupTableImportV2(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.LookupTableImportV2(TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Replaces the contents of the table with the specified keys and values.
  remarks: >-
    The tensor `keys` must be of the same type as the keys of the table.
                  The tensor `values` must be of the type of the table values.
  syntax:
    content: public TensorFlow.TFOperation LookupTableImportV2 (TensorFlow.TFOutput table_handle, TensorFlow.TFOutput keys, TensorFlow.TFOutput values, string operName = null);
    parameters:
    - id: table_handle
      type: TensorFlow.TFOutput
      description: Handle to the table.
    - id: keys
      type: TensorFlow.TFOutput
      description: Any shape.  Keys to look up.
    - id: values
      type: TensorFlow.TFOutput
      description: Values to associate with keys.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'LookupTableImportV2'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.LookupTableImportV2*
  exceptions: []
- uid: TensorFlow.TFGraph.LookupTableInsertV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: LookupTableInsertV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: LookupTableInsertV2(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.LookupTableInsertV2(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.LookupTableInsertV2(TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Updates the table to associates keys with values.
  remarks: >-
    The tensor `keys` must be of the same type as the keys of the table.
                  The tensor `values` must be of the type of the table values.
  syntax:
    content: public TensorFlow.TFOperation LookupTableInsertV2 (TensorFlow.TFOutput table_handle, TensorFlow.TFOutput keys, TensorFlow.TFOutput values, string operName = null);
    parameters:
    - id: table_handle
      type: TensorFlow.TFOutput
      description: Handle to the table.
    - id: keys
      type: TensorFlow.TFOutput
      description: Any shape.  Keys to look up.
    - id: values
      type: TensorFlow.TFOutput
      description: Values to associate with keys.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'LookupTableInsertV2'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.LookupTableInsertV2*
  exceptions: []
- uid: TensorFlow.TFGraph.LookupTableSizeV2(TensorFlow.TFOutput,System.String)
  id: LookupTableSizeV2(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: LookupTableSizeV2(TFOutput, String)
  nameWithType: TFGraph.LookupTableSizeV2(TFOutput, String)
  fullName: TFGraph.LookupTableSizeV2(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the number of elements in the given table.
  syntax:
    content: public TensorFlow.TFOutput LookupTableSizeV2 (TensorFlow.TFOutput table_handle, string operName = null);
    parameters:
    - id: table_handle
      type: TensorFlow.TFOutput
      description: Handle to the table.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'LookupTableSizeV2'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Scalar that contains number of elements in the table.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.LookupTableSizeV2*
  exceptions: []
- uid: TensorFlow.TFGraph.LoopCond(TensorFlow.TFOutput,System.String)
  id: LoopCond(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: LoopCond(TFOutput, String)
  nameWithType: TFGraph.LoopCond(TFOutput, String)
  fullName: TFGraph.LoopCond(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Forwards the input to the output.
  remarks: >-
    This operator represents the loop termination condition used by the
                  "pivot" switches of a loop.
  syntax:
    content: public TensorFlow.TFOutput LoopCond (TensorFlow.TFOutput input, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: A boolean scalar, representing the branch predicate of the Switch op.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'LoopCond'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The same tensor as `input`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.LoopCond*
  exceptions: []
- uid: TensorFlow.TFGraph.LRN(TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.String)
  id: LRN(TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: LRN(TFOutput, Nullable<Int64>, Nullable<Single>, Nullable<Single>, Nullable<Single>, String)
  nameWithType: TFGraph.LRN(TFOutput, Nullable<Int64>, Nullable<Single>, Nullable<Single>, Nullable<Single>, String)
  fullName: TFGraph.LRN(TFOutput, Nullable<Int64>, Nullable<Single>, Nullable<Single>, Nullable<Single>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Local Response Normalization.
  remarks: "The 4-D `input` tensor is treated as a 3-D array of 1-D vectors (along the last\n              dimension), and each vector is normalized independently.  Within a given vector,\n              each component is divided by the weighted, squared sum of inputs within\n              `depth_radius`.  In detail,\n              \n                  sqr_sum[a, b, c, d] =\n                      sum(input[a, b, c, d - depth_radius : d + depth_radius + 1] ** 2)\n                  output = input / (bias + alpha * sqr_sum) ** beta\n              \n              For details, see [Krizhevsky et al., ImageNet classification with deep\n              convolutional neural networks (NIPS 2012)](http://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks)."
  syntax:
    content: public TensorFlow.TFOutput LRN (TensorFlow.TFOutput input, Nullable<long> depth_radius = null, Nullable<float> bias = null, Nullable<float> alpha = null, Nullable<float> beta = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: 4-D.
    - id: depth_radius
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      0-D.  Half-width of the 1-D normalization window.
    - id: bias
      type: System.Nullable{System.Single}
      description: >-
        Optional argument
                      An offset (usually positive to avoid dividing by 0).
    - id: alpha
      type: System.Nullable{System.Single}
      description: >-
        Optional argument
                      A scale factor, usually positive.
    - id: beta
      type: System.Nullable{System.Single}
      description: >-
        Optional argument
                      An exponent.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'LRN'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.LRN*
  exceptions: []
- uid: TensorFlow.TFGraph.LRNGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.String)
  id: LRNGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: LRNGrad(TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Single>, Nullable<Single>, Nullable<Single>, String)
  nameWithType: TFGraph.LRNGrad(TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Single>, Nullable<Single>, Nullable<Single>, String)
  fullName: TFGraph.LRNGrad(TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Single>, Nullable<Single>, Nullable<Single>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Gradients for Local Response Normalization.
  syntax:
    content: public TensorFlow.TFOutput LRNGrad (TensorFlow.TFOutput input_grads, TensorFlow.TFOutput input_image, TensorFlow.TFOutput output_image, Nullable<long> depth_radius = null, Nullable<float> bias = null, Nullable<float> alpha = null, Nullable<float> beta = null, string operName = null);
    parameters:
    - id: input_grads
      type: TensorFlow.TFOutput
      description: 4-D with shape `[batch, height, width, channels]`.
    - id: input_image
      type: TensorFlow.TFOutput
      description: 4-D with shape `[batch, height, width, channels]`.
    - id: output_image
      type: TensorFlow.TFOutput
      description: 4-D with shape `[batch, height, width, channels]`.
    - id: depth_radius
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      A depth radius.
    - id: bias
      type: System.Nullable{System.Single}
      description: >-
        Optional argument
                      An offset (usually &gt; 0 to avoid dividing by 0).
    - id: alpha
      type: System.Nullable{System.Single}
      description: >-
        Optional argument
                      A scale factor, usually positive.
    - id: beta
      type: System.Nullable{System.Single}
      description: >-
        Optional argument
                      An exponent.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'LRNGrad'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The gradients for LRN.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.LRNGrad*
  exceptions: []
- uid: TensorFlow.TFGraph.MakeIterator(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: MakeIterator(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MakeIterator(TFOutput, TFOutput, String)
  nameWithType: TFGraph.MakeIterator(TFOutput, TFOutput, String)
  fullName: TFGraph.MakeIterator(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Makes a new iterator from the given `dataset` and stores it in `iterator`.
  remarks: >-
    This operation may be executed multiple times. Each execution will reset the
                  iterator in `iterator` to the first element of `dataset`.
  syntax:
    content: public TensorFlow.TFOperation MakeIterator (TensorFlow.TFOutput dataset, TensorFlow.TFOutput iterator, string operName = null);
    parameters:
    - id: dataset
      type: TensorFlow.TFOutput
      description: To be added.
    - id: iterator
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MakeIterator'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.MakeIterator*
  exceptions: []
- uid: TensorFlow.TFGraph.MapClear(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  id: MapClear(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MapClear(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.MapClear(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.MapClear(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Op removes all elements in the underlying container.
  syntax:
    content: public TensorFlow.TFOperation MapClear (TensorFlow.TFDataType[] dtypes, Nullable<long> capacity = null, Nullable<long> memory_limit = null, string container = null, string shared_name = null, string operName = null);
    parameters:
    - id: dtypes
      type: TensorFlow.TFDataType[]
      description: To be added.
    - id: capacity
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: memory_limit
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: container
      type: System.String
      description: Optional argument
    - id: shared_name
      type: System.String
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MapClear'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.MapClear*
  exceptions: []
- uid: TensorFlow.TFGraph.MapIncompleteSize(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  id: MapIncompleteSize(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MapIncompleteSize(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.MapIncompleteSize(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.MapIncompleteSize(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Op returns the number of incomplete elements in the underlying container.
  syntax:
    content: public TensorFlow.TFOutput MapIncompleteSize (TensorFlow.TFDataType[] dtypes, Nullable<long> capacity = null, Nullable<long> memory_limit = null, string container = null, string shared_name = null, string operName = null);
    parameters:
    - id: dtypes
      type: TensorFlow.TFDataType[]
      description: To be added.
    - id: capacity
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: memory_limit
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: container
      type: System.String
      description: Optional argument
    - id: shared_name
      type: System.String
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MapIncompleteSize'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.MapIncompleteSize*
  exceptions: []
- uid: TensorFlow.TFGraph.MapPeek(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  id: MapPeek(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MapPeek(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.MapPeek(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.MapPeek(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Op peeks at the values at the specified key.  If the
  remarks: >-
    underlying container does not contain this key
                  this op will block until it does.
  syntax:
    content: public TensorFlow.TFOutput[] MapPeek (TensorFlow.TFOutput key, TensorFlow.TFOutput indices, TensorFlow.TFDataType[] dtypes, Nullable<long> capacity = null, Nullable<long> memory_limit = null, string container = null, string shared_name = null, string operName = null);
    parameters:
    - id: key
      type: TensorFlow.TFOutput
      description: To be added.
    - id: indices
      type: TensorFlow.TFOutput
      description: To be added.
    - id: dtypes
      type: TensorFlow.TFDataType[]
      description: To be added.
    - id: capacity
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: memory_limit
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: container
      type: System.String
      description: Optional argument
    - id: shared_name
      type: System.String
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MapPeek'.
    return:
      type: TensorFlow.TFOutput[]
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.MapPeek*
  exceptions: []
- uid: TensorFlow.TFGraph.MapSize(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  id: MapSize(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MapSize(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.MapSize(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.MapSize(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Op returns the number of elements in the underlying container.
  syntax:
    content: public TensorFlow.TFOutput MapSize (TensorFlow.TFDataType[] dtypes, Nullable<long> capacity = null, Nullable<long> memory_limit = null, string container = null, string shared_name = null, string operName = null);
    parameters:
    - id: dtypes
      type: TensorFlow.TFDataType[]
      description: To be added.
    - id: capacity
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: memory_limit
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: container
      type: System.String
      description: Optional argument
    - id: shared_name
      type: System.String
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MapSize'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.MapSize*
  exceptions: []
- uid: TensorFlow.TFGraph.MapStage(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  id: MapStage(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MapStage(TFOutput, TFOutput, TFOutput[], TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.MapStage(TFOutput, TFOutput, TFOutput[], TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.MapStage(TFOutput, TFOutput, TFOutput[], TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Stage (key, values) in the underlying container which behaves like a hashtable.
  syntax:
    content: public TensorFlow.TFOperation MapStage (TensorFlow.TFOutput key, TensorFlow.TFOutput indices, TensorFlow.TFOutput[] values, TensorFlow.TFDataType[] dtypes, Nullable<long> capacity = null, Nullable<long> memory_limit = null, string container = null, string shared_name = null, string operName = null);
    parameters:
    - id: key
      type: TensorFlow.TFOutput
      description: int64
    - id: indices
      type: TensorFlow.TFOutput
      description: To be added.
    - id: values
      type: TensorFlow.TFOutput[]
      description: >-
        a list of tensors
                      dtypes A list of data types that inserted values should adhere to.
    - id: dtypes
      type: TensorFlow.TFDataType[]
      description: To be added.
    - id: capacity
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      Maximum number of elements in the Staging Area. If &gt; 0, inserts
                      on the container will block when the capacity is reached.
    - id: memory_limit
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: container
      type: System.String
      description: >-
        Optional argument
                      If non-empty, this queue is placed in the given container. Otherwise,
                      a default container is used.
    - id: shared_name
      type: System.String
      description: >-
        Optional argument
                      It is necessary to match this name to the matching Unstage Op.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MapStage'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.MapStage*
  exceptions: []
- uid: TensorFlow.TFGraph.MapUnstage(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  id: MapUnstage(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MapUnstage(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.MapUnstage(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.MapUnstage(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Op removes and returns the values associated with the key
  remarks: >-
    from the underlying container.   If the underlying container
                  does not contain this key, the op will block until it does.
  syntax:
    content: public TensorFlow.TFOutput[] MapUnstage (TensorFlow.TFOutput key, TensorFlow.TFOutput indices, TensorFlow.TFDataType[] dtypes, Nullable<long> capacity = null, Nullable<long> memory_limit = null, string container = null, string shared_name = null, string operName = null);
    parameters:
    - id: key
      type: TensorFlow.TFOutput
      description: To be added.
    - id: indices
      type: TensorFlow.TFOutput
      description: To be added.
    - id: dtypes
      type: TensorFlow.TFDataType[]
      description: To be added.
    - id: capacity
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: memory_limit
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: container
      type: System.String
      description: Optional argument
    - id: shared_name
      type: System.String
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MapUnstage'.
    return:
      type: TensorFlow.TFOutput[]
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.MapUnstage*
  exceptions: []
- uid: TensorFlow.TFGraph.MapUnstageNoKey(TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  id: MapUnstageNoKey(TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MapUnstageNoKey(TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.MapUnstageNoKey(TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.MapUnstageNoKey(TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Op removes and returns a random (key, value)
  remarks: >-
    from the underlying container.   If the underlying container
                  does not contain elements, the op will block until it does.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput[]> MapUnstageNoKey (TensorFlow.TFOutput indices, TensorFlow.TFDataType[] dtypes, Nullable<long> capacity = null, Nullable<long> memory_limit = null, string container = null, string shared_name = null, string operName = null);
    parameters:
    - id: indices
      type: TensorFlow.TFOutput
      description: To be added.
    - id: dtypes
      type: TensorFlow.TFDataType[]
      description: To be added.
    - id: capacity
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: memory_limit
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: container
      type: System.String
      description: Optional argument
    - id: shared_name
      type: System.String
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MapUnstageNoKey'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput[]}
      description: "Returns a tuple with multiple values, as follows:\n              key: \n              values: \n              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property."
  overload: TensorFlow.TFGraph.MapUnstageNoKey*
  exceptions: []
- uid: TensorFlow.TFGraph.MatchingFiles(TensorFlow.TFOutput,System.String)
  id: MatchingFiles(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MatchingFiles(TFOutput, String)
  nameWithType: TFGraph.MatchingFiles(TFOutput, String)
  fullName: TFGraph.MatchingFiles(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns the set of files matching one or more glob patterns.
  remarks: >-
    Note that this routine only supports wildcard characters in the
                  basename portion of the pattern, not in the directory portion.
  syntax:
    content: public TensorFlow.TFOutput MatchingFiles (TensorFlow.TFOutput pattern, string operName = null);
    parameters:
    - id: pattern
      type: TensorFlow.TFOutput
      description: Shell wildcard pattern(s). Scalar or vector of type string.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MatchingFiles'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        A vector of matching filenames.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.MatchingFiles*
  exceptions: []
- uid: TensorFlow.TFGraph.MatMul(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  id: MatMul(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MatMul(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  nameWithType: TFGraph.MatMul(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  fullName: TFGraph.MatMul(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Multiply the matrix "a" by the matrix "b".
  remarks: "The inputs must be two-dimensional matrices and the inner dimension of\n              \"a\" (after being transposed if transpose_a is true) must match the\n              outer dimension of \"b\" (after being transposed if transposed_b is\n              true).\n              \n              *Note*: The default kernel implementation for MatMul on GPUs uses\n              cublas."
  syntax:
    content: public TensorFlow.TFOutput MatMul (TensorFlow.TFOutput a, TensorFlow.TFOutput b, Nullable<bool> transpose_a = null, Nullable<bool> transpose_b = null, string operName = null);
    parameters:
    - id: a
      type: TensorFlow.TFOutput
      description: To be added.
    - id: b
      type: TensorFlow.TFOutput
      description: To be added.
    - id: transpose_a
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true, "a" is transposed before multiplication.
    - id: transpose_b
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true, "b" is transposed before multiplication.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MatMul'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.MatMul*
  exceptions: []
- uid: TensorFlow.TFGraph.MatrixBandPart(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: MatrixBandPart(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MatrixBandPart(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.MatrixBandPart(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.MatrixBandPart(TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Copy a tensor setting everything outside a central band in each innermost matrix
  remarks: "to zero.\n              \n              The `band` part is computed as follows:\n              Assume `input` has `k` dimensions `[I, J, K, ..., M, N]`, then the output is a\n              tensor with the same shape where\n              \n              `band[i, j, k, ..., m, n] = in_band(m, n) * input[i, j, k, ..., m, n]`.\n              \n              The indicator function\n              \n              `in_band(m, n) = (num_lower &lt; 0 || (m-n) &lt;= num_lower)) &&\n                               (num_upper &lt; 0 || (n-m) &lt;= num_upper)`.\n              \n              For example:\n              \n              ```\n              # if 'input' is [[ 0,  1,  2, 3]\n                               [-1,  0,  1, 2]\n                               [-2, -1,  0, 1]\n                               [-3, -2, -1, 0]],\n              \n              tf.matrix_band_part(input, 1, -1) ==&gt; [[ 0,  1,  2, 3]\n                                                     [-1,  0,  1, 2]\n                                                     [ 0, -1,  0, 1]\n                                                     [ 0,  0, -1, 0]],\n              \n              tf.matrix_band_part(input, 2, 1) ==&gt; [[ 0,  1,  0, 0]\n                                                    [-1,  0,  1, 0]\n                                                    [-2, -1,  0, 1]\n                                                    [ 0, -2, -1, 0]]\n              ```\n              \n              Useful special cases:\n              \n              ```\n               tf.matrix_band_part(input, 0, -1) ==&gt; Upper triangular part.\n               tf.matrix_band_part(input, -1, 0) ==&gt; Lower triangular part.\n               tf.matrix_band_part(input, 0, 0) ==&gt; Diagonal.\n              ```"
  syntax:
    content: public TensorFlow.TFOutput MatrixBandPart (TensorFlow.TFOutput input, TensorFlow.TFOutput num_lower, TensorFlow.TFOutput num_upper, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: Rank `k` tensor.
    - id: num_lower
      type: TensorFlow.TFOutput
      description: >-
        0-D tensor. Number of subdiagonals to keep. If negative, keep entire
                      lower triangle.
    - id: num_upper
      type: TensorFlow.TFOutput
      description: >-
        0-D tensor. Number of superdiagonals to keep. If negative, keep
                      entire upper triangle.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MatrixBandPart'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Rank `k` tensor of the same shape as input. The extracted banded tensor.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.MatrixBandPart*
  exceptions: []
- uid: TensorFlow.TFGraph.MatrixDeterminant(TensorFlow.TFOutput,System.String)
  id: MatrixDeterminant(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MatrixDeterminant(TFOutput, String)
  nameWithType: TFGraph.MatrixDeterminant(TFOutput, String)
  fullName: TFGraph.MatrixDeterminant(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the determinant of one ore more square matrices.
  remarks: >-
    The input is a tensor of shape `[..., M, M]` whose inner-most 2 dimensions
                  form square matrices. The output is a tensor containing the determinants
                  for all input submatrices `[..., :, :]`.
  syntax:
    content: public TensorFlow.TFOutput MatrixDeterminant (TensorFlow.TFOutput input, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: Shape is `[..., M, M]`.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MatrixDeterminant'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Shape is `[...]`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.MatrixDeterminant*
  exceptions: []
- uid: TensorFlow.TFGraph.MatrixDiag(TensorFlow.TFOutput,System.String)
  id: MatrixDiag(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MatrixDiag(TFOutput, String)
  nameWithType: TFGraph.MatrixDiag(TFOutput, String)
  fullName: TFGraph.MatrixDiag(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns a batched diagonal tensor with a given batched diagonal values.
  remarks: "Given a `diagonal`, this operation returns a tensor with the `diagonal` and\n              everything else padded with zeros. The diagonal is computed as follows:\n              \n              Assume `diagonal` has `k` dimensions `[I, J, K, ..., N]`, then the output is a\n              tensor of rank `k+1` with dimensions [I, J, K, ..., N, N]` where:\n              \n              `output[i, j, k, ..., m, n] = 1{m=n} * diagonal[i, j, k, ..., n]`.\n              \n              For example:\n              \n              ```\n              # 'diagonal' is [[1, 2, 3, 4], [5, 6, 7, 8]]\n              \n              and diagonal.shape = (2, 4)\n              \n              tf.matrix_diag(diagonal) ==&gt; [[[1, 0, 0, 0]\n                                                   [0, 2, 0, 0]\n                                                   [0, 0, 3, 0]\n                                                   [0, 0, 0, 4]],\n                                                  [[5, 0, 0, 0]\n                                                   [0, 6, 0, 0]\n                                                   [0, 0, 7, 0]\n                                                   [0, 0, 0, 8]]]\n              \n              which has shape (2, 4, 4)\n              ```"
  syntax:
    content: public TensorFlow.TFOutput MatrixDiag (TensorFlow.TFOutput diagonal, string operName = null);
    parameters:
    - id: diagonal
      type: TensorFlow.TFOutput
      description: Rank `k`, where `k &gt;= 1`.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MatrixDiag'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Rank `k+1`, with `output.shape = diagonal.shape + [diagonal.shape[-1]]`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.MatrixDiag*
  exceptions: []
- uid: TensorFlow.TFGraph.MatrixDiagPart(TensorFlow.TFOutput,System.String)
  id: MatrixDiagPart(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MatrixDiagPart(TFOutput, String)
  nameWithType: TFGraph.MatrixDiagPart(TFOutput, String)
  fullName: TFGraph.MatrixDiagPart(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns the batched diagonal part of a batched tensor.
  remarks: "This operation returns a tensor with the `diagonal` part\n              of the batched `input`. The `diagonal` part is computed as follows:\n              \n              Assume `input` has `k` dimensions `[I, J, K, ..., M, N]`, then the output is a\n              tensor of rank `k - 1` with dimensions `[I, J, K, ..., min(M, N)]` where:\n              \n              `diagonal[i, j, k, ..., n] = input[i, j, k, ..., n, n]`.\n              \n              The input must be at least a matrix.\n              \n              For example:\n              \n              ```\n              # 'input' is [[[1, 0, 0, 0]\n                             [0, 2, 0, 0]\n                             [0, 0, 3, 0]\n                             [0, 0, 0, 4]],\n                            [[5, 0, 0, 0]\n                             [0, 6, 0, 0]\n                             [0, 0, 7, 0]\n                             [0, 0, 0, 8]]]\n              \n              and input.shape = (2, 4, 4)\n              \n              tf.matrix_diag_part(input) ==&gt; [[1, 2, 3, 4], [5, 6, 7, 8]]\n              \n              which has shape (2, 4)\n              ```"
  syntax:
    content: public TensorFlow.TFOutput MatrixDiagPart (TensorFlow.TFOutput input, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: Rank `k` tensor where `k &gt;= 2`.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MatrixDiagPart'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The extracted diagonal(s) having shape
                      `diagonal.shape = input.shape[:-2] + [min(input.shape[-2:])]`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.MatrixDiagPart*
  exceptions: []
- uid: TensorFlow.TFGraph.MatrixInverse(TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: MatrixInverse(TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MatrixInverse(TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.MatrixInverse(TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.MatrixInverse(TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the inverse of one or more square invertible matrices or their
  remarks: "adjoints (conjugate transposes).\n              \n              The input is a tensor of shape `[..., M, M]` whose inner-most 2 dimensions\n              form square matrices. The output is a tensor of the same shape as the input\n              containing the inverse for all input submatrices `[..., :, :]`.\n              \n              The op uses LU decomposition with partial pivoting to compute the inverses.\n              \n              If a matrix is not invertible there is no guarantee what the op does. It\n              may detect the condition and raise an exception or it may simply return a\n              garbage result."
  syntax:
    content: public TensorFlow.TFOutput MatrixInverse (TensorFlow.TFOutput input, Nullable<bool> adjoint = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: Shape is `[..., M, M]`.
    - id: adjoint
      type: System.Nullable{System.Boolean}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MatrixInverse'.
    return:
      type: TensorFlow.TFOutput
      description: "Shape is `[..., M, M]`.\n              \n              @compatibility(numpy)\n              Equivalent to np.linalg.inv\n              @end_compatibility\n              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result."
  overload: TensorFlow.TFGraph.MatrixInverse*
  exceptions: []
- uid: TensorFlow.TFGraph.MatrixSetDiag(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: MatrixSetDiag(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MatrixSetDiag(TFOutput, TFOutput, String)
  nameWithType: TFGraph.MatrixSetDiag(TFOutput, TFOutput, String)
  fullName: TFGraph.MatrixSetDiag(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns a batched matrix tensor with new batched diagonal values.
  remarks: "Given `input` and `diagonal`, this operation returns a tensor with the\n              same shape and values as `input`, except for the main diagonal of the\n              innermost matrices.  These will be overwritten by the values in `diagonal`.\n              \n              The output is computed as follows:\n              \n              Assume `input` has `k+1` dimensions `[I, J, K, ..., M, N]` and `diagonal` has\n              `k` dimensions `[I, J, K, ..., min(M, N)]`.  Then the output is a\n              tensor of rank `k+1` with dimensions `[I, J, K, ..., M, N]` where:\n              \n                * `output[i, j, k, ..., m, n] = diagonal[i, j, k, ..., n]` for `m == n`.\n                * `output[i, j, k, ..., m, n] = input[i, j, k, ..., m, n]` for `m != n`."
  syntax:
    content: public TensorFlow.TFOutput MatrixSetDiag (TensorFlow.TFOutput input, TensorFlow.TFOutput diagonal, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: Rank `k+1`, where `k &gt;= 1`.
    - id: diagonal
      type: TensorFlow.TFOutput
      description: Rank `k`, where `k &gt;= 1`.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MatrixSetDiag'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Rank `k+1`, with `output.shape = input.shape`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.MatrixSetDiag*
  exceptions: []
- uid: TensorFlow.TFGraph.MatrixSolve(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: MatrixSolve(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MatrixSolve(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.MatrixSolve(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.MatrixSolve(TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Solves systems of linear equations.
  remarks: >-
    `Matrix` is a tensor of shape `[..., M, M]` whose inner-most 2 dimensions
                  form square matrices. `Rhs` is a tensor of shape `[..., M, K]`. The `output` is
                  a tensor shape `[..., M, K]`.  If `adjoint` is `False` then each output matrix
                  satisfies `matrix[..., :, :] * output[..., :, :] = rhs[..., :, :]`.
                  If `adjoint` is `True` then each output matrix satisfies
                  `adjoint(matrix[..., :, :]) * output[..., :, :] = rhs[..., :, :]`.
  syntax:
    content: public TensorFlow.TFOutput MatrixSolve (TensorFlow.TFOutput matrix, TensorFlow.TFOutput rhs, Nullable<bool> adjoint = null, string operName = null);
    parameters:
    - id: matrix
      type: TensorFlow.TFOutput
      description: Shape is `[..., M, M]`.
    - id: rhs
      type: TensorFlow.TFOutput
      description: Shape is `[..., M, K]`.
    - id: adjoint
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      Boolean indicating whether to solve with `matrix` or its (block-wise)
                      adjoint.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MatrixSolve'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Shape is `[..., M, K]`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.MatrixSolve*
  exceptions: []
- uid: TensorFlow.TFGraph.MatrixSolveLs(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: MatrixSolveLs(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MatrixSolveLs(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.MatrixSolveLs(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.MatrixSolveLs(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Solves one or more linear least-squares problems.
  remarks: "`matrix` is a tensor of shape `[..., M, N]` whose inner-most 2 dimensions\n              form matrices of size `[M, N]`. Rhs is a tensor of shape `[..., M, K]`.\n              The output is a tensor shape `[..., N, K]` where each output matrix solves\n              each of the equations matrix[..., :, :] * output[..., :, :] = rhs[..., :, :]\n              in the least squares sense.\n              \n              matrix and right-hand sides in the batch:\n              \n              `matrix`=\\\\(A \\in \\Re^{m \\times n}\\\\),\n              `rhs`=\\\\(B  \\in \\Re^{m \\times k}\\\\),\n              `output`=\\\\(X  \\in \\Re^{n \\times k}\\\\),\n              `l2_regularizer`=\\\\(\\lambda\\\\).\n              \n              If `fast` is `True`, then the solution is computed by solving the normal\n              equations using Cholesky decomposition. Specifically, if \\\\(m \\ge n\\\\) then\n              \\\\(X = (A^T A + \\lambda I)^{-1} A^T B\\\\), which solves the least-squares\n              problem \\\\(X = \\mathrm{argmin}_{Z \\in \\Re^{n \\times k} } ||A Z - B||_F^2 +\n              \\lambda ||Z||_F^2\\\\). If \\\\(m \\lt n\\\\) then `output` is computed as\n              \\\\(X = A^T (A A^T + \\lambda I)^{-1} B\\\\), which (for \\\\(\\lambda = 0\\\\)) is the\n              minimum-norm solution to the under-determined linear system, i.e.\n              \\\\(X = \\mathrm{argmin}_{Z \\in \\Re^{n \\times k} } ||Z||_F^2 \\\\), subject to\n              \\\\(A Z = B\\\\). Notice that the fast path is only numerically stable when\n              \\\\(A\\\\) is numerically full rank and has a condition number\n              \\\\(\\mathrm{cond}(A) \\lt \\frac{1}{\\sqrt{\\epsilon_{mach} } }\\\\) or\\\\(\\lambda\\\\) is\n              sufficiently large.\n              \n              If `fast` is `False` an algorithm based on the numerically robust complete\n              orthogonal decomposition is used. This computes the minimum-norm\n              least-squares solution, even when \\\\(A\\\\) is rank deficient. This path is\n              typically 6-7 times slower than the fast path. If `fast` is `False` then\n              `l2_regularizer` is ignored."
  syntax:
    content: public TensorFlow.TFOutput MatrixSolveLs (TensorFlow.TFOutput matrix, TensorFlow.TFOutput rhs, TensorFlow.TFOutput l2_regularizer, Nullable<bool> fast = null, string operName = null);
    parameters:
    - id: matrix
      type: TensorFlow.TFOutput
      description: Shape is `[..., M, N]`.
    - id: rhs
      type: TensorFlow.TFOutput
      description: Shape is `[..., M, K]`.
    - id: l2_regularizer
      type: TensorFlow.TFOutput
      description: "Scalar tensor.\n              \n              @compatibility(numpy)\n              Equivalent to np.linalg.lstsq\n              @end_compatibility"
    - id: fast
      type: System.Nullable{System.Boolean}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MatrixSolveLs'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Shape is `[..., N, K]`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.MatrixSolveLs*
  exceptions: []
- uid: TensorFlow.TFGraph.MatrixTriangularSolve(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  id: MatrixTriangularSolve(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MatrixTriangularSolve(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  nameWithType: TFGraph.MatrixTriangularSolve(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  fullName: TFGraph.MatrixTriangularSolve(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Solves systems of linear equations with upper or lower triangular matrices by
  remarks: "backsubstitution.\n              \n              `matrix` is a tensor of shape `[..., M, M]` whose inner-most 2 dimensions form\n              square matrices. If `lower` is `True` then the strictly upper triangular part\n              of each inner-most matrix is assumed to be zero and not accessed.\n              If `lower` is False then the strictly lower triangular part of each inner-most\n              matrix is assumed to be zero and not accessed.\n              `rhs` is a tensor of shape `[..., M, K]`.\n              \n              The output is a tensor of shape `[..., M, K]`. If `adjoint` is\n              `True` then the innermost matrices in output` satisfy matrix equations\n              `matrix[..., :, :] * output[..., :, :] = rhs[..., :, :]`.\n              If `adjoint` is `False` then the strictly then the  innermost matrices in\n              `output` satisfy matrix equations\n              `adjoint(matrix[..., i, k]) * output[..., k, j] = rhs[..., i, j]`."
  syntax:
    content: public TensorFlow.TFOutput MatrixTriangularSolve (TensorFlow.TFOutput matrix, TensorFlow.TFOutput rhs, Nullable<bool> lower = null, Nullable<bool> adjoint = null, string operName = null);
    parameters:
    - id: matrix
      type: TensorFlow.TFOutput
      description: Shape is `[..., M, M]`.
    - id: rhs
      type: TensorFlow.TFOutput
      description: Shape is `[..., M, K]`.
    - id: lower
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      Boolean indicating whether the innermost matrices in `matrix` are
                      lower or upper triangular.
    - id: adjoint
      type: System.Nullable{System.Boolean}
      description: "Optional argument\n              Boolean indicating whether to solve with `matrix` or its (block-wise)\n                       adjoint.\n              \n              @compatibility(numpy)\n              Equivalent to np.linalg.triangular_solve\n              @end_compatibility"
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MatrixTriangularSolve'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Shape is `[..., M, K]`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.MatrixTriangularSolve*
  exceptions: []
- uid: TensorFlow.TFGraph.Max(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: Max(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Max(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.Max(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.Max(TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the maximum of elements across dimensions of a tensor.
  remarks: >-
    Reduces `input` along the dimensions given in `reduction_indices`. Unless
                  `keep_dims` is true, the rank of the tensor is reduced by 1 for each entry in
                  `reduction_indices`. If `keep_dims` is true, the reduced dimensions are
                  retained with length 1.
  syntax:
    content: public TensorFlow.TFOutput Max (TensorFlow.TFOutput input, TensorFlow.TFOutput reduction_indices, Nullable<bool> keep_dims = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: The tensor to reduce.
    - id: reduction_indices
      type: TensorFlow.TFOutput
      description: The dimensions to reduce.
    - id: keep_dims
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true, retain reduced dimensions with length 1.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Max'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The reduced tensor.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Max*
  exceptions: []
- uid: TensorFlow.TFGraph.Maximum(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: Maximum(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Maximum(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Maximum(TFOutput, TFOutput, String)
  fullName: TFGraph.Maximum(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: 'Returns the max of x and y (i.e. x &gt; y ? x : y) element-wise.'
  remarks: >-
    *NOTE*: `Maximum` supports broadcasting. More about broadcasting
                  [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
  syntax:
    content: public TensorFlow.TFOutput Maximum (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Maximum'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Maximum*
  exceptions: []
- uid: TensorFlow.TFGraph.MaxPool(TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  id: MaxPool(TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MaxPool(TFOutput, Int64[], Int64[], String, String, String)
  nameWithType: TFGraph.MaxPool(TFOutput, Int64[], Int64[], String, String, String)
  fullName: TFGraph.MaxPool(TFOutput, Int64[], Int64[], String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Performs max pooling on the input.
  syntax:
    content: public TensorFlow.TFOutput MaxPool (TensorFlow.TFOutput input, long[] ksize, long[] strides, string padding, string data_format = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: 4-D input to pool over.
    - id: ksize
      type: System.Int64[]
      description: The size of the window for each dimension of the input tensor.
    - id: strides
      type: System.Int64[]
      description: >-
        The stride of the sliding window for each dimension of the
                      input tensor.
    - id: padding
      type: System.String
      description: The type of padding algorithm to use.
    - id: data_format
      type: System.String
      description: >-
        Optional argument
                      Specify the data format of the input and output data. With the
                      default format "NHWC", the data is stored in the order of:
                          [batch, in_height, in_width, in_channels].
                      Alternatively, the format could be "NCHW", the data storage order of:
                          [batch, in_channels, in_height, in_width].
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MaxPool'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The max pooled output tensor.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.MaxPool*
  exceptions: []
- uid: TensorFlow.TFGraph.MaxPool3D(TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  id: MaxPool3D(TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MaxPool3D(TFOutput, Int64[], Int64[], String, String, String)
  nameWithType: TFGraph.MaxPool3D(TFOutput, Int64[], Int64[], String, String, String)
  fullName: TFGraph.MaxPool3D(TFOutput, Int64[], Int64[], String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Performs 3D max pooling on the input.
  syntax:
    content: public TensorFlow.TFOutput MaxPool3D (TensorFlow.TFOutput input, long[] ksize, long[] strides, string padding, string data_format = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: Shape `[batch, depth, rows, cols, channels]` tensor to pool over.
    - id: ksize
      type: System.Int64[]
      description: >-
        1-D tensor of length 5. The size of the window for each dimension of
                      the input tensor. Must have `ksize[0] = ksize[4] = 1`.
    - id: strides
      type: System.Int64[]
      description: >-
        1-D tensor of length 5. The stride of the sliding window for each
                      dimension of `input`. Must have `strides[0] = strides[4] = 1`.
    - id: padding
      type: System.String
      description: The type of padding algorithm to use.
    - id: data_format
      type: System.String
      description: >-
        Optional argument
                      The data format of the input and output data. With the
                      default format "NDHWC", the data is stored in the order of:
                          [batch, in_depth, in_height, in_width, in_channels].
                      Alternatively, the format could be "NCDHW", the data storage order is:
                          [batch, in_channels, in_depth, in_height, in_width].
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MaxPool3D'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The max pooled output tensor.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.MaxPool3D*
  exceptions: []
- uid: TensorFlow.TFGraph.MaxPool3DGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  id: MaxPool3DGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MaxPool3DGrad(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String, String)
  nameWithType: TFGraph.MaxPool3DGrad(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String, String)
  fullName: TFGraph.MaxPool3DGrad(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes gradients of max pooling function.
  syntax:
    content: public TensorFlow.TFOutput MaxPool3DGrad (TensorFlow.TFOutput orig_input, TensorFlow.TFOutput orig_output, TensorFlow.TFOutput grad, long[] ksize, long[] strides, string padding, string data_format = null, string operName = null);
    parameters:
    - id: orig_input
      type: TensorFlow.TFOutput
      description: The original input tensor.
    - id: orig_output
      type: TensorFlow.TFOutput
      description: The original output tensor.
    - id: grad
      type: TensorFlow.TFOutput
      description: Output backprop of shape `[batch, depth, rows, cols, channels]`.
    - id: ksize
      type: System.Int64[]
      description: >-
        1-D tensor of length 5. The size of the window for each dimension of
                      the input tensor. Must have `ksize[0] = ksize[4] = 1`.
    - id: strides
      type: System.Int64[]
      description: >-
        1-D tensor of length 5. The stride of the sliding window for each
                      dimension of `input`. Must have `strides[0] = strides[4] = 1`.
    - id: padding
      type: System.String
      description: The type of padding algorithm to use.
    - id: data_format
      type: System.String
      description: >-
        Optional argument
                      The data format of the input and output data. With the
                      default format "NDHWC", the data is stored in the order of:
                          [batch, in_depth, in_height, in_width, in_channels].
                      Alternatively, the format could be "NCDHW", the data storage order is:
                          [batch, in_channels, in_depth, in_height, in_width].
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MaxPool3DGrad'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.MaxPool3DGrad*
  exceptions: []
- uid: TensorFlow.TFGraph.MaxPool3DGradGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  id: MaxPool3DGradGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MaxPool3DGradGrad(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String, String)
  nameWithType: TFGraph.MaxPool3DGradGrad(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String, String)
  fullName: TFGraph.MaxPool3DGradGrad(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes second-order gradients of the maxpooling function.
  syntax:
    content: public TensorFlow.TFOutput MaxPool3DGradGrad (TensorFlow.TFOutput orig_input, TensorFlow.TFOutput orig_output, TensorFlow.TFOutput grad, long[] ksize, long[] strides, string padding, string data_format = null, string operName = null);
    parameters:
    - id: orig_input
      type: TensorFlow.TFOutput
      description: The original input tensor.
    - id: orig_output
      type: TensorFlow.TFOutput
      description: The original output tensor.
    - id: grad
      type: TensorFlow.TFOutput
      description: Output backprop of shape `[batch, depth, rows, cols, channels]`.
    - id: ksize
      type: System.Int64[]
      description: >-
        1-D tensor of length 5. The size of the window for each dimension of
                      the input tensor. Must have `ksize[0] = ksize[4] = 1`.
    - id: strides
      type: System.Int64[]
      description: >-
        1-D tensor of length 5. The stride of the sliding window for each
                      dimension of `input`. Must have `strides[0] = strides[4] = 1`.
    - id: padding
      type: System.String
      description: The type of padding algorithm to use.
    - id: data_format
      type: System.String
      description: >-
        Optional argument
                      The data format of the input and output data. With the
                      default format "NDHWC", the data is stored in the order of:
                          [batch, in_depth, in_height, in_width, in_channels].
                      Alternatively, the format could be "NCDHW", the data storage order is:
                          [batch, in_channels, in_depth, in_height, in_width].
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MaxPool3DGradGrad'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Gradients of gradients w.r.t. the input to `max_pool`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.MaxPool3DGradGrad*
  exceptions: []
- uid: TensorFlow.TFGraph.MaxPoolGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  id: MaxPoolGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MaxPoolGrad(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String, String)
  nameWithType: TFGraph.MaxPoolGrad(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String, String)
  fullName: TFGraph.MaxPoolGrad(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes gradients of the maxpooling function.
  syntax:
    content: public TensorFlow.TFOutput MaxPoolGrad (TensorFlow.TFOutput orig_input, TensorFlow.TFOutput orig_output, TensorFlow.TFOutput grad, long[] ksize, long[] strides, string padding, string data_format = null, string operName = null);
    parameters:
    - id: orig_input
      type: TensorFlow.TFOutput
      description: The original input tensor.
    - id: orig_output
      type: TensorFlow.TFOutput
      description: The original output tensor.
    - id: grad
      type: TensorFlow.TFOutput
      description: 4-D.  Gradients w.r.t. the output of `max_pool`.
    - id: ksize
      type: System.Int64[]
      description: The size of the window for each dimension of the input tensor.
    - id: strides
      type: System.Int64[]
      description: >-
        The stride of the sliding window for each dimension of the
                      input tensor.
    - id: padding
      type: System.String
      description: The type of padding algorithm to use.
    - id: data_format
      type: System.String
      description: >-
        Optional argument
                      Specify the data format of the input and output data. With the
                      default format "NHWC", the data is stored in the order of:
                          [batch, in_height, in_width, in_channels].
                      Alternatively, the format could be "NCHW", the data storage order of:
                          [batch, in_channels, in_height, in_width].
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MaxPoolGrad'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Gradients w.r.t. the input to `max_pool`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.MaxPoolGrad*
  exceptions: []
- uid: TensorFlow.TFGraph.MaxPoolGradGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  id: MaxPoolGradGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MaxPoolGradGrad(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String, String)
  nameWithType: TFGraph.MaxPoolGradGrad(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String, String)
  fullName: TFGraph.MaxPoolGradGrad(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes second-order gradients of the maxpooling function.
  syntax:
    content: public TensorFlow.TFOutput MaxPoolGradGrad (TensorFlow.TFOutput orig_input, TensorFlow.TFOutput orig_output, TensorFlow.TFOutput grad, long[] ksize, long[] strides, string padding, string data_format = null, string operName = null);
    parameters:
    - id: orig_input
      type: TensorFlow.TFOutput
      description: The original input tensor.
    - id: orig_output
      type: TensorFlow.TFOutput
      description: The original output tensor.
    - id: grad
      type: TensorFlow.TFOutput
      description: 4-D.  Gradients of gradients w.r.t. the input of `max_pool`.
    - id: ksize
      type: System.Int64[]
      description: The size of the window for each dimension of the input tensor.
    - id: strides
      type: System.Int64[]
      description: >-
        The stride of the sliding window for each dimension of the
                      input tensor.
    - id: padding
      type: System.String
      description: The type of padding algorithm to use.
    - id: data_format
      type: System.String
      description: >-
        Optional argument
                      Specify the data format of the input and output data. With the
                      default format "NHWC", the data is stored in the order of:
                          [batch, in_height, in_width, in_channels].
                      Alternatively, the format could be "NCHW", the data storage order of:
                          [batch, in_channels, in_height, in_width].
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MaxPoolGradGrad'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Gradients of gradients w.r.t. the input to `max_pool`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.MaxPoolGradGrad*
  exceptions: []
- uid: TensorFlow.TFGraph.MaxPoolGradGradWithArgmax(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String)
  id: MaxPoolGradGradWithArgmax(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MaxPoolGradGradWithArgmax(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
  nameWithType: TFGraph.MaxPoolGradGradWithArgmax(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
  fullName: TFGraph.MaxPoolGradGradWithArgmax(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes second-order gradients of the maxpooling function.
  syntax:
    content: public TensorFlow.TFOutput MaxPoolGradGradWithArgmax (TensorFlow.TFOutput input, TensorFlow.TFOutput grad, TensorFlow.TFOutput argmax, long[] ksize, long[] strides, string padding, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: The original input.
    - id: grad
      type: TensorFlow.TFOutput
      description: >-
        4-D with shape `[batch, height, width, channels]`.  Gradients w.r.t. the
                      input of `max_pool`.
    - id: argmax
      type: TensorFlow.TFOutput
      description: The indices of the maximum values chosen for each output of `max_pool`.
    - id: ksize
      type: System.Int64[]
      description: The size of the window for each dimension of the input tensor.
    - id: strides
      type: System.Int64[]
      description: >-
        The stride of the sliding window for each dimension of the
                      input tensor.
    - id: padding
      type: System.String
      description: The type of padding algorithm to use.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MaxPoolGradGradWithArgmax'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Gradients of gradients w.r.t. the input of `max_pool`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.MaxPoolGradGradWithArgmax*
  exceptions: []
- uid: TensorFlow.TFGraph.MaxPoolGradWithArgmax(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String)
  id: MaxPoolGradWithArgmax(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MaxPoolGradWithArgmax(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
  nameWithType: TFGraph.MaxPoolGradWithArgmax(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
  fullName: TFGraph.MaxPoolGradWithArgmax(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes gradients of the maxpooling function.
  syntax:
    content: public TensorFlow.TFOutput MaxPoolGradWithArgmax (TensorFlow.TFOutput input, TensorFlow.TFOutput grad, TensorFlow.TFOutput argmax, long[] ksize, long[] strides, string padding, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: The original input.
    - id: grad
      type: TensorFlow.TFOutput
      description: >-
        4-D with shape `[batch, height, width, channels]`.  Gradients w.r.t. the
                      output of `max_pool`.
    - id: argmax
      type: TensorFlow.TFOutput
      description: The indices of the maximum values chosen for each output of `max_pool`.
    - id: ksize
      type: System.Int64[]
      description: The size of the window for each dimension of the input tensor.
    - id: strides
      type: System.Int64[]
      description: >-
        The stride of the sliding window for each dimension of the
                      input tensor.
    - id: padding
      type: System.String
      description: The type of padding algorithm to use.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MaxPoolGradWithArgmax'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Gradients w.r.t. the input of `max_pool`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.MaxPoolGradWithArgmax*
  exceptions: []
- uid: TensorFlow.TFGraph.MaxPoolWithArgmax(TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.Nullable{TensorFlow.TFDataType},System.String)
  id: MaxPoolWithArgmax(TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MaxPoolWithArgmax(TFOutput, Int64[], Int64[], String, Nullable<TFDataType>, String)
  nameWithType: TFGraph.MaxPoolWithArgmax(TFOutput, Int64[], Int64[], String, Nullable<TFDataType>, String)
  fullName: TFGraph.MaxPoolWithArgmax(TFOutput, Int64[], Int64[], String, Nullable<TFDataType>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Performs max pooling on the input and outputs both max values and indices.
  remarks: "The indices in `argmax` are flattened, so that a maximum value at position\n              `[b, y, x, c]` becomes flattened index\n              `((b * height + y) * width + x) * channels + c`.\n              \n              The indices returned are always in `[0, height) x [0, width)` before flattening,\n              even if padding is involved and the mathematically correct answer is outside\n              (either negative or too large).  This is a bug, but fixing it is difficult to do\n              in a safe backwards compatible way, especially due to flattening."
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput> MaxPoolWithArgmax (TensorFlow.TFOutput input, long[] ksize, long[] strides, string padding, Nullable<TensorFlow.TFDataType> Targmax = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: 4-D with shape `[batch, height, width, channels]`.  Input to pool over.
    - id: ksize
      type: System.Int64[]
      description: The size of the window for each dimension of the input tensor.
    - id: strides
      type: System.Int64[]
      description: >-
        The stride of the sliding window for each dimension of the
                      input tensor.
    - id: padding
      type: System.String
      description: The type of padding algorithm to use.
    - id: Targmax
      type: System.Nullable{TensorFlow.TFDataType}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MaxPoolWithArgmax'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      output: The max pooled output tensor.
                      argmax: 4-D.  The flattened indices of the max values chosen for each output.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.MaxPoolWithArgmax*
  exceptions: []
- uid: TensorFlow.TFGraph.Mean(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: Mean(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Mean(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.Mean(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.Mean(TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the mean of elements across dimensions of a tensor.
  remarks: >-
    Reduces `input` along the dimensions given in `reduction_indices`. Unless
                  `keep_dims` is true, the rank of the tensor is reduced by 1 for each entry in
                  `reduction_indices`. If `keep_dims` is true, the reduced dimensions are
                  retained with length 1.
  syntax:
    content: public TensorFlow.TFOutput Mean (TensorFlow.TFOutput input, TensorFlow.TFOutput reduction_indices, Nullable<bool> keep_dims = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: The tensor to reduce.
    - id: reduction_indices
      type: TensorFlow.TFOutput
      description: The dimensions to reduce.
    - id: keep_dims
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true, retain reduced dimensions with length 1.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Mean'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The reduced tensor.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Mean*
  exceptions: []
- uid: TensorFlow.TFGraph.Merge(TensorFlow.TFOutput[],System.String)
  id: Merge(TensorFlow.TFOutput[],System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Merge(TFOutput[], String)
  nameWithType: TFGraph.Merge(TFOutput[], String)
  fullName: TFGraph.Merge(TFOutput[], String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Forwards the value of an available tensor from `inputs` to `output`.
  remarks: "`Merge` waits for at least one of the tensors in `inputs` to become available.\n              It is usually combined with `Switch` to implement branching.\n              \n              `Merge` forwards the first tensor to become available to `output`, and sets\n              `value_index` to its index in `inputs`."
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput> Merge (TensorFlow.TFOutput[] inputs, string operName = null);
    parameters:
    - id: inputs
      type: TensorFlow.TFOutput[]
      description: The input tensors, exactly one of which will become available.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Merge'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      output: Will be set to the available input tensor.
                      value_index: The index of the chosen input tensor in `inputs`.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.Merge*
  exceptions: []
- uid: TensorFlow.TFGraph.MergeSummary(TensorFlow.TFOutput[],System.String)
  id: MergeSummary(TensorFlow.TFOutput[],System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MergeSummary(TFOutput[], String)
  nameWithType: TFGraph.MergeSummary(TFOutput[], String)
  fullName: TFGraph.MergeSummary(TFOutput[], String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Merges summaries.
  remarks: "This op creates a\n              [`Summary`](https://www.tensorflow.org/code/tensorflow/core/framework/summary.proto)\n              protocol buffer that contains the union of all the values in the input\n              summaries.\n              \n              When the Op is run, it reports an `InvalidArgument` error if multiple values\n              in the summaries to merge use the same tag."
  syntax:
    content: public TensorFlow.TFOutput MergeSummary (TensorFlow.TFOutput[] inputs, string operName = null);
    parameters:
    - id: inputs
      type: TensorFlow.TFOutput[]
      description: >-
        Can be of any shape.  Each must contain serialized `Summary` protocol
                      buffers.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MergeSummary'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Scalar. Serialized `Summary` protocol buffer.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.MergeSummary*
  exceptions: []
- uid: TensorFlow.TFGraph.MergeV2Checkpoints(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: MergeV2Checkpoints(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MergeV2Checkpoints(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.MergeV2Checkpoints(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.MergeV2Checkpoints(TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: 'V2 format specific: merges the metadata files of sharded checkpoints.  The'
  remarks: "result is one logical checkpoint, with one physical metadata file and renamed\n              data files.\n              \n              Intended for \"grouping\" multiple checkpoints in a sharded checkpoint setup.\n              \n              If delete_old_dirs is true, attempts to delete recursively the dirname of each\n              path in the input checkpoint_prefixes.  This is useful when those paths are non\n              user-facing temporary locations."
  syntax:
    content: public TensorFlow.TFOperation MergeV2Checkpoints (TensorFlow.TFOutput checkpoint_prefixes, TensorFlow.TFOutput destination_prefix, Nullable<bool> delete_old_dirs = null, string operName = null);
    parameters:
    - id: checkpoint_prefixes
      type: TensorFlow.TFOutput
      description: prefixes of V2 checkpoints to merge.
    - id: destination_prefix
      type: TensorFlow.TFOutput
      description: >-
        scalar.  The desired final prefix.  Allowed to be the same
                      as one of the checkpoint_prefixes.
    - id: delete_old_dirs
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      see above.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MergeV2Checkpoints'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.MergeV2Checkpoints*
  exceptions: []
- uid: TensorFlow.TFGraph.Mfcc(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  id: Mfcc(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Mfcc(TFOutput, TFOutput, Nullable<Single>, Nullable<Single>, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.Mfcc(TFOutput, TFOutput, Nullable<Single>, Nullable<Single>, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.Mfcc(TFOutput, TFOutput, Nullable<Single>, Nullable<Single>, Nullable<Int64>, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Transforms a spectrogram into a form that's useful for speech recognition.
  remarks: >-
    Mel Frequency Cepstral Coefficients are a way of representing audio data that's
                  been effective as an input feature for machine learning. They are created by
                  taking the spectrum of a spectrogram (a 'cepstrum'), and discarding some of the
                  higher frequencies that are less significant to the human ear. They have a long
                  history in the speech recognition world, and https://en.wikipedia.org/wiki/Mel-frequency_cepstrum
                  is a good resource to learn more.
  syntax:
    content: public TensorFlow.TFOutput Mfcc (TensorFlow.TFOutput spectrogram, TensorFlow.TFOutput sample_rate, Nullable<float> upper_frequency_limit = null, Nullable<float> lower_frequency_limit = null, Nullable<long> filterbank_channel_count = null, Nullable<long> dct_coefficient_count = null, string operName = null);
    parameters:
    - id: spectrogram
      type: TensorFlow.TFOutput
      description: >-
        Typically produced by the Spectrogram op, with magnitude_squared
                      set to true.
    - id: sample_rate
      type: TensorFlow.TFOutput
      description: How many samples per second the source audio used.
    - id: upper_frequency_limit
      type: System.Nullable{System.Single}
      description: >-
        Optional argument
                      The highest frequency to use when calculating the
                      ceptstrum.
    - id: lower_frequency_limit
      type: System.Nullable{System.Single}
      description: >-
        Optional argument
                      The lowest frequency to use when calculating the
                      ceptstrum.
    - id: filterbank_channel_count
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      Resolution of the Mel bank used internally.
    - id: dct_coefficient_count
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      How many output channels to produce per time slice.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Mfcc'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Mfcc*
  exceptions: []
- uid: TensorFlow.TFGraph.Min(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: Min(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Min(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.Min(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.Min(TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the minimum of elements across dimensions of a tensor.
  remarks: >-
    Reduces `input` along the dimensions given in `reduction_indices`. Unless
                  `keep_dims` is true, the rank of the tensor is reduced by 1 for each entry in
                  `reduction_indices`. If `keep_dims` is true, the reduced dimensions are
                  retained with length 1.
  syntax:
    content: public TensorFlow.TFOutput Min (TensorFlow.TFOutput input, TensorFlow.TFOutput reduction_indices, Nullable<bool> keep_dims = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: The tensor to reduce.
    - id: reduction_indices
      type: TensorFlow.TFOutput
      description: The dimensions to reduce.
    - id: keep_dims
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true, retain reduced dimensions with length 1.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Min'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The reduced tensor.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Min*
  exceptions: []
- uid: TensorFlow.TFGraph.Minimum(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: Minimum(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Minimum(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Minimum(TFOutput, TFOutput, String)
  fullName: TFGraph.Minimum(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: 'Returns the min of x and y (i.e. x &lt; y ? x : y) element-wise.'
  remarks: >-
    *NOTE*: `Minimum` supports broadcasting. More about broadcasting
                  [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
  syntax:
    content: public TensorFlow.TFOutput Minimum (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Minimum'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Minimum*
  exceptions: []
- uid: TensorFlow.TFGraph.MirrorPad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String)
  id: MirrorPad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MirrorPad(TFOutput, TFOutput, String, String)
  nameWithType: TFGraph.MirrorPad(TFOutput, TFOutput, String, String)
  fullName: TFGraph.MirrorPad(TFOutput, TFOutput, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Pads a tensor with mirrored values.
  remarks: "This operation pads a `input` with mirrored values according to the `paddings`\n              you specify. `paddings` is an integer tensor with shape `[n, 2]`, where n is\n              the rank of `input`. For each dimension D of `input`, `paddings[D, 0]` indicates\n              how many values to add before the contents of `input` in that dimension, and\n              `paddings[D, 1]` indicates how many values to add after the contents of `input`\n              in that dimension. Both `paddings[D, 0]` and `paddings[D, 1]` must be no greater\n              than `input.dim_size(D)` (or `input.dim_size(D) - 1`) if `copy_border` is true\n              (if false, respectively).\n              \n              The padded size of each dimension D of the output is:\n              \n              `paddings(D, 0) + input.dim_size(D) + paddings(D, 1)`\n              \n              For example:\n              \n              ```\n              # 't' is [[1, 2, 3], [4, 5, 6]].\n              # 'paddings' is [[1, 1]], [2, 2]].\n              # 'mode' is SYMMETRIC.\n              # rank of 't' is 2.\n              pad(t, paddings) ==&gt; [[2, 1, 1, 2, 3, 3, 2]\n                                    [2, 1, 1, 2, 3, 3, 2]\n                                    [5, 4, 4, 5, 6, 6, 5]\n                                    [5, 4, 4, 5, 6, 6, 5]]\n              ```"
  syntax:
    content: public TensorFlow.TFOutput MirrorPad (TensorFlow.TFOutput input, TensorFlow.TFOutput paddings, string mode, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: The input tensor to be padded.
    - id: paddings
      type: TensorFlow.TFOutput
      description: >-
        A two-column matrix specifying the padding sizes. The number of
                      rows must be the same as the rank of `input`.
    - id: mode
      type: System.String
      description: >-
        Either `REFLECT` or `SYMMETRIC`. In reflect mode the padded regions
                      do not include the borders, while in symmetric mode the padded regions
                      do include the borders. For example, if `input` is `[1, 2, 3]` and `paddings`
                      is `[0, 2]`, then the output is `[1, 2, 3, 2, 1]` in reflect mode, and
                      it is `[1, 2, 3, 3, 2]` in symmetric mode.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MirrorPad'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The padded tensor.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.MirrorPad*
  exceptions: []
- uid: TensorFlow.TFGraph.MirrorPadGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String)
  id: MirrorPadGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MirrorPadGrad(TFOutput, TFOutput, String, String)
  nameWithType: TFGraph.MirrorPadGrad(TFOutput, TFOutput, String, String)
  fullName: TFGraph.MirrorPadGrad(TFOutput, TFOutput, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Gradient op for `MirrorPad` op. This op folds a mirror-padded tensor.
  remarks: "This operation folds the padded areas of `input` by `MirrorPad` according to the\n              `paddings` you specify. `paddings` must be the same as `paddings` argument\n              given to the corresponding `MirrorPad` op.\n              \n              The folded size of each dimension D of the output is:\n              \n              `input.dim_size(D) - paddings(D, 0) - paddings(D, 1)`\n              \n              For example:\n              \n              ```\n              # 't' is [[1, 2, 3], [4, 5, 6], [7, 8, 9]].\n              # 'paddings' is [[0, 1]], [0, 1]].\n              # 'mode' is SYMMETRIC.\n              # rank of 't' is 2.\n              pad(t, paddings) ==&gt; [[ 1,  5]\n                                    [11, 28]]\n              ```"
  syntax:
    content: public TensorFlow.TFOutput MirrorPadGrad (TensorFlow.TFOutput input, TensorFlow.TFOutput paddings, string mode, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: The input tensor to be folded.
    - id: paddings
      type: TensorFlow.TFOutput
      description: >-
        A two-column matrix specifying the padding sizes. The number of
                      rows must be the same as the rank of `input`.
    - id: mode
      type: System.String
      description: The mode used in the `MirrorPad` op.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MirrorPadGrad'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The folded tensor.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.MirrorPadGrad*
  exceptions: []
- uid: TensorFlow.TFGraph.Mod(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: Mod(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Mod(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Mod(TFOutput, TFOutput, String)
  fullName: TFGraph.Mod(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns element-wise remainder of division. This emulates C semantics in that
  remarks: "the result here is consistent with a truncating divide. E.g. `truncate(x / y) *\n              y + truncate_mod(x, y) = x`.\n              \n              *NOTE*: `Mod` supports broadcasting. More about broadcasting\n              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)"
  syntax:
    content: public TensorFlow.TFOutput Mod (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Mod'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Mod*
  exceptions: []
- uid: TensorFlow.TFGraph.Mul(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: Mul(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Mul(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Mul(TFOutput, TFOutput, String)
  fullName: TFGraph.Mul(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns x * y element-wise.
  remarks: >-
    *NOTE*: `Mul` supports broadcasting. More about broadcasting
                  [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
  syntax:
    content: public TensorFlow.TFOutput Mul (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Mul'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Mul*
  exceptions: []
- uid: TensorFlow.TFGraph.Multinomial(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  id: Multinomial(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Multinomial(TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.Multinomial(TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.Multinomial(TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Draws samples from a multinomial distribution.
  syntax:
    content: public TensorFlow.TFOutput Multinomial (TensorFlow.TFOutput logits, TensorFlow.TFOutput num_samples, Nullable<long> seed = null, Nullable<long> seed2 = null, string operName = null);
    parameters:
    - id: logits
      type: TensorFlow.TFOutput
      description: >-
        2-D Tensor with shape `[batch_size, num_classes]`.  Each slice `[i, :]`
                      represents the unnormalized log probabilities for all classes.
    - id: num_samples
      type: TensorFlow.TFOutput
      description: 0-D.  Number of independent samples to draw for each row slice.
    - id: seed
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      If either seed or seed2 is set to be non-zero, the internal random number
                      generator is seeded by the given seed.  Otherwise, a random seed is used.
    - id: seed2
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      A second seed to avoid seed collision.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Multinomial'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        2-D Tensor with shape `[batch_size, num_samples]`.  Each slice `[i, :]`
                      contains the drawn class labels with range `[0, num_classes)`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Multinomial*
  exceptions: []
- uid: TensorFlow.TFGraph.MutableDenseHashTableV2(TensorFlow.TFOutput,TensorFlow.TFDataType,System.String,System.String,System.Nullable{System.Boolean},TensorFlow.TFShape,System.Nullable{System.Int64},System.Nullable{System.Single},System.String)
  id: MutableDenseHashTableV2(TensorFlow.TFOutput,TensorFlow.TFDataType,System.String,System.String,System.Nullable{System.Boolean},TensorFlow.TFShape,System.Nullable{System.Int64},System.Nullable{System.Single},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MutableDenseHashTableV2(TFOutput, TFDataType, String, String, Nullable<Boolean>, TFShape, Nullable<Int64>, Nullable<Single>, String)
  nameWithType: TFGraph.MutableDenseHashTableV2(TFOutput, TFDataType, String, String, Nullable<Boolean>, TFShape, Nullable<Int64>, Nullable<Single>, String)
  fullName: TFGraph.MutableDenseHashTableV2(TFOutput, TFDataType, String, String, Nullable<Boolean>, TFShape, Nullable<Int64>, Nullable<Single>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Creates an empty hash table that uses tensors as the backing store.
  remarks: "It uses \"open addressing\" with quadratic reprobing to resolve\n              collisions.\n              \n              This op creates a mutable hash table, specifying the type of its keys and\n              values. Each value must be a scalar. Data can be inserted into the table using\n              the insert operations. It does not support the initialization operation."
  syntax:
    content: public TensorFlow.TFOutput MutableDenseHashTableV2 (TensorFlow.TFOutput empty_key, TensorFlow.TFDataType value_dtype, string container = null, string shared_name = null, Nullable<bool> use_node_name_sharing = null, TensorFlow.TFShape value_shape = null, Nullable<long> initial_num_buckets = null, Nullable<float> max_load_factor = null, string operName = null);
    parameters:
    - id: empty_key
      type: TensorFlow.TFOutput
      description: >-
        The key used to represent empty key buckets internally. Must not
                      be used in insert or lookup operations.
    - id: value_dtype
      type: TensorFlow.TFDataType
      description: Type of the table values.
    - id: container
      type: System.String
      description: >-
        Optional argument
                      If non-empty, this table is placed in the given container.
                      Otherwise, a default container is used.
    - id: shared_name
      type: System.String
      description: >-
        Optional argument
                      If non-empty, this table is shared under the given name across
                      multiple sessions.
    - id: use_node_name_sharing
      type: System.Nullable{System.Boolean}
      description: Optional argument
    - id: value_shape
      type: TensorFlow.TFShape
      description: >-
        Optional argument
                      The shape of each value.
    - id: initial_num_buckets
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      The initial number of hash table buckets. Must be a power
                      to 2.
    - id: max_load_factor
      type: System.Nullable{System.Single}
      description: >-
        Optional argument
                      The maximum ratio between number of entries and number of
                      buckets before growing the table. Must be between 0 and 1.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MutableDenseHashTableV2'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Handle to a table.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.MutableDenseHashTableV2*
  exceptions: []
- uid: TensorFlow.TFGraph.MutableHashTableOfTensorsV2(TensorFlow.TFDataType,TensorFlow.TFDataType,System.String,System.String,System.Nullable{System.Boolean},TensorFlow.TFShape,System.String)
  id: MutableHashTableOfTensorsV2(TensorFlow.TFDataType,TensorFlow.TFDataType,System.String,System.String,System.Nullable{System.Boolean},TensorFlow.TFShape,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MutableHashTableOfTensorsV2(TFDataType, TFDataType, String, String, Nullable<Boolean>, TFShape, String)
  nameWithType: TFGraph.MutableHashTableOfTensorsV2(TFDataType, TFDataType, String, String, Nullable<Boolean>, TFShape, String)
  fullName: TFGraph.MutableHashTableOfTensorsV2(TFDataType, TFDataType, String, String, Nullable<Boolean>, TFShape, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Creates an empty hash table.
  remarks: >-
    This op creates a mutable hash table, specifying the type of its keys and
                  values. Each value must be a vector. Data can be inserted into the table using
                  the insert operations. It does not support the initialization operation.
  syntax:
    content: public TensorFlow.TFOutput MutableHashTableOfTensorsV2 (TensorFlow.TFDataType key_dtype, TensorFlow.TFDataType value_dtype, string container = null, string shared_name = null, Nullable<bool> use_node_name_sharing = null, TensorFlow.TFShape value_shape = null, string operName = null);
    parameters:
    - id: key_dtype
      type: TensorFlow.TFDataType
      description: Type of the table keys.
    - id: value_dtype
      type: TensorFlow.TFDataType
      description: Type of the table values.
    - id: container
      type: System.String
      description: >-
        Optional argument
                      If non-empty, this table is placed in the given container.
                      Otherwise, a default container is used.
    - id: shared_name
      type: System.String
      description: >-
        Optional argument
                      If non-empty, this table is shared under the given name across
                      multiple sessions.
    - id: use_node_name_sharing
      type: System.Nullable{System.Boolean}
      description: Optional argument
    - id: value_shape
      type: TensorFlow.TFShape
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MutableHashTableOfTensorsV2'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Handle to a table.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.MutableHashTableOfTensorsV2*
  exceptions: []
- uid: TensorFlow.TFGraph.MutableHashTableV2(TensorFlow.TFDataType,TensorFlow.TFDataType,System.String,System.String,System.Nullable{System.Boolean},System.String)
  id: MutableHashTableV2(TensorFlow.TFDataType,TensorFlow.TFDataType,System.String,System.String,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: MutableHashTableV2(TFDataType, TFDataType, String, String, Nullable<Boolean>, String)
  nameWithType: TFGraph.MutableHashTableV2(TFDataType, TFDataType, String, String, Nullable<Boolean>, String)
  fullName: TFGraph.MutableHashTableV2(TFDataType, TFDataType, String, String, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Creates an empty hash table.
  remarks: >-
    This op creates a mutable hash table, specifying the type of its keys and
                  values. Each value must be a scalar. Data can be inserted into the table using
                  the insert operations. It does not support the initialization operation.
  syntax:
    content: public TensorFlow.TFOutput MutableHashTableV2 (TensorFlow.TFDataType key_dtype, TensorFlow.TFDataType value_dtype, string container = null, string shared_name = null, Nullable<bool> use_node_name_sharing = null, string operName = null);
    parameters:
    - id: key_dtype
      type: TensorFlow.TFDataType
      description: Type of the table keys.
    - id: value_dtype
      type: TensorFlow.TFDataType
      description: Type of the table values.
    - id: container
      type: System.String
      description: >-
        Optional argument
                      If non-empty, this table is placed in the given container.
                      Otherwise, a default container is used.
    - id: shared_name
      type: System.String
      description: >-
        Optional argument
                      If non-empty, this table is shared under the given name across
                      multiple sessions.
    - id: use_node_name_sharing
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true and shared_name is empty, the table is shared
                      using the node name.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'MutableHashTableV2'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Handle to a table.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.MutableHashTableV2*
  exceptions: []
- uid: TensorFlow.TFGraph.Neg(TensorFlow.TFOutput,System.String)
  id: Neg(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Neg(TFOutput, String)
  nameWithType: TFGraph.Neg(TFOutput, String)
  fullName: TFGraph.Neg(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes numerical negative value element-wise.
  remarks: I.e., \\(y = -x\\).
  syntax:
    content: public TensorFlow.TFOutput Neg (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Neg'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Neg*
  exceptions: []
- uid: TensorFlow.TFGraph.NextIteration(TensorFlow.TFOutput,System.String)
  id: NextIteration(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: NextIteration(TFOutput, String)
  nameWithType: TFGraph.NextIteration(TFOutput, String)
  fullName: TFGraph.NextIteration(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Makes its input available to the next iteration.
  syntax:
    content: public TensorFlow.TFOutput NextIteration (TensorFlow.TFOutput data, string operName = null);
    parameters:
    - id: data
      type: TensorFlow.TFOutput
      description: The tensor to be made available to the next iteration.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'NextIteration'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The same tensor as `data`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.NextIteration*
  exceptions: []
- uid: TensorFlow.TFGraph.NonMaxSuppression(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Single},System.String)
  id: NonMaxSuppression(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Single},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: NonMaxSuppression(TFOutput, TFOutput, TFOutput, Nullable<Single>, String)
  nameWithType: TFGraph.NonMaxSuppression(TFOutput, TFOutput, TFOutput, Nullable<Single>, String)
  fullName: TFGraph.NonMaxSuppression(TFOutput, TFOutput, TFOutput, Nullable<Single>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Greedily selects a subset of bounding boxes in descending order of score,
  remarks: >-
    pruning away boxes that have high intersection-over-union (IOU) overlap
                  with previously selected boxes.  Bounding boxes are supplied as
                  [y1, x1, y2, x2], where (y1, x1) and (y2, x2) are the coordinates of any
                  diagonal pair of box corners and the coordinates can be provided as normalized
                  (i.e., lying in the interval [0, 1]) or absolute.  Note that this algorithm
                  is agnostic to where the origin is in the coordinate system.  Note that this
                  algorithm is invariant to orthogonal transformations and translations
                  of the coordinate system; thus translating or reflections of the coordinate
                  system result in the same boxes being selected by the algorithm.
                  The output of this operation is a set of integers indexing into the input
                  collection of bounding boxes representing the selected boxes.  The bounding
                  box coordinates corresponding to the selected indices can then be obtained
                  using the `tf.gather operation`.  For example:
                    selected_indices = tf.image.non_max_suppression(
                        boxes, scores, max_output_size, iou_threshold)
                    selected_boxes = tf.gather(boxes, selected_indices)
  syntax:
    content: public TensorFlow.TFOutput NonMaxSuppression (TensorFlow.TFOutput boxes, TensorFlow.TFOutput scores, TensorFlow.TFOutput max_output_size, Nullable<float> iou_threshold = null, string operName = null);
    parameters:
    - id: boxes
      type: TensorFlow.TFOutput
      description: A 2-D float tensor of shape `[num_boxes, 4]`.
    - id: scores
      type: TensorFlow.TFOutput
      description: >-
        A 1-D float tensor of shape `[num_boxes]` representing a single
                      score corresponding to each box (each row of boxes).
    - id: max_output_size
      type: TensorFlow.TFOutput
      description: >-
        A scalar integer tensor representing the maximum number of
                      boxes to be selected by non max suppression.
    - id: iou_threshold
      type: System.Nullable{System.Single}
      description: >-
        Optional argument
                      A float representing the threshold for deciding whether boxes
                      overlap too much with respect to IOU.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'NonMaxSuppression'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        A 1-D integer tensor of shape `[M]` representing the selected
                      indices from the boxes tensor, where `M &lt;= max_output_size`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.NonMaxSuppression*
  exceptions: []
- uid: TensorFlow.TFGraph.NonMaxSuppressionV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: NonMaxSuppressionV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: NonMaxSuppressionV2(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.NonMaxSuppressionV2(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.NonMaxSuppressionV2(TFOutput, TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Greedily selects a subset of bounding boxes in descending order of score,
  remarks: "pruning away boxes that have high intersection-over-union (IOU) overlap\n              with previously selected boxes.  Bounding boxes are supplied as\n              [y1, x1, y2, x2], where (y1, x1) and (y2, x2) are the coordinates of any\n              diagonal pair of box corners and the coordinates can be provided as normalized\n              (i.e., lying in the interval [0, 1]) or absolute.  Note that this algorithm\n              is agnostic to where the origin is in the coordinate system.  Note that this\n              algorithm is invariant to orthogonal transformations and translations\n              of the coordinate system; thus translating or reflections of the coordinate\n              system result in the same boxes being selected by the algorithm.\n              \n              The output of this operation is a set of integers indexing into the input\n              collection of bounding boxes representing the selected boxes.  The bounding\n              box coordinates corresponding to the selected indices can then be obtained\n              using the `tf.gather operation`.  For example:\n              \n                selected_indices = tf.image.non_max_suppression_v2(\n                    boxes, scores, max_output_size, iou_threshold)\n                selected_boxes = tf.gather(boxes, selected_indices)"
  syntax:
    content: public TensorFlow.TFOutput NonMaxSuppressionV2 (TensorFlow.TFOutput boxes, TensorFlow.TFOutput scores, TensorFlow.TFOutput max_output_size, TensorFlow.TFOutput iou_threshold, string operName = null);
    parameters:
    - id: boxes
      type: TensorFlow.TFOutput
      description: A 2-D float tensor of shape `[num_boxes, 4]`.
    - id: scores
      type: TensorFlow.TFOutput
      description: >-
        A 1-D float tensor of shape `[num_boxes]` representing a single
                      score corresponding to each box (each row of boxes).
    - id: max_output_size
      type: TensorFlow.TFOutput
      description: >-
        A scalar integer tensor representing the maximum number of
                      boxes to be selected by non max suppression.
    - id: iou_threshold
      type: TensorFlow.TFOutput
      description: >-
        A 0-D float tensor representing the threshold for deciding whether
                      boxes overlap too much with respect to IOU.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'NonMaxSuppressionV2'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        A 1-D integer tensor of shape `[M]` representing the selected
                      indices from the boxes tensor, where `M &lt;= max_output_size`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.NonMaxSuppressionV2*
  exceptions: []
- uid: TensorFlow.TFGraph.NoOp(System.String)
  id: NoOp(System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: NoOp(String)
  nameWithType: TFGraph.NoOp(String)
  fullName: TFGraph.NoOp(String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Does nothing. Only useful as a placeholder for control edges.
  syntax:
    content: public TensorFlow.TFOperation NoOp (string operName = null);
    parameters:
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'NoOp'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.NoOp*
  exceptions: []
- uid: TensorFlow.TFGraph.NotEqual(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: NotEqual(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: NotEqual(TFOutput, TFOutput, String)
  nameWithType: TFGraph.NotEqual(TFOutput, TFOutput, String)
  fullName: TFGraph.NotEqual(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns the truth value of (x != y) element-wise.
  remarks: >-
    *NOTE*: `NotEqual` supports broadcasting. More about broadcasting
                  [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
  syntax:
    content: public TensorFlow.TFOutput NotEqual (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'NotEqual'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.NotEqual*
  exceptions: []
- uid: TensorFlow.TFGraph.OneHot(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.String)
  id: OneHot(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: OneHot(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
  nameWithType: TFGraph.OneHot(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
  fullName: TFGraph.OneHot(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns a one-hot tensor.
  remarks: "The locations represented by indices in `indices` take value `on_value`,\n              while all other locations take value `off_value`.\n              \n              If the input `indices` is rank `N`, the output will have rank `N+1`,\n              The new axis is created at dimension `axis` (default: the new axis is\n              appended at the end).\n              \n              If `indices` is a scalar the output shape will be a vector of length `depth`.\n              \n              If `indices` is a vector of length `features`, the output shape will be:\n              ```\n                features x depth if axis == -1\n                depth x features if axis == 0\n              ```\n              \n              If `indices` is a matrix (batch) with shape `[batch, features]`,\n              the output shape will be:\n              ```\n                batch x features x depth if axis == -1\n                batch x depth x features if axis == 1\n                depth x batch x features if axis == 0\n              ```\n              \n              \n              Examples\n              =========\n              \n              Suppose that\n              \n              ```\n                indices = [0, 2, -1, 1]\n                depth = 3\n                on_value = 5.0\n                off_value = 0.0\n                axis = -1\n              ```\n              \n              Then output is `[4 x 3]`:\n              \n                  ```output =\n                    [5.0 0.0 0.0]  // one_hot(0)\n                    [0.0 0.0 5.0]  // one_hot(2)\n                    [0.0 0.0 0.0]  // one_hot(-1)\n                    [0.0 5.0 0.0]  // one_hot(1)\n                  ```\n              \n              Suppose that\n              \n              ```\n                indices = [0, 2, -1, 1]\n                depth = 3\n                on_value = 0.0\n                off_value = 3.0\n                axis = 0\n              ```\n              \n              Then output is `[3 x 4]`:\n              \n                  ```output =\n                    [0.0 3.0 3.0 3.0]\n                    [3.0 3.0 3.0 0.0]\n                    [3.0 3.0 3.0 3.0]\n                    [3.0 0.0 3.0 3.0]\n                  //  ^                one_hot(0)\n                  //      ^            one_hot(2)\n                  //          ^        one_hot(-1)\n                  //              ^    one_hot(1)\n                  ```\n              Suppose that\n              \n              ```\n                indices = [[0, 2], [1, -1]]\n                depth = 3\n                on_value = 1.0\n                off_value = 0.0\n                axis = -1\n              ```\n              \n              Then output is `[2 x 2 x 3]`:\n              \n                  ```output =\n                    [\n                      [1.0, 0.0, 0.0]  // one_hot(0)\n                      [0.0, 0.0, 1.0]  // one_hot(2)\n                    ][\n                      [0.0, 1.0, 0.0]  // one_hot(1)\n                      [0.0, 0.0, 0.0]  // one_hot(-1)\n                    ]```"
  syntax:
    content: public TensorFlow.TFOutput OneHot (TensorFlow.TFOutput indices, TensorFlow.TFOutput depth, TensorFlow.TFOutput on_value, TensorFlow.TFOutput off_value, Nullable<long> axis = null, string operName = null);
    parameters:
    - id: indices
      type: TensorFlow.TFOutput
      description: A tensor of indices.
    - id: depth
      type: TensorFlow.TFOutput
      description: A scalar defining the depth of the one hot dimension.
    - id: on_value
      type: TensorFlow.TFOutput
      description: A scalar defining the value to fill in output when `indices[j] = i`.
    - id: off_value
      type: TensorFlow.TFOutput
      description: A scalar defining the value to fill in output when `indices[j] != i`.
    - id: axis
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      The axis to fill (default: -1, a new inner-most axis).
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'OneHot'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The one-hot tensor.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.OneHot*
  exceptions: []
- uid: TensorFlow.TFGraph.OnesLike(TensorFlow.TFOutput,System.String)
  id: OnesLike(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: OnesLike(TFOutput, String)
  nameWithType: TFGraph.OnesLike(TFOutput, String)
  fullName: TFGraph.OnesLike(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns a tensor of ones with the same shape and type as x.
  syntax:
    content: public TensorFlow.TFOutput OnesLike (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: a tensor of type T.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'OnesLike'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        a tensor of the same shape and type as x but filled with ones.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.OnesLike*
  exceptions: []
- uid: TensorFlow.TFGraph.OrderedMapClear(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  id: OrderedMapClear(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: OrderedMapClear(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.OrderedMapClear(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.OrderedMapClear(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Op removes all elements in the underlying container.
  syntax:
    content: public TensorFlow.TFOperation OrderedMapClear (TensorFlow.TFDataType[] dtypes, Nullable<long> capacity = null, Nullable<long> memory_limit = null, string container = null, string shared_name = null, string operName = null);
    parameters:
    - id: dtypes
      type: TensorFlow.TFDataType[]
      description: To be added.
    - id: capacity
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: memory_limit
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: container
      type: System.String
      description: Optional argument
    - id: shared_name
      type: System.String
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'OrderedMapClear'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.OrderedMapClear*
  exceptions: []
- uid: TensorFlow.TFGraph.OrderedMapIncompleteSize(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  id: OrderedMapIncompleteSize(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: OrderedMapIncompleteSize(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.OrderedMapIncompleteSize(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.OrderedMapIncompleteSize(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Op returns the number of incomplete elements in the underlying container.
  syntax:
    content: public TensorFlow.TFOutput OrderedMapIncompleteSize (TensorFlow.TFDataType[] dtypes, Nullable<long> capacity = null, Nullable<long> memory_limit = null, string container = null, string shared_name = null, string operName = null);
    parameters:
    - id: dtypes
      type: TensorFlow.TFDataType[]
      description: To be added.
    - id: capacity
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: memory_limit
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: container
      type: System.String
      description: Optional argument
    - id: shared_name
      type: System.String
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'OrderedMapIncompleteSize'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.OrderedMapIncompleteSize*
  exceptions: []
- uid: TensorFlow.TFGraph.OrderedMapPeek(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  id: OrderedMapPeek(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: OrderedMapPeek(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.OrderedMapPeek(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.OrderedMapPeek(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Op peeks at the values at the specified key.  If the
  remarks: >-
    underlying container does not contain this key
                  this op will block until it does.   This Op is optimized for
                  performance.
  syntax:
    content: public TensorFlow.TFOutput[] OrderedMapPeek (TensorFlow.TFOutput key, TensorFlow.TFOutput indices, TensorFlow.TFDataType[] dtypes, Nullable<long> capacity = null, Nullable<long> memory_limit = null, string container = null, string shared_name = null, string operName = null);
    parameters:
    - id: key
      type: TensorFlow.TFOutput
      description: To be added.
    - id: indices
      type: TensorFlow.TFOutput
      description: To be added.
    - id: dtypes
      type: TensorFlow.TFDataType[]
      description: To be added.
    - id: capacity
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: memory_limit
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: container
      type: System.String
      description: Optional argument
    - id: shared_name
      type: System.String
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'OrderedMapPeek'.
    return:
      type: TensorFlow.TFOutput[]
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.OrderedMapPeek*
  exceptions: []
- uid: TensorFlow.TFGraph.OrderedMapSize(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  id: OrderedMapSize(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: OrderedMapSize(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.OrderedMapSize(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.OrderedMapSize(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Op returns the number of elements in the underlying container.
  syntax:
    content: public TensorFlow.TFOutput OrderedMapSize (TensorFlow.TFDataType[] dtypes, Nullable<long> capacity = null, Nullable<long> memory_limit = null, string container = null, string shared_name = null, string operName = null);
    parameters:
    - id: dtypes
      type: TensorFlow.TFDataType[]
      description: To be added.
    - id: capacity
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: memory_limit
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: container
      type: System.String
      description: Optional argument
    - id: shared_name
      type: System.String
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'OrderedMapSize'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.OrderedMapSize*
  exceptions: []
- uid: TensorFlow.TFGraph.OrderedMapStage(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  id: OrderedMapStage(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: OrderedMapStage(TFOutput, TFOutput, TFOutput[], TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.OrderedMapStage(TFOutput, TFOutput, TFOutput[], TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.OrderedMapStage(TFOutput, TFOutput, TFOutput[], TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Stage (key, values) in the underlying container which behaves like a ordered
  remarks: associative container.   Elements are ordered by key.
  syntax:
    content: public TensorFlow.TFOperation OrderedMapStage (TensorFlow.TFOutput key, TensorFlow.TFOutput indices, TensorFlow.TFOutput[] values, TensorFlow.TFDataType[] dtypes, Nullable<long> capacity = null, Nullable<long> memory_limit = null, string container = null, string shared_name = null, string operName = null);
    parameters:
    - id: key
      type: TensorFlow.TFOutput
      description: int64
    - id: indices
      type: TensorFlow.TFOutput
      description: To be added.
    - id: values
      type: TensorFlow.TFOutput[]
      description: >-
        a list of tensors
                      dtypes A list of data types that inserted values should adhere to.
    - id: dtypes
      type: TensorFlow.TFDataType[]
      description: To be added.
    - id: capacity
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      Maximum number of elements in the Staging Area. If &gt; 0, inserts
                      on the container will block when the capacity is reached.
    - id: memory_limit
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: container
      type: System.String
      description: >-
        Optional argument
                      If non-empty, this queue is placed in the given container. Otherwise,
                      a default container is used.
    - id: shared_name
      type: System.String
      description: >-
        Optional argument
                      It is necessary to match this name to the matching Unstage Op.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'OrderedMapStage'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.OrderedMapStage*
  exceptions: []
- uid: TensorFlow.TFGraph.OrderedMapUnstage(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  id: OrderedMapUnstage(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: OrderedMapUnstage(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.OrderedMapUnstage(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.OrderedMapUnstage(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Op removes and returns the values associated with the key
  remarks: >-
    from the underlying container.   If the underlying container
                  does not contain this key, the op will block until it does.
  syntax:
    content: public TensorFlow.TFOutput[] OrderedMapUnstage (TensorFlow.TFOutput key, TensorFlow.TFOutput indices, TensorFlow.TFDataType[] dtypes, Nullable<long> capacity = null, Nullable<long> memory_limit = null, string container = null, string shared_name = null, string operName = null);
    parameters:
    - id: key
      type: TensorFlow.TFOutput
      description: To be added.
    - id: indices
      type: TensorFlow.TFOutput
      description: To be added.
    - id: dtypes
      type: TensorFlow.TFDataType[]
      description: To be added.
    - id: capacity
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: memory_limit
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: container
      type: System.String
      description: Optional argument
    - id: shared_name
      type: System.String
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'OrderedMapUnstage'.
    return:
      type: TensorFlow.TFOutput[]
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.OrderedMapUnstage*
  exceptions: []
- uid: TensorFlow.TFGraph.OrderedMapUnstageNoKey(TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  id: OrderedMapUnstageNoKey(TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: OrderedMapUnstageNoKey(TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.OrderedMapUnstageNoKey(TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.OrderedMapUnstageNoKey(TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Op removes and returns the (key, value) element with the smallest
  remarks: >-
    key from the underlying container.   If the underlying container
                  does not contain elements, the op will block until it does.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput[]> OrderedMapUnstageNoKey (TensorFlow.TFOutput indices, TensorFlow.TFDataType[] dtypes, Nullable<long> capacity = null, Nullable<long> memory_limit = null, string container = null, string shared_name = null, string operName = null);
    parameters:
    - id: indices
      type: TensorFlow.TFOutput
      description: To be added.
    - id: dtypes
      type: TensorFlow.TFDataType[]
      description: To be added.
    - id: capacity
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: memory_limit
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: container
      type: System.String
      description: Optional argument
    - id: shared_name
      type: System.String
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'OrderedMapUnstageNoKey'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput[]}
      description: "Returns a tuple with multiple values, as follows:\n              key: \n              values: \n              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property."
  overload: TensorFlow.TFGraph.OrderedMapUnstageNoKey*
  exceptions: []
- uid: TensorFlow.TFGraph.Pack(TensorFlow.TFOutput[],System.Nullable{System.Int64},System.String)
  id: Pack(TensorFlow.TFOutput[],System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Pack(TFOutput[], Nullable<Int64>, String)
  nameWithType: TFGraph.Pack(TFOutput[], Nullable<Int64>, String)
  fullName: TFGraph.Pack(TFOutput[], Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Packs a list of `N` rank-`R` tensors into one rank-`(R+1)` tensor.
  remarks: "Packs the `N` tensors in `values` into a tensor with rank one higher than each\n              tensor in `values`, by packing them along the `axis` dimension.\n              Given a list of tensors of shape `(A, B, C)`;\n              \n              if `axis == 0` then the `output` tensor will have the shape `(N, A, B, C)`.\n              if `axis == 1` then the `output` tensor will have the shape `(A, N, B, C)`.\n              Etc.\n              \n              For example:\n              \n              ```\n              # 'x' is [1, 4]\n              # 'y' is [2, 5]\n              # 'z' is [3, 6]\n              pack([x, y, z]) =&gt; [[1, 4], [2, 5], [3, 6]]  # Pack along first dim.\n              pack([x, y, z], axis=1) =&gt; [[1, 2, 3], [4, 5, 6]]\n              ```\n              \n              This is the opposite of `unpack`."
  syntax:
    content: public TensorFlow.TFOutput Pack (TensorFlow.TFOutput[] values, Nullable<long> axis = null, string operName = null);
    parameters:
    - id: values
      type: TensorFlow.TFOutput[]
      description: Must be of same shape and type.
    - id: axis
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      Dimension along which to pack.  Negative values wrap around, so the
                      valid range is `[-(R+1), R+1)`.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Pack'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The packed tensor.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Pack*
  exceptions: []
- uid: TensorFlow.TFGraph.Pad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: Pad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Pad(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Pad(TFOutput, TFOutput, String)
  fullName: TFGraph.Pad(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Pads a tensor with zeros.
  remarks: "This operation pads a `input` with zeros according to the `paddings` you\n              specify. `paddings` is an integer tensor with shape `[Dn, 2]`, where n is the\n              rank of `input`. For each dimension D of `input`, `paddings[D, 0]` indicates\n              how many zeros to add before the contents of `input` in that dimension, and\n              `paddings[D, 1]` indicates how many zeros to add after the contents of `input`\n              in that dimension.\n              \n              The padded size of each dimension D of the output is:\n              \n              `paddings(D, 0) + input.dim_size(D) + paddings(D, 1)`\n              \n              For example:\n              \n              ```\n              # 't' is [[1, 1], [2, 2]]\n              # 'paddings' is [[1, 1], [2, 2]]\n              # rank of 't' is 2\n              pad(t, paddings) ==&gt; [[0, 0, 0, 0, 0, 0]\n                                    [0, 0, 1, 1, 0, 0]\n                                    [0, 0, 2, 2, 0, 0]\n                                    [0, 0, 0, 0, 0, 0]]\n              ```"
  syntax:
    content: public TensorFlow.TFOutput Pad (TensorFlow.TFOutput input, TensorFlow.TFOutput paddings, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: To be added.
    - id: paddings
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Pad'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Pad*
  exceptions: []
- uid: TensorFlow.TFGraph.PaddedBatchDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFShape[],System.String)
  id: PaddedBatchDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFShape[],System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: PaddedBatchDataset(TFOutput, TFOutput, TFOutput[], TFOutput[], TFShape[], String)
  nameWithType: TFGraph.PaddedBatchDataset(TFOutput, TFOutput, TFOutput[], TFOutput[], TFShape[], String)
  fullName: TFGraph.PaddedBatchDataset(TFOutput, TFOutput, TFOutput[], TFOutput[], TFShape[], String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Creates a dataset that batches and pads `batch_size` elements from the input.
  syntax:
    content: public TensorFlow.TFOutput PaddedBatchDataset (TensorFlow.TFOutput input_dataset, TensorFlow.TFOutput batch_size, TensorFlow.TFOutput[] padded_shapes, TensorFlow.TFOutput[] padding_values, TensorFlow.TFShape[] output_shapes, string operName = null);
    parameters:
    - id: input_dataset
      type: TensorFlow.TFOutput
      description: To be added.
    - id: batch_size
      type: TensorFlow.TFOutput
      description: >-
        A scalar representing the number of elements to accumulate in a
                      batch.
    - id: padded_shapes
      type: TensorFlow.TFOutput[]
      description: >-
        A list of int64 tensors representing the desired padded shapes
                      of the corresponding output components. These shapes may be partially
                      specified, using `-1` to indicate that a particular dimension should be
                      padded to the maximum size of all batch elements.
    - id: padding_values
      type: TensorFlow.TFOutput[]
      description: >-
        A list of scalars containing the padding value to use for
                      each of the outputs.
    - id: output_shapes
      type: TensorFlow.TFShape[]
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'PaddedBatchDataset'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.PaddedBatchDataset*
  exceptions: []
- uid: TensorFlow.TFGraph.PaddingFIFOQueueV2(TensorFlow.TFDataType[],TensorFlow.TFShape[],System.Nullable{System.Int64},System.String,System.String,System.String)
  id: PaddingFIFOQueueV2(TensorFlow.TFDataType[],TensorFlow.TFShape[],System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: PaddingFIFOQueueV2(TFDataType[], TFShape[], Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.PaddingFIFOQueueV2(TFDataType[], TFShape[], Nullable<Int64>, String, String, String)
  fullName: TFGraph.PaddingFIFOQueueV2(TFDataType[], TFShape[], Nullable<Int64>, String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: A queue that produces elements in first-in first-out order.
  remarks: >-
    Variable-size shapes are allowed by setting the corresponding shape dimensions
                  to 0 in the shape attr.  In this case DequeueMany will pad up to the maximum
                  size of any given element in the minibatch.  See below for details.
  syntax:
    content: public TensorFlow.TFOutput PaddingFIFOQueueV2 (TensorFlow.TFDataType[] component_types, TensorFlow.TFShape[] shapes = null, Nullable<long> capacity = null, string container = null, string shared_name = null, string operName = null);
    parameters:
    - id: component_types
      type: TensorFlow.TFDataType[]
      description: The type of each component in a value.
    - id: shapes
      type: TensorFlow.TFShape[]
      description: >-
        Optional argument
                      The shape of each component in a value. The length of this attr must
                      be either 0 or the same as the length of component_types.
                      Shapes of fixed rank but variable size are allowed by setting
                      any shape dimension to -1.  In this case, the inputs' shape may vary along
                      the given dimension, and DequeueMany will pad the given dimension with
                      zeros up to the maximum shape of all elements in the given batch.
                      If the length of this attr is 0, different queue elements may have
                      different ranks and shapes, but only one element may be dequeued at a time.
    - id: capacity
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      The upper bound on the number of elements in this queue.
                      Negative numbers mean no limit.
    - id: container
      type: System.String
      description: >-
        Optional argument
                      If non-empty, this queue is placed in the given container.
                      Otherwise, a default container is used.
    - id: shared_name
      type: System.String
      description: >-
        Optional argument
                      If non-empty, this queue will be shared under the given name
                      across multiple sessions.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'PaddingFIFOQueueV2'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The handle to the queue.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.PaddingFIFOQueueV2*
  exceptions: []
- uid: TensorFlow.TFGraph.ParallelConcat(TensorFlow.TFOutput[],TensorFlow.TFShape,System.String)
  id: ParallelConcat(TensorFlow.TFOutput[],TensorFlow.TFShape,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ParallelConcat(TFOutput[], TFShape, String)
  nameWithType: TFGraph.ParallelConcat(TFOutput[], TFShape, String)
  fullName: TFGraph.ParallelConcat(TFOutput[], TFShape, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Concatenates a list of `N` tensors along the first dimension.
  remarks: "The input tensors are all required to have size 1 in the first dimension.\n              \n              For example:\n              \n              ```\n              # 'x' is [[1, 4]]\n              # 'y' is [[2, 5]]\n              # 'z' is [[3, 6]]\n              parallel_concat([x, y, z]) =&gt; [[1, 4], [2, 5], [3, 6]]  # Pack along first dim.\n              ```\n              \n              The difference between concat and parallel_concat is that concat requires all\n              of the inputs be computed before the operation will begin but doesn't require\n              that the input shapes be known during graph construction.  Parallel concat\n              will copy pieces of the input into the output as they become available, in\n              some situations this can provide a performance benefit."
  syntax:
    content: public TensorFlow.TFOutput ParallelConcat (TensorFlow.TFOutput[] values, TensorFlow.TFShape shape, string operName = null);
    parameters:
    - id: values
      type: TensorFlow.TFOutput[]
      description: >-
        Tensors to be concatenated. All must have size 1 in the first dimension
                      and same shape.
    - id: shape
      type: TensorFlow.TFShape
      description: >-
        the final shape of the result; should be equal to the shapes of any input
                      but with the number of input values in the first dimension.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ParallelConcat'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The concatenated tensor.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ParallelConcat*
  exceptions: []
- uid: TensorFlow.TFGraph.ParameterizedTruncatedNormal(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  id: ParameterizedTruncatedNormal(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ParameterizedTruncatedNormal(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.ParameterizedTruncatedNormal(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.ParameterizedTruncatedNormal(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Outputs random values from a normal distribution. The parameters may each be a
  remarks: >-
    scalar which applies to the entire output, or a vector of length shape[0] which
                  stores the parameters for each batch.
  syntax:
    content: public TensorFlow.TFOutput ParameterizedTruncatedNormal (TensorFlow.TFOutput shape, TensorFlow.TFOutput means, TensorFlow.TFOutput stdevs, TensorFlow.TFOutput minvals, TensorFlow.TFOutput maxvals, Nullable<long> seed = null, Nullable<long> seed2 = null, string operName = null);
    parameters:
    - id: shape
      type: TensorFlow.TFOutput
      description: The shape of the output tensor. Batches are indexed by the 0th dimension.
    - id: means
      type: TensorFlow.TFOutput
      description: The mean parameter of each batch.
    - id: stdevs
      type: TensorFlow.TFOutput
      description: The standard deviation parameter of each batch. Must be greater than 0.
    - id: minvals
      type: TensorFlow.TFOutput
      description: The minimum cutoff. May be -infinity.
    - id: maxvals
      type: TensorFlow.TFOutput
      description: >-
        The maximum cutoff. May be +infinity, and must be more than the minval
                      for each batch.
    - id: seed
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      If either `seed` or `seed2` are set to be non-zero, the random number
                      generator is seeded by the given seed.  Otherwise, it is seeded by a
                      random seed.
    - id: seed2
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      A second seed to avoid seed collision.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ParameterizedTruncatedNormal'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        A matrix of shape num_batches x samples_per_batch, filled with random
                      truncated normal values using the parameters for each row.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ParameterizedTruncatedNormal*
  exceptions: []
- uid: TensorFlow.TFGraph.ParseExample(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  id: ParseExample(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ParseExample(TFOutput, TFOutput, TFOutput[], TFOutput[], TFOutput[], TFDataType[], TFShape[], String)
  nameWithType: TFGraph.ParseExample(TFOutput, TFOutput, TFOutput[], TFOutput[], TFOutput[], TFDataType[], TFShape[], String)
  fullName: TFGraph.ParseExample(TFOutput, TFOutput, TFOutput[], TFOutput[], TFOutput[], TFDataType[], TFShape[], String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Transforms a vector of brain.Example protos (as strings) into typed tensors.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[]> ParseExample (TensorFlow.TFOutput serialized, TensorFlow.TFOutput names, TensorFlow.TFOutput[] sparse_keys, TensorFlow.TFOutput[] dense_keys, TensorFlow.TFOutput[] dense_defaults, TensorFlow.TFDataType[] sparse_types, TensorFlow.TFShape[] dense_shapes, string operName = null);
    parameters:
    - id: serialized
      type: TensorFlow.TFOutput
      description: A vector containing a batch of binary serialized Example protos.
    - id: names
      type: TensorFlow.TFOutput
      description: >-
        A vector containing the names of the serialized protos.
                      May contain, for example, table key (descriptive) names for the
                      corresponding serialized protos.  These are purely useful for debugging
                      purposes, and the presence of values here has no effect on the output.
                      May also be an empty vector if no names are available.
                      If non-empty, this vector must be the same length as "serialized".
    - id: sparse_keys
      type: TensorFlow.TFOutput[]
      description: >-
        A list of Nsparse string Tensors (scalars).
                      The keys expected in the Examples' features associated with sparse values.
    - id: dense_keys
      type: TensorFlow.TFOutput[]
      description: >-
        A list of Ndense string Tensors (scalars).
                      The keys expected in the Examples' features associated with dense values.
    - id: dense_defaults
      type: TensorFlow.TFOutput[]
      description: >-
        A list of Ndense Tensors (some may be empty).
                      dense_defaults[j] provides default values
                      when the example's feature_map lacks dense_key[j].  If an empty Tensor is
                      provided for dense_defaults[j], then the Feature dense_keys[j] is required.
                      The input type is inferred from dense_defaults[j], even when it's empty.
                      If dense_defaults[j] is not empty, and dense_shapes[j] is fully defined,
                      then the shape of dense_defaults[j] must match that of dense_shapes[j].
                      If dense_shapes[j] has an undefined major dimension (variable strides dense
                      feature), dense_defaults[j] must contain a single element:
                      the padding element.
    - id: sparse_types
      type: TensorFlow.TFDataType[]
      description: >-
        A list of Nsparse types; the data types of data in each Feature
                      given in sparse_keys.
                      Currently the ParseExample supports DT_FLOAT (FloatList),
                      DT_INT64 (Int64List), and DT_STRING (BytesList).
    - id: dense_shapes
      type: TensorFlow.TFShape[]
      description: >-
        A list of Ndense shapes; the shapes of data in each Feature
                      given in dense_keys.
                      The number of elements in the Feature corresponding to dense_key[j]
                      must always equal dense_shapes[j].NumEntries().
                      If dense_shapes[j] == (D0, D1, ..., DN) then the shape of output
                      Tensor dense_values[j] will be (|serialized|, D0, D1, ..., DN):
                      The dense outputs are just the inputs row-stacked by batch.
                      This works for dense_shapes[j] = (-1, D1, ..., DN).  In this case
                      the shape of the output Tensor dense_values[j] will be
                      (|serialized|, M, D1, .., DN), where M is the maximum number of blocks
                      of elements of length D1 * .... * DN, across all minibatch entries
                      in the input.  Any minibatch entry with less than M blocks of elements of
                      length D1 * ... * DN will be padded with the corresponding default_value
                      scalar element along the second dimension.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ParseExample'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[]}
      description: "Returns a tuple with multiple values, as follows:\n              sparse_indices: \n              sparse_values: \n              sparse_shapes: \n              dense_values: \n              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property."
  overload: TensorFlow.TFGraph.ParseExample*
  exceptions: []
- uid: TensorFlow.TFGraph.ParseSingleSequenceExample(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFDataType[],TensorFlow.TFShape[],TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  id: ParseSingleSequenceExample(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFDataType[],TensorFlow.TFShape[],TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ParseSingleSequenceExample(TFOutput, TFOutput, TFOutput[], TFOutput[], TFOutput[], TFOutput[], TFOutput[], TFOutput, TFDataType[], TFDataType[], TFShape[], TFDataType[], TFShape[], String)
  nameWithType: TFGraph.ParseSingleSequenceExample(TFOutput, TFOutput, TFOutput[], TFOutput[], TFOutput[], TFOutput[], TFOutput[], TFOutput, TFDataType[], TFDataType[], TFShape[], TFDataType[], TFShape[], String)
  fullName: TFGraph.ParseSingleSequenceExample(TFOutput, TFOutput, TFOutput[], TFOutput[], TFOutput[], TFOutput[], TFOutput[], TFOutput, TFDataType[], TFDataType[], TFShape[], TFDataType[], TFShape[], String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Transforms a scalar brain.SequenceExample proto (as strings) into typed tensors.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],ValueTuple<TensorFlow.TFOutput[]>> ParseSingleSequenceExample (TensorFlow.TFOutput serialized, TensorFlow.TFOutput feature_list_dense_missing_assumed_empty, TensorFlow.TFOutput[] context_sparse_keys, TensorFlow.TFOutput[] context_dense_keys, TensorFlow.TFOutput[] feature_list_sparse_keys, TensorFlow.TFOutput[] feature_list_dense_keys, TensorFlow.TFOutput[] context_dense_defaults, TensorFlow.TFOutput debug_name, TensorFlow.TFDataType[] context_sparse_types = null, TensorFlow.TFDataType[] feature_list_dense_types = null, TensorFlow.TFShape[] context_dense_shapes = null, TensorFlow.TFDataType[] feature_list_sparse_types = null, TensorFlow.TFShape[] feature_list_dense_shapes = null, string operName = null);
    parameters:
    - id: serialized
      type: TensorFlow.TFOutput
      description: A scalar containing a binary serialized SequenceExample proto.
    - id: feature_list_dense_missing_assumed_empty
      type: TensorFlow.TFOutput
      description: >-
        A vector listing the
                      FeatureList keys which may be missing from the SequenceExample.  If the
                      associated FeatureList is missing, it is treated as empty.  By default,
                      any FeatureList not listed in this vector must exist in the SequenceExample.
    - id: context_sparse_keys
      type: TensorFlow.TFOutput[]
      description: >-
        A list of Ncontext_sparse string Tensors (scalars).
                      The keys expected in the Examples' features associated with context_sparse
                      values.
    - id: context_dense_keys
      type: TensorFlow.TFOutput[]
      description: >-
        A list of Ncontext_dense string Tensors (scalars).
                      The keys expected in the SequenceExamples' context features associated with
                      dense values.
    - id: feature_list_sparse_keys
      type: TensorFlow.TFOutput[]
      description: >-
        A list of Nfeature_list_sparse string Tensors
                      (scalars).  The keys expected in the FeatureLists associated with sparse
                      values.
    - id: feature_list_dense_keys
      type: TensorFlow.TFOutput[]
      description: >-
        A list of Nfeature_list_dense string Tensors (scalars).
                      The keys expected in the SequenceExamples' feature_lists associated
                      with lists of dense values.
    - id: context_dense_defaults
      type: TensorFlow.TFOutput[]
      description: >-
        A list of Ncontext_dense Tensors (some may be empty).
                      context_dense_defaults[j] provides default values
                      when the SequenceExample's context map lacks context_dense_key[j].
                      If an empty Tensor is provided for context_dense_defaults[j],
                      then the Feature context_dense_keys[j] is required.
                      The input type is inferred from context_dense_defaults[j], even when it's
                      empty.  If context_dense_defaults[j] is not empty, its shape must match
                      context_dense_shapes[j].
    - id: debug_name
      type: TensorFlow.TFOutput
      description: >-
        A scalar containing the name of the serialized proto.
                      May contain, for example, table key (descriptive) name for the
                      corresponding serialized proto.  This is purely useful for debugging
                      purposes, and the presence of values here has no effect on the output.
                      May also be an empty scalar if no name is available.
    - id: context_sparse_types
      type: TensorFlow.TFDataType[]
      description: >-
        Optional argument
                      A list of Ncontext_sparse types; the data types of data in
                      each context Feature given in context_sparse_keys.
                      Currently the ParseSingleSequenceExample supports DT_FLOAT (FloatList),
                      DT_INT64 (Int64List), and DT_STRING (BytesList).
    - id: feature_list_dense_types
      type: TensorFlow.TFDataType[]
      description: Optional argument
    - id: context_dense_shapes
      type: TensorFlow.TFShape[]
      description: >-
        Optional argument
                      A list of Ncontext_dense shapes; the shapes of data in
                      each context Feature given in context_dense_keys.
                      The number of elements in the Feature corresponding to context_dense_key[j]
                      must always equal context_dense_shapes[j].NumEntries().
                      The shape of context_dense_values[j] will match context_dense_shapes[j].
    - id: feature_list_sparse_types
      type: TensorFlow.TFDataType[]
      description: >-
        Optional argument
                      A list of Nfeature_list_sparse types; the data types
                      of data in each FeatureList given in feature_list_sparse_keys.
                      Currently the ParseSingleSequenceExample supports DT_FLOAT (FloatList),
                      DT_INT64 (Int64List), and DT_STRING (BytesList).
    - id: feature_list_dense_shapes
      type: TensorFlow.TFShape[]
      description: >-
        Optional argument
                      A list of Nfeature_list_dense shapes; the shapes of
                      data in each FeatureList given in feature_list_dense_keys.
                      The shape of each Feature in the FeatureList corresponding to
                      feature_list_dense_key[j] must always equal
                      feature_list_dense_shapes[j].NumEntries().
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ParseSingleSequenceExample'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],System.ValueTuple{TensorFlow.TFOutput[]}}
      description: "Returns a tuple with multiple values, as follows:\n              context_sparse_indices: \n              context_sparse_values: \n              context_sparse_shapes: \n              context_dense_values: \n              feature_list_sparse_indices: \n              feature_list_sparse_values: \n              feature_list_sparse_shapes: \n              feature_list_dense_values: \n              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property."
  overload: TensorFlow.TFGraph.ParseSingleSequenceExample*
  exceptions: []
- uid: TensorFlow.TFGraph.ParseTensor(TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  id: ParseTensor(TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ParseTensor(TFOutput, TFDataType, String)
  nameWithType: TFGraph.ParseTensor(TFOutput, TFDataType, String)
  fullName: TFGraph.ParseTensor(TFOutput, TFDataType, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Transforms a serialized tensorflow.TensorProto proto into a Tensor.
  syntax:
    content: public TensorFlow.TFOutput ParseTensor (TensorFlow.TFOutput serialized, TensorFlow.TFDataType out_type, string operName = null);
    parameters:
    - id: serialized
      type: TensorFlow.TFOutput
      description: A scalar string containing a serialized TensorProto proto.
    - id: out_type
      type: TensorFlow.TFDataType
      description: >-
        The type of the serialized tensor.  The provided type must match the
                      type of the serialized tensor and no implicit conversion will take place.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ParseTensor'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        A Tensor of type `out_type`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ParseTensor*
  exceptions: []
- uid: TensorFlow.TFGraph.Placeholder(TensorFlow.TFDataType,TensorFlow.TFShape,System.String)
  id: Placeholder(TensorFlow.TFDataType,TensorFlow.TFShape,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Placeholder(TFDataType, TFShape, String)
  nameWithType: TFGraph.Placeholder(TFDataType, TFShape, String)
  fullName: TFGraph.Placeholder(TFDataType, TFShape, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: A placeholder op for a value that will be fed into the computation.
  remarks: >-
    N.B. This operation will fail with an error if it is executed. It is
                  intended as a way to represent a value that will always be fed, and to
                  provide attrs that enable the fed value to be checked at runtime.
  syntax:
    content: public TensorFlow.TFOutput Placeholder (TensorFlow.TFDataType dtype, TensorFlow.TFShape shape = null, string operName = null);
    parameters:
    - id: dtype
      type: TensorFlow.TFDataType
      description: The type of elements in the tensor.
    - id: shape
      type: TensorFlow.TFShape
      description: >-
        Optional argument
                      (Optional) The shape of the tensor. If the shape has 0 dimensions, the
                      shape is unconstrained.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Placeholder'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        A placeholder tensor that must be replaced using the feed mechanism.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Placeholder*
  exceptions: []
- uid: TensorFlow.TFGraph.PlaceholderV2(TensorFlow.TFDataType,TensorFlow.TFShape,System.String)
  id: PlaceholderV2(TensorFlow.TFDataType,TensorFlow.TFShape,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: PlaceholderV2(TFDataType, TFShape, String)
  nameWithType: TFGraph.PlaceholderV2(TFDataType, TFShape, String)
  fullName: TFGraph.PlaceholderV2(TFDataType, TFShape, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: A placeholder op for a value that will be fed into the computation.
  remarks: >-
    N.B. This operation will fail with an error if it is executed. It is
                  intended as a way to represent a value that will always be fed, and to
                  provide attrs that enable the fed value to be checked at runtime.
  syntax:
    content: public TensorFlow.TFOutput PlaceholderV2 (TensorFlow.TFDataType dtype, TensorFlow.TFShape shape, string operName = null);
    parameters:
    - id: dtype
      type: TensorFlow.TFDataType
      description: The type of elements in the tensor.
    - id: shape
      type: TensorFlow.TFShape
      description: >-
        The shape of the tensor. The shape can be any partially-specified
                      shape.  To be unconstrained, pass in a shape with unknown rank.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'PlaceholderV2'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        A placeholder tensor that must be replaced using the feed mechanism.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.PlaceholderV2*
  exceptions: []
- uid: TensorFlow.TFGraph.PlaceholderWithDefault(TensorFlow.TFOutput,TensorFlow.TFShape,System.String)
  id: PlaceholderWithDefault(TensorFlow.TFOutput,TensorFlow.TFShape,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: PlaceholderWithDefault(TFOutput, TFShape, String)
  nameWithType: TFGraph.PlaceholderWithDefault(TFOutput, TFShape, String)
  fullName: TFGraph.PlaceholderWithDefault(TFOutput, TFShape, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: A placeholder op that passes through `input` when its output is not fed.
  syntax:
    content: public TensorFlow.TFOutput PlaceholderWithDefault (TensorFlow.TFOutput input, TensorFlow.TFShape shape, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: The default value to produce when `output` is not fed.
    - id: shape
      type: TensorFlow.TFShape
      description: The (possibly partial) shape of the tensor.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'PlaceholderWithDefault'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        A placeholder tensor that defaults to `input` if it is not fed.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.PlaceholderWithDefault*
  exceptions: []
- uid: TensorFlow.TFGraph.Polygamma(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: Polygamma(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Polygamma(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Polygamma(TFOutput, TFOutput, String)
  fullName: TFGraph.Polygamma(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Compute the polygamma function \\(\psi^{(n)}(x)\\).
  remarks: "The polygamma function is defined as:\n              \n              \n              \\\\(\\psi^{(n)}(x) = \\frac{d^n}{dx^n} \\psi(x)\\\\)\n              \n              where \\\\(\\psi(x)\\\\) is the digamma function."
  syntax:
    content: public TensorFlow.TFOutput Polygamma (TensorFlow.TFOutput a, TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: a
      type: TensorFlow.TFOutput
      description: To be added.
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Polygamma'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Polygamma*
  exceptions: []
- uid: TensorFlow.TFGraph.Pow(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: Pow(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Pow(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Pow(TFOutput, TFOutput, String)
  fullName: TFGraph.Pow(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the power of one value to another.
  remarks: "Given a tensor `x` and a tensor `y`, this operation computes \\\\(x^y\\\\) for\n              corresponding elements in `x` and `y`. For example:\n              \n              ```\n              # tensor 'x' is [[2, 2]], [3, 3]]\n              # tensor 'y' is [[8, 16], [2, 3]]\n              tf.pow(x, y) ==&gt; [[256, 65536], [9, 27]]\n              ```"
  syntax:
    content: public TensorFlow.TFOutput Pow (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Pow'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Pow*
  exceptions: []
- uid: TensorFlow.TFGraph.PreventGradient(TensorFlow.TFOutput,System.String,System.String)
  id: PreventGradient(TensorFlow.TFOutput,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: PreventGradient(TFOutput, String, String)
  nameWithType: TFGraph.PreventGradient(TFOutput, String, String)
  fullName: TFGraph.PreventGradient(TFOutput, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: An identity op that triggers an error if a gradient is requested.
  remarks: "When executed in a graph, this op outputs its input tensor as-is.\n              \n              When building ops to compute gradients, the TensorFlow gradient system\n              will return an error when trying to lookup the gradient of this op,\n              because no gradient must ever be registered for this function.  This\n              op exists to prevent subtle bugs from silently returning unimplemented\n              gradients in some corner cases."
  syntax:
    content: public TensorFlow.TFOutput PreventGradient (TensorFlow.TFOutput input, string message = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: any tensor.
    - id: message
      type: System.String
      description: >-
        Optional argument
                      Will be printed in the error when anyone tries to differentiate
                      this operation.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'PreventGradient'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        the same input tensor.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.PreventGradient*
  exceptions: []
- uid: TensorFlow.TFGraph.Print(TensorFlow.TFOutput,TensorFlow.TFOutput[],System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  id: Print(TensorFlow.TFOutput,TensorFlow.TFOutput[],System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Print(TFOutput, TFOutput[], String, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.Print(TFOutput, TFOutput[], String, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.Print(TFOutput, TFOutput[], String, Nullable<Int64>, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Prints a list of tensors.
  remarks: Passes `input` through to `output` and prints `data` when evaluating.
  syntax:
    content: public TensorFlow.TFOutput Print (TensorFlow.TFOutput input, TensorFlow.TFOutput[] data, string message = null, Nullable<long> first_n = null, Nullable<long> summarize = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: The tensor passed to `output`
    - id: data
      type: TensorFlow.TFOutput[]
      description: A list of tensors to print out when op is evaluated.
    - id: message
      type: System.String
      description: >-
        Optional argument
                      A string, prefix of the error message.
    - id: first_n
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      Only log `first_n` number of times. -1 disables logging.
    - id: summarize
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      Only print this many entries of each tensor.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Print'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        = The unmodified `input` tensor
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Print*
  exceptions: []
- uid: TensorFlow.TFGraph.PriorityQueueV2(TensorFlow.TFShape[],TensorFlow.TFDataType[],System.Nullable{System.Int64},System.String,System.String,System.String)
  id: PriorityQueueV2(TensorFlow.TFShape[],TensorFlow.TFDataType[],System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: PriorityQueueV2(TFShape[], TFDataType[], Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.PriorityQueueV2(TFShape[], TFDataType[], Nullable<Int64>, String, String, String)
  fullName: TFGraph.PriorityQueueV2(TFShape[], TFDataType[], Nullable<Int64>, String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: A queue that produces elements sorted by the first component value.
  remarks: >-
    Note that the PriorityQueue requires the first component of any element
                  to be a scalar int64, in addition to the other elements declared by
                  component_types.  Therefore calls to Enqueue and EnqueueMany (resp. Dequeue
                  and DequeueMany) on a PriorityQueue will all require (resp. output) one extra
                  entry in their input (resp. output) lists.
  syntax:
    content: public TensorFlow.TFOutput PriorityQueueV2 (TensorFlow.TFShape[] shapes, TensorFlow.TFDataType[] component_types = null, Nullable<long> capacity = null, string container = null, string shared_name = null, string operName = null);
    parameters:
    - id: shapes
      type: TensorFlow.TFShape[]
      description: >-
        The shape of each component in a value. The length of this attr must
                      be either 0 or the same as the length of component_types. If the length of
                      this attr is 0, the shapes of queue elements are not constrained, and
                      only one element may be dequeued at a time.
    - id: component_types
      type: TensorFlow.TFDataType[]
      description: >-
        Optional argument
                      The type of each component in a value.
    - id: capacity
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      The upper bound on the number of elements in this queue.
                      Negative numbers mean no limit.
    - id: container
      type: System.String
      description: >-
        Optional argument
                      If non-empty, this queue is placed in the given container.
                      Otherwise, a default container is used.
    - id: shared_name
      type: System.String
      description: >-
        Optional argument
                      If non-empty, this queue will be shared under the given name
                      across multiple sessions.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'PriorityQueueV2'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The handle to the queue.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.PriorityQueueV2*
  exceptions: []
- uid: TensorFlow.TFGraph.Prod(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: Prod(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Prod(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.Prod(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.Prod(TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the product of elements across dimensions of a tensor.
  remarks: >-
    Reduces `input` along the dimensions given in `reduction_indices`. Unless
                  `keep_dims` is true, the rank of the tensor is reduced by 1 for each entry in
                  `reduction_indices`. If `keep_dims` is true, the reduced dimensions are
                  retained with length 1.
  syntax:
    content: public TensorFlow.TFOutput Prod (TensorFlow.TFOutput input, TensorFlow.TFOutput reduction_indices, Nullable<bool> keep_dims = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: The tensor to reduce.
    - id: reduction_indices
      type: TensorFlow.TFOutput
      description: The dimensions to reduce.
    - id: keep_dims
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true, retain reduced dimensions with length 1.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Prod'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The reduced tensor.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Prod*
  exceptions: []
- uid: TensorFlow.TFGraph.Qr(TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: Qr(TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Qr(TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.Qr(TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.Qr(TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the QR decompositions of one or more matrices.
  remarks: "Computes the QR decomposition of each inner matrix in `tensor` such that\n              `tensor[..., :, :] = q[..., :, :] * r[..., :,:])`\n              \n              ```python\n              # a is a tensor.\n              # q is a tensor of orthonormal matrices.\n              # r is a tensor of upper triangular matrices.\n              q, r = qr(a)\n              q_full, r_full = qr(a, full_matrices=True)\n              ```"
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput> Qr (TensorFlow.TFOutput input, Nullable<bool> full_matrices = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: >-
        A tensor of shape `[..., M, N]` whose inner-most 2 dimensions
                      form matrices of size `[M, N]`. Let `P` be the minimum of `M` and `N`.
    - id: full_matrices
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true, compute full-sized `q` and `r`. If false
                      (the default), compute only the leading `P` columns of `q`.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Qr'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      q: Orthonormal basis for range of `a`. If `full_matrices` is `False` then
                      shape is `[..., M, P]`; if `full_matrices` is `True` then shape is
                      `[..., M, M]`.
                      r: Triangular factor. If `full_matrices` is `False` then shape is
                      `[..., P, N]`. If `full_matrices` is `True` then shape is `[..., M, N]`.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.Qr*
  exceptions: []
- uid: TensorFlow.TFGraph.QuantizeAndDequantize(TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Single},System.Nullable{System.Single},System.String)
  id: QuantizeAndDequantize(TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Single},System.Nullable{System.Single},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: QuantizeAndDequantize(TFOutput, Nullable<Boolean>, Nullable<Int64>, Nullable<Boolean>, Nullable<Single>, Nullable<Single>, String)
  nameWithType: TFGraph.QuantizeAndDequantize(TFOutput, Nullable<Boolean>, Nullable<Int64>, Nullable<Boolean>, Nullable<Single>, Nullable<Single>, String)
  fullName: TFGraph.QuantizeAndDequantize(TFOutput, Nullable<Boolean>, Nullable<Int64>, Nullable<Boolean>, Nullable<Single>, Nullable<Single>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Use QuantizeAndDequantizeV2 instead.
  remarks: "This op simulates the precision loss from the quantized forward pass by:\n              1. Quantizing the tensor to fixed point numbers, which should match the target\n                 quantization method when it is used in inference.\n              2. Dequantizing it back to floating point numbers for the following ops, most\n                 likely matmul.\n              \n              There are different ways to quantize. This version does not use the full range\n              of the output type, choosing to elide the lowest possible value for symmetry\n              (e.g., output range is -127 to 127, not -128 to 127 for signed 8 bit\n              quantization), so that 0.0 maps to 0.\n              \n              To perform this op, we first find the range of values in our tensor. The range\n              we use is always centered on 0, so we find m such that\n              \n              1. m = max(abs(input_min), abs(input_max)) if range_given is true,\n              2. m = max(max(abs(min_elem(input)), abs(max_elem(input))) otherwise.\n              \n              Our input tensor range is then [-m, m].\n              \n              Next, we choose our fixed-point quantization buckets, [min_fixed, max_fixed].\n              If signed_input is true, this is\n              \n                [min_fixed, max_fixed ] =\n                    [-(1 &lt;&lt; (num_bits - 1) - 1), (1 &lt;&lt; (num_bits - 1)) - 1].\n              \n              Otherwise, if signed_input is false, the fixed-point range is\n              \n                [min_fixed, max_fixed] = [0, (1 &lt;&lt; num_bits) - 1].\n              \n              From this we compute our scaling factor, s:\n              \n                s = (max_fixed - min_fixed) / (2 * m).\n              \n              Now we can quantize and dequantize the elements of our tensor.  An element e\n              is transformed into e':\n              \n                e' = (e * s).round_to_nearest() / s.\n              \n              Note that we have a different number of buckets in the signed vs. unsigned\n              cases.  For example, if num_bits == 8, we get 254 buckets in the signed case\n              vs. 255 in the unsigned case.\n              \n              For example, suppose num_bits = 8 and m = 1.  Then\n              \n                [min_fixed, max_fixed] = [-127, 127], and\n                s = (127 + 127) / 2 = 127.\n              \n              Given the vector {-1, -0.5, 0, 0.3}, this is quantized to\n              {-127, -63, 0, 38}, and dequantized to {-1, -63.0/127, 0, 38.0/127}."
  syntax:
    content: public TensorFlow.TFOutput QuantizeAndDequantize (TensorFlow.TFOutput input, Nullable<bool> signed_input = null, Nullable<long> num_bits = null, Nullable<bool> range_given = null, Nullable<float> input_min = null, Nullable<float> input_max = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: To be added.
    - id: signed_input
      type: System.Nullable{System.Boolean}
      description: Optional argument
    - id: num_bits
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: range_given
      type: System.Nullable{System.Boolean}
      description: Optional argument
    - id: input_min
      type: System.Nullable{System.Single}
      description: Optional argument
    - id: input_max
      type: System.Nullable{System.Single}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizeAndDequantize'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.QuantizeAndDequantize*
  exceptions: []
- uid: TensorFlow.TFGraph.QuantizeAndDequantizeV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String)
  id: QuantizeAndDequantizeV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: QuantizeAndDequantizeV2(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Int64>, Nullable<Boolean>, String)
  nameWithType: TFGraph.QuantizeAndDequantizeV2(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Int64>, Nullable<Boolean>, String)
  fullName: TFGraph.QuantizeAndDequantizeV2(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Int64>, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Quantizes then dequantizes a tensor.
  remarks: "This op simulates the precision loss from the quantized forward pass by:\n              1. Quantizing the tensor to fixed point numbers, which should match the target\n                 quantization method when it is used in inference.\n              2. Dequantizing it back to floating point numbers for the following ops, most\n                 likely matmul.\n              \n              There are different ways to quantize. This version does not use the full range\n              of the output type, choosing to elide the lowest possible value for symmetry\n              (e.g., output range is -127 to 127, not -128 to 127 for signed 8 bit\n              quantization), so that 0.0 maps to 0.\n              \n              To perform this op, we first find the range of values in our tensor. The range\n              we use is always centered on 0, so we find m such that\n              \n              1. m = max(abs(input_min), abs(input_max)) if range_given is true,\n              2. m = max(abs(min_elem(input)), abs(max_elem(input))) otherwise.\n              \n              Our input tensor range is then [-m, m].\n              \n              Next, we choose our fixed-point quantization buckets, [min_fixed, max_fixed].\n              If signed_input is true, this is\n              \n                [min_fixed, max_fixed ] =\n                    [-(1 &lt;&lt; (num_bits - 1) - 1), (1 &lt;&lt; (num_bits - 1)) - 1].\n              \n              Otherwise, if signed_input is false, the fixed-point range is\n              \n                [min_fixed, max_fixed] = [0, (1 &lt;&lt; num_bits) - 1].\n              \n              From this we compute our scaling factor, s:\n              \n                s = (max_fixed - min_fixed) / (2 * m).\n              \n              Now we can quantize and dequantize the elements of our tensor.  An element e\n              is transformed into e':\n              \n                e' = (e * s).round_to_nearest() / s.\n              \n              Note that we have a different number of buckets in the signed vs. unsigned\n              cases.  For example, if num_bits == 8, we get 254 buckets in the signed case\n              vs. 255 in the unsigned case.\n              \n              For example, suppose num_bits = 8 and m = 1.  Then\n              \n                [min_fixed, max_fixed] = [-127, 127], and\n                s = (127 + 127) / 2 = 127.\n              \n              Given the vector {-1, -0.5, 0, 0.3}, this is quantized to\n              {-127, -63, 0, 38}, and dequantized to {-1, -63.0/127, 0, 38.0/127}."
  syntax:
    content: public TensorFlow.TFOutput QuantizeAndDequantizeV2 (TensorFlow.TFOutput input, TensorFlow.TFOutput input_min, TensorFlow.TFOutput input_max, Nullable<bool> signed_input = null, Nullable<long> num_bits = null, Nullable<bool> range_given = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: Tensor to quantize and then dequantize.
    - id: input_min
      type: TensorFlow.TFOutput
      description: >-
        If range_given, this is the min of the range, otherwise this input
                      will be ignored.
    - id: input_max
      type: TensorFlow.TFOutput
      description: >-
        If range_given, this is the max of the range, otherwise this input
                      will be ignored.
    - id: signed_input
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If the quantization is signed or unsigned.
    - id: num_bits
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      The bitwidth of the quantization.
    - id: range_given
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If the range is given or should be computed from the tensor.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizeAndDequantizeV2'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.QuantizeAndDequantizeV2*
  exceptions: []
- uid: TensorFlow.TFGraph.QuantizedAdd(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  id: QuantizedAdd(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: QuantizedAdd(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.QuantizedAdd(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.QuantizedAdd(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns x + y element-wise, working on quantized buffers.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> QuantizedAdd (TensorFlow.TFOutput x, TensorFlow.TFOutput y, TensorFlow.TFOutput min_x, TensorFlow.TFOutput max_x, TensorFlow.TFOutput min_y, TensorFlow.TFOutput max_y, Nullable<TensorFlow.TFDataType> Toutput = null, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: min_x
      type: TensorFlow.TFOutput
      description: The float value that the lowest quantized `x` value represents.
    - id: max_x
      type: TensorFlow.TFOutput
      description: The float value that the highest quantized `x` value represents.
    - id: min_y
      type: TensorFlow.TFOutput
      description: The float value that the lowest quantized `y` value represents.
    - id: max_y
      type: TensorFlow.TFOutput
      description: The float value that the highest quantized `y` value represents.
    - id: Toutput
      type: System.Nullable{TensorFlow.TFDataType}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedAdd'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: "Returns a tuple with multiple values, as follows:\n              z: \n              min_z: The float value that the lowest quantized output value represents.\n              max_z: The float value that the highest quantized output value represents.\n              \n              *NOTE*: `QuantizedAdd` supports limited forms of broadcasting. More about\n              broadcasting [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)\n              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property."
  overload: TensorFlow.TFGraph.QuantizedAdd*
  exceptions: []
- uid: TensorFlow.TFGraph.QuantizedAvgPool(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String)
  id: QuantizedAvgPool(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: QuantizedAvgPool(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
  nameWithType: TFGraph.QuantizedAvgPool(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
  fullName: TFGraph.QuantizedAvgPool(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Produces the average pool of the input tensor for quantized types.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> QuantizedAvgPool (TensorFlow.TFOutput input, TensorFlow.TFOutput min_input, TensorFlow.TFOutput max_input, long[] ksize, long[] strides, string padding, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: 4-D with shape `[batch, height, width, channels]`.
    - id: min_input
      type: TensorFlow.TFOutput
      description: The float value that the lowest quantized input value represents.
    - id: max_input
      type: TensorFlow.TFOutput
      description: The float value that the highest quantized input value represents.
    - id: ksize
      type: System.Int64[]
      description: >-
        The size of the window for each dimension of the input tensor.
                      The length must be 4 to match the number of dimensions of the input.
    - id: strides
      type: System.Int64[]
      description: >-
        The stride of the sliding window for each dimension of the input
                      tensor.  The length must be 4 to match the number of dimensions of the input.
    - id: padding
      type: System.String
      description: The type of padding algorithm to use.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedAvgPool'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: "Returns a tuple with multiple values, as follows:\n              output: \n              min_output: The float value that the lowest quantized output value represents.\n              max_output: The float value that the highest quantized output value represents.\n              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property."
  overload: TensorFlow.TFGraph.QuantizedAvgPool*
  exceptions: []
- uid: TensorFlow.TFGraph.QuantizedBatchNormWithGlobalNormalization(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.Single,System.Boolean,System.String)
  id: QuantizedBatchNormWithGlobalNormalization(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.Single,System.Boolean,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: QuantizedBatchNormWithGlobalNormalization(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFDataType, Single, Boolean, String)
  nameWithType: TFGraph.QuantizedBatchNormWithGlobalNormalization(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFDataType, Single, Boolean, String)
  fullName: TFGraph.QuantizedBatchNormWithGlobalNormalization(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFDataType, Single, Boolean, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Quantized Batch normalization.
  remarks: >-
    This op is deprecated and will be removed in the future. Prefer
                  `tf.nn.batch_normalization`.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> QuantizedBatchNormWithGlobalNormalization (TensorFlow.TFOutput t, TensorFlow.TFOutput t_min, TensorFlow.TFOutput t_max, TensorFlow.TFOutput m, TensorFlow.TFOutput m_min, TensorFlow.TFOutput m_max, TensorFlow.TFOutput v, TensorFlow.TFOutput v_min, TensorFlow.TFOutput v_max, TensorFlow.TFOutput beta, TensorFlow.TFOutput beta_min, TensorFlow.TFOutput beta_max, TensorFlow.TFOutput gamma, TensorFlow.TFOutput gamma_min, TensorFlow.TFOutput gamma_max, TensorFlow.TFDataType out_type, float variance_epsilon, bool scale_after_normalization, string operName = null);
    parameters:
    - id: t
      type: TensorFlow.TFOutput
      description: A 4D input Tensor.
    - id: t_min
      type: TensorFlow.TFOutput
      description: The value represented by the lowest quantized input.
    - id: t_max
      type: TensorFlow.TFOutput
      description: The value represented by the highest quantized input.
    - id: m
      type: TensorFlow.TFOutput
      description: >-
        A 1D mean Tensor with size matching the last dimension of t.
                      This is the first output from tf.nn.moments,
                      or a saved moving average thereof.
    - id: m_min
      type: TensorFlow.TFOutput
      description: The value represented by the lowest quantized mean.
    - id: m_max
      type: TensorFlow.TFOutput
      description: The value represented by the highest quantized mean.
    - id: v
      type: TensorFlow.TFOutput
      description: >-
        A 1D variance Tensor with size matching the last dimension of t.
                      This is the second output from tf.nn.moments,
                      or a saved moving average thereof.
    - id: v_min
      type: TensorFlow.TFOutput
      description: The value represented by the lowest quantized variance.
    - id: v_max
      type: TensorFlow.TFOutput
      description: The value represented by the highest quantized variance.
    - id: beta
      type: TensorFlow.TFOutput
      description: >-
        A 1D beta Tensor with size matching the last dimension of t.
                      An offset to be added to the normalized tensor.
    - id: beta_min
      type: TensorFlow.TFOutput
      description: The value represented by the lowest quantized offset.
    - id: beta_max
      type: TensorFlow.TFOutput
      description: The value represented by the highest quantized offset.
    - id: gamma
      type: TensorFlow.TFOutput
      description: >-
        A 1D gamma Tensor with size matching the last dimension of t.
                      If "scale_after_normalization" is true, this tensor will be multiplied
                      with the normalized tensor.
    - id: gamma_min
      type: TensorFlow.TFOutput
      description: The value represented by the lowest quantized gamma.
    - id: gamma_max
      type: TensorFlow.TFOutput
      description: The value represented by the highest quantized gamma.
    - id: out_type
      type: TensorFlow.TFDataType
      description: To be added.
    - id: variance_epsilon
      type: System.Single
      description: A small float number to avoid dividing by 0.
    - id: scale_after_normalization
      type: System.Boolean
      description: >-
        A bool indicating whether the resulted tensor
                      needs to be multiplied with gamma.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedBatchNormWithGlobalNormalization'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: "Returns a tuple with multiple values, as follows:\n              result: \n              result_min: \n              result_max: \n              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property."
  overload: TensorFlow.TFGraph.QuantizedBatchNormWithGlobalNormalization*
  exceptions: []
- uid: TensorFlow.TFGraph.QuantizedBiasAdd(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  id: QuantizedBiasAdd(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: QuantizedBiasAdd(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFDataType, String)
  nameWithType: TFGraph.QuantizedBiasAdd(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFDataType, String)
  fullName: TFGraph.QuantizedBiasAdd(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFDataType, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Adds Tensor 'bias' to Tensor 'input' for Quantized types.
  remarks: Broadcasts the values of bias on dimensions 0..N-2 of 'input'.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> QuantizedBiasAdd (TensorFlow.TFOutput input, TensorFlow.TFOutput bias, TensorFlow.TFOutput min_input, TensorFlow.TFOutput max_input, TensorFlow.TFOutput min_bias, TensorFlow.TFOutput max_bias, TensorFlow.TFDataType out_type, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: To be added.
    - id: bias
      type: TensorFlow.TFOutput
      description: A 1D bias Tensor with size matching the last dimension of 'input'.
    - id: min_input
      type: TensorFlow.TFOutput
      description: The float value that the lowest quantized input value represents.
    - id: max_input
      type: TensorFlow.TFOutput
      description: The float value that the highest quantized input value represents.
    - id: min_bias
      type: TensorFlow.TFOutput
      description: The float value that the lowest quantized bias value represents.
    - id: max_bias
      type: TensorFlow.TFOutput
      description: The float value that the highest quantized bias value represents.
    - id: out_type
      type: TensorFlow.TFDataType
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedBiasAdd'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: "Returns a tuple with multiple values, as follows:\n              output: \n              min_out: The float value that the lowest quantized output value represents.\n              max_out: The float value that the highest quantized output value represents.\n              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property."
  overload: TensorFlow.TFGraph.QuantizedBiasAdd*
  exceptions: []
- uid: TensorFlow.TFGraph.QuantizedConcat(TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],System.String)
  id: QuantizedConcat(TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: QuantizedConcat(TFOutput, TFOutput[], TFOutput[], TFOutput[], String)
  nameWithType: TFGraph.QuantizedConcat(TFOutput, TFOutput[], TFOutput[], TFOutput[], String)
  fullName: TFGraph.QuantizedConcat(TFOutput, TFOutput[], TFOutput[], TFOutput[], String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Concatenates quantized tensors along one dimension.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> QuantizedConcat (TensorFlow.TFOutput concat_dim, TensorFlow.TFOutput[] values, TensorFlow.TFOutput[] input_mins, TensorFlow.TFOutput[] input_maxes, string operName = null);
    parameters:
    - id: concat_dim
      type: TensorFlow.TFOutput
      description: >-
        0-D.  The dimension along which to concatenate.  Must be in the
                      range [0, rank(values)).
    - id: values
      type: TensorFlow.TFOutput[]
      description: >-
        The `N` Tensors to concatenate. Their ranks and types must match,
                      and their sizes must match in all dimensions except `concat_dim`.
    - id: input_mins
      type: TensorFlow.TFOutput[]
      description: The minimum scalar values for each of the input tensors.
    - id: input_maxes
      type: TensorFlow.TFOutput[]
      description: The maximum scalar values for each of the input tensors.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedConcat'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      output: A `Tensor` with the concatenation of values stacked along the
                      `concat_dim` dimension.  This tensor's shape matches that of `values` except
                      in `concat_dim` where it has the sum of the sizes.
                      output_min: The float value that the minimum quantized output value represents.
                      output_max: The float value that the maximum quantized output value represents.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.QuantizedConcat*
  exceptions: []
- uid: TensorFlow.TFGraph.QuantizedConv2D(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.Nullable{TensorFlow.TFDataType},System.String)
  id: QuantizedConv2D(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: QuantizedConv2D(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Int64[], String, Nullable<TFDataType>, String)
  nameWithType: TFGraph.QuantizedConv2D(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Int64[], String, Nullable<TFDataType>, String)
  fullName: TFGraph.QuantizedConv2D(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Int64[], String, Nullable<TFDataType>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes a 2D convolution given quantized 4D input and filter tensors.
  remarks: >-
    The inputs are quantized tensors where the lowest value represents the real
                  number of the associated minimum, and the highest represents the maximum.
                  This means that you can only interpret the quantized output in the same way, by
                  taking the returned minimum and maximum values into account.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> QuantizedConv2D (TensorFlow.TFOutput input, TensorFlow.TFOutput filter, TensorFlow.TFOutput min_input, TensorFlow.TFOutput max_input, TensorFlow.TFOutput min_filter, TensorFlow.TFOutput max_filter, long[] strides, string padding, Nullable<TensorFlow.TFDataType> out_type = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: To be added.
    - id: filter
      type: TensorFlow.TFOutput
      description: filter's input_depth dimension must match input's depth dimensions.
    - id: min_input
      type: TensorFlow.TFOutput
      description: The float value that the lowest quantized input value represents.
    - id: max_input
      type: TensorFlow.TFOutput
      description: The float value that the highest quantized input value represents.
    - id: min_filter
      type: TensorFlow.TFOutput
      description: The float value that the lowest quantized filter value represents.
    - id: max_filter
      type: TensorFlow.TFOutput
      description: The float value that the highest quantized filter value represents.
    - id: strides
      type: System.Int64[]
      description: >-
        The stride of the sliding window for each dimension of the input
                      tensor.
    - id: padding
      type: System.String
      description: The type of padding algorithm to use.
    - id: out_type
      type: System.Nullable{TensorFlow.TFDataType}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedConv2D'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: "Returns a tuple with multiple values, as follows:\n              output: \n              min_output: The float value that the lowest quantized output value represents.\n              max_output: The float value that the highest quantized output value represents.\n              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property."
  overload: TensorFlow.TFGraph.QuantizedConv2D*
  exceptions: []
- uid: TensorFlow.TFGraph.QuantizedInstanceNorm(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.String)
  id: QuantizedInstanceNorm(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: QuantizedInstanceNorm(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Single>, Nullable<Single>, Nullable<Single>, Nullable<Single>, String)
  nameWithType: TFGraph.QuantizedInstanceNorm(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Single>, Nullable<Single>, Nullable<Single>, Nullable<Single>, String)
  fullName: TFGraph.QuantizedInstanceNorm(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Single>, Nullable<Single>, Nullable<Single>, Nullable<Single>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Quantized Instance normalization.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> QuantizedInstanceNorm (TensorFlow.TFOutput x, TensorFlow.TFOutput x_min, TensorFlow.TFOutput x_max, Nullable<bool> output_range_given = null, Nullable<float> given_y_min = null, Nullable<float> given_y_max = null, Nullable<float> variance_epsilon = null, Nullable<float> min_separation = null, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: A 4D input Tensor.
    - id: x_min
      type: TensorFlow.TFOutput
      description: The value represented by the lowest quantized input.
    - id: x_max
      type: TensorFlow.TFOutput
      description: The value represented by the highest quantized input.
    - id: output_range_given
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If True, `given_y_min` and `given_y_min`
                      and `given_y_max` are used as the output range. Otherwise,
                      the implementation computes the output range.
    - id: given_y_min
      type: System.Nullable{System.Single}
      description: >-
        Optional argument
                      Output in `y_min` if `output_range_given` is True.
    - id: given_y_max
      type: System.Nullable{System.Single}
      description: >-
        Optional argument
                      Output in `y_max` if `output_range_given` is True.
    - id: variance_epsilon
      type: System.Nullable{System.Single}
      description: >-
        Optional argument
                      A small float number to avoid dividing by 0.
    - id: min_separation
      type: System.Nullable{System.Single}
      description: >-
        Optional argument
                      Minimum value of `y_max - y_min`
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedInstanceNorm'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      y: A 4D Tensor.
                      y_min: The value represented by the lowest quantized output.
                      y_max: The value represented by the highest quantized output.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.QuantizedInstanceNorm*
  exceptions: []
- uid: TensorFlow.TFGraph.QuantizedMatMul(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{TensorFlow.TFDataType},System.String)
  id: QuantizedMatMul(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: QuantizedMatMul(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, Nullable<Boolean>, Nullable<Boolean>, Nullable<TFDataType>, String)
  nameWithType: TFGraph.QuantizedMatMul(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, Nullable<Boolean>, Nullable<Boolean>, Nullable<TFDataType>, String)
  fullName: TFGraph.QuantizedMatMul(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, Nullable<Boolean>, Nullable<Boolean>, Nullable<TFDataType>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Perform a quantized matrix multiplication of  `a` by the matrix `b`.
  remarks: >-
    The inputs must be two-dimensional matrices and the inner dimension of
                  `a` (after being transposed if `transpose_a` is non-zero) must match the
                  outer dimension of `b` (after being transposed if `transposed_b` is
                  non-zero).
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> QuantizedMatMul (TensorFlow.TFOutput a, TensorFlow.TFOutput b, TensorFlow.TFOutput min_a, TensorFlow.TFOutput max_a, TensorFlow.TFOutput min_b, TensorFlow.TFOutput max_b, Nullable<TensorFlow.TFDataType> Toutput = null, Nullable<bool> transpose_a = null, Nullable<bool> transpose_b = null, Nullable<TensorFlow.TFDataType> Tactivation = null, string operName = null);
    parameters:
    - id: a
      type: TensorFlow.TFOutput
      description: Must be a two-dimensional tensor.
    - id: b
      type: TensorFlow.TFOutput
      description: Must be a two-dimensional tensor.
    - id: min_a
      type: TensorFlow.TFOutput
      description: The float value that the lowest quantized `a` value represents.
    - id: max_a
      type: TensorFlow.TFOutput
      description: The float value that the highest quantized `a` value represents.
    - id: min_b
      type: TensorFlow.TFOutput
      description: The float value that the lowest quantized `b` value represents.
    - id: max_b
      type: TensorFlow.TFOutput
      description: The float value that the highest quantized `b` value represents.
    - id: Toutput
      type: System.Nullable{TensorFlow.TFDataType}
      description: Optional argument
    - id: transpose_a
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true, `a` is transposed before multiplication.
    - id: transpose_b
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true, `b` is transposed before multiplication.
    - id: Tactivation
      type: System.Nullable{TensorFlow.TFDataType}
      description: >-
        Optional argument
                      The type of output produced by activation function
                      following this operation.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedMatMul'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: "Returns a tuple with multiple values, as follows:\n              output: \n              min_out: The float value that the lowest quantized output value represents.\n              max_out: The float value that the highest quantized output value represents.\n              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property."
  overload: TensorFlow.TFGraph.QuantizedMatMul*
  exceptions: []
- uid: TensorFlow.TFGraph.QuantizedMaxPool(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String)
  id: QuantizedMaxPool(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: QuantizedMaxPool(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
  nameWithType: TFGraph.QuantizedMaxPool(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
  fullName: TFGraph.QuantizedMaxPool(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Produces the max pool of the input tensor for quantized types.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> QuantizedMaxPool (TensorFlow.TFOutput input, TensorFlow.TFOutput min_input, TensorFlow.TFOutput max_input, long[] ksize, long[] strides, string padding, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: The 4D (batch x rows x cols x depth) Tensor to MaxReduce over.
    - id: min_input
      type: TensorFlow.TFOutput
      description: The float value that the lowest quantized input value represents.
    - id: max_input
      type: TensorFlow.TFOutput
      description: The float value that the highest quantized input value represents.
    - id: ksize
      type: System.Int64[]
      description: >-
        The size of the window for each dimension of the input tensor.
                      The length must be 4 to match the number of dimensions of the input.
    - id: strides
      type: System.Int64[]
      description: >-
        The stride of the sliding window for each dimension of the input
                      tensor. The length must be 4 to match the number of dimensions of the input.
    - id: padding
      type: System.String
      description: The type of padding algorithm to use.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedMaxPool'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: "Returns a tuple with multiple values, as follows:\n              output: \n              min_output: The float value that the lowest quantized output value represents.\n              max_output: The float value that the highest quantized output value represents.\n              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property."
  overload: TensorFlow.TFGraph.QuantizedMaxPool*
  exceptions: []
- uid: TensorFlow.TFGraph.QuantizedMul(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  id: QuantizedMul(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: QuantizedMul(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.QuantizedMul(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.QuantizedMul(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns x * y element-wise, working on quantized buffers.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> QuantizedMul (TensorFlow.TFOutput x, TensorFlow.TFOutput y, TensorFlow.TFOutput min_x, TensorFlow.TFOutput max_x, TensorFlow.TFOutput min_y, TensorFlow.TFOutput max_y, Nullable<TensorFlow.TFDataType> Toutput = null, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: min_x
      type: TensorFlow.TFOutput
      description: The float value that the lowest quantized `x` value represents.
    - id: max_x
      type: TensorFlow.TFOutput
      description: The float value that the highest quantized `x` value represents.
    - id: min_y
      type: TensorFlow.TFOutput
      description: The float value that the lowest quantized `y` value represents.
    - id: max_y
      type: TensorFlow.TFOutput
      description: The float value that the highest quantized `y` value represents.
    - id: Toutput
      type: System.Nullable{TensorFlow.TFDataType}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedMul'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: "Returns a tuple with multiple values, as follows:\n              z: \n              min_z: The float value that the lowest quantized output value represents.\n              max_z: The float value that the highest quantized output value represents.\n              \n              *NOTE*: `QuantizedMul` supports limited forms of broadcasting. More about\n              broadcasting [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)\n              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property."
  overload: TensorFlow.TFGraph.QuantizedMul*
  exceptions: []
- uid: TensorFlow.TFGraph.QuantizeDownAndShrinkRange(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  id: QuantizeDownAndShrinkRange(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: QuantizeDownAndShrinkRange(TFOutput, TFOutput, TFOutput, TFDataType, String)
  nameWithType: TFGraph.QuantizeDownAndShrinkRange(TFOutput, TFOutput, TFOutput, TFDataType, String)
  fullName: TFGraph.QuantizeDownAndShrinkRange(TFOutput, TFOutput, TFOutput, TFDataType, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Convert the quantized 'input' tensor into a lower-precision 'output', using the
  remarks: "actual distribution of the values to maximize the usage of the lower bit depth\n              and adjusting the output min and max ranges accordingly.\n              \n              [input_min, input_max] are scalar floats that specify the range for the float\n              interpretation of the 'input' data. For example, if input_min is -1.0f and\n              input_max is 1.0f, and we are dealing with quint16 quantized data, then a 0\n              value in the 16-bit data should be interpreted as -1.0f, and a 65535 means 1.0f.\n              \n              This operator tries to squeeze as much precision as possible into an output with\n              a lower bit depth by calculating the actual min and max values found in the\n              data. For example, maybe that quint16 input has no values lower than 16,384 and\n              none higher than 49,152. That means only half the range is actually needed, all\n              the float interpretations are between -0.5f and 0.5f, so if we want to compress\n              the data into a quint8 output, we can use that range rather than the theoretical\n              -1.0f to 1.0f that is suggested by the input min and max.\n              \n              In practice, this is most useful for taking output from operations like\n              QuantizedMatMul that can produce higher bit-depth outputs than their inputs and\n              may have large potential output ranges, but in practice have a distribution of\n              input values that only uses a small fraction of the possible range. By feeding\n              that output into this operator, we can reduce it from 32 bits down to 8 with\n              minimal loss of accuracy."
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> QuantizeDownAndShrinkRange (TensorFlow.TFOutput input, TensorFlow.TFOutput input_min, TensorFlow.TFOutput input_max, TensorFlow.TFDataType out_type, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: To be added.
    - id: input_min
      type: TensorFlow.TFOutput
      description: The float value that the minimum quantized input value represents.
    - id: input_max
      type: TensorFlow.TFOutput
      description: The float value that the maximum quantized input value represents.
    - id: out_type
      type: TensorFlow.TFDataType
      description: The type of the output. Should be a lower bit depth than Tinput.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizeDownAndShrinkRange'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: "Returns a tuple with multiple values, as follows:\n              output: \n              output_min: The float value that the minimum quantized output value represents.\n              output_max: The float value that the maximum quantized output value represents.\n              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property."
  overload: TensorFlow.TFGraph.QuantizeDownAndShrinkRange*
  exceptions: []
- uid: TensorFlow.TFGraph.QuantizedRelu(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  id: QuantizedRelu(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: QuantizedRelu(TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.QuantizedRelu(TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.QuantizedRelu(TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: 'Computes Quantized Rectified Linear: `max(features, 0)`'
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> QuantizedRelu (TensorFlow.TFOutput features, TensorFlow.TFOutput min_features, TensorFlow.TFOutput max_features, Nullable<TensorFlow.TFDataType> out_type = null, string operName = null);
    parameters:
    - id: features
      type: TensorFlow.TFOutput
      description: To be added.
    - id: min_features
      type: TensorFlow.TFOutput
      description: The float value that the lowest quantized value represents.
    - id: max_features
      type: TensorFlow.TFOutput
      description: The float value that the highest quantized value represents.
    - id: out_type
      type: System.Nullable{TensorFlow.TFDataType}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedRelu'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      activations: Has the same output shape as "features".
                      min_activations: The float value that the lowest quantized value represents.
                      max_activations: The float value that the highest quantized value represents.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.QuantizedRelu*
  exceptions: []
- uid: TensorFlow.TFGraph.QuantizedRelu6(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  id: QuantizedRelu6(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: QuantizedRelu6(TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.QuantizedRelu6(TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.QuantizedRelu6(TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: 'Computes Quantized Rectified Linear 6: `min(max(features, 0), 6)`'
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> QuantizedRelu6 (TensorFlow.TFOutput features, TensorFlow.TFOutput min_features, TensorFlow.TFOutput max_features, Nullable<TensorFlow.TFDataType> out_type = null, string operName = null);
    parameters:
    - id: features
      type: TensorFlow.TFOutput
      description: To be added.
    - id: min_features
      type: TensorFlow.TFOutput
      description: The float value that the lowest quantized value represents.
    - id: max_features
      type: TensorFlow.TFOutput
      description: The float value that the highest quantized value represents.
    - id: out_type
      type: System.Nullable{TensorFlow.TFDataType}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedRelu6'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      activations: Has the same output shape as "features".
                      min_activations: The float value that the lowest quantized value represents.
                      max_activations: The float value that the highest quantized value represents.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.QuantizedRelu6*
  exceptions: []
- uid: TensorFlow.TFGraph.QuantizedReluX(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  id: QuantizedReluX(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: QuantizedReluX(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.QuantizedReluX(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.QuantizedReluX(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: 'Computes Quantized Rectified Linear X: `min(max(features, 0), max_value)`'
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> QuantizedReluX (TensorFlow.TFOutput features, TensorFlow.TFOutput max_value, TensorFlow.TFOutput min_features, TensorFlow.TFOutput max_features, Nullable<TensorFlow.TFDataType> out_type = null, string operName = null);
    parameters:
    - id: features
      type: TensorFlow.TFOutput
      description: To be added.
    - id: max_value
      type: TensorFlow.TFOutput
      description: To be added.
    - id: min_features
      type: TensorFlow.TFOutput
      description: The float value that the lowest quantized value represents.
    - id: max_features
      type: TensorFlow.TFOutput
      description: The float value that the highest quantized value represents.
    - id: out_type
      type: System.Nullable{TensorFlow.TFDataType}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedReluX'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      activations: Has the same output shape as "features".
                      min_activations: The float value that the lowest quantized value represents.
                      max_activations: The float value that the highest quantized value represents.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.QuantizedReluX*
  exceptions: []
- uid: TensorFlow.TFGraph.QuantizedReshape(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: QuantizedReshape(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: QuantizedReshape(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.QuantizedReshape(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.QuantizedReshape(TFOutput, TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Reshapes a quantized tensor as per the Reshape op.
  remarks: '```'
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> QuantizedReshape (TensorFlow.TFOutput tensor, TensorFlow.TFOutput shape, TensorFlow.TFOutput input_min, TensorFlow.TFOutput input_max, string operName = null);
    parameters:
    - id: tensor
      type: TensorFlow.TFOutput
      description: To be added.
    - id: shape
      type: TensorFlow.TFOutput
      description: Defines the shape of the output tensor.
    - id: input_min
      type: TensorFlow.TFOutput
      description: The minimum value of the input.
    - id: input_max
      type: TensorFlow.TFOutput
      description: The maximum value of the input.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedReshape'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: "Returns a tuple with multiple values, as follows:\n              output: \n              output_min: This value is copied from input_min.\n              output_max: This value is copied from input_max.\n              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property."
  overload: TensorFlow.TFGraph.QuantizedReshape*
  exceptions: []
- uid: TensorFlow.TFGraph.QuantizedResizeBilinear(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: QuantizedResizeBilinear(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: QuantizedResizeBilinear(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.QuantizedResizeBilinear(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.QuantizedResizeBilinear(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Resize quantized `images` to `size` using quantized bilinear interpolation.
  remarks: Input images and output images must be quantized types.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> QuantizedResizeBilinear (TensorFlow.TFOutput images, TensorFlow.TFOutput size, TensorFlow.TFOutput min, TensorFlow.TFOutput max, Nullable<bool> align_corners = null, string operName = null);
    parameters:
    - id: images
      type: TensorFlow.TFOutput
      description: 4-D with shape `[batch, height, width, channels]`.
    - id: size
      type: TensorFlow.TFOutput
      description: >-
        = A 1-D int32 Tensor of 2 elements: `new_height, new_width`.  The
                      new size for the images.
    - id: min
      type: TensorFlow.TFOutput
      description: To be added.
    - id: max
      type: TensorFlow.TFOutput
      description: To be added.
    - id: align_corners
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true, rescale input by (new_height - 1) / (height - 1), which
                      exactly aligns the 4 corners of images and resized images. If false, rescale
                      by new_height / height. Treat similarly the width dimension.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedResizeBilinear'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: "Returns a tuple with multiple values, as follows:\n              resized_images: 4-D with shape\n              `[batch, new_height, new_width, channels]`.\n              out_min: \n              out_max: \n              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property."
  overload: TensorFlow.TFGraph.QuantizedResizeBilinear*
  exceptions: []
- uid: TensorFlow.TFGraph.QuantizeV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.String,System.String)
  id: QuantizeV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: QuantizeV2(TFOutput, TFOutput, TFOutput, TFDataType, String, String)
  nameWithType: TFGraph.QuantizeV2(TFOutput, TFOutput, TFOutput, TFDataType, String, String)
  fullName: TFGraph.QuantizeV2(TFOutput, TFOutput, TFOutput, TFDataType, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Quantize the 'input' tensor of type float to 'output' tensor of type 'T'.
  remarks: "[min_range, max_range] are scalar floats that specify the range for\n              the 'input' data. The 'mode' attribute controls exactly which calculations are\n              used to convert the float values to their quantized equivalents.\n              \n              In 'MIN_COMBINED' mode, each value of the tensor will undergo the following:\n              \n              ```\n              out[i] = (in[i] - min_range) * range(T) / (max_range - min_range)\n              if T == qint8, out[i] -= (range(T) + 1) / 2.0\n              ```\n              here `range(T) = numeric_limits&lt;T&gt;::max() - numeric_limits&lt;T&gt;::min()`\n              \n              *MIN_COMBINED Mode Example*\n              \n              Assume the input is type float and has a possible range of [0.0, 6.0] and the\n              output type is quint8 ([0, 255]). The min_range and max_range values should be\n              specified as 0.0 and 6.0. Quantizing from float to quint8 will multiply each\n              value of the input by 255/6 and cast to quint8.\n              \n              If the output type was qint8 ([-128, 127]), the operation will additionally\n              subtract each value by 128 prior to casting, so that the range of values aligns\n              with the range of qint8.\n              \n              If the mode is 'MIN_FIRST', then this approach is used:\n              \n              ```\n              number_of_steps = 1 &lt;&lt; (# of bits in T)\n              range_adjust = number_of_steps / (number_of_steps - 1)\n              range = (range_max - range_min) * range_adjust\n              range_scale = number_of_steps / range\n              quantized = round(input * range_scale) - round(range_min * range_scale) +\n                numeric_limits&lt;T&gt;::min()\n              quantized = max(quantized, numeric_limits&lt;T&gt;::min())\n              quantized = min(quantized, numeric_limits&lt;T&gt;::max())\n              ```\n              \n              The biggest difference between this and MIN_COMBINED is that the minimum range\n              is rounded first, before it's subtracted from the rounded value. With\n              MIN_COMBINED, a small bias is introduced where repeated iterations of quantizing\n              and dequantizing will introduce a larger and larger error.\n              \n              One thing to watch out for is that the operator may choose to adjust the\n              requested minimum and maximum values slightly during the quantization process,\n              so you should always use the output ports as the range for further calculations.\n              For example, if the requested minimum and maximum values are close to equal,\n              they will be separated by a small epsilon value to prevent ill-formed quantized\n              buffers from being created. Otherwise, you can end up with buffers where all the\n              quantized values map to the same float value, which causes problems for\n              operations that have to perform further calculations on them."
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> QuantizeV2 (TensorFlow.TFOutput input, TensorFlow.TFOutput min_range, TensorFlow.TFOutput max_range, TensorFlow.TFDataType T, string mode = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: To be added.
    - id: min_range
      type: TensorFlow.TFOutput
      description: The minimum scalar value possibly produced for the input.
    - id: max_range
      type: TensorFlow.TFOutput
      description: The maximum scalar value possibly produced for the input.
    - id: T
      type: TensorFlow.TFDataType
      description: To be added.
    - id: mode
      type: System.String
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizeV2'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      output: The quantized data produced from the float input.
                      output_min: The actual minimum scalar value used for the output.
                      output_max: The actual maximum scalar value used for the output.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.QuantizeV2*
  exceptions: []
- uid: TensorFlow.TFGraph.QueueCloseV2(TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: QueueCloseV2(TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: QueueCloseV2(TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.QueueCloseV2(TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.QueueCloseV2(TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Closes the given queue.
  remarks: >-
    This operation signals that no more elements will be enqueued in the
                  given queue. Subsequent Enqueue(Many) operations will fail.
                  Subsequent Dequeue(Many) operations will continue to succeed if
                  sufficient elements remain in the queue. Subsequent Dequeue(Many)
                  operations that would block will fail immediately.
  syntax:
    content: public TensorFlow.TFOperation QueueCloseV2 (TensorFlow.TFOutput handle, Nullable<bool> cancel_pending_enqueues = null, string operName = null);
    parameters:
    - id: handle
      type: TensorFlow.TFOutput
      description: The handle to a queue.
    - id: cancel_pending_enqueues
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true, all pending enqueue requests that are
                      blocked on the given queue will be canceled.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'QueueCloseV2'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.QueueCloseV2*
  exceptions: []
- uid: TensorFlow.TFGraph.QueueDequeueManyV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.String)
  id: QueueDequeueManyV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: QueueDequeueManyV2(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, String)
  nameWithType: TFGraph.QueueDequeueManyV2(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, String)
  fullName: TFGraph.QueueDequeueManyV2(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Dequeues `n` tuples of one or more tensors from the given queue.
  remarks: "If the queue is closed and there are fewer than `n` elements, then an\n              OutOfRange error is returned.\n              \n              This operation concatenates queue-element component tensors along the\n              0th dimension to make a single component tensor.  All of the components\n              in the dequeued tuple will have size `n` in the 0th dimension.\n              \n              This operation has `k` outputs, where `k` is the number of components in\n              the tuples stored in the given queue, and output `i` is the ith\n              component of the dequeued tuple.\n              \n              N.B. If the queue is empty, this operation will block until `n` elements\n              have been dequeued (or 'timeout_ms' elapses, if specified)."
  syntax:
    content: public TensorFlow.TFOutput[] QueueDequeueManyV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput n, TensorFlow.TFDataType[] component_types, Nullable<long> timeout_ms = null, string operName = null);
    parameters:
    - id: handle
      type: TensorFlow.TFOutput
      description: The handle to a queue.
    - id: n
      type: TensorFlow.TFOutput
      description: The number of tuples to dequeue.
    - id: component_types
      type: TensorFlow.TFDataType[]
      description: The type of each component in a tuple.
    - id: timeout_ms
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      If the queue has fewer than n elements, this operation
                      will block for up to timeout_ms milliseconds.
                      Note: This option is not supported yet.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'QueueDequeueManyV2'.
    return:
      type: TensorFlow.TFOutput[]
      description: >-
        One or more tensors that were dequeued as a tuple.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.QueueDequeueManyV2*
  exceptions: []
- uid: TensorFlow.TFGraph.QueueDequeueUpToV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.String)
  id: QueueDequeueUpToV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: QueueDequeueUpToV2(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, String)
  nameWithType: TFGraph.QueueDequeueUpToV2(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, String)
  fullName: TFGraph.QueueDequeueUpToV2(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Dequeues `n` tuples of one or more tensors from the given queue.
  remarks: "This operation is not supported by all queues.  If a queue does not support\n              DequeueUpTo, then an Unimplemented error is returned.\n              \n              If the queue is closed and there are more than 0 but less than `n`\n              elements remaining, then instead of returning an OutOfRange error like\n              QueueDequeueMany, less than `n` elements are returned immediately.  If\n              the queue is closed and there are 0 elements left in the queue, then\n              an OutOfRange error is returned just like in QueueDequeueMany.\n              Otherwise the behavior is identical to QueueDequeueMany:\n              \n              This operation concatenates queue-element component tensors along the\n              0th dimension to make a single component tensor.  All of the components\n              in the dequeued tuple will have size n in the 0th dimension.\n              \n              This operation has `k` outputs, where `k` is the number of components in\n              the tuples stored in the given queue, and output `i` is the ith\n              component of the dequeued tuple."
  syntax:
    content: public TensorFlow.TFOutput[] QueueDequeueUpToV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput n, TensorFlow.TFDataType[] component_types, Nullable<long> timeout_ms = null, string operName = null);
    parameters:
    - id: handle
      type: TensorFlow.TFOutput
      description: The handle to a queue.
    - id: n
      type: TensorFlow.TFOutput
      description: The number of tuples to dequeue.
    - id: component_types
      type: TensorFlow.TFDataType[]
      description: The type of each component in a tuple.
    - id: timeout_ms
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      If the queue has fewer than n elements, this operation
                      will block for up to timeout_ms milliseconds.
                      Note: This option is not supported yet.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'QueueDequeueUpToV2'.
    return:
      type: TensorFlow.TFOutput[]
      description: >-
        One or more tensors that were dequeued as a tuple.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.QueueDequeueUpToV2*
  exceptions: []
- uid: TensorFlow.TFGraph.QueueDequeueV2(TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.String)
  id: QueueDequeueV2(TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: QueueDequeueV2(TFOutput, TFDataType[], Nullable<Int64>, String)
  nameWithType: TFGraph.QueueDequeueV2(TFOutput, TFDataType[], Nullable<Int64>, String)
  fullName: TFGraph.QueueDequeueV2(TFOutput, TFDataType[], Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Dequeues a tuple of one or more tensors from the given queue.
  remarks: "This operation has k outputs, where k is the number of components\n              in the tuples stored in the given queue, and output i is the ith\n              component of the dequeued tuple.\n              \n              N.B. If the queue is empty, this operation will block until an element\n              has been dequeued (or 'timeout_ms' elapses, if specified)."
  syntax:
    content: public TensorFlow.TFOutput[] QueueDequeueV2 (TensorFlow.TFOutput handle, TensorFlow.TFDataType[] component_types, Nullable<long> timeout_ms = null, string operName = null);
    parameters:
    - id: handle
      type: TensorFlow.TFOutput
      description: The handle to a queue.
    - id: component_types
      type: TensorFlow.TFDataType[]
      description: The type of each component in a tuple.
    - id: timeout_ms
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      If the queue is empty, this operation will block for up to
                      timeout_ms milliseconds.
                      Note: This option is not supported yet.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'QueueDequeueV2'.
    return:
      type: TensorFlow.TFOutput[]
      description: >-
        One or more tensors that were dequeued as a tuple.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.QueueDequeueV2*
  exceptions: []
- uid: TensorFlow.TFGraph.QueueEnqueueManyV2(TensorFlow.TFOutput,TensorFlow.TFOutput[],System.Nullable{System.Int64},System.String)
  id: QueueEnqueueManyV2(TensorFlow.TFOutput,TensorFlow.TFOutput[],System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: QueueEnqueueManyV2(TFOutput, TFOutput[], Nullable<Int64>, String)
  nameWithType: TFGraph.QueueEnqueueManyV2(TFOutput, TFOutput[], Nullable<Int64>, String)
  fullName: TFGraph.QueueEnqueueManyV2(TFOutput, TFOutput[], Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Enqueues zero or more tuples of one or more tensors in the given queue.
  remarks: "This operation slices each component tensor along the 0th dimension to\n              make multiple queue elements. All of the tuple components must have the\n              same size in the 0th dimension.\n              \n              The components input has k elements, which correspond to the components of\n              tuples stored in the given queue.\n              \n              N.B. If the queue is full, this operation will block until the given\n              elements have been enqueued (or 'timeout_ms' elapses, if specified)."
  syntax:
    content: public TensorFlow.TFOperation QueueEnqueueManyV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput[] components, Nullable<long> timeout_ms = null, string operName = null);
    parameters:
    - id: handle
      type: TensorFlow.TFOutput
      description: The handle to a queue.
    - id: components
      type: TensorFlow.TFOutput[]
      description: >-
        One or more tensors from which the enqueued tensors should
                      be taken.
    - id: timeout_ms
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      If the queue is too full, this operation will block for up
                      to timeout_ms milliseconds.
                      Note: This option is not supported yet.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'QueueEnqueueManyV2'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.QueueEnqueueManyV2*
  exceptions: []
- uid: TensorFlow.TFGraph.QueueEnqueueV2(TensorFlow.TFOutput,TensorFlow.TFOutput[],System.Nullable{System.Int64},System.String)
  id: QueueEnqueueV2(TensorFlow.TFOutput,TensorFlow.TFOutput[],System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: QueueEnqueueV2(TFOutput, TFOutput[], Nullable<Int64>, String)
  nameWithType: TFGraph.QueueEnqueueV2(TFOutput, TFOutput[], Nullable<Int64>, String)
  fullName: TFGraph.QueueEnqueueV2(TFOutput, TFOutput[], Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Enqueues a tuple of one or more tensors in the given queue.
  remarks: "The components input has k elements, which correspond to the components of\n              tuples stored in the given queue.\n              \n              N.B. If the queue is full, this operation will block until the given\n              element has been enqueued (or 'timeout_ms' elapses, if specified)."
  syntax:
    content: public TensorFlow.TFOperation QueueEnqueueV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput[] components, Nullable<long> timeout_ms = null, string operName = null);
    parameters:
    - id: handle
      type: TensorFlow.TFOutput
      description: The handle to a queue.
    - id: components
      type: TensorFlow.TFOutput[]
      description: One or more tensors from which the enqueued tensors should be taken.
    - id: timeout_ms
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      If the queue is full, this operation will block for up to
                      timeout_ms milliseconds.
                      Note: This option is not supported yet.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'QueueEnqueueV2'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.QueueEnqueueV2*
  exceptions: []
- uid: TensorFlow.TFGraph.QueueSizeV2(TensorFlow.TFOutput,System.String)
  id: QueueSizeV2(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: QueueSizeV2(TFOutput, String)
  nameWithType: TFGraph.QueueSizeV2(TFOutput, String)
  fullName: TFGraph.QueueSizeV2(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the number of elements in the given queue.
  syntax:
    content: public TensorFlow.TFOutput QueueSizeV2 (TensorFlow.TFOutput handle, string operName = null);
    parameters:
    - id: handle
      type: TensorFlow.TFOutput
      description: The handle to a queue.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'QueueSizeV2'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The number of elements in the given queue.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.QueueSizeV2*
  exceptions: []
- uid: TensorFlow.TFGraph.RandomCrop(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  id: RandomCrop(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: RandomCrop(TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.RandomCrop(TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.RandomCrop(TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Randomly crop `image`.
  remarks: "`size` is a 1-D int64 tensor with 2 elements representing the crop height and\n              width.  The values must be non negative.\n              \n              This Op picks a random location in `image` and crops a `height` by `width`\n              rectangle from that location.  The random location is picked so the cropped\n              area will fit inside the original image."
  syntax:
    content: public TensorFlow.TFOutput RandomCrop (TensorFlow.TFOutput image, TensorFlow.TFOutput size, Nullable<long> seed = null, Nullable<long> seed2 = null, string operName = null);
    parameters:
    - id: image
      type: TensorFlow.TFOutput
      description: 3-D of shape `[height, width, channels]`.
    - id: size
      type: TensorFlow.TFOutput
      description: '1-D of length 2 containing: `crop_height`, `crop_width`..'
    - id: seed
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      If either seed or seed2 are set to be non-zero, the random number
                      generator is seeded by the given seed.  Otherwise, it is seeded by a
                      random seed.
    - id: seed2
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      An second seed to avoid seed collision.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'RandomCrop'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        3-D of shape `[crop_height, crop_width, channels].`
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.RandomCrop*
  exceptions: []
- uid: TensorFlow.TFGraph.RandomGamma(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  id: RandomGamma(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: RandomGamma(TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.RandomGamma(TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.RandomGamma(TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Outputs random values from the Gamma distribution(s) described by alpha.
  remarks: >-
    This op uses the algorithm by Marsaglia et al. to acquire samples via
                  transformation-rejection from pairs of uniform and normal random variables.
                  See http://dl.acm.org/citation.cfm?id=358414
  syntax:
    content: public TensorFlow.TFOutput RandomGamma (TensorFlow.TFOutput shape, TensorFlow.TFOutput alpha, Nullable<long> seed = null, Nullable<long> seed2 = null, string operName = null);
    parameters:
    - id: shape
      type: TensorFlow.TFOutput
      description: >-
        1-D integer tensor. Shape of independent samples to draw from each
                      distribution described by the shape parameters given in alpha.
    - id: alpha
      type: TensorFlow.TFOutput
      description: >-
        A tensor in which each scalar is a "shape" parameter describing the
                      associated gamma distribution.
    - id: seed
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      If either `seed` or `seed2` are set to be non-zero, the random number
                      generator is seeded by the given seed.  Otherwise, it is seeded by a
                      random seed.
    - id: seed2
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      A second seed to avoid seed collision.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'RandomGamma'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        A tensor with shape `shape + shape(alpha)`. Each slice
                      `[:, ..., :, i0, i1, ...iN]` contains the samples drawn for
                      `alpha[i0, i1, ...iN]`. The dtype of the output matches the dtype of alpha.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.RandomGamma*
  exceptions: []
- uid: TensorFlow.TFGraph.RandomNormal(TensorFlow.TFShape,System.Double,System.Double,System.Nullable{System.Int32},System.String)
  id: RandomNormal(TensorFlow.TFShape,System.Double,System.Double,System.Nullable{System.Int32},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: RandomNormal(TFShape, Double, Double, Nullable<Int32>, String)
  nameWithType: TFGraph.RandomNormal(TFShape, Double, Double, Nullable<Int32>, String)
  fullName: TFGraph.RandomNormal(TFShape, Double, Double, Nullable<Int32>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Outputs random values from a normal distribution
  syntax:
    content: public TensorFlow.TFOutput RandomNormal (TensorFlow.TFShape shape, double mean = 0, double stddev = 1, Nullable<int> seed = null, string operName = null);
    parameters:
    - id: shape
      type: TensorFlow.TFShape
      description: Shape of the output tensor.
    - id: mean
      type: System.Double
      description: The mean of the standard distribution.
    - id: stddev
      type: System.Double
      description: The standard deviation of the normal distribution.
    - id: seed
      type: System.Nullable{System.Int32}
      description: Integer seed used for the random distribution, using the TensorFlow SetRandomSeed .
    - id: operName
      type: System.String
      description: Operation name, optional.
    return:
      type: TensorFlow.TFOutput
      description: A tensor of the specified shape filled with random normal values.
  overload: TensorFlow.TFGraph.RandomNormal*
  exceptions: []
- uid: TensorFlow.TFGraph.RandomPoisson(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  id: RandomPoisson(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: RandomPoisson(TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.RandomPoisson(TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.RandomPoisson(TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Outputs random values from the Poisson distribution(s) described by rate.
  remarks: "This op uses two algorithms, depending on rate. If rate &gt;= 10, then\n              the algorithm by Hormann is used to acquire samples via\n              transformation-rejection.\n              See http://www.sciencedirect.com/science/article/pii/0167668793909974.\n              \n              Otherwise, Knuth's algorithm is used to acquire samples via multiplying uniform\n              random variables.\n              See Donald E. Knuth (1969). Seminumerical Algorithms. The Art of Computer\n              Programming, Volume 2. Addison Wesley"
  syntax:
    content: public TensorFlow.TFOutput RandomPoisson (TensorFlow.TFOutput shape, TensorFlow.TFOutput rate, Nullable<long> seed = null, Nullable<long> seed2 = null, string operName = null);
    parameters:
    - id: shape
      type: TensorFlow.TFOutput
      description: >-
        1-D integer tensor. Shape of independent samples to draw from each
                      distribution described by the shape parameters given in rate.
    - id: rate
      type: TensorFlow.TFOutput
      description: >-
        A tensor in which each scalar is a "rate" parameter describing the
                      associated poisson distribution.
    - id: seed
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      If either `seed` or `seed2` are set to be non-zero, the random number
                      generator is seeded by the given seed.  Otherwise, it is seeded by a
                      random seed.
    - id: seed2
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      A second seed to avoid seed collision.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'RandomPoisson'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        A tensor with shape `shape + shape(rate)`. Each slice
                      `[:, ..., :, i0, i1, ...iN]` contains the samples drawn for
                      `rate[i0, i1, ...iN]`. The dtype of the output matches the dtype of
                      rate.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.RandomPoisson*
  exceptions: []
- uid: TensorFlow.TFGraph.RandomShuffle(TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  id: RandomShuffle(TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: RandomShuffle(TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.RandomShuffle(TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.RandomShuffle(TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Randomly shuffles a tensor along its first dimension.
  remarks: "The tensor is shuffled along dimension 0, such that each `value[j]` is mapped\n                to one and only one `output[i]`. For example, a mapping that might occur for a\n                3x2 tensor is:\n              \n              ```\n              [[1, 2],       [[5, 6],\n               [3, 4],  ==&gt;   [1, 2],\n               [5, 6]]        [3, 4]]\n              ```"
  syntax:
    content: public TensorFlow.TFOutput RandomShuffle (TensorFlow.TFOutput value, Nullable<long> seed = null, Nullable<long> seed2 = null, string operName = null);
    parameters:
    - id: value
      type: TensorFlow.TFOutput
      description: The tensor to be shuffled.
    - id: seed
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      If either `seed` or `seed2` are set to be non-zero, the random number
                      generator is seeded by the given seed.  Otherwise, it is seeded by a
                      random seed.
    - id: seed2
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      A second seed to avoid seed collision.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'RandomShuffle'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        A tensor of same shape and type as `value`, shuffled along its first
                      dimension.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.RandomShuffle*
  exceptions: []
- uid: TensorFlow.TFGraph.RandomShuffleQueueV2(TensorFlow.TFDataType[],TensorFlow.TFShape[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  id: RandomShuffleQueueV2(TensorFlow.TFDataType[],TensorFlow.TFShape[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: RandomShuffleQueueV2(TFDataType[], TFShape[], Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.RandomShuffleQueueV2(TFDataType[], TFShape[], Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.RandomShuffleQueueV2(TFDataType[], TFShape[], Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: A queue that randomizes the order of elements.
  syntax:
    content: public TensorFlow.TFOutput RandomShuffleQueueV2 (TensorFlow.TFDataType[] component_types, TensorFlow.TFShape[] shapes = null, Nullable<long> capacity = null, Nullable<long> min_after_dequeue = null, Nullable<long> seed = null, Nullable<long> seed2 = null, string container = null, string shared_name = null, string operName = null);
    parameters:
    - id: component_types
      type: TensorFlow.TFDataType[]
      description: The type of each component in a value.
    - id: shapes
      type: TensorFlow.TFShape[]
      description: >-
        Optional argument
                      The shape of each component in a value. The length of this attr must
                      be either 0 or the same as the length of component_types. If the length of
                      this attr is 0, the shapes of queue elements are not constrained, and
                      only one element may be dequeued at a time.
    - id: capacity
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      The upper bound on the number of elements in this queue.
                      Negative numbers mean no limit.
    - id: min_after_dequeue
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      Dequeue will block unless there would be this
                      many elements after the dequeue or the queue is closed. This
                      ensures a minimum level of mixing of elements.
    - id: seed
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      If either seed or seed2 is set to be non-zero, the random number
                      generator is seeded by the given seed.  Otherwise, a random seed is used.
    - id: seed2
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      A second seed to avoid seed collision.
    - id: container
      type: System.String
      description: >-
        Optional argument
                      If non-empty, this queue is placed in the given container.
                      Otherwise, a default container is used.
    - id: shared_name
      type: System.String
      description: >-
        Optional argument
                      If non-empty, this queue will be shared under the given name
                      across multiple sessions.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'RandomShuffleQueueV2'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The handle to the queue.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.RandomShuffleQueueV2*
  exceptions: []
- uid: TensorFlow.TFGraph.RandomStandardNormal(TensorFlow.TFOutput,TensorFlow.TFDataType,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  id: RandomStandardNormal(TensorFlow.TFOutput,TensorFlow.TFDataType,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: RandomStandardNormal(TFOutput, TFDataType, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.RandomStandardNormal(TFOutput, TFDataType, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.RandomStandardNormal(TFOutput, TFDataType, Nullable<Int64>, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Outputs random values from a normal distribution.
  remarks: The generated values will have mean 0 and standard deviation 1.
  syntax:
    content: public TensorFlow.TFOutput RandomStandardNormal (TensorFlow.TFOutput shape, TensorFlow.TFDataType dtype, Nullable<long> seed = null, Nullable<long> seed2 = null, string operName = null);
    parameters:
    - id: shape
      type: TensorFlow.TFOutput
      description: The shape of the output tensor.
    - id: dtype
      type: TensorFlow.TFDataType
      description: The type of the output.
    - id: seed
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      If either `seed` or `seed2` are set to be non-zero, the random number
                      generator is seeded by the given seed.  Otherwise, it is seeded by a
                      random seed.
    - id: seed2
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      A second seed to avoid seed collision.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'RandomStandardNormal'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        A tensor of the specified shape filled with random normal values.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.RandomStandardNormal*
  exceptions: []
- uid: TensorFlow.TFGraph.RandomUniform(TensorFlow.TFOutput,TensorFlow.TFDataType,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  id: RandomUniform(TensorFlow.TFOutput,TensorFlow.TFDataType,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: RandomUniform(TFOutput, TFDataType, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.RandomUniform(TFOutput, TFDataType, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.RandomUniform(TFOutput, TFDataType, Nullable<Int64>, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Outputs random values from a uniform distribution.
  remarks: >-
    The generated values follow a uniform distribution in the range `[0, 1)`. The
                  lower bound 0 is included in the range, while the upper bound 1 is excluded.
  syntax:
    content: public TensorFlow.TFOutput RandomUniform (TensorFlow.TFOutput shape, TensorFlow.TFDataType dtype, Nullable<long> seed = null, Nullable<long> seed2 = null, string operName = null);
    parameters:
    - id: shape
      type: TensorFlow.TFOutput
      description: The shape of the output tensor.
    - id: dtype
      type: TensorFlow.TFDataType
      description: The type of the output.
    - id: seed
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      If either `seed` or `seed2` are set to be non-zero, the random number
                      generator is seeded by the given seed.  Otherwise, it is seeded by a
                      random seed.
    - id: seed2
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      A second seed to avoid seed collision.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'RandomUniform'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        A tensor of the specified shape filled with uniform random values.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.RandomUniform*
  exceptions: []
- uid: TensorFlow.TFGraph.RandomUniformInt(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  id: RandomUniformInt(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: RandomUniformInt(TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.RandomUniformInt(TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.RandomUniformInt(TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Outputs random integers from a uniform distribution.
  remarks: "The generated values are uniform integers in the range `[minval, maxval)`.\n              The lower bound `minval` is included in the range, while the upper bound\n              `maxval` is excluded.\n              \n              The random integers are slightly biased unless `maxval - minval` is an exact\n              power of two.  The bias is small for values of `maxval - minval` significantly\n              smaller than the range of the output (either `2^32` or `2^64`)."
  syntax:
    content: public TensorFlow.TFOutput RandomUniformInt (TensorFlow.TFOutput shape, TensorFlow.TFOutput minval, TensorFlow.TFOutput maxval, Nullable<long> seed = null, Nullable<long> seed2 = null, string operName = null);
    parameters:
    - id: shape
      type: TensorFlow.TFOutput
      description: The shape of the output tensor.
    - id: minval
      type: TensorFlow.TFOutput
      description: 0-D.  Inclusive lower bound on the generated integers.
    - id: maxval
      type: TensorFlow.TFOutput
      description: 0-D.  Exclusive upper bound on the generated integers.
    - id: seed
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      If either `seed` or `seed2` are set to be non-zero, the random number
                      generator is seeded by the given seed.  Otherwise, it is seeded by a
                      random seed.
    - id: seed2
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      A second seed to avoid seed collision.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'RandomUniformInt'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        A tensor of the specified shape filled with uniform random integers.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.RandomUniformInt*
  exceptions: []
- uid: TensorFlow.TFGraph.Range(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: Range(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Range(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.Range(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.Range(TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Creates a sequence of numbers.
  remarks: "This operation creates a sequence of numbers that begins at `start` and\n              extends by increments of `delta` up to but not including `limit`.\n              \n              For example:\n              \n              ```\n              # 'start' is 3\n              # 'limit' is 18\n              # 'delta' is 3\n              tf.range(start, limit, delta) ==&gt; [3, 6, 9, 12, 15]\n              ```"
  syntax:
    content: public TensorFlow.TFOutput Range (TensorFlow.TFOutput start, TensorFlow.TFOutput limit, TensorFlow.TFOutput delta, string operName = null);
    parameters:
    - id: start
      type: TensorFlow.TFOutput
      description: 0-D (scalar). First entry in the sequence.
    - id: limit
      type: TensorFlow.TFOutput
      description: 0-D (scalar). Upper limit of sequence, exclusive.
    - id: delta
      type: TensorFlow.TFOutput
      description: 0-D (scalar). Optional. Default is 1. Number that increments `start`.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Range'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        1-D.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Range*
  exceptions: []
- uid: TensorFlow.TFGraph.RangeDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  id: RangeDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: RangeDataset(TFOutput, TFOutput, TFOutput, TFDataType[], TFShape[], String)
  nameWithType: TFGraph.RangeDataset(TFOutput, TFOutput, TFOutput, TFDataType[], TFShape[], String)
  fullName: TFGraph.RangeDataset(TFOutput, TFOutput, TFOutput, TFDataType[], TFShape[], String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Creates a dataset with a range of values. Corresponds to python's xrange.
  syntax:
    content: public TensorFlow.TFOutput RangeDataset (TensorFlow.TFOutput start, TensorFlow.TFOutput stop, TensorFlow.TFOutput step, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);
    parameters:
    - id: start
      type: TensorFlow.TFOutput
      description: corresponds to start in python's xrange().
    - id: stop
      type: TensorFlow.TFOutput
      description: corresponds to stop in python's xrange().
    - id: step
      type: TensorFlow.TFOutput
      description: corresponds to step in python's xrange().
    - id: output_types
      type: TensorFlow.TFDataType[]
      description: To be added.
    - id: output_shapes
      type: TensorFlow.TFShape[]
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'RangeDataset'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.RangeDataset*
  exceptions: []
- uid: TensorFlow.TFGraph.Rank(TensorFlow.TFOutput,System.String)
  id: Rank(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Rank(TFOutput, String)
  nameWithType: TFGraph.Rank(TFOutput, String)
  fullName: TFGraph.Rank(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns the rank of a tensor.
  remarks: "This operation returns an integer representing the rank of `input`.\n              \n              For example:\n              \n              ```\n              # 't' is [[[1, 1, 1], [2, 2, 2]], [[3, 3, 3], [4, 4, 4]]]\n              # shape of tensor 't' is [2, 2, 3]\n              rank(t) ==&gt; 3\n              ```\n              \n              **Note**: The rank of a tensor is not the same as the rank of a matrix. The rank\n              of a tensor is the number of indices required to uniquely select each element\n              of the tensor. Rank is also known as \"order\", \"degree\", or \"ndims.\""
  syntax:
    content: public TensorFlow.TFOutput Rank (TensorFlow.TFOutput input, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Rank'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Rank*
  exceptions: []
- uid: TensorFlow.TFGraph.ReaderNumRecordsProducedV2(TensorFlow.TFOutput,System.String)
  id: ReaderNumRecordsProducedV2(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ReaderNumRecordsProducedV2(TFOutput, String)
  nameWithType: TFGraph.ReaderNumRecordsProducedV2(TFOutput, String)
  fullName: TFGraph.ReaderNumRecordsProducedV2(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns the number of records this Reader has produced.
  remarks: >-
    This is the same as the number of ReaderRead executions that have
                  succeeded.
  syntax:
    content: public TensorFlow.TFOutput ReaderNumRecordsProducedV2 (TensorFlow.TFOutput reader_handle, string operName = null);
    parameters:
    - id: reader_handle
      type: TensorFlow.TFOutput
      description: Handle to a Reader.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ReaderNumRecordsProducedV2'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ReaderNumRecordsProducedV2*
  exceptions: []
- uid: TensorFlow.TFGraph.ReaderNumWorkUnitsCompletedV2(TensorFlow.TFOutput,System.String)
  id: ReaderNumWorkUnitsCompletedV2(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ReaderNumWorkUnitsCompletedV2(TFOutput, String)
  nameWithType: TFGraph.ReaderNumWorkUnitsCompletedV2(TFOutput, String)
  fullName: TFGraph.ReaderNumWorkUnitsCompletedV2(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns the number of work units this Reader has finished processing.
  syntax:
    content: public TensorFlow.TFOutput ReaderNumWorkUnitsCompletedV2 (TensorFlow.TFOutput reader_handle, string operName = null);
    parameters:
    - id: reader_handle
      type: TensorFlow.TFOutput
      description: Handle to a Reader.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ReaderNumWorkUnitsCompletedV2'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ReaderNumWorkUnitsCompletedV2*
  exceptions: []
- uid: TensorFlow.TFGraph.ReaderReadUpToV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: ReaderReadUpToV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ReaderReadUpToV2(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.ReaderReadUpToV2(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.ReaderReadUpToV2(TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns up to `num_records` (key, value) pairs produced by a Reader.
  remarks: >-
    Will dequeue from the input queue if necessary (e.g. when the
                  Reader needs to start reading from a new file since it has finished
                  with the previous file).
                  It may return less than `num_records` even before the last batch.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput> ReaderReadUpToV2 (TensorFlow.TFOutput reader_handle, TensorFlow.TFOutput queue_handle, TensorFlow.TFOutput num_records, string operName = null);
    parameters:
    - id: reader_handle
      type: TensorFlow.TFOutput
      description: Handle to a `Reader`.
    - id: queue_handle
      type: TensorFlow.TFOutput
      description: Handle to a `Queue`, with string work items.
    - id: num_records
      type: TensorFlow.TFOutput
      description: number of records to read from `Reader`.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ReaderReadUpToV2'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      keys: A 1-D tensor.
                      values: A 1-D tensor.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.ReaderReadUpToV2*
  exceptions: []
- uid: TensorFlow.TFGraph.ReaderReadV2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: ReaderReadV2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ReaderReadV2(TFOutput, TFOutput, String)
  nameWithType: TFGraph.ReaderReadV2(TFOutput, TFOutput, String)
  fullName: TFGraph.ReaderReadV2(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns the next record (key, value pair) produced by a Reader.
  remarks: >-
    Will dequeue from the input queue if necessary (e.g. when the
                  Reader needs to start reading from a new file since it has finished
                  with the previous file).
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput> ReaderReadV2 (TensorFlow.TFOutput reader_handle, TensorFlow.TFOutput queue_handle, string operName = null);
    parameters:
    - id: reader_handle
      type: TensorFlow.TFOutput
      description: Handle to a Reader.
    - id: queue_handle
      type: TensorFlow.TFOutput
      description: Handle to a Queue, with string work items.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ReaderReadV2'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      key: A scalar.
                      value: A scalar.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.ReaderReadV2*
  exceptions: []
- uid: TensorFlow.TFGraph.ReaderResetV2(TensorFlow.TFOutput,System.String)
  id: ReaderResetV2(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ReaderResetV2(TFOutput, String)
  nameWithType: TFGraph.ReaderResetV2(TFOutput, String)
  fullName: TFGraph.ReaderResetV2(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Restore a Reader to its initial clean state.
  syntax:
    content: public TensorFlow.TFOperation ReaderResetV2 (TensorFlow.TFOutput reader_handle, string operName = null);
    parameters:
    - id: reader_handle
      type: TensorFlow.TFOutput
      description: Handle to a Reader.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ReaderResetV2'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.ReaderResetV2*
  exceptions: []
- uid: TensorFlow.TFGraph.ReaderRestoreStateV2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: ReaderRestoreStateV2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ReaderRestoreStateV2(TFOutput, TFOutput, String)
  nameWithType: TFGraph.ReaderRestoreStateV2(TFOutput, TFOutput, String)
  fullName: TFGraph.ReaderRestoreStateV2(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Restore a reader to a previously saved state.
  remarks: >-
    Not all Readers support being restored, so this can produce an
                  Unimplemented error.
  syntax:
    content: public TensorFlow.TFOperation ReaderRestoreStateV2 (TensorFlow.TFOutput reader_handle, TensorFlow.TFOutput state, string operName = null);
    parameters:
    - id: reader_handle
      type: TensorFlow.TFOutput
      description: Handle to a Reader.
    - id: state
      type: TensorFlow.TFOutput
      description: >-
        Result of a ReaderSerializeState of a Reader with type
                      matching reader_handle.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ReaderRestoreStateV2'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.ReaderRestoreStateV2*
  exceptions: []
- uid: TensorFlow.TFGraph.ReaderSerializeStateV2(TensorFlow.TFOutput,System.String)
  id: ReaderSerializeStateV2(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ReaderSerializeStateV2(TFOutput, String)
  nameWithType: TFGraph.ReaderSerializeStateV2(TFOutput, String)
  fullName: TFGraph.ReaderSerializeStateV2(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Produce a string tensor that encodes the state of a Reader.
  remarks: >-
    Not all Readers support being serialized, so this can produce an
                  Unimplemented error.
  syntax:
    content: public TensorFlow.TFOutput ReaderSerializeStateV2 (TensorFlow.TFOutput reader_handle, string operName = null);
    parameters:
    - id: reader_handle
      type: TensorFlow.TFOutput
      description: Handle to a Reader.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ReaderSerializeStateV2'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ReaderSerializeStateV2*
  exceptions: []
- uid: TensorFlow.TFGraph.ReadFile(TensorFlow.TFOutput,System.String)
  id: ReadFile(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ReadFile(TFOutput, String)
  nameWithType: TFGraph.ReadFile(TFOutput, String)
  fullName: TFGraph.ReadFile(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Reads and outputs the entire contents of the input filename.
  syntax:
    content: public TensorFlow.TFOutput ReadFile (TensorFlow.TFOutput filename, string operName = null);
    parameters:
    - id: filename
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ReadFile'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ReadFile*
  exceptions: []
- uid: TensorFlow.TFGraph.ReadVariableOp(TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  id: ReadVariableOp(TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ReadVariableOp(TFOutput, TFDataType, String)
  nameWithType: TFGraph.ReadVariableOp(TFOutput, TFDataType, String)
  fullName: TFGraph.ReadVariableOp(TFOutput, TFDataType, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Reads the value of a variable.
  remarks: "The tensor returned by this operation is immutable.\n              \n              The value returned by this operation is guaranteed to be influenced by all the\n              writes on which this operation depends directly or indirectly, and to not be\n              influenced by any of the writes which depend directly or indirectly on this\n              operation."
  syntax:
    content: public TensorFlow.TFOutput ReadVariableOp (TensorFlow.TFOutput resource, TensorFlow.TFDataType dtype, string operName = null);
    parameters:
    - id: resource
      type: TensorFlow.TFOutput
      description: handle to the resource in which to store the variable.
    - id: dtype
      type: TensorFlow.TFDataType
      description: the dtype of the value.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ReadVariableOp'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ReadVariableOp*
  exceptions: []
- uid: TensorFlow.TFGraph.Real(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  id: Real(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Real(TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.Real(TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.Real(TFOutput, Nullable<TFDataType>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns the real part of a complex number.
  remarks: "Given a tensor `input` of complex numbers, this operation returns a tensor of\n              type `float` that is the real part of each element in `input`. All elements in\n              `input` must be complex numbers of the form \\\\(a + bj\\\\), where *a* is the real\n               part returned by this operation and *b* is the imaginary part.\n              \n              For example:\n              \n              ```\n              # tensor 'input' is [-2.25 + 4.75j, 3.25 + 5.75j]\n              tf.real(input) ==&gt; [-2.25, 3.25]\n              ```"
  syntax:
    content: public TensorFlow.TFOutput Real (TensorFlow.TFOutput input, Nullable<TensorFlow.TFDataType> Tout = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: To be added.
    - id: Tout
      type: System.Nullable{TensorFlow.TFDataType}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Real'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Real*
  exceptions: []
- uid: TensorFlow.TFGraph.RealDiv(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: RealDiv(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: RealDiv(TFOutput, TFOutput, String)
  nameWithType: TFGraph.RealDiv(TFOutput, TFOutput, String)
  fullName: TFGraph.RealDiv(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns x / y element-wise for real types.
  remarks: "If `x` and `y` are reals, this will return the floating-point division.\n              \n              *NOTE*: `Div` supports broadcasting. More about broadcasting\n              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)"
  syntax:
    content: public TensorFlow.TFOutput RealDiv (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'RealDiv'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.RealDiv*
  exceptions: []
- uid: TensorFlow.TFGraph.Reciprocal(TensorFlow.TFOutput,System.String)
  id: Reciprocal(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Reciprocal(TFOutput, String)
  nameWithType: TFGraph.Reciprocal(TFOutput, String)
  fullName: TFGraph.Reciprocal(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the reciprocal of x element-wise.
  remarks: I.e., \\(y = 1 / x\\).
  syntax:
    content: public TensorFlow.TFOutput Reciprocal (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Reciprocal'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Reciprocal*
  exceptions: []
- uid: TensorFlow.TFGraph.ReciprocalGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: ReciprocalGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ReciprocalGrad(TFOutput, TFOutput, String)
  nameWithType: TFGraph.ReciprocalGrad(TFOutput, TFOutput, String)
  fullName: TFGraph.ReciprocalGrad(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the gradient for the inverse of `x` wrt its input.
  remarks: >-
    Specifically, `grad = -dy * y*y`, where `y = 1/x`, and `dy`
                  is the corresponding input gradient.
  syntax:
    content: public TensorFlow.TFOutput ReciprocalGrad (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ReciprocalGrad'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ReciprocalGrad*
  exceptions: []
- uid: TensorFlow.TFGraph.RecordInput(System.String,System.Nullable{System.Int64},System.Nullable{System.Single},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  id: RecordInput(System.String,System.Nullable{System.Int64},System.Nullable{System.Single},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: RecordInput(String, Nullable<Int64>, Nullable<Single>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.RecordInput(String, Nullable<Int64>, Nullable<Single>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.RecordInput(String, Nullable<Int64>, Nullable<Single>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Emits randomized records.
  syntax:
    content: public TensorFlow.TFOutput RecordInput (string file_pattern, Nullable<long> file_random_seed = null, Nullable<float> file_shuffle_shift_ratio = null, Nullable<long> file_buffer_size = null, Nullable<long> file_parallelism = null, Nullable<long> batch_size = null, string operName = null);
    parameters:
    - id: file_pattern
      type: System.String
      description: Glob pattern for the data files.
    - id: file_random_seed
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      Random seeds used to produce randomized records.
    - id: file_shuffle_shift_ratio
      type: System.Nullable{System.Single}
      description: >-
        Optional argument
                      Shifts the list of files after the list is randomly
                      shuffled.
    - id: file_buffer_size
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      The randomization shuffling buffer.
    - id: file_parallelism
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      How many sstables are opened and concurrently iterated over.
    - id: batch_size
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      The batch size.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'RecordInput'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        A tensor of shape [batch_size].
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.RecordInput*
  exceptions: []
- uid: TensorFlow.TFGraph.ReduceJoin(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String,System.String)
  id: ReduceJoin(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ReduceJoin(TFOutput, TFOutput, Nullable<Boolean>, String, String)
  nameWithType: TFGraph.ReduceJoin(TFOutput, TFOutput, Nullable<Boolean>, String, String)
  fullName: TFGraph.ReduceJoin(TFOutput, TFOutput, Nullable<Boolean>, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Joins a string Tensor across the given dimensions.
  remarks: "Computes the string join across dimensions in the given string Tensor of shape\n              `[d_0, d_1, ..., d_n-1]`.  Returns a new Tensor created by joining the input\n              strings with the given separator (default: empty string).  Negative indices are\n              counted backwards from the end, with `-1` being equivalent to `n - 1`.\n              \n              For example:\n              \n              ```python\n              # tensor `a` is [[\"a\", \"b\"], [\"c\", \"d\"]]\n              tf.reduce_join(a, 0) ==&gt; [\"ac\", \"bd\"]\n              tf.reduce_join(a, 1) ==&gt; [\"ab\", \"cd\"]\n              tf.reduce_join(a, -2) = tf.reduce_join(a, 0) ==&gt; [\"ac\", \"bd\"]\n              tf.reduce_join(a, -1) = tf.reduce_join(a, 1) ==&gt; [\"ab\", \"cd\"]\n              tf.reduce_join(a, 0, keep_dims=True) ==&gt; [[\"ac\", \"bd\"]]\n              tf.reduce_join(a, 1, keep_dims=True) ==&gt; [[\"ab\"], [\"cd\"]]\n              tf.reduce_join(a, 0, separator=\".\") ==&gt; [\"a.c\", \"b.d\"]\n              tf.reduce_join(a, [0, 1]) ==&gt; [\"acbd\"]\n              tf.reduce_join(a, [1, 0]) ==&gt; [\"abcd\"]\n              tf.reduce_join(a, []) ==&gt; [\"abcd\"]\n              ```"
  syntax:
    content: public TensorFlow.TFOutput ReduceJoin (TensorFlow.TFOutput inputs, TensorFlow.TFOutput reduction_indices, Nullable<bool> keep_dims = null, string separator = null, string operName = null);
    parameters:
    - id: inputs
      type: TensorFlow.TFOutput
      description: The input to be joined.  All reduced indices must have non-zero size.
    - id: reduction_indices
      type: TensorFlow.TFOutput
      description: >-
        The dimensions to reduce over.  Dimensions are reduced in the
                      order specified.  Omitting `reduction_indices` is equivalent to passing
                      `[n-1, n-2, ..., 0]`.  Negative indices from `-n` to `-1` are supported.
    - id: keep_dims
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If `True`, retain reduced dimensions with length `1`.
    - id: separator
      type: System.String
      description: >-
        Optional argument
                      The separator to use when joining.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ReduceJoin'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Has shape equal to that of the input with reduced dimensions removed or
                      set to `1` depending on `keep_dims`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ReduceJoin*
  exceptions: []
- uid: TensorFlow.TFGraph.ReduceSum(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFOutput},System.Nullable{System.Boolean},System.String)
  id: ReduceSum(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFOutput},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ReduceSum(TFOutput, Nullable<TFOutput>, Nullable<Boolean>, String)
  nameWithType: TFGraph.ReduceSum(TFOutput, Nullable<TFOutput>, Nullable<Boolean>, String)
  fullName: TFGraph.ReduceSum(TFOutput, Nullable<TFOutput>, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the sum of elements across dimensions of a tensor.
  remarks: "Reduces input_tensor along the dimensions given in axis.\n            Unless keep_dims is true, the rank of the tensor is reduced by 1 for each\n            entry in axis. If keep_dims is true, the reduced dimensions\n            are retained with length 1.\n            \n            If axis has no entries, all dimensions are reduced, and a\n            tensor with a single element is returned."
  syntax:
    content: public TensorFlow.TFOutput ReduceSum (TensorFlow.TFOutput input, Nullable<TensorFlow.TFOutput> axis = null, Nullable<bool> keep_dims = false, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: The tensor to reduce. Should have numeric type.
    - id: axis
      type: System.Nullable{TensorFlow.TFOutput}
      description: The dimensions to reduce. If not se (the default), reduces all dimensions.
    - id: keep_dims
      type: System.Nullable{System.Boolean}
      description: If set to <code>true</code> retains reduced dimensions with length 1.
    - id: operName
      type: System.String
      description: A name for the operation, optional.
    return:
      type: TensorFlow.TFOutput
      description: The reduced tensor.
  overload: TensorFlow.TFGraph.ReduceSum*
  exceptions: []
- uid: TensorFlow.TFGraph.Relu(TensorFlow.TFOutput,System.String)
  id: Relu(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Relu(TFOutput, String)
  nameWithType: TFGraph.Relu(TFOutput, String)
  fullName: TFGraph.Relu(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: 'Computes rectified linear: `max(features, 0)`.'
  syntax:
    content: public TensorFlow.TFOutput Relu (TensorFlow.TFOutput features, string operName = null);
    parameters:
    - id: features
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Relu'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Relu*
  exceptions: []
- uid: TensorFlow.TFGraph.Relu6(TensorFlow.TFOutput,System.String)
  id: Relu6(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Relu6(TFOutput, String)
  nameWithType: TFGraph.Relu6(TFOutput, String)
  fullName: TFGraph.Relu6(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: 'Computes rectified linear 6: `min(max(features, 0), 6)`.'
  syntax:
    content: public TensorFlow.TFOutput Relu6 (TensorFlow.TFOutput features, string operName = null);
    parameters:
    - id: features
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Relu6'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Relu6*
  exceptions: []
- uid: TensorFlow.TFGraph.Relu6Grad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: Relu6Grad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Relu6Grad(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Relu6Grad(TFOutput, TFOutput, String)
  fullName: TFGraph.Relu6Grad(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes rectified linear 6 gradients for a Relu6 operation.
  syntax:
    content: public TensorFlow.TFOutput Relu6Grad (TensorFlow.TFOutput gradients, TensorFlow.TFOutput features, string operName = null);
    parameters:
    - id: gradients
      type: TensorFlow.TFOutput
      description: The backpropagated gradients to the corresponding Relu6 operation.
    - id: features
      type: TensorFlow.TFOutput
      description: The features passed as input to the corresponding Relu6 operation.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Relu6Grad'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The gradients:
                      `gradients * (features &gt; 0) * (features &lt; 6)`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Relu6Grad*
  exceptions: []
- uid: TensorFlow.TFGraph.ReluGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: ReluGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ReluGrad(TFOutput, TFOutput, String)
  nameWithType: TFGraph.ReluGrad(TFOutput, TFOutput, String)
  fullName: TFGraph.ReluGrad(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes rectified linear gradients for a Relu operation.
  syntax:
    content: public TensorFlow.TFOutput ReluGrad (TensorFlow.TFOutput gradients, TensorFlow.TFOutput features, string operName = null);
    parameters:
    - id: gradients
      type: TensorFlow.TFOutput
      description: The backpropagated gradients to the corresponding Relu operation.
    - id: features
      type: TensorFlow.TFOutput
      description: >-
        The features passed as input to the corresponding Relu operation, OR
                      the outputs of that operation (both work equivalently).
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ReluGrad'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        `gradients * (features &gt; 0)`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ReluGrad*
  exceptions: []
- uid: TensorFlow.TFGraph.RemoteFusedGraphExecute(TensorFlow.TFOutput[],TensorFlow.TFDataType[],System.String,System.String)
  id: RemoteFusedGraphExecute(TensorFlow.TFOutput[],TensorFlow.TFDataType[],System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: RemoteFusedGraphExecute(TFOutput[], TFDataType[], String, String)
  nameWithType: TFGraph.RemoteFusedGraphExecute(TFOutput[], TFDataType[], String, String)
  fullName: TFGraph.RemoteFusedGraphExecute(TFOutput[], TFDataType[], String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Execute a sub graph on a remote processor.
  remarks: >-
    The graph specifications(such as graph itself, input tensors and output names)
                  are stored as a serialized protocol buffer of RemoteFusedGraphExecuteInfo
                  as serialized_remote_fused_graph_execute_info.
                  The specifications will be passed to a dedicated registered
                  remote fused graph executor.  The executor will send the graph specifications
                  to a remote processor and execute that graph.  The execution results
                  will be passed to consumer nodes as outputs of this node.
  syntax:
    content: public TensorFlow.TFOutput[] RemoteFusedGraphExecute (TensorFlow.TFOutput[] inputs, TensorFlow.TFDataType[] Toutputs, string serialized_remote_fused_graph_execute_info, string operName = null);
    parameters:
    - id: inputs
      type: TensorFlow.TFOutput[]
      description: Arbitrary number of tensors with arbitrary data types
    - id: Toutputs
      type: TensorFlow.TFDataType[]
      description: To be added.
    - id: serialized_remote_fused_graph_execute_info
      type: System.String
      description: >-
        Serialized protocol buffer
                      of RemoteFusedGraphExecuteInfo which contains graph specifications.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'RemoteFusedGraphExecute'.
    return:
      type: TensorFlow.TFOutput[]
      description: >-
        Arbitrary number of tensors with arbitrary data types
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.RemoteFusedGraphExecute*
  exceptions: []
- uid: TensorFlow.TFGraph.RepeatDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  id: RepeatDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: RepeatDataset(TFOutput, TFOutput, TFDataType[], TFShape[], String)
  nameWithType: TFGraph.RepeatDataset(TFOutput, TFOutput, TFDataType[], TFShape[], String)
  fullName: TFGraph.RepeatDataset(TFOutput, TFOutput, TFDataType[], TFShape[], String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Creates a dataset that emits the outputs of `input_dataset` `count` times.
  syntax:
    content: public TensorFlow.TFOutput RepeatDataset (TensorFlow.TFOutput input_dataset, TensorFlow.TFOutput count, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);
    parameters:
    - id: input_dataset
      type: TensorFlow.TFOutput
      description: To be added.
    - id: count
      type: TensorFlow.TFOutput
      description: >-
        A scalar representing the number of times that `input_dataset` should
                      be repeated. A value of `-1` indicates that it should be repeated infinitely.
    - id: output_types
      type: TensorFlow.TFDataType[]
      description: To be added.
    - id: output_shapes
      type: TensorFlow.TFShape[]
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'RepeatDataset'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.RepeatDataset*
  exceptions: []
- uid: TensorFlow.TFGraph.RequantizationRange(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: RequantizationRange(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: RequantizationRange(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.RequantizationRange(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.RequantizationRange(TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Given a quantized tensor described by (input, input_min, input_max), outputs a
  remarks: >-
    range that covers the actual values present in that tensor.  This op is
                  typically used to produce the requested_output_min and requested_output_max for
                  Requantize.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput> RequantizationRange (TensorFlow.TFOutput input, TensorFlow.TFOutput input_min, TensorFlow.TFOutput input_max, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: To be added.
    - id: input_min
      type: TensorFlow.TFOutput
      description: The float value that the minimum quantized input value represents.
    - id: input_max
      type: TensorFlow.TFOutput
      description: The float value that the maximum quantized input value represents.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'RequantizationRange'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      output_min: The computed min output.
                      output_max: the computed max output.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.RequantizationRange*
  exceptions: []
- uid: TensorFlow.TFGraph.Requantize(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  id: Requantize(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Requantize(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFDataType, String)
  nameWithType: TFGraph.Requantize(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFDataType, String)
  fullName: TFGraph.Requantize(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFDataType, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Convert the quantized 'input' tensor into a lower-precision 'output', using the
  remarks: "output range specified with 'requested_output_min' and 'requested_output_max'.\n              \n              [input_min, input_max] are scalar floats that specify the range for the float\n              interpretation of the 'input' data. For example, if input_min is -1.0f and\n              input_max is 1.0f, and we are dealing with quint16 quantized data, then a 0\n              value in the 16-bit data should be interpreted as -1.0f, and a 65535 means 1.0f."
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> Requantize (TensorFlow.TFOutput input, TensorFlow.TFOutput input_min, TensorFlow.TFOutput input_max, TensorFlow.TFOutput requested_output_min, TensorFlow.TFOutput requested_output_max, TensorFlow.TFDataType out_type, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: To be added.
    - id: input_min
      type: TensorFlow.TFOutput
      description: The float value that the minimum quantized input value represents.
    - id: input_max
      type: TensorFlow.TFOutput
      description: The float value that the maximum quantized input value represents.
    - id: requested_output_min
      type: TensorFlow.TFOutput
      description: The float value that the minimum quantized output value represents.
    - id: requested_output_max
      type: TensorFlow.TFOutput
      description: The float value that the maximum quantized output value represents.
    - id: out_type
      type: TensorFlow.TFDataType
      description: The type of the output. Should be a lower bit depth than Tinput.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Requantize'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: "Returns a tuple with multiple values, as follows:\n              output: \n              output_min: The requested_output_min value is copied into this output.\n              output_max: The requested_output_max value is copied into this output.\n              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property."
  overload: TensorFlow.TFGraph.Requantize*
  exceptions: []
- uid: TensorFlow.TFGraph.Reshape(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: Reshape(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Reshape(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Reshape(TFOutput, TFOutput, String)
  fullName: TFGraph.Reshape(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Reshapes a tensor.
  remarks: "Given `tensor`, this operation returns a tensor that has the same values\n              as `tensor` with shape `shape`.\n              \n              If one component of `shape` is the special value -1, the size of that dimension\n              is computed so that the total size remains constant.  In particular, a `shape`\n              of `[-1]` flattens into 1-D.  At most one component of `shape` can be -1.\n              \n              If `shape` is 1-D or higher, then the operation returns a tensor with shape\n              `shape` filled with the values of `tensor`. In this case, the number of elements\n              implied by `shape` must be the same as the number of elements in `tensor`.\n              \n              For example:\n              \n              ```\n              # tensor 't' is [1, 2, 3, 4, 5, 6, 7, 8, 9]\n              # tensor 't' has shape [9]\n              reshape(t, [3, 3]) ==&gt; [[1, 2, 3],\n                                      [4, 5, 6],\n                                      [7, 8, 9]]\n              \n              # tensor 't' is [[[1, 1], [2, 2]],\n              #                [[3, 3], [4, 4]]]\n              # tensor 't' has shape [2, 2, 2]\n              reshape(t, [2, 4]) ==&gt; [[1, 1, 2, 2],\n                                      [3, 3, 4, 4]]\n              \n              # tensor 't' is [[[1, 1, 1],\n              #                 [2, 2, 2]],\n              #                [[3, 3, 3],\n              #                 [4, 4, 4]],\n              #                [[5, 5, 5],\n              #                 [6, 6, 6]]]\n              # tensor 't' has shape [3, 2, 3]\n              # pass '[-1]' to flatten 't'\n              reshape(t, [-1]) ==&gt; [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6]\n              \n              # -1 can also be used to infer the shape\n              \n              # -1 is inferred to be 9:\n              reshape(t, [2, -1]) ==&gt; [[1, 1, 1, 2, 2, 2, 3, 3, 3],\n                                       [4, 4, 4, 5, 5, 5, 6, 6, 6]]\n              # -1 is inferred to be 2:\n              reshape(t, [-1, 9]) ==&gt; [[1, 1, 1, 2, 2, 2, 3, 3, 3],\n                                       [4, 4, 4, 5, 5, 5, 6, 6, 6]]\n              # -1 is inferred to be 3:\n              reshape(t, [ 2, -1, 3]) ==&gt; [[[1, 1, 1],\n                                            [2, 2, 2],\n                                            [3, 3, 3]],\n                                           [[4, 4, 4],\n                                            [5, 5, 5],\n                                            [6, 6, 6]]]\n              \n              # tensor 't' is [7]\n              # shape `[]` reshapes to a scalar\n              reshape(t, []) ==&gt; 7\n              ```"
  syntax:
    content: public TensorFlow.TFOutput Reshape (TensorFlow.TFOutput tensor, TensorFlow.TFOutput shape, string operName = null);
    parameters:
    - id: tensor
      type: TensorFlow.TFOutput
      description: To be added.
    - id: shape
      type: TensorFlow.TFOutput
      description: Defines the shape of the output tensor.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Reshape'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Reshape*
  exceptions: []
- uid: TensorFlow.TFGraph.ResizeArea(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: ResizeArea(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ResizeArea(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResizeArea(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResizeArea(TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Resize `images` to `size` using area interpolation.
  remarks: Input images can be of different types but output images are always float.
  syntax:
    content: public TensorFlow.TFOutput ResizeArea (TensorFlow.TFOutput images, TensorFlow.TFOutput size, Nullable<bool> align_corners = null, string operName = null);
    parameters:
    - id: images
      type: TensorFlow.TFOutput
      description: 4-D with shape `[batch, height, width, channels]`.
    - id: size
      type: TensorFlow.TFOutput
      description: >-
        = A 1-D int32 Tensor of 2 elements: `new_height, new_width`.  The
                      new size for the images.
    - id: align_corners
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true, rescale input by (new_height - 1) / (height - 1), which
                      exactly aligns the 4 corners of images and resized images. If false, rescale
                      by new_height / height. Treat similarly the width dimension.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ResizeArea'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        4-D with shape
                      `[batch, new_height, new_width, channels]`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ResizeArea*
  exceptions: []
- uid: TensorFlow.TFGraph.ResizeBicubic(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: ResizeBicubic(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ResizeBicubic(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResizeBicubic(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResizeBicubic(TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Resize `images` to `size` using bicubic interpolation.
  remarks: Input images can be of different types but output images are always float.
  syntax:
    content: public TensorFlow.TFOutput ResizeBicubic (TensorFlow.TFOutput images, TensorFlow.TFOutput size, Nullable<bool> align_corners = null, string operName = null);
    parameters:
    - id: images
      type: TensorFlow.TFOutput
      description: 4-D with shape `[batch, height, width, channels]`.
    - id: size
      type: TensorFlow.TFOutput
      description: >-
        = A 1-D int32 Tensor of 2 elements: `new_height, new_width`.  The
                      new size for the images.
    - id: align_corners
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true, rescale input by (new_height - 1) / (height - 1), which
                      exactly aligns the 4 corners of images and resized images. If false, rescale
                      by new_height / height. Treat similarly the width dimension.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ResizeBicubic'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        4-D with shape
                      `[batch, new_height, new_width, channels]`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ResizeBicubic*
  exceptions: []
- uid: TensorFlow.TFGraph.ResizeBilinear(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: ResizeBilinear(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ResizeBilinear(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResizeBilinear(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResizeBilinear(TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Resize `images` to `size` using bilinear interpolation.
  remarks: Input images can be of different types but output images are always float.
  syntax:
    content: public TensorFlow.TFOutput ResizeBilinear (TensorFlow.TFOutput images, TensorFlow.TFOutput size, Nullable<bool> align_corners = null, string operName = null);
    parameters:
    - id: images
      type: TensorFlow.TFOutput
      description: 4-D with shape `[batch, height, width, channels]`.
    - id: size
      type: TensorFlow.TFOutput
      description: >-
        = A 1-D int32 Tensor of 2 elements: `new_height, new_width`.  The
                      new size for the images.
    - id: align_corners
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true, rescale input by (new_height - 1) / (height - 1), which
                      exactly aligns the 4 corners of images and resized images. If false, rescale
                      by new_height / height. Treat similarly the width dimension.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ResizeBilinear'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        4-D with shape
                      `[batch, new_height, new_width, channels]`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ResizeBilinear*
  exceptions: []
- uid: TensorFlow.TFGraph.ResizeBilinearGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: ResizeBilinearGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ResizeBilinearGrad(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResizeBilinearGrad(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResizeBilinearGrad(TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the gradient of bilinear interpolation.
  syntax:
    content: public TensorFlow.TFOutput ResizeBilinearGrad (TensorFlow.TFOutput grads, TensorFlow.TFOutput original_image, Nullable<bool> align_corners = null, string operName = null);
    parameters:
    - id: grads
      type: TensorFlow.TFOutput
      description: 4-D with shape `[batch, height, width, channels]`.
    - id: original_image
      type: TensorFlow.TFOutput
      description: >-
        4-D with shape `[batch, orig_height, orig_width, channels]`,
                      The image tensor that was resized.
    - id: align_corners
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true, rescale grads by (orig_height - 1) / (height - 1), which
                      exactly aligns the 4 corners of grads and original_image. If false, rescale by
                      orig_height / height. Treat similarly the width dimension.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ResizeBilinearGrad'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        4-D with shape `[batch, orig_height, orig_width, channels]`.
                      Gradients with respect to the input image. Input image must have been
                      float or double.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ResizeBilinearGrad*
  exceptions: []
- uid: TensorFlow.TFGraph.ResizeNearestNeighbor(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: ResizeNearestNeighbor(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ResizeNearestNeighbor(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResizeNearestNeighbor(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResizeNearestNeighbor(TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Resize `images` to `size` using nearest neighbor interpolation.
  syntax:
    content: public TensorFlow.TFOutput ResizeNearestNeighbor (TensorFlow.TFOutput images, TensorFlow.TFOutput size, Nullable<bool> align_corners = null, string operName = null);
    parameters:
    - id: images
      type: TensorFlow.TFOutput
      description: 4-D with shape `[batch, height, width, channels]`.
    - id: size
      type: TensorFlow.TFOutput
      description: >-
        = A 1-D int32 Tensor of 2 elements: `new_height, new_width`.  The
                      new size for the images.
    - id: align_corners
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true, rescale input by (new_height - 1) / (height - 1), which
                      exactly aligns the 4 corners of images and resized images. If false, rescale
                      by new_height / height. Treat similarly the width dimension.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ResizeNearestNeighbor'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        4-D with shape
                      `[batch, new_height, new_width, channels]`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ResizeNearestNeighbor*
  exceptions: []
- uid: TensorFlow.TFGraph.ResizeNearestNeighborGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: ResizeNearestNeighborGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ResizeNearestNeighborGrad(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResizeNearestNeighborGrad(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResizeNearestNeighborGrad(TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the gradient of nearest neighbor interpolation.
  syntax:
    content: public TensorFlow.TFOutput ResizeNearestNeighborGrad (TensorFlow.TFOutput grads, TensorFlow.TFOutput size, Nullable<bool> align_corners = null, string operName = null);
    parameters:
    - id: grads
      type: TensorFlow.TFOutput
      description: 4-D with shape `[batch, height, width, channels]`.
    - id: size
      type: TensorFlow.TFOutput
      description: >-
        = A 1-D int32 Tensor of 2 elements: `orig_height, orig_width`. The
                      original input size.
    - id: align_corners
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true, rescale grads by (orig_height - 1) / (height - 1), which
                      exactly aligns the 4 corners of grads and original_image. If false, rescale by
                      orig_height / height. Treat similarly the width dimension.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ResizeNearestNeighborGrad'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        4-D with shape `[batch, orig_height, orig_width, channels]`. Gradients
                      with respect to the input image.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ResizeNearestNeighborGrad*
  exceptions: []
- uid: TensorFlow.TFGraph.ResourceApplyAdadelta(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: ResourceApplyAdadelta(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ResourceApplyAdadelta(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceApplyAdadelta(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceApplyAdadelta(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Update '*var' according to the adadelta scheme.
  remarks: >-
    accum = rho() * accum + (1 - rho()) * grad.square();
                  update = (update_accum + epsilon).sqrt() * (accum + epsilon()).rsqrt() * grad;
                  update_accum = rho() * update_accum + (1 - rho()) * update.square();
                  var -= update;
  syntax:
    content: public TensorFlow.TFOperation ResourceApplyAdadelta (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput accum_update, TensorFlow.TFOutput lr, TensorFlow.TFOutput rho, TensorFlow.TFOutput epsilon, TensorFlow.TFOutput grad, Nullable<bool> use_locking = null, string operName = null);
    parameters:
    - id: var
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: accum
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: accum_update
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: lr
      type: TensorFlow.TFOutput
      description: Scaling factor. Must be a scalar.
    - id: rho
      type: TensorFlow.TFOutput
      description: Decay factor. Must be a scalar.
    - id: epsilon
      type: TensorFlow.TFOutput
      description: Constant factor. Must be a scalar.
    - id: grad
      type: TensorFlow.TFOutput
      description: The gradient.
    - id: use_locking
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If True, updating of the var, accum and update_accum tensors will be protected by
                      a lock; otherwise the behavior is undefined, but may exhibit less contention.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyAdadelta'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.ResourceApplyAdadelta*
  exceptions: []
- uid: TensorFlow.TFGraph.ResourceApplyAdagrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: ResourceApplyAdagrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ResourceApplyAdagrad(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceApplyAdagrad(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceApplyAdagrad(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Update '*var' according to the adagrad scheme.
  remarks: >-
    accum += grad * grad
                  var -= lr * grad * (1 / sqrt(accum))
  syntax:
    content: public TensorFlow.TFOperation ResourceApplyAdagrad (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput lr, TensorFlow.TFOutput grad, Nullable<bool> use_locking = null, string operName = null);
    parameters:
    - id: var
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: accum
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: lr
      type: TensorFlow.TFOutput
      description: Scaling factor. Must be a scalar.
    - id: grad
      type: TensorFlow.TFOutput
      description: The gradient.
    - id: use_locking
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If `True`, updating of the var and accum tensors will be protected
                      by a lock; otherwise the behavior is undefined, but may exhibit less
                      contention.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyAdagrad'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.ResourceApplyAdagrad*
  exceptions: []
- uid: TensorFlow.TFGraph.ResourceApplyAdagradDA(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: ResourceApplyAdagradDA(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ResourceApplyAdagradDA(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceApplyAdagradDA(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceApplyAdagradDA(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Update '*var' according to the proximal adagrad scheme.
  syntax:
    content: public TensorFlow.TFOperation ResourceApplyAdagradDA (TensorFlow.TFOutput var, TensorFlow.TFOutput gradient_accumulator, TensorFlow.TFOutput gradient_squared_accumulator, TensorFlow.TFOutput grad, TensorFlow.TFOutput lr, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput global_step, Nullable<bool> use_locking = null, string operName = null);
    parameters:
    - id: var
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: gradient_accumulator
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: gradient_squared_accumulator
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: grad
      type: TensorFlow.TFOutput
      description: The gradient.
    - id: lr
      type: TensorFlow.TFOutput
      description: Scaling factor. Must be a scalar.
    - id: l1
      type: TensorFlow.TFOutput
      description: L1 regularization. Must be a scalar.
    - id: l2
      type: TensorFlow.TFOutput
      description: L2 regularization. Must be a scalar.
    - id: global_step
      type: TensorFlow.TFOutput
      description: Training step number. Must be a scalar.
    - id: use_locking
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If True, updating of the var and accum tensors will be protected by
                      a lock; otherwise the behavior is undefined, but may exhibit less contention.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyAdagradDA'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.ResourceApplyAdagradDA*
  exceptions: []
- uid: TensorFlow.TFGraph.ResourceApplyAdam(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  id: ResourceApplyAdam(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ResourceApplyAdam(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceApplyAdam(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceApplyAdam(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Update '*var' according to the Adam algorithm.
  remarks: >-
    lr_t &lt;- learning_rate * sqrt(1 - beta2^t) / (1 - beta1^t)
                  m_t &lt;- beta1 * m_{t-1} + (1 - beta1) * g_t
                  v_t &lt;- beta2 * v_{t-1} + (1 - beta2) * g_t * g_t
                  variable &lt;- variable - lr_t * m_t / (sqrt(v_t) + epsilon)
  syntax:
    content: public TensorFlow.TFOperation ResourceApplyAdam (TensorFlow.TFOutput var, TensorFlow.TFOutput m, TensorFlow.TFOutput v, TensorFlow.TFOutput beta1_power, TensorFlow.TFOutput beta2_power, TensorFlow.TFOutput lr, TensorFlow.TFOutput beta1, TensorFlow.TFOutput beta2, TensorFlow.TFOutput epsilon, TensorFlow.TFOutput grad, Nullable<bool> use_locking = null, Nullable<bool> use_nesterov = null, string operName = null);
    parameters:
    - id: var
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: m
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: v
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: beta1_power
      type: TensorFlow.TFOutput
      description: Must be a scalar.
    - id: beta2_power
      type: TensorFlow.TFOutput
      description: Must be a scalar.
    - id: lr
      type: TensorFlow.TFOutput
      description: Scaling factor. Must be a scalar.
    - id: beta1
      type: TensorFlow.TFOutput
      description: Momentum factor. Must be a scalar.
    - id: beta2
      type: TensorFlow.TFOutput
      description: Momentum factor. Must be a scalar.
    - id: epsilon
      type: TensorFlow.TFOutput
      description: Ridge term. Must be a scalar.
    - id: grad
      type: TensorFlow.TFOutput
      description: The gradient.
    - id: use_locking
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If `True`, updating of the var, m, and v tensors will be protected
                      by a lock; otherwise the behavior is undefined, but may exhibit less
                      contention.
    - id: use_nesterov
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If `True`, uses the nesterov update.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyAdam'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.ResourceApplyAdam*
  exceptions: []
- uid: TensorFlow.TFGraph.ResourceApplyCenteredRMSProp(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: ResourceApplyCenteredRMSProp(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ResourceApplyCenteredRMSProp(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceApplyCenteredRMSProp(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceApplyCenteredRMSProp(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Update '*var' according to the centered RMSProp algorithm.
  remarks: "The centered RMSProp algorithm uses an estimate of the centered second moment\n              (i.e., the variance) for normalization, as opposed to regular RMSProp, which\n              uses the (uncentered) second moment. This often helps with training, but is\n              slightly more expensive in terms of computation and memory.\n              \n              Note that in dense implementation of this algorithm, mg, ms, and mom will\n              update even if the grad is zero, but in this sparse implementation, mg, ms,\n              and mom will not update in iterations during which the grad is zero.\n              \n              mean_square = decay * mean_square + (1-decay) * gradient ** 2\n              mean_grad = decay * mean_grad + (1-decay) * gradient\n              \n              Delta = learning_rate * gradient / sqrt(mean_square + epsilon - mean_grad ** 2)\n              \n              mg &lt;- rho * mg_{t-1} + (1-rho) * grad\n              ms &lt;- rho * ms_{t-1} + (1-rho) * grad * grad\n              mom &lt;- momentum * mom_{t-1} + lr * grad / sqrt(ms - mg * mg + epsilon)\n              var &lt;- var - mom"
  syntax:
    content: public TensorFlow.TFOperation ResourceApplyCenteredRMSProp (TensorFlow.TFOutput var, TensorFlow.TFOutput mg, TensorFlow.TFOutput ms, TensorFlow.TFOutput mom, TensorFlow.TFOutput lr, TensorFlow.TFOutput rho, TensorFlow.TFOutput momentum, TensorFlow.TFOutput epsilon, TensorFlow.TFOutput grad, Nullable<bool> use_locking = null, string operName = null);
    parameters:
    - id: var
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: mg
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: ms
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: mom
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: lr
      type: TensorFlow.TFOutput
      description: Scaling factor. Must be a scalar.
    - id: rho
      type: TensorFlow.TFOutput
      description: Decay rate. Must be a scalar.
    - id: momentum
      type: TensorFlow.TFOutput
      description: To be added.
    - id: epsilon
      type: TensorFlow.TFOutput
      description: Ridge term. Must be a scalar.
    - id: grad
      type: TensorFlow.TFOutput
      description: The gradient.
    - id: use_locking
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If `True`, updating of the var, mg, ms, and mom tensors is
                      protected by a lock; otherwise the behavior is undefined, but may exhibit less
                      contention.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyCenteredRMSProp'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.ResourceApplyCenteredRMSProp*
  exceptions: []
- uid: TensorFlow.TFGraph.ResourceApplyFtrl(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: ResourceApplyFtrl(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ResourceApplyFtrl(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceApplyFtrl(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceApplyFtrl(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Update '*var' according to the Ftrl-proximal scheme.
  remarks: >-
    accum_new = accum + grad * grad
                  linear += grad - (accum_new^(-lr_power) - accum^(-lr_power)) / lr * var
                  quadratic = 1.0 / (accum_new^(lr_power) * lr) + 2 * l2
                  var = (sign(linear) * l1 - linear) / quadratic if |linear| &gt; l1 else 0.0
                  accum = accum_new
  syntax:
    content: public TensorFlow.TFOperation ResourceApplyFtrl (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput linear, TensorFlow.TFOutput grad, TensorFlow.TFOutput lr, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput lr_power, Nullable<bool> use_locking = null, string operName = null);
    parameters:
    - id: var
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: accum
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: linear
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: grad
      type: TensorFlow.TFOutput
      description: The gradient.
    - id: lr
      type: TensorFlow.TFOutput
      description: Scaling factor. Must be a scalar.
    - id: l1
      type: TensorFlow.TFOutput
      description: L1 regulariation. Must be a scalar.
    - id: l2
      type: TensorFlow.TFOutput
      description: L2 regulariation. Must be a scalar.
    - id: lr_power
      type: TensorFlow.TFOutput
      description: Scaling factor. Must be a scalar.
    - id: use_locking
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If `True`, updating of the var and accum tensors will be protected
                      by a lock; otherwise the behavior is undefined, but may exhibit less
                      contention.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyFtrl'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.ResourceApplyFtrl*
  exceptions: []
- uid: TensorFlow.TFGraph.ResourceApplyGradientDescent(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: ResourceApplyGradientDescent(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ResourceApplyGradientDescent(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceApplyGradientDescent(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceApplyGradientDescent(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Update '*var' by subtracting 'alpha' * 'delta' from it.
  syntax:
    content: public TensorFlow.TFOperation ResourceApplyGradientDescent (TensorFlow.TFOutput var, TensorFlow.TFOutput alpha, TensorFlow.TFOutput delta, Nullable<bool> use_locking = null, string operName = null);
    parameters:
    - id: var
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: alpha
      type: TensorFlow.TFOutput
      description: Scaling factor. Must be a scalar.
    - id: delta
      type: TensorFlow.TFOutput
      description: The change.
    - id: use_locking
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If `True`, the subtraction will be protected by a lock;
                      otherwise the behavior is undefined, but may exhibit less contention.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyGradientDescent'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.ResourceApplyGradientDescent*
  exceptions: []
- uid: TensorFlow.TFGraph.ResourceApplyMomentum(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  id: ResourceApplyMomentum(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ResourceApplyMomentum(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceApplyMomentum(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceApplyMomentum(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Update '*var' according to the momentum scheme. Set use_nesterov = True if you
  remarks: "want to use Nesterov momentum.\n              \n              accum = accum * momentum + grad\n              var -= lr * accum"
  syntax:
    content: public TensorFlow.TFOperation ResourceApplyMomentum (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput lr, TensorFlow.TFOutput grad, TensorFlow.TFOutput momentum, Nullable<bool> use_locking = null, Nullable<bool> use_nesterov = null, string operName = null);
    parameters:
    - id: var
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: accum
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: lr
      type: TensorFlow.TFOutput
      description: Scaling factor. Must be a scalar.
    - id: grad
      type: TensorFlow.TFOutput
      description: The gradient.
    - id: momentum
      type: TensorFlow.TFOutput
      description: Momentum. Must be a scalar.
    - id: use_locking
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If `True`, updating of the var and accum tensors will be protected
                      by a lock; otherwise the behavior is undefined, but may exhibit less
                      contention.
    - id: use_nesterov
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If `True`, the tensor passed to compute grad will be
                      var - lr * momentum * accum, so in the end, the var you get is actually
                      var - lr * momentum * accum.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyMomentum'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.ResourceApplyMomentum*
  exceptions: []
- uid: TensorFlow.TFGraph.ResourceApplyProximalAdagrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: ResourceApplyProximalAdagrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ResourceApplyProximalAdagrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceApplyProximalAdagrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceApplyProximalAdagrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Update '*var' and '*accum' according to FOBOS with Adagrad learning rate.
  remarks: >-
    accum += grad * grad
                  prox_v = var - lr * grad * (1 / sqrt(accum))
                  var = sign(prox_v)/(1+lr*l2) * max{|prox_v|-lr*l1,0}
  syntax:
    content: public TensorFlow.TFOperation ResourceApplyProximalAdagrad (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput lr, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput grad, Nullable<bool> use_locking = null, string operName = null);
    parameters:
    - id: var
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: accum
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: lr
      type: TensorFlow.TFOutput
      description: Scaling factor. Must be a scalar.
    - id: l1
      type: TensorFlow.TFOutput
      description: L1 regularization. Must be a scalar.
    - id: l2
      type: TensorFlow.TFOutput
      description: L2 regularization. Must be a scalar.
    - id: grad
      type: TensorFlow.TFOutput
      description: The gradient.
    - id: use_locking
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If True, updating of the var and accum tensors will be protected by
                      a lock; otherwise the behavior is undefined, but may exhibit less contention.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyProximalAdagrad'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.ResourceApplyProximalAdagrad*
  exceptions: []
- uid: TensorFlow.TFGraph.ResourceApplyProximalGradientDescent(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: ResourceApplyProximalGradientDescent(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ResourceApplyProximalGradientDescent(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceApplyProximalGradientDescent(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceApplyProximalGradientDescent(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Update '*var' as FOBOS algorithm with fixed learning rate.
  remarks: >-
    prox_v = var - alpha * delta
                  var = sign(prox_v)/(1+alpha*l2) * max{|prox_v|-alpha*l1,0}
  syntax:
    content: public TensorFlow.TFOperation ResourceApplyProximalGradientDescent (TensorFlow.TFOutput var, TensorFlow.TFOutput alpha, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput delta, Nullable<bool> use_locking = null, string operName = null);
    parameters:
    - id: var
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: alpha
      type: TensorFlow.TFOutput
      description: Scaling factor. Must be a scalar.
    - id: l1
      type: TensorFlow.TFOutput
      description: L1 regularization. Must be a scalar.
    - id: l2
      type: TensorFlow.TFOutput
      description: L2 regularization. Must be a scalar.
    - id: delta
      type: TensorFlow.TFOutput
      description: The change.
    - id: use_locking
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If True, the subtraction will be protected by a lock;
                      otherwise the behavior is undefined, but may exhibit less contention.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyProximalGradientDescent'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.ResourceApplyProximalGradientDescent*
  exceptions: []
- uid: TensorFlow.TFGraph.ResourceApplyRMSProp(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: ResourceApplyRMSProp(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ResourceApplyRMSProp(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceApplyRMSProp(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceApplyRMSProp(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Update '*var' according to the RMSProp algorithm.
  remarks: "Note that in dense implementation of this algorithm, ms and mom will\n              update even if the grad is zero, but in this sparse implementation, ms\n              and mom will not update in iterations during which the grad is zero.\n              \n              mean_square = decay * mean_square + (1-decay) * gradient ** 2\n              Delta = learning_rate * gradient / sqrt(mean_square + epsilon)\n              \n              ms &lt;- rho * ms_{t-1} + (1-rho) * grad * grad\n              mom &lt;- momentum * mom_{t-1} + lr * grad / sqrt(ms + epsilon)\n              var &lt;- var - mom"
  syntax:
    content: public TensorFlow.TFOperation ResourceApplyRMSProp (TensorFlow.TFOutput var, TensorFlow.TFOutput ms, TensorFlow.TFOutput mom, TensorFlow.TFOutput lr, TensorFlow.TFOutput rho, TensorFlow.TFOutput momentum, TensorFlow.TFOutput epsilon, TensorFlow.TFOutput grad, Nullable<bool> use_locking = null, string operName = null);
    parameters:
    - id: var
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: ms
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: mom
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: lr
      type: TensorFlow.TFOutput
      description: Scaling factor. Must be a scalar.
    - id: rho
      type: TensorFlow.TFOutput
      description: Decay rate. Must be a scalar.
    - id: momentum
      type: TensorFlow.TFOutput
      description: To be added.
    - id: epsilon
      type: TensorFlow.TFOutput
      description: Ridge term. Must be a scalar.
    - id: grad
      type: TensorFlow.TFOutput
      description: The gradient.
    - id: use_locking
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If `True`, updating of the var, ms, and mom tensors is protected
                      by a lock; otherwise the behavior is undefined, but may exhibit less
                      contention.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyRMSProp'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.ResourceApplyRMSProp*
  exceptions: []
- uid: TensorFlow.TFGraph.ResourceGather(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.Nullable{System.Boolean},System.String)
  id: ResourceGather(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ResourceGather(TFOutput, TFOutput, TFDataType, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceGather(TFOutput, TFOutput, TFDataType, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceGather(TFOutput, TFOutput, TFDataType, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Gather slices from the variable pointed to by `resource` according to `indices`.
  remarks: "`indices` must be an integer tensor of any dimension (usually 0-D or 1-D).\n              Produces an output tensor with shape `indices.shape + params.shape[1:]` where:\n              \n              ```python\n                  # Scalar indices\n                  output[:, ..., :] = params[indices, :, ... :]\n              \n                  # Vector indices\n                  output[i, :, ..., :] = params[indices[i], :, ... :]\n              \n                  # Higher rank indices\n                  output[i, ..., j, :, ... :] = params[indices[i, ..., j], :, ..., :]\n              ```"
  syntax:
    content: public TensorFlow.TFOutput ResourceGather (TensorFlow.TFOutput resource, TensorFlow.TFOutput indices, TensorFlow.TFDataType dtype, Nullable<bool> validate_indices = null, string operName = null);
    parameters:
    - id: resource
      type: TensorFlow.TFOutput
      description: To be added.
    - id: indices
      type: TensorFlow.TFOutput
      description: To be added.
    - id: dtype
      type: TensorFlow.TFDataType
      description: To be added.
    - id: validate_indices
      type: System.Nullable{System.Boolean}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceGather'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ResourceGather*
  exceptions: []
- uid: TensorFlow.TFGraph.ResourceScatterAdd(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: ResourceScatterAdd(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ResourceScatterAdd(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.ResourceScatterAdd(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.ResourceScatterAdd(TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Adds sparse updates to the variable referenced by `resource`.
  remarks: "This operation computes\n              \n                  # Scalar indices\n                  ref[indices, ...] += updates[...]\n              \n                  # Vector indices (for each i)\n                  ref[indices[i], ...] += updates[i, ...]\n              \n                  # High rank indices (for each i, ..., j)\n                  ref[indices[i, ..., j], ...] += updates[i, ..., j, ...]\n              \n              Duplicate entries are handled correctly: if multiple `indices` reference\n              the same location, their contributions add.\n              \n              Requires `updates.shape = indices.shape + ref.shape[1:]`.\n              \n              &lt;div style=\"width:70%; margin:auto; margin-bottom:10px; margin-top:20px;\"&gt;\n              &lt;img style=\"width:100%\" src=\"https://www.tensorflow.org/images/ScatterAdd.png\" alt&gt;\n              &lt;/div&gt;"
  syntax:
    content: public TensorFlow.TFOperation ResourceScatterAdd (TensorFlow.TFOutput resource, TensorFlow.TFOutput indices, TensorFlow.TFOutput updates, string operName = null);
    parameters:
    - id: resource
      type: TensorFlow.TFOutput
      description: Should be from a `Variable` node.
    - id: indices
      type: TensorFlow.TFOutput
      description: A tensor of indices into the first dimension of `ref`.
    - id: updates
      type: TensorFlow.TFOutput
      description: A tensor of updated values to add to `ref`.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceScatterAdd'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.ResourceScatterAdd*
  exceptions: []
- uid: TensorFlow.TFGraph.ResourceSparseApplyAdadelta(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: ResourceSparseApplyAdadelta(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ResourceSparseApplyAdadelta(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceSparseApplyAdadelta(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceSparseApplyAdadelta(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: 'var: Should be from a Variable().'
  syntax:
    content: public TensorFlow.TFOperation ResourceSparseApplyAdadelta (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput accum_update, TensorFlow.TFOutput lr, TensorFlow.TFOutput rho, TensorFlow.TFOutput epsilon, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, Nullable<bool> use_locking = null, string operName = null);
    parameters:
    - id: var
      type: TensorFlow.TFOutput
      description: To be added.
    - id: accum
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: accum_update
      type: TensorFlow.TFOutput
      description: ': Should be from a Variable().'
    - id: lr
      type: TensorFlow.TFOutput
      description: Learning rate. Must be a scalar.
    - id: rho
      type: TensorFlow.TFOutput
      description: Decay factor. Must be a scalar.
    - id: epsilon
      type: TensorFlow.TFOutput
      description: Constant factor. Must be a scalar.
    - id: grad
      type: TensorFlow.TFOutput
      description: The gradient.
    - id: indices
      type: TensorFlow.TFOutput
      description: A vector of indices into the first dimension of var and accum.
    - id: use_locking
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If True, updating of the var and accum tensors will be protected by
                      a lock; otherwise the behavior is undefined, but may exhibit less contention.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceSparseApplyAdadelta'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.ResourceSparseApplyAdadelta*
  exceptions: []
- uid: TensorFlow.TFGraph.ResourceSparseApplyAdagrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: ResourceSparseApplyAdagrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ResourceSparseApplyAdagrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceSparseApplyAdagrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceSparseApplyAdagrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Update relevant entries in '*var' and '*accum' according to the adagrad scheme.
  remarks: >-
    That is for rows we have grad for, we update var and accum as follows:
                  accum += grad * grad
                  var -= lr * grad * (1 / sqrt(accum))
  syntax:
    content: public TensorFlow.TFOperation ResourceSparseApplyAdagrad (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput lr, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, Nullable<bool> use_locking = null, string operName = null);
    parameters:
    - id: var
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: accum
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: lr
      type: TensorFlow.TFOutput
      description: Learning rate. Must be a scalar.
    - id: grad
      type: TensorFlow.TFOutput
      description: The gradient.
    - id: indices
      type: TensorFlow.TFOutput
      description: A vector of indices into the first dimension of var and accum.
    - id: use_locking
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If `True`, updating of the var and accum tensors will be protected
                      by a lock; otherwise the behavior is undefined, but may exhibit less
                      contention.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceSparseApplyAdagrad'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.ResourceSparseApplyAdagrad*
  exceptions: []
- uid: TensorFlow.TFGraph.ResourceSparseApplyAdagradDA(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: ResourceSparseApplyAdagradDA(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ResourceSparseApplyAdagradDA(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceSparseApplyAdagradDA(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceSparseApplyAdagradDA(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Update entries in '*var' and '*accum' according to the proximal adagrad scheme.
  syntax:
    content: public TensorFlow.TFOperation ResourceSparseApplyAdagradDA (TensorFlow.TFOutput var, TensorFlow.TFOutput gradient_accumulator, TensorFlow.TFOutput gradient_squared_accumulator, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, TensorFlow.TFOutput lr, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput global_step, Nullable<bool> use_locking = null, string operName = null);
    parameters:
    - id: var
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: gradient_accumulator
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: gradient_squared_accumulator
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: grad
      type: TensorFlow.TFOutput
      description: The gradient.
    - id: indices
      type: TensorFlow.TFOutput
      description: A vector of indices into the first dimension of var and accum.
    - id: lr
      type: TensorFlow.TFOutput
      description: Learning rate. Must be a scalar.
    - id: l1
      type: TensorFlow.TFOutput
      description: L1 regularization. Must be a scalar.
    - id: l2
      type: TensorFlow.TFOutput
      description: L2 regularization. Must be a scalar.
    - id: global_step
      type: TensorFlow.TFOutput
      description: Training step number. Must be a scalar.
    - id: use_locking
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If True, updating of the var and accum tensors will be protected by
                      a lock; otherwise the behavior is undefined, but may exhibit less contention.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceSparseApplyAdagradDA'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.ResourceSparseApplyAdagradDA*
  exceptions: []
- uid: TensorFlow.TFGraph.ResourceSparseApplyCenteredRMSProp(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: ResourceSparseApplyCenteredRMSProp(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ResourceSparseApplyCenteredRMSProp(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceSparseApplyCenteredRMSProp(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceSparseApplyCenteredRMSProp(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Update '*var' according to the centered RMSProp algorithm.
  remarks: "The centered RMSProp algorithm uses an estimate of the centered second moment\n              (i.e., the variance) for normalization, as opposed to regular RMSProp, which\n              uses the (uncentered) second moment. This often helps with training, but is\n              slightly more expensive in terms of computation and memory.\n              \n              Note that in dense implementation of this algorithm, mg, ms, and mom will\n              update even if the grad is zero, but in this sparse implementation, mg, ms,\n              and mom will not update in iterations during which the grad is zero.\n              \n              mean_square = decay * mean_square + (1-decay) * gradient ** 2\n              mean_grad = decay * mean_grad + (1-decay) * gradient\n              Delta = learning_rate * gradient / sqrt(mean_square + epsilon - mean_grad ** 2)\n              \n              ms &lt;- rho * ms_{t-1} + (1-rho) * grad * grad\n              mom &lt;- momentum * mom_{t-1} + lr * grad / sqrt(ms + epsilon)\n              var &lt;- var - mom"
  syntax:
    content: public TensorFlow.TFOperation ResourceSparseApplyCenteredRMSProp (TensorFlow.TFOutput var, TensorFlow.TFOutput mg, TensorFlow.TFOutput ms, TensorFlow.TFOutput mom, TensorFlow.TFOutput lr, TensorFlow.TFOutput rho, TensorFlow.TFOutput momentum, TensorFlow.TFOutput epsilon, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, Nullable<bool> use_locking = null, string operName = null);
    parameters:
    - id: var
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: mg
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: ms
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: mom
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: lr
      type: TensorFlow.TFOutput
      description: Scaling factor. Must be a scalar.
    - id: rho
      type: TensorFlow.TFOutput
      description: Decay rate. Must be a scalar.
    - id: momentum
      type: TensorFlow.TFOutput
      description: To be added.
    - id: epsilon
      type: TensorFlow.TFOutput
      description: Ridge term. Must be a scalar.
    - id: grad
      type: TensorFlow.TFOutput
      description: The gradient.
    - id: indices
      type: TensorFlow.TFOutput
      description: A vector of indices into the first dimension of var, ms and mom.
    - id: use_locking
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If `True`, updating of the var, mg, ms, and mom tensors is
                      protected by a lock; otherwise the behavior is undefined, but may exhibit less
                      contention.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceSparseApplyCenteredRMSProp'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.ResourceSparseApplyCenteredRMSProp*
  exceptions: []
- uid: TensorFlow.TFGraph.ResourceSparseApplyFtrl(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: ResourceSparseApplyFtrl(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ResourceSparseApplyFtrl(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceSparseApplyFtrl(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceSparseApplyFtrl(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Update relevant entries in '*var' according to the Ftrl-proximal scheme.
  remarks: >-
    That is for rows we have grad for, we update var, accum and linear as follows:
                  accum_new = accum + grad * grad
                  linear += grad + (accum_new^(-lr_power) - accum^(-lr_power)) / lr * var
                  quadratic = 1.0 / (accum_new^(lr_power) * lr) + 2 * l2
                  var = (sign(linear) * l1 - linear) / quadratic if |linear| &gt; l1 else 0.0
                  accum = accum_new
  syntax:
    content: public TensorFlow.TFOperation ResourceSparseApplyFtrl (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput linear, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, TensorFlow.TFOutput lr, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput lr_power, Nullable<bool> use_locking = null, string operName = null);
    parameters:
    - id: var
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: accum
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: linear
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: grad
      type: TensorFlow.TFOutput
      description: The gradient.
    - id: indices
      type: TensorFlow.TFOutput
      description: A vector of indices into the first dimension of var and accum.
    - id: lr
      type: TensorFlow.TFOutput
      description: Scaling factor. Must be a scalar.
    - id: l1
      type: TensorFlow.TFOutput
      description: L1 regularization. Must be a scalar.
    - id: l2
      type: TensorFlow.TFOutput
      description: L2 regularization. Must be a scalar.
    - id: lr_power
      type: TensorFlow.TFOutput
      description: Scaling factor. Must be a scalar.
    - id: use_locking
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If `True`, updating of the var and accum tensors will be protected
                      by a lock; otherwise the behavior is undefined, but may exhibit less
                      contention.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceSparseApplyFtrl'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.ResourceSparseApplyFtrl*
  exceptions: []
- uid: TensorFlow.TFGraph.ResourceSparseApplyMomentum(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  id: ResourceSparseApplyMomentum(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ResourceSparseApplyMomentum(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceSparseApplyMomentum(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceSparseApplyMomentum(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Update relevant entries in '*var' and '*accum' according to the momentum scheme.
  remarks: "Set use_nesterov = True if you want to use Nesterov momentum.\n              \n              That is for rows we have grad for, we update var and accum as follows:\n              \n              accum = accum * momentum + grad\n              var -= lr * accum"
  syntax:
    content: public TensorFlow.TFOperation ResourceSparseApplyMomentum (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput lr, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, TensorFlow.TFOutput momentum, Nullable<bool> use_locking = null, Nullable<bool> use_nesterov = null, string operName = null);
    parameters:
    - id: var
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: accum
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: lr
      type: TensorFlow.TFOutput
      description: Learning rate. Must be a scalar.
    - id: grad
      type: TensorFlow.TFOutput
      description: The gradient.
    - id: indices
      type: TensorFlow.TFOutput
      description: A vector of indices into the first dimension of var and accum.
    - id: momentum
      type: TensorFlow.TFOutput
      description: Momentum. Must be a scalar.
    - id: use_locking
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If `True`, updating of the var and accum tensors will be protected
                      by a lock; otherwise the behavior is undefined, but may exhibit less
                      contention.
    - id: use_nesterov
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If `True`, the tensor passed to compute grad will be
                      var - lr * momentum * accum, so in the end, the var you get is actually
                      var - lr * momentum * accum.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceSparseApplyMomentum'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.ResourceSparseApplyMomentum*
  exceptions: []
- uid: TensorFlow.TFGraph.ResourceSparseApplyProximalAdagrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: ResourceSparseApplyProximalAdagrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ResourceSparseApplyProximalAdagrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceSparseApplyProximalAdagrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceSparseApplyProximalAdagrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Sparse update entries in '*var' and '*accum' according to FOBOS algorithm.
  remarks: >-
    That is for rows we have grad for, we update var and accum as follows:
                  accum += grad * grad
                  prox_v = var
                  prox_v -= lr * grad * (1 / sqrt(accum))
                  var = sign(prox_v)/(1+lr*l2) * max{|prox_v|-lr*l1,0}
  syntax:
    content: public TensorFlow.TFOperation ResourceSparseApplyProximalAdagrad (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput lr, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, Nullable<bool> use_locking = null, string operName = null);
    parameters:
    - id: var
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: accum
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: lr
      type: TensorFlow.TFOutput
      description: Learning rate. Must be a scalar.
    - id: l1
      type: TensorFlow.TFOutput
      description: L1 regularization. Must be a scalar.
    - id: l2
      type: TensorFlow.TFOutput
      description: L2 regularization. Must be a scalar.
    - id: grad
      type: TensorFlow.TFOutput
      description: The gradient.
    - id: indices
      type: TensorFlow.TFOutput
      description: A vector of indices into the first dimension of var and accum.
    - id: use_locking
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If True, updating of the var and accum tensors will be protected by
                      a lock; otherwise the behavior is undefined, but may exhibit less contention.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceSparseApplyProximalAdagrad'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.ResourceSparseApplyProximalAdagrad*
  exceptions: []
- uid: TensorFlow.TFGraph.ResourceSparseApplyProximalGradientDescent(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: ResourceSparseApplyProximalGradientDescent(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ResourceSparseApplyProximalGradientDescent(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceSparseApplyProximalGradientDescent(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceSparseApplyProximalGradientDescent(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Sparse update '*var' as FOBOS algorithm with fixed learning rate.
  remarks: >-
    That is for rows we have grad for, we update var as follows:
                  prox_v = var - alpha * grad
                  var = sign(prox_v)/(1+alpha*l2) * max{|prox_v|-alpha*l1,0}
  syntax:
    content: public TensorFlow.TFOperation ResourceSparseApplyProximalGradientDescent (TensorFlow.TFOutput var, TensorFlow.TFOutput alpha, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, Nullable<bool> use_locking = null, string operName = null);
    parameters:
    - id: var
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: alpha
      type: TensorFlow.TFOutput
      description: Scaling factor. Must be a scalar.
    - id: l1
      type: TensorFlow.TFOutput
      description: L1 regularization. Must be a scalar.
    - id: l2
      type: TensorFlow.TFOutput
      description: L2 regularization. Must be a scalar.
    - id: grad
      type: TensorFlow.TFOutput
      description: The gradient.
    - id: indices
      type: TensorFlow.TFOutput
      description: A vector of indices into the first dimension of var and accum.
    - id: use_locking
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If True, the subtraction will be protected by a lock;
                      otherwise the behavior is undefined, but may exhibit less contention.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceSparseApplyProximalGradientDescent'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.ResourceSparseApplyProximalGradientDescent*
  exceptions: []
- uid: TensorFlow.TFGraph.ResourceSparseApplyRMSProp(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: ResourceSparseApplyRMSProp(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ResourceSparseApplyRMSProp(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceSparseApplyRMSProp(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceSparseApplyRMSProp(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Update '*var' according to the RMSProp algorithm.
  remarks: "Note that in dense implementation of this algorithm, ms and mom will\n              update even if the grad is zero, but in this sparse implementation, ms\n              and mom will not update in iterations during which the grad is zero.\n              \n              mean_square = decay * mean_square + (1-decay) * gradient ** 2\n              Delta = learning_rate * gradient / sqrt(mean_square + epsilon)\n              \n              ms &lt;- rho * ms_{t-1} + (1-rho) * grad * grad\n              mom &lt;- momentum * mom_{t-1} + lr * grad / sqrt(ms + epsilon)\n              var &lt;- var - mom"
  syntax:
    content: public TensorFlow.TFOperation ResourceSparseApplyRMSProp (TensorFlow.TFOutput var, TensorFlow.TFOutput ms, TensorFlow.TFOutput mom, TensorFlow.TFOutput lr, TensorFlow.TFOutput rho, TensorFlow.TFOutput momentum, TensorFlow.TFOutput epsilon, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, Nullable<bool> use_locking = null, string operName = null);
    parameters:
    - id: var
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: ms
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: mom
      type: TensorFlow.TFOutput
      description: Should be from a Variable().
    - id: lr
      type: TensorFlow.TFOutput
      description: Scaling factor. Must be a scalar.
    - id: rho
      type: TensorFlow.TFOutput
      description: Decay rate. Must be a scalar.
    - id: momentum
      type: TensorFlow.TFOutput
      description: To be added.
    - id: epsilon
      type: TensorFlow.TFOutput
      description: Ridge term. Must be a scalar.
    - id: grad
      type: TensorFlow.TFOutput
      description: The gradient.
    - id: indices
      type: TensorFlow.TFOutput
      description: A vector of indices into the first dimension of var, ms and mom.
    - id: use_locking
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If `True`, updating of the var, ms, and mom tensors is protected
                      by a lock; otherwise the behavior is undefined, but may exhibit less
                      contention.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceSparseApplyRMSProp'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.ResourceSparseApplyRMSProp*
  exceptions: []
- uid: TensorFlow.TFGraph.ResourceStridedSliceAssign(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  id: ResourceStridedSliceAssign(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ResourceStridedSliceAssign(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.ResourceStridedSliceAssign(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.ResourceStridedSliceAssign(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Assign `value` to the sliced l-value reference of `ref`.
  remarks: "The values of `value` are assigned to the positions in the variable\n              `ref` that are selected by the slice parameters. The slice parameters\n              `begin, `end`, `strides`, etc. work exactly as in `StridedSlice`.\n              \n              NOTE this op currently does not support broadcasting and so `value`'s\n              shape must be exactly the shape produced by the slice of `ref`."
  syntax:
    content: public TensorFlow.TFOperation ResourceStridedSliceAssign (TensorFlow.TFOutput reference, TensorFlow.TFOutput begin, TensorFlow.TFOutput end, TensorFlow.TFOutput strides, TensorFlow.TFOutput value, Nullable<long> begin_mask = null, Nullable<long> end_mask = null, Nullable<long> ellipsis_mask = null, Nullable<long> new_axis_mask = null, Nullable<long> shrink_axis_mask = null, string operName = null);
    parameters:
    - id: reference
      type: TensorFlow.TFOutput
      description: To be added.
    - id: begin
      type: TensorFlow.TFOutput
      description: To be added.
    - id: end
      type: TensorFlow.TFOutput
      description: To be added.
    - id: strides
      type: TensorFlow.TFOutput
      description: To be added.
    - id: value
      type: TensorFlow.TFOutput
      description: To be added.
    - id: begin_mask
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: end_mask
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: ellipsis_mask
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: new_axis_mask
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: shrink_axis_mask
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceStridedSliceAssign'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.ResourceStridedSliceAssign*
  exceptions: []
- uid: TensorFlow.TFGraph.Restore(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.Nullable{System.Int64},System.String)
  id: Restore(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Restore(TFOutput, TFOutput, TFDataType, Nullable<Int64>, String)
  nameWithType: TFGraph.Restore(TFOutput, TFOutput, TFDataType, Nullable<Int64>, String)
  fullName: TFGraph.Restore(TFOutput, TFOutput, TFDataType, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Restores a tensor from checkpoint files.
  remarks: "Reads a tensor stored in one or several files. If there are several files (for\n              instance because a tensor was saved as slices), `file_pattern` may contain\n              wildcard symbols (`*` and `?`) in the filename portion only, not in the\n              directory portion.\n              \n              If a `file_pattern` matches several files, `preferred_shard` can be used to hint\n              in which file the requested tensor is likely to be found. This op will first\n              open the file at index `preferred_shard` in the list of matching files and try\n              to restore tensors from that file.  Only if some tensors or tensor slices are\n              not found in that first file, then the Op opens all the files. Setting\n              `preferred_shard` to match the value passed as the `shard` input\n              of a matching `Save` Op may speed up Restore.  This attribute only affects\n              performance, not correctness.  The default value -1 means files are processed in\n              order.\n              \n              See also `RestoreSlice`."
  syntax:
    content: public TensorFlow.TFOutput Restore (TensorFlow.TFOutput file_pattern, TensorFlow.TFOutput tensor_name, TensorFlow.TFDataType dt, Nullable<long> preferred_shard = null, string operName = null);
    parameters:
    - id: file_pattern
      type: TensorFlow.TFOutput
      description: >-
        Must have a single element. The pattern of the files from
                      which we read the tensor.
    - id: tensor_name
      type: TensorFlow.TFOutput
      description: >-
        Must have a single element. The name of the tensor to be
                      restored.
    - id: dt
      type: TensorFlow.TFDataType
      description: The type of the tensor to be restored.
    - id: preferred_shard
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      Index of file to open first if multiple files match
                      `file_pattern`.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Restore'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The restored tensor.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Restore*
  exceptions: []
- uid: TensorFlow.TFGraph.RestoreSlice(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.Nullable{System.Int64},System.String)
  id: RestoreSlice(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: RestoreSlice(TFOutput, TFOutput, TFOutput, TFDataType, Nullable<Int64>, String)
  nameWithType: TFGraph.RestoreSlice(TFOutput, TFOutput, TFOutput, TFDataType, Nullable<Int64>, String)
  fullName: TFGraph.RestoreSlice(TFOutput, TFOutput, TFOutput, TFDataType, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Restores a tensor from checkpoint files.
  remarks: "This is like `Restore` except that restored tensor can be listed as filling\n              only a slice of a larger tensor.  `shape_and_slice` specifies the shape of the\n              larger tensor and the slice that the restored tensor covers.\n              \n              The `shape_and_slice` input has the same format as the\n              elements of the `shapes_and_slices` input of the `SaveSlices` op."
  syntax:
    content: public TensorFlow.TFOutput RestoreSlice (TensorFlow.TFOutput file_pattern, TensorFlow.TFOutput tensor_name, TensorFlow.TFOutput shape_and_slice, TensorFlow.TFDataType dt, Nullable<long> preferred_shard = null, string operName = null);
    parameters:
    - id: file_pattern
      type: TensorFlow.TFOutput
      description: >-
        Must have a single element. The pattern of the files from
                      which we read the tensor.
    - id: tensor_name
      type: TensorFlow.TFOutput
      description: >-
        Must have a single element. The name of the tensor to be
                      restored.
    - id: shape_and_slice
      type: TensorFlow.TFOutput
      description: >-
        Scalar. The shapes and slice specifications to use when
                      restoring a tensors.
    - id: dt
      type: TensorFlow.TFDataType
      description: The type of the tensor to be restored.
    - id: preferred_shard
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      Index of file to open first if multiple files match
                      `file_pattern`. See the documentation for `Restore`.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'RestoreSlice'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The restored tensor.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.RestoreSlice*
  exceptions: []
- uid: TensorFlow.TFGraph.RestoreV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],System.String)
  id: RestoreV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: RestoreV2(TFOutput, TFOutput, TFOutput, TFDataType[], String)
  nameWithType: TFGraph.RestoreV2(TFOutput, TFOutput, TFOutput, TFDataType[], String)
  fullName: TFGraph.RestoreV2(TFOutput, TFOutput, TFOutput, TFDataType[], String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Restores tensors from a V2 checkpoint.
  remarks: "For backward compatibility with the V1 format, this Op currently allows\n              restoring from a V1 checkpoint as well:\n                - This Op first attempts to find the V2 index file pointed to by \"prefix\", and\n                  if found proceed to read it as a V2 checkpoint;\n                - Otherwise the V1 read path is invoked.\n              Relying on this behavior is not recommended, as the ability to fall back to read\n              V1 might be deprecated and eventually removed.\n              \n              By default, restores the named tensors in full.  If the caller wishes to restore\n              specific slices of stored tensors, \"shape_and_slices\" should be non-empty\n              strings and correspondingly well-formed.\n              \n              Callers must ensure all the named tensors are indeed stored in the checkpoint."
  syntax:
    content: public TensorFlow.TFOutput[] RestoreV2 (TensorFlow.TFOutput prefix, TensorFlow.TFOutput tensor_names, TensorFlow.TFOutput shape_and_slices, TensorFlow.TFDataType[] dtypes, string operName = null);
    parameters:
    - id: prefix
      type: TensorFlow.TFOutput
      description: Must have a single element.  The prefix of a V2 checkpoint.
    - id: tensor_names
      type: TensorFlow.TFOutput
      description: shape {N}.  The names of the tensors to be restored.
    - id: shape_and_slices
      type: TensorFlow.TFOutput
      description: >-
        shape {N}.  The slice specs of the tensors to be restored.
                      Empty strings indicate that they are non-partitioned tensors.
    - id: dtypes
      type: TensorFlow.TFDataType[]
      description: >-
        shape {N}.  The list of expected dtype for the tensors.  Must match
                      those stored in the checkpoint.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'RestoreV2'.
    return:
      type: TensorFlow.TFOutput[]
      description: >-
        shape {N}.  The restored tensors, whose shapes are read from the
                      checkpoint directly.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.RestoreV2*
  exceptions: []
- uid: TensorFlow.TFGraph.Reverse(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: Reverse(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Reverse(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Reverse(TFOutput, TFOutput, String)
  fullName: TFGraph.Reverse(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Reverses specific dimensions of a tensor.
  remarks: "Given a `tensor`, and a `bool` tensor `dims` representing the dimensions\n              of `tensor`, this operation reverses each dimension i of `tensor` where\n              `dims[i]` is `True`.\n              \n              `tensor` can have up to 8 dimensions. The number of dimensions\n              of `tensor` must equal the number of elements in `dims`. In other words:\n              \n              `rank(tensor) = size(dims)`\n              \n              For example:\n              \n              ```\n              # tensor 't' is [[[[ 0,  1,  2,  3],\n              #                  [ 4,  5,  6,  7],\n              #                  [ 8,  9, 10, 11]],\n              #                 [[12, 13, 14, 15],\n              #                  [16, 17, 18, 19],\n              #                  [20, 21, 22, 23]]]]\n              # tensor 't' shape is [1, 2, 3, 4]\n              \n              # 'dims' is [False, False, False, True]\n              reverse(t, dims) ==&gt; [[[[ 3,  2,  1,  0],\n                                      [ 7,  6,  5,  4],\n                                      [ 11, 10, 9, 8]],\n                                     [[15, 14, 13, 12],\n                                      [19, 18, 17, 16],\n                                      [23, 22, 21, 20]]]]\n              \n              # 'dims' is [False, True, False, False]\n              reverse(t, dims) ==&gt; [[[[12, 13, 14, 15],\n                                      [16, 17, 18, 19],\n                                      [20, 21, 22, 23]\n                                     [[ 0,  1,  2,  3],\n                                      [ 4,  5,  6,  7],\n                                      [ 8,  9, 10, 11]]]]\n              \n              # 'dims' is [False, False, True, False]\n              reverse(t, dims) ==&gt; [[[[8, 9, 10, 11],\n                                      [4, 5, 6, 7],\n                                      [0, 1, 2, 3]]\n                                     [[20, 21, 22, 23],\n                                      [16, 17, 18, 19],\n                                      [12, 13, 14, 15]]]]\n              ```"
  syntax:
    content: public TensorFlow.TFOutput Reverse (TensorFlow.TFOutput tensor, TensorFlow.TFOutput dims, string operName = null);
    parameters:
    - id: tensor
      type: TensorFlow.TFOutput
      description: Up to 8-D.
    - id: dims
      type: TensorFlow.TFOutput
      description: 1-D. The dimensions to reverse.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Reverse'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The same shape as `tensor`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Reverse*
  exceptions: []
- uid: TensorFlow.TFGraph.ReverseSequence(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.Nullable{System.Int64},System.String)
  id: ReverseSequence(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ReverseSequence(TFOutput, TFOutput, Int64, Nullable<Int64>, String)
  nameWithType: TFGraph.ReverseSequence(TFOutput, TFOutput, Int64, Nullable<Int64>, String)
  fullName: TFGraph.ReverseSequence(TFOutput, TFOutput, Int64, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Reverses variable length slices.
  remarks: "This op first slices `input` along the dimension `batch_dim`, and for each\n              slice `i`, reverses the first `seq_lengths[i]` elements along\n              the dimension `seq_dim`.\n              \n              The elements of `seq_lengths` must obey `seq_lengths[i] &lt;= input.dims[seq_dim]`,\n              and `seq_lengths` must be a vector of length `input.dims[batch_dim]`.\n              \n              The output slice `i` along dimension `batch_dim` is then given by input\n              slice `i`, with the first `seq_lengths[i]` slices along dimension\n              `seq_dim` reversed.\n              \n              For example:\n              \n              ```\n              # Given this:\n              batch_dim = 0\n              seq_dim = 1\n              input.dims = (4, 8, ...)\n              seq_lengths = [7, 2, 3, 5]\n              \n              # then slices of input are reversed on seq_dim, but only up to seq_lengths:\n              output[0, 0:7, :, ...] = input[0, 7:0:-1, :, ...]\n              output[1, 0:2, :, ...] = input[1, 2:0:-1, :, ...]\n              output[2, 0:3, :, ...] = input[2, 3:0:-1, :, ...]\n              output[3, 0:5, :, ...] = input[3, 5:0:-1, :, ...]\n              \n              # while entries past seq_lens are copied through:\n              output[0, 7:, :, ...] = input[0, 7:, :, ...]\n              output[1, 2:, :, ...] = input[1, 2:, :, ...]\n              output[2, 3:, :, ...] = input[2, 3:, :, ...]\n              output[3, 2:, :, ...] = input[3, 2:, :, ...]\n              ```\n              \n              In contrast, if:\n              \n              ```\n              # Given this:\n              batch_dim = 2\n              seq_dim = 0\n              input.dims = (8, ?, 4, ...)\n              seq_lengths = [7, 2, 3, 5]\n              \n              # then slices of input are reversed on seq_dim, but only up to seq_lengths:\n              output[0:7, :, 0, :, ...] = input[7:0:-1, :, 0, :, ...]\n              output[0:2, :, 1, :, ...] = input[2:0:-1, :, 1, :, ...]\n              output[0:3, :, 2, :, ...] = input[3:0:-1, :, 2, :, ...]\n              output[0:5, :, 3, :, ...] = input[5:0:-1, :, 3, :, ...]\n              \n              # while entries past seq_lens are copied through:\n              output[7:, :, 0, :, ...] = input[7:, :, 0, :, ...]\n              output[2:, :, 1, :, ...] = input[2:, :, 1, :, ...]\n              output[3:, :, 2, :, ...] = input[3:, :, 2, :, ...]\n              output[2:, :, 3, :, ...] = input[2:, :, 3, :, ...]\n              ```"
  syntax:
    content: public TensorFlow.TFOutput ReverseSequence (TensorFlow.TFOutput input, TensorFlow.TFOutput seq_lengths, long seq_dim, Nullable<long> batch_dim = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: The input to reverse.
    - id: seq_lengths
      type: TensorFlow.TFOutput
      description: >-
        1-D with length `input.dims(batch_dim)` and
                      `max(seq_lengths) &lt;= input.dims(seq_dim)`
    - id: seq_dim
      type: System.Int64
      description: The dimension which is partially reversed.
    - id: batch_dim
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      The dimension along which reversal is performed.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ReverseSequence'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The partially reversed input. It has the same shape as `input`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ReverseSequence*
  exceptions: []
- uid: TensorFlow.TFGraph.ReverseV2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: ReverseV2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ReverseV2(TFOutput, TFOutput, String)
  nameWithType: TFGraph.ReverseV2(TFOutput, TFOutput, String)
  fullName: TFGraph.ReverseV2(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Reverses specific dimensions of a tensor.
  remarks: "NOTE `tf.reverse` has now changed behavior in preparation for 1.0.\n              `tf.reverse_v2` is currently an alias that will be deprecated before TF 1.0.\n              \n              Given a `tensor`, and a `int32` tensor `axis` representing the set of\n              dimensions of `tensor` to reverse. This operation reverses each dimension\n              `i` for which there exists `j` s.t. `axis[j] == i`.\n              \n              `tensor` can have up to 8 dimensions. The number of dimensions specified\n              in `axis` may be 0 or more entries. If an index is specified more than\n              once, a InvalidArgument error is raised.\n              \n              For example:\n              \n              ```\n              # tensor 't' is [[[[ 0,  1,  2,  3],\n              #                  [ 4,  5,  6,  7],\n              #                  [ 8,  9, 10, 11]],\n              #                 [[12, 13, 14, 15],\n              #                  [16, 17, 18, 19],\n              #                  [20, 21, 22, 23]]]]\n              # tensor 't' shape is [1, 2, 3, 4]\n              \n              # 'dims' is [3] or 'dims' is -1\n              reverse(t, dims) ==&gt; [[[[ 3,  2,  1,  0],\n                                      [ 7,  6,  5,  4],\n                                      [ 11, 10, 9, 8]],\n                                     [[15, 14, 13, 12],\n                                      [19, 18, 17, 16],\n                                      [23, 22, 21, 20]]]]\n              \n              # 'dims' is '[1]' (or 'dims' is '[-3]')\n              reverse(t, dims) ==&gt; [[[[12, 13, 14, 15],\n                                      [16, 17, 18, 19],\n                                      [20, 21, 22, 23]\n                                     [[ 0,  1,  2,  3],\n                                      [ 4,  5,  6,  7],\n                                      [ 8,  9, 10, 11]]]]\n              \n              # 'dims' is '[2]' (or 'dims' is '[-2]')\n              reverse(t, dims) ==&gt; [[[[8, 9, 10, 11],\n                                      [4, 5, 6, 7],\n                                      [0, 1, 2, 3]]\n                                     [[20, 21, 22, 23],\n                                      [16, 17, 18, 19],\n                                      [12, 13, 14, 15]]]]\n              ```"
  syntax:
    content: public TensorFlow.TFOutput ReverseV2 (TensorFlow.TFOutput tensor, TensorFlow.TFOutput axis, string operName = null);
    parameters:
    - id: tensor
      type: TensorFlow.TFOutput
      description: Up to 8-D.
    - id: axis
      type: TensorFlow.TFOutput
      description: 1-D. The indices of the dimensions to reverse.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ReverseV2'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The same shape as `tensor`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ReverseV2*
  exceptions: []
- uid: TensorFlow.TFGraph.RFFT(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: RFFT(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: RFFT(TFOutput, TFOutput, String)
  nameWithType: TFGraph.RFFT(TFOutput, TFOutput, String)
  fullName: TFGraph.RFFT(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Real-valued fast Fourier transform.
  remarks: "Computes the 1-dimensional discrete Fourier transform of a real-valued signal\n              over the inner-most dimension of `input`.\n              \n              Since the DFT of a real signal is Hermitian-symmetric, `RFFT` only returns the\n              `fft_length / 2 + 1` unique components of the FFT: the zero-frequency term,\n              followed by the `fft_length / 2` positive-frequency terms.\n              \n              Along the axis `RFFT` is computed on, if `fft_length` is smaller than the\n              corresponding dimension of `input`, the dimension is cropped. If it is larger,\n              the dimension is padded with zeros."
  syntax:
    content: public TensorFlow.TFOutput RFFT (TensorFlow.TFOutput input, TensorFlow.TFOutput fft_length, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: A float32 tensor.
    - id: fft_length
      type: TensorFlow.TFOutput
      description: An int32 tensor of shape [1]. The FFT length.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'RFFT'.
    return:
      type: TensorFlow.TFOutput
      description: "A complex64 tensor of the same rank as `input`. The inner-most\n                dimension of `input` is replaced with the `fft_length / 2 + 1` unique\n                frequency components of its 1D Fourier transform.\n              \n              @compatibility(numpy)\n              Equivalent to np.fft.rfft\n              @end_compatibility\n              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result."
  overload: TensorFlow.TFGraph.RFFT*
  exceptions: []
- uid: TensorFlow.TFGraph.RFFT2D(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: RFFT2D(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: RFFT2D(TFOutput, TFOutput, String)
  nameWithType: TFGraph.RFFT2D(TFOutput, TFOutput, String)
  fullName: TFGraph.RFFT2D(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: 2D real-valued fast Fourier transform.
  remarks: "Computes the 2-dimensional discrete Fourier transform of a real-valued signal\n              over the inner-most 2 dimensions of `input`.\n              \n              Since the DFT of a real signal is Hermitian-symmetric, `RFFT2D` only returns the\n              `fft_length / 2 + 1` unique components of the FFT for the inner-most dimension\n              of `output`: the zero-frequency term, followed by the `fft_length / 2`\n              positive-frequency terms.\n              \n              Along each axis `RFFT2D` is computed on, if `fft_length` is smaller than the\n              corresponding dimension of `input`, the dimension is cropped. If it is larger,\n              the dimension is padded with zeros."
  syntax:
    content: public TensorFlow.TFOutput RFFT2D (TensorFlow.TFOutput input, TensorFlow.TFOutput fft_length, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: A float32 tensor.
    - id: fft_length
      type: TensorFlow.TFOutput
      description: An int32 tensor of shape [2]. The FFT length for each dimension.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'RFFT2D'.
    return:
      type: TensorFlow.TFOutput
      description: "A complex64 tensor of the same rank as `input`. The inner-most 2\n                dimensions of `input` are replaced with their 2D Fourier transform. The\n                inner-most dimension contains `fft_length / 2 + 1` unique frequency\n                components.\n              \n              @compatibility(numpy)\n              Equivalent to np.fft.rfft2\n              @end_compatibility\n              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result."
  overload: TensorFlow.TFGraph.RFFT2D*
  exceptions: []
- uid: TensorFlow.TFGraph.RFFT3D(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: RFFT3D(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: RFFT3D(TFOutput, TFOutput, String)
  nameWithType: TFGraph.RFFT3D(TFOutput, TFOutput, String)
  fullName: TFGraph.RFFT3D(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: 3D real-valued fast Fourier transform.
  remarks: "Computes the 3-dimensional discrete Fourier transform of a real-valued signal\n              over the inner-most 3 dimensions of `input`.\n              \n              Since the DFT of a real signal is Hermitian-symmetric, `RFFT3D` only returns the\n              `fft_length / 2 + 1` unique components of the FFT for the inner-most dimension\n              of `output`: the zero-frequency term, followed by the `fft_length / 2`\n              positive-frequency terms.\n              \n              Along each axis `RFFT3D` is computed on, if `fft_length` is smaller than the\n              corresponding dimension of `input`, the dimension is cropped. If it is larger,\n              the dimension is padded with zeros."
  syntax:
    content: public TensorFlow.TFOutput RFFT3D (TensorFlow.TFOutput input, TensorFlow.TFOutput fft_length, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: A float32 tensor.
    - id: fft_length
      type: TensorFlow.TFOutput
      description: An int32 tensor of shape [3]. The FFT length for each dimension.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'RFFT3D'.
    return:
      type: TensorFlow.TFOutput
      description: "A complex64 tensor of the same rank as `input`. The inner-most 3\n                dimensions of `input` are replaced with the their 3D Fourier transform. The\n                inner-most dimension contains `fft_length / 2 + 1` unique frequency\n                components.\n              \n              @compatibility(numpy)\n              Equivalent to np.fft.rfftn with 3 dimensions.\n              @end_compatibility\n              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result."
  overload: TensorFlow.TFGraph.RFFT3D*
  exceptions: []
- uid: TensorFlow.TFGraph.RGBToHSV(TensorFlow.TFOutput,System.String)
  id: RGBToHSV(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: RGBToHSV(TFOutput, String)
  nameWithType: TFGraph.RGBToHSV(TFOutput, String)
  fullName: TFGraph.RGBToHSV(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Converts one or more images from RGB to HSV.
  remarks: "Outputs a tensor of the same shape as the `images` tensor, containing the HSV\n              value of the pixels. The output is only well defined if the value in `images`\n              are in `[0,1]`.\n              \n              `output[..., 0]` contains hue, `output[..., 1]` contains saturation, and\n              `output[..., 2]` contains value. All HSV values are in `[0,1]`. A hue of 0\n              corresponds to pure red, hue 1/3 is pure green, and 2/3 is pure blue."
  syntax:
    content: public TensorFlow.TFOutput RGBToHSV (TensorFlow.TFOutput images, string operName = null);
    parameters:
    - id: images
      type: TensorFlow.TFOutput
      description: 1-D or higher rank. RGB data to convert. Last dimension must be size 3.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'RGBToHSV'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        `images` converted to HSV.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.RGBToHSV*
  exceptions: []
- uid: TensorFlow.TFGraph.Rint(TensorFlow.TFOutput,System.String)
  id: Rint(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Rint(TFOutput, String)
  nameWithType: TFGraph.Rint(TFOutput, String)
  fullName: TFGraph.Rint(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns element-wise integer closest to x.
  remarks: "If the result is midway between two representable values,\n              the even representable is chosen.\n              For example:\n              \n              ```\n              rint(-1.5) ==&gt; -2.0\n              rint(0.5000001) ==&gt; 1.0\n              rint([-1.7, -1.5, -0.2, 0.2, 1.5, 1.7, 2.0]) ==&gt; [-2., -2., -0., 0., 2., 2., 2.]\n              ```"
  syntax:
    content: public TensorFlow.TFOutput Rint (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Rint'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Rint*
  exceptions: []
- uid: TensorFlow.TFGraph.Round(TensorFlow.TFOutput,System.String)
  id: Round(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Round(TFOutput, String)
  nameWithType: TFGraph.Round(TFOutput, String)
  fullName: TFGraph.Round(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Rounds the values of a tensor to the nearest integer, element-wise.
  remarks: >-
    Rounds half to even.  Also known as bankers rounding. If you want to round
                  according to the current system rounding mode use std::cint.
  syntax:
    content: public TensorFlow.TFOutput Round (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Round'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Round*
  exceptions: []
- uid: TensorFlow.TFGraph.Rsqrt(TensorFlow.TFOutput,System.String)
  id: Rsqrt(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Rsqrt(TFOutput, String)
  nameWithType: TFGraph.Rsqrt(TFOutput, String)
  fullName: TFGraph.Rsqrt(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes reciprocal of square root of x element-wise.
  remarks: I.e., \\(y = 1 / \sqrt{x}\\).
  syntax:
    content: public TensorFlow.TFOutput Rsqrt (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Rsqrt'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Rsqrt*
  exceptions: []
- uid: TensorFlow.TFGraph.RsqrtGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: RsqrtGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: RsqrtGrad(TFOutput, TFOutput, String)
  nameWithType: TFGraph.RsqrtGrad(TFOutput, TFOutput, String)
  fullName: TFGraph.RsqrtGrad(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the gradient for the rsqrt of `x` wrt its input.
  remarks: >-
    Specifically, `grad = dy * -0.5 * y^3`, where `y = rsqrt(x)`, and `dy`
                  is the corresponding input gradient.
  syntax:
    content: public TensorFlow.TFOutput RsqrtGrad (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'RsqrtGrad'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.RsqrtGrad*
  exceptions: []
- uid: TensorFlow.TFGraph.SampleDistortedBoundingBox(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Single},System.Single[],System.Single[],System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String)
  id: SampleDistortedBoundingBox(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Single},System.Single[],System.Single[],System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SampleDistortedBoundingBox(TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, Nullable<Single>, Single[], Single[], Nullable<Int64>, Nullable<Boolean>, String)
  nameWithType: TFGraph.SampleDistortedBoundingBox(TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, Nullable<Single>, Single[], Single[], Nullable<Int64>, Nullable<Boolean>, String)
  fullName: TFGraph.SampleDistortedBoundingBox(TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, Nullable<Single>, Single[], Single[], Nullable<Int64>, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Generate a single randomly distorted bounding box for an image.
  remarks: "Bounding box annotations are often supplied in addition to ground-truth labels\n              in image recognition or object localization tasks. A common technique for\n              training such a system is to randomly distort an image while preserving\n              its content, i.e. *data augmentation*. This Op outputs a randomly distorted\n              localization of an object, i.e. bounding box, given an `image_size`,\n              `bounding_boxes` and a series of constraints.\n              \n              The output of this Op is a single bounding box that may be used to crop the\n              original image. The output is returned as 3 tensors: `begin`, `size` and\n              `bboxes`. The first 2 tensors can be fed directly into `tf.slice` to crop the\n              image. The latter may be supplied to `tf.image.draw_bounding_boxes` to visualize\n              what the bounding box looks like.\n              \n              Bounding boxes are supplied and returned as `[y_min, x_min, y_max, x_max]`. The\n              bounding box coordinates are floats in `[0.0, 1.0]` relative to the width and\n              height of the underlying image.\n              \n              For example,\n              \n              ```python\n                  # Generate a single distorted bounding box.\n                  begin, size, bbox_for_draw = tf.image.sample_distorted_bounding_box(\n                      tf.shape(image),\n                      bounding_boxes=bounding_boxes)\n              \n                  # Draw the bounding box in an image summary.\n                  image_with_box = tf.image.draw_bounding_boxes(tf.expand_dims(image, 0),\n                                                                bbox_for_draw)\n                  tf.image_summary('images_with_box', image_with_box)\n              \n                  # Employ the bounding box to distort the image.\n                  distorted_image = tf.slice(image, begin, size)\n              ```\n              \n              Note that if no bounding box information is available, setting\n              `use_image_if_no_bounding_boxes = true` will assume there is a single implicit\n              bounding box covering the whole image. If `use_image_if_no_bounding_boxes` is\n              false and no bounding boxes are supplied, an error is raised."
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> SampleDistortedBoundingBox (TensorFlow.TFOutput image_size, TensorFlow.TFOutput bounding_boxes, Nullable<long> seed = null, Nullable<long> seed2 = null, Nullable<float> min_object_covered = null, float[] aspect_ratio_range = null, float[] area_range = null, Nullable<long> max_attempts = null, Nullable<bool> use_image_if_no_bounding_boxes = null, string operName = null);
    parameters:
    - id: image_size
      type: TensorFlow.TFOutput
      description: 1-D, containing `[height, width, channels]`.
    - id: bounding_boxes
      type: TensorFlow.TFOutput
      description: >-
        3-D with shape `[batch, N, 4]` describing the N bounding boxes
                      associated with the image.
    - id: seed
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      If either `seed` or `seed2` are set to non-zero, the random number
                      generator is seeded by the given `seed`.  Otherwise, it is seeded by a random
                      seed.
    - id: seed2
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      A second seed to avoid seed collision.
    - id: min_object_covered
      type: System.Nullable{System.Single}
      description: >-
        Optional argument
                      The cropped area of the image must contain at least this
                      fraction of any bounding box supplied. The value of this parameter should be
                      non-negative. In the case of 0, the cropped area does not need to overlap
                      any of the bounding boxes supplied.
    - id: aspect_ratio_range
      type: System.Single[]
      description: >-
        Optional argument
                      The cropped area of the image must have an aspect ratio =
                      width / height within this range.
    - id: area_range
      type: System.Single[]
      description: >-
        Optional argument
                      The cropped area of the image must contain a fraction of the
                      supplied image within in this range.
    - id: max_attempts
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      Number of attempts at generating a cropped region of the image
                      of the specified constraints. After `max_attempts` failures, return the entire
                      image.
    - id: use_image_if_no_bounding_boxes
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      Controls behavior if no bounding boxes supplied.
                      If true, assume an implicit bounding box covering the whole input. If false,
                      raise an error.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SampleDistortedBoundingBox'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      begin: 1-D, containing `[offset_height, offset_width, 0]`. Provide as input to
                      `tf.slice`.
                      size: 1-D, containing `[target_height, target_width, -1]`. Provide as input to
                      `tf.slice`.
                      bboxes: 3-D with shape `[1, 1, 4]` containing the distorted bounding box.
                      Provide as input to `tf.image.draw_bounding_boxes`.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.SampleDistortedBoundingBox*
  exceptions: []
- uid: TensorFlow.TFGraph.Save(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],System.String)
  id: Save(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Save(TFOutput, TFOutput, TFOutput[], String)
  nameWithType: TFGraph.Save(TFOutput, TFOutput, TFOutput[], String)
  fullName: TFGraph.Save(TFOutput, TFOutput, TFOutput[], String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Saves the input tensors to disk.
  remarks: "The size of `tensor_names` must match the number of tensors in `data`. `data[i]`\n              is written to `filename` with name `tensor_names[i]`.\n              \n              See also `SaveSlices`."
  syntax:
    content: public TensorFlow.TFOperation Save (TensorFlow.TFOutput filename, TensorFlow.TFOutput tensor_names, TensorFlow.TFOutput[] data, string operName = null);
    parameters:
    - id: filename
      type: TensorFlow.TFOutput
      description: >-
        Must have a single element. The name of the file to which we write
                      the tensor.
    - id: tensor_names
      type: TensorFlow.TFOutput
      description: Shape `[N]`. The names of the tensors to be saved.
    - id: data
      type: TensorFlow.TFOutput[]
      description: '`N` tensors to save.'
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Save'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.Save*
  exceptions: []
- uid: TensorFlow.TFGraph.SaveSlices(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],System.String)
  id: SaveSlices(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SaveSlices(TFOutput, TFOutput, TFOutput, TFOutput[], String)
  nameWithType: TFGraph.SaveSlices(TFOutput, TFOutput, TFOutput, TFOutput[], String)
  fullName: TFGraph.SaveSlices(TFOutput, TFOutput, TFOutput, TFOutput[], String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Saves input tensors slices to disk.
  remarks: "This is like `Save` except that tensors can be listed in the saved file as being\n              a slice of a larger tensor.  `shapes_and_slices` specifies the shape of the\n              larger tensor and the slice that this tensor covers. `shapes_and_slices` must\n              have as many elements as `tensor_names`.\n              \n              Elements of the `shapes_and_slices` input must either be:\n              \n              *  The empty string, in which case the corresponding tensor is\n                 saved normally.\n              *  A string of the form `dim0 dim1 ... dimN-1 slice-spec` where the\n                 `dimI` are the dimensions of the larger tensor and `slice-spec`\n                 specifies what part is covered by the tensor to save.\n              \n              `slice-spec` itself is a `:`-separated list: `slice0:slice1:...:sliceN-1`\n              where each `sliceI` is either:\n              \n              *  The string `-` meaning that the slice covers all indices of this dimension\n              *  `start,length` where `start` and `length` are integers.  In that\n                 case the slice covers `length` indices starting at `start`.\n              \n              See also `Save`."
  syntax:
    content: public TensorFlow.TFOperation SaveSlices (TensorFlow.TFOutput filename, TensorFlow.TFOutput tensor_names, TensorFlow.TFOutput shapes_and_slices, TensorFlow.TFOutput[] data, string operName = null);
    parameters:
    - id: filename
      type: TensorFlow.TFOutput
      description: >-
        Must have a single element. The name of the file to which we write the
                      tensor.
    - id: tensor_names
      type: TensorFlow.TFOutput
      description: Shape `[N]`. The names of the tensors to be saved.
    - id: shapes_and_slices
      type: TensorFlow.TFOutput
      description: >-
        Shape `[N]`.  The shapes and slice specifications to use when
                      saving the tensors.
    - id: data
      type: TensorFlow.TFOutput[]
      description: '`N` tensors to save.'
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SaveSlices'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.SaveSlices*
  exceptions: []
- uid: TensorFlow.TFGraph.SaveV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],System.String)
  id: SaveV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SaveV2(TFOutput, TFOutput, TFOutput, TFOutput[], String)
  nameWithType: TFGraph.SaveV2(TFOutput, TFOutput, TFOutput, TFOutput[], String)
  fullName: TFGraph.SaveV2(TFOutput, TFOutput, TFOutput, TFOutput[], String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Saves tensors in V2 checkpoint format.
  remarks: >-
    By default, saves the named tensors in full.  If the caller wishes to save
                  specific slices of full tensors, "shape_and_slices" should be non-empty strings
                  and correspondingly well-formed.
  syntax:
    content: public TensorFlow.TFOperation SaveV2 (TensorFlow.TFOutput prefix, TensorFlow.TFOutput tensor_names, TensorFlow.TFOutput shape_and_slices, TensorFlow.TFOutput[] tensors, string operName = null);
    parameters:
    - id: prefix
      type: TensorFlow.TFOutput
      description: >-
        Must have a single element. The prefix of the V2 checkpoint to which we
                      write the tensors.
    - id: tensor_names
      type: TensorFlow.TFOutput
      description: shape {N}. The names of the tensors to be saved.
    - id: shape_and_slices
      type: TensorFlow.TFOutput
      description: >-
        shape {N}.  The slice specs of the tensors to be saved.
                      Empty strings indicate that they are non-partitioned tensors.
    - id: tensors
      type: TensorFlow.TFOutput[]
      description: '`N` tensors to save.'
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SaveV2'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.SaveV2*
  exceptions: []
- uid: TensorFlow.TFGraph.ScalarSummary(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: ScalarSummary(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ScalarSummary(TFOutput, TFOutput, String)
  nameWithType: TFGraph.ScalarSummary(TFOutput, TFOutput, String)
  fullName: TFGraph.ScalarSummary(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Outputs a `Summary` protocol buffer with scalar values.
  remarks: >-
    The input `tags` and `values` must have the same shape.  The generated summary
                  has a summary value for each tag-value pair in `tags` and `values`.
  syntax:
    content: public TensorFlow.TFOutput ScalarSummary (TensorFlow.TFOutput tags, TensorFlow.TFOutput values, string operName = null);
    parameters:
    - id: tags
      type: TensorFlow.TFOutput
      description: Tags for the summary.
    - id: values
      type: TensorFlow.TFOutput
      description: Same shape as `tags.  Values for the summary.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ScalarSummary'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Scalar.  Serialized `Summary` protocol buffer.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ScalarSummary*
  exceptions: []
- uid: TensorFlow.TFGraph.ScatterNd(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: ScatterNd(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ScatterNd(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.ScatterNd(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.ScatterNd(TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Scatter `updates` into a new (initially zero) tensor according to `indices`.
  remarks: "Creates a new tensor by applying sparse `updates` to individual\n              values or slices within a zero tensor of the given `shape` according to\n              indices.  This operator is the inverse of the [tf.gather_nd](#gather_nd)\n              operator which extracts values or slices from a given tensor.\n              \n              **WARNING**: The order in which updates are applied is nondeterministic, so the\n              output will be nondeterministic if `indices` contains duplicates.\n              \n              `indices` is an integer tensor containing indices into a new tensor of shape\n              `shape`.  The last dimension of `indices` can be at most the rank of `shape`:\n              \n                  indices.shape[-1] &lt;= shape.rank\n              \n              The last dimension of `indices` corresponds to indices into elements\n              (if `indices.shape[-1] = shape.rank`) or slices\n              (if `indices.shape[-1] &lt; shape.rank`) along dimension `indices.shape[-1]` of\n              `shape`.  `updates` is a tensor with shape\n              \n                  indices.shape[:-1] + shape[indices.shape[-1]:]\n              \n              The simplest form of scatter is to insert individual elements in a tensor by\n              index. For example, say we want to insert 4 scattered elements in a rank-1\n              tensor with 8 elements.\n              \n              &lt;div style=\"width:70%; margin:auto; margin-bottom:10px; margin-top:20px;\"&gt;\n              &lt;img style=\"width:100%\" src=\"https://www.tensorflow.org/images/ScatterNd1.png\" alt&gt;\n              &lt;/div&gt;\n              \n              In Python, this scatter operation would look like this:\n              \n              ```python\n                  indices = tf.constant([[4], [3], [1], [7]])\n                  updates = tf.constant([9, 10, 11, 12])\n                  shape = tf.constant([8])\n                  scatter = tf.scatter_nd(indices, updates, shape)\n                  with tf.Session() as sess:\n                    print(sess.run(scatter))\n              ```\n              \n              The resulting tensor would look like this:\n              \n                  [0, 11, 0, 10, 9, 0, 0, 12]\n              \n              We can also, insert entire slices of a higher rank tensor all at once. For\n              example, if we wanted to insert two slices in the first dimension of a\n              rank-3 tensor with two matrices of new values.\n              \n              &lt;div style=\"width:70%; margin:auto; margin-bottom:10px; margin-top:20px;\"&gt;\n              &lt;img style=\"width:100%\" src=\"https://www.tensorflow.org/images/ScatterNd2.png\" alt&gt;\n              &lt;/div&gt;\n              \n              In Python, this scatter operation would look like this:\n              \n              ```python\n                  indices = tf.constant([[0], [2]])\n                  updates = tf.constant([[[5, 5, 5, 5], [6, 6, 6, 6],\n                                          [7, 7, 7, 7], [8, 8, 8, 8]],\n                                         [[5, 5, 5, 5], [6, 6, 6, 6],\n                                          [7, 7, 7, 7], [8, 8, 8, 8]]])\n                  shape = tf.constant([4, 4, 4])\n                  scatter = tf.scatter_nd(indices, updates, shape)\n                  with tf.Session() as sess:\n                    print(sess.run(scatter))\n              ```\n              \n              The resulting tensor would look like this:\n              \n                  [[[5, 5, 5, 5], [6, 6, 6, 6], [7, 7, 7, 7], [8, 8, 8, 8]],\n                   [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],\n                   [[5, 5, 5, 5], [6, 6, 6, 6], [7, 7, 7, 7], [8, 8, 8, 8]],\n                   [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]"
  syntax:
    content: public TensorFlow.TFOutput ScatterNd (TensorFlow.TFOutput indices, TensorFlow.TFOutput updates, TensorFlow.TFOutput shape, string operName = null);
    parameters:
    - id: indices
      type: TensorFlow.TFOutput
      description: Index tensor.
    - id: updates
      type: TensorFlow.TFOutput
      description: Updates to scatter into output.
    - id: shape
      type: TensorFlow.TFOutput
      description: 1-D. The shape of the resulting tensor.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ScatterNd'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        A new tensor with the given shape and updates applied according
                      to the indices.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ScatterNd*
  exceptions: []
- uid: TensorFlow.TFGraph.SdcaFprint(TensorFlow.TFOutput,System.String)
  id: SdcaFprint(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SdcaFprint(TFOutput, String)
  nameWithType: TFGraph.SdcaFprint(TFOutput, String)
  fullName: TFGraph.SdcaFprint(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes fingerprints of the input strings.
  syntax:
    content: public TensorFlow.TFOutput SdcaFprint (TensorFlow.TFOutput input, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: vector of strings to compute fingerprints on.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SdcaFprint'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        a (N,2) shaped matrix where N is the number of elements in the input
                      vector. Each row contains the low and high parts of the fingerprint.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SdcaFprint*
  exceptions: []
- uid: TensorFlow.TFGraph.SdcaOptimizer(TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput,System.String,System.Single,System.Single,System.Int64,System.Int64,System.Nullable{System.Boolean},System.String)
  id: SdcaOptimizer(TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput,System.String,System.Single,System.Single,System.Int64,System.Int64,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SdcaOptimizer(TFOutput[], TFOutput[], TFOutput[], TFOutput[], TFOutput, TFOutput, TFOutput[], TFOutput[], TFOutput[], TFOutput, String, Single, Single, Int64, Int64, Nullable<Boolean>, String)
  nameWithType: TFGraph.SdcaOptimizer(TFOutput[], TFOutput[], TFOutput[], TFOutput[], TFOutput, TFOutput, TFOutput[], TFOutput[], TFOutput[], TFOutput, String, Single, Single, Int64, Int64, Nullable<Boolean>, String)
  fullName: TFGraph.SdcaOptimizer(TFOutput[], TFOutput[], TFOutput[], TFOutput[], TFOutput, TFOutput, TFOutput[], TFOutput[], TFOutput[], TFOutput, String, Single, Single, Int64, Int64, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Distributed version of Stochastic Dual Coordinate Ascent (SDCA) optimizer for
  remarks: "linear models with L1 + L2 regularization. As global optimization objective is\n              strongly-convex, the optimizer optimizes the dual objective at each step. The\n              optimizer applies each update one example at a time. Examples are sampled\n              uniformly, and the optimizer is learning rate free and enjoys linear convergence\n              rate.\n              \n              [Proximal Stochastic Dual Coordinate Ascent](http://arxiv.org/pdf/1211.2717v1.pdf).&lt;br&gt;\n              Shai Shalev-Shwartz, Tong Zhang. 2012\n              \n              $$Loss Objective = \\sum f_{i} (wx_{i}) + (l2 / 2) * |w|^2 + l1 * |w|$$\n              \n              [Adding vs. Averaging in Distributed Primal-Dual Optimization](http://arxiv.org/abs/1502.03508).&lt;br&gt;\n              Chenxin Ma, Virginia Smith, Martin Jaggi, Michael I. Jordan,\n              Peter Richtarik, Martin Takac. 2015\n              \n              [Stochastic Dual Coordinate Ascent with Adaptive Probabilities](https://arxiv.org/abs/1502.08053).&lt;br&gt;\n              Dominik Csiba, Zheng Qu, Peter Richtarik. 2015"
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFOutput[]> SdcaOptimizer (TensorFlow.TFOutput[] sparse_example_indices, TensorFlow.TFOutput[] sparse_feature_indices, TensorFlow.TFOutput[] sparse_feature_values, TensorFlow.TFOutput[] dense_features, TensorFlow.TFOutput example_weights, TensorFlow.TFOutput example_labels, TensorFlow.TFOutput[] sparse_indices, TensorFlow.TFOutput[] sparse_weights, TensorFlow.TFOutput[] dense_weights, TensorFlow.TFOutput example_state_data, string loss_type, float l1, float l2, long num_loss_partitions, long num_inner_iterations, Nullable<bool> adaptative = null, string operName = null);
    parameters:
    - id: sparse_example_indices
      type: TensorFlow.TFOutput[]
      description: a list of vectors which contain example indices.
    - id: sparse_feature_indices
      type: TensorFlow.TFOutput[]
      description: a list of vectors which contain feature indices.
    - id: sparse_feature_values
      type: TensorFlow.TFOutput[]
      description: >-
        a list of vectors which contains feature value
                      associated with each feature group.
    - id: dense_features
      type: TensorFlow.TFOutput[]
      description: a list of matrices which contains the dense feature values.
    - id: example_weights
      type: TensorFlow.TFOutput
      description: >-
        a vector which contains the weight associated with each
                      example.
    - id: example_labels
      type: TensorFlow.TFOutput
      description: >-
        a vector which contains the label/target associated with each
                      example.
    - id: sparse_indices
      type: TensorFlow.TFOutput[]
      description: >-
        a list of vectors where each value is the indices which has
                      corresponding weights in sparse_weights. This field maybe omitted for the
                      dense approach.
    - id: sparse_weights
      type: TensorFlow.TFOutput[]
      description: >-
        a list of vectors where each value is the weight associated with
                      a sparse feature group.
    - id: dense_weights
      type: TensorFlow.TFOutput[]
      description: >-
        a list of vectors where the values are the weights associated
                      with a dense feature group.
    - id: example_state_data
      type: TensorFlow.TFOutput
      description: a list of vectors containing the example state data.
    - id: loss_type
      type: System.String
      description: >-
        Type of the primal loss. Currently SdcaSolver supports logistic,
                      squared and hinge losses.
    - id: l1
      type: System.Single
      description: Symmetric l1 regularization strength.
    - id: l2
      type: System.Single
      description: Symmetric l2 regularization strength.
    - id: num_loss_partitions
      type: System.Int64
      description: Number of partitions of the global loss function.
    - id: num_inner_iterations
      type: System.Int64
      description: Number of iterations per mini-batch.
    - id: adaptative
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      Whether to use Adapative SDCA for the inner loop.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SdcaOptimizer'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFOutput[]}
      description: >-
        Returns a tuple with multiple values, as follows:
                      out_example_state_data: a list of vectors containing the updated example state
                      data.
                      out_delta_sparse_weights: a list of vectors where each value is the delta
                      weights associated with a sparse feature group.
                      out_delta_dense_weights: a list of vectors where the values are the delta
                      weights associated with a dense feature group.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.SdcaOptimizer*
  exceptions: []
- uid: TensorFlow.TFGraph.Seed
  id: Seed
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Seed
  nameWithType: TFGraph.Seed
  fullName: TFGraph.Seed
  type: Property
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Gets or sets the graph random seed, see remarks for details.
  remarks: "Operations that rely on a random seed actually derive it from two seeds:\n              the graph-level and operation-level seeds.This sets the graph-level seed.\n            \n             Its interactions with operation-level seeds is as follows:\n             1. If neither the graph-level nor the operation seed is set:\n                A random seed is used for this op.\n             2. If the graph-level seed is set, but the operation seed is not:\n                The system deterministically picks an operation seed in conjunction\n                with the graph-level seed so that it gets a unique random sequence.\n             3. If the graph-level seed is not set, but the operation seed is set:\n                A default graph-level seed and the specified operation seed are used to\n                determine the random sequence.\n             4. If both the graph-level and the operation seed are set:\n                Both seeds are used in conjunction to determine the random sequence."
  syntax:
    content: public Nullable<int> Seed { get; set; }
    return:
      type: System.Nullable{System.Int32}
      description: The seed.
  overload: TensorFlow.TFGraph.Seed*
  exceptions: []
- uid: TensorFlow.TFGraph.SegmentMax(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: SegmentMax(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SegmentMax(TFOutput, TFOutput, String)
  nameWithType: TFGraph.SegmentMax(TFOutput, TFOutput, String)
  fullName: TFGraph.SegmentMax(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the maximum along segments of a tensor.
  remarks: "Read @{$math_ops#segmentation$the section on segmentation} for an explanation of\n              segments.\n              \n              Computes a tensor such that\n              \\\\(output_i = \\max_j(data_j)\\\\) where `max` is over `j` such\n              that `segment_ids[j] == i`.\n              \n              If the max is empty for a given segment ID `i`, `output[i] = 0`.\n              \n              &lt;div style=\"width:70%; margin:auto; margin-bottom:10px; margin-top:20px;\"&gt;\n              &lt;img style=\"width:100%\" src=\"https://www.tensorflow.org/images/SegmentMax.png\" alt&gt;\n              &lt;/div&gt;"
  syntax:
    content: public TensorFlow.TFOutput SegmentMax (TensorFlow.TFOutput data, TensorFlow.TFOutput segment_ids, string operName = null);
    parameters:
    - id: data
      type: TensorFlow.TFOutput
      description: To be added.
    - id: segment_ids
      type: TensorFlow.TFOutput
      description: >-
        A 1-D tensor whose rank is equal to the rank of `data`'s
                      first dimension.  Values should be sorted and can be repeated.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SegmentMax'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Has same shape as data, except for dimension 0 which
                      has size `k`, the number of segments.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SegmentMax*
  exceptions: []
- uid: TensorFlow.TFGraph.SegmentMean(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: SegmentMean(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SegmentMean(TFOutput, TFOutput, String)
  nameWithType: TFGraph.SegmentMean(TFOutput, TFOutput, String)
  fullName: TFGraph.SegmentMean(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the mean along segments of a tensor.
  remarks: "Read @{$math_ops#segmentation$the section on segmentation} for an explanation of\n              segments.\n              \n              Computes a tensor such that\n              \\\\(output_i = \\frac{\\sum_j data_j}{N}\\\\) where `mean` is\n              over `j` such that `segment_ids[j] == i` and `N` is the total number of\n              values summed.\n              \n              If the mean is empty for a given segment ID `i`, `output[i] = 0`.\n              \n              &lt;div style=\"width:70%; margin:auto; margin-bottom:10px; margin-top:20px;\"&gt;\n              &lt;img style=\"width:100%\" src=\"https://www.tensorflow.org/images/SegmentMean.png\" alt&gt;\n              &lt;/div&gt;"
  syntax:
    content: public TensorFlow.TFOutput SegmentMean (TensorFlow.TFOutput data, TensorFlow.TFOutput segment_ids, string operName = null);
    parameters:
    - id: data
      type: TensorFlow.TFOutput
      description: To be added.
    - id: segment_ids
      type: TensorFlow.TFOutput
      description: >-
        A 1-D tensor whose rank is equal to the rank of `data`'s
                      first dimension.  Values should be sorted and can be repeated.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SegmentMean'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Has same shape as data, except for dimension 0 which
                      has size `k`, the number of segments.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SegmentMean*
  exceptions: []
- uid: TensorFlow.TFGraph.SegmentMin(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: SegmentMin(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SegmentMin(TFOutput, TFOutput, String)
  nameWithType: TFGraph.SegmentMin(TFOutput, TFOutput, String)
  fullName: TFGraph.SegmentMin(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the minimum along segments of a tensor.
  remarks: "Read @{$math_ops#segmentation$the section on segmentation} for an explanation of\n              segments.\n              \n              Computes a tensor such that\n              \\\\(output_i = \\min_j(data_j)\\\\) where `min` is over `j` such\n              that `segment_ids[j] == i`.\n              \n              If the min is empty for a given segment ID `i`, `output[i] = 0`.\n              \n              &lt;div style=\"width:70%; margin:auto; margin-bottom:10px; margin-top:20px;\"&gt;\n              &lt;img style=\"width:100%\" src=\"https://www.tensorflow.org/images/SegmentMin.png\" alt&gt;\n              &lt;/div&gt;"
  syntax:
    content: public TensorFlow.TFOutput SegmentMin (TensorFlow.TFOutput data, TensorFlow.TFOutput segment_ids, string operName = null);
    parameters:
    - id: data
      type: TensorFlow.TFOutput
      description: To be added.
    - id: segment_ids
      type: TensorFlow.TFOutput
      description: >-
        A 1-D tensor whose rank is equal to the rank of `data`'s
                      first dimension.  Values should be sorted and can be repeated.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SegmentMin'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Has same shape as data, except for dimension 0 which
                      has size `k`, the number of segments.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SegmentMin*
  exceptions: []
- uid: TensorFlow.TFGraph.SegmentProd(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: SegmentProd(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SegmentProd(TFOutput, TFOutput, String)
  nameWithType: TFGraph.SegmentProd(TFOutput, TFOutput, String)
  fullName: TFGraph.SegmentProd(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the product along segments of a tensor.
  remarks: "Read @{$math_ops#segmentation$the section on segmentation} for an explanation of\n              segments.\n              \n              Computes a tensor such that\n              \\\\(output_i = \\prod_j data_j\\\\) where the product is over `j` such\n              that `segment_ids[j] == i`.\n              \n              If the product is empty for a given segment ID `i`, `output[i] = 1`.\n              \n              &lt;div style=\"width:70%; margin:auto; margin-bottom:10px; margin-top:20px;\"&gt;\n              &lt;img style=\"width:100%\" src=\"https://www.tensorflow.org/images/SegmentProd.png\" alt&gt;\n              &lt;/div&gt;"
  syntax:
    content: public TensorFlow.TFOutput SegmentProd (TensorFlow.TFOutput data, TensorFlow.TFOutput segment_ids, string operName = null);
    parameters:
    - id: data
      type: TensorFlow.TFOutput
      description: To be added.
    - id: segment_ids
      type: TensorFlow.TFOutput
      description: >-
        A 1-D tensor whose rank is equal to the rank of `data`'s
                      first dimension.  Values should be sorted and can be repeated.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SegmentProd'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Has same shape as data, except for dimension 0 which
                      has size `k`, the number of segments.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SegmentProd*
  exceptions: []
- uid: TensorFlow.TFGraph.SegmentSum(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: SegmentSum(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SegmentSum(TFOutput, TFOutput, String)
  nameWithType: TFGraph.SegmentSum(TFOutput, TFOutput, String)
  fullName: TFGraph.SegmentSum(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the sum along segments of a tensor.
  remarks: "Read @{$math_ops#segmentation$the section on segmentation} for an explanation of\n              segments.\n              \n              Computes a tensor such that\n              \\\\(output_i = \\sum_j data_j\\\\) where sum is over `j` such\n              that `segment_ids[j] == i`.\n              \n              If the sum is empty for a given segment ID `i`, `output[i] = 0`.\n              \n              &lt;div style=\"width:70%; margin:auto; margin-bottom:10px; margin-top:20px;\"&gt;\n              &lt;img style=\"width:100%\" src=\"https://www.tensorflow.org/images/SegmentSum.png\" alt&gt;\n              &lt;/div&gt;"
  syntax:
    content: public TensorFlow.TFOutput SegmentSum (TensorFlow.TFOutput data, TensorFlow.TFOutput segment_ids, string operName = null);
    parameters:
    - id: data
      type: TensorFlow.TFOutput
      description: To be added.
    - id: segment_ids
      type: TensorFlow.TFOutput
      description: >-
        A 1-D tensor whose rank is equal to the rank of `data`'s
                      first dimension.  Values should be sorted and can be repeated.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SegmentSum'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Has same shape as data, except for dimension 0 which
                      has size `k`, the number of segments.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SegmentSum*
  exceptions: []
- uid: TensorFlow.TFGraph.Select(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: Select(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Select(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.Select(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.Select(TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Selects elements from `t` or `e`, depending on `condition`.
  remarks: "The `t`, and `e` tensors must all have the same shape, and the\n              output will also have that shape.\n              \n              The `condition` tensor must be a scalar if `t` and `e` are scalars.\n              If `t` and `e` are vectors or higher rank, then `condition` must be either a\n              scalar, a vector with size matching the first dimension of `t`, or must have\n              the same shape as `t`.\n              \n              The `condition` tensor acts as a mask that chooses, based on the value at each\n              element, whether the corresponding element / row in the output should be\n              taken from `t` (if true) or `e` (if false).\n              \n              If `condition` is a vector and `t` and `e` are higher rank matrices, then\n              it chooses which row (outer dimension) to copy from `t` and `e`.\n              If `condition` has the same shape as `t` and `e`, then it chooses which\n              element to copy from `t` and `e`.\n              \n              For example:\n              \n              ```python\n              # 'condition' tensor is [[True,  False]\n              #                        [False, True]]\n              # 't' is [[1, 2],\n              #         [3, 4]]\n              # 'e' is [[5, 6],\n              #         [7, 8]]\n              select(condition, t, e)  # =&gt; [[1, 6], [7, 4]]\n              \n              \n              # 'condition' tensor is [True, False]\n              # 't' is [[1, 2],\n              #         [3, 4]]\n              # 'e' is [[5, 6],\n              #         [7, 8]]\n              select(condition, t, e) ==&gt; [[1, 2],\n                                           [7, 8]]\n              \n              ```"
  syntax:
    content: public TensorFlow.TFOutput Select (TensorFlow.TFOutput condition, TensorFlow.TFOutput t, TensorFlow.TFOutput e, string operName = null);
    parameters:
    - id: condition
      type: TensorFlow.TFOutput
      description: To be added.
    - id: t
      type: TensorFlow.TFOutput
      description: >-
        = A `Tensor` which may have the same shape as `condition`.
                      If `condition` is rank 1, `t` may have higher rank,
                      but its first dimension must match the size of `condition`.
    - id: e
      type: TensorFlow.TFOutput
      description: = A `Tensor` with the same type and shape as `t`.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Select'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        = A `Tensor` with the same type and shape as `t` and `e`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Select*
  exceptions: []
- uid: TensorFlow.TFGraph.SelfAdjointEig(TensorFlow.TFOutput,System.String)
  id: SelfAdjointEig(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SelfAdjointEig(TFOutput, String)
  nameWithType: TFGraph.SelfAdjointEig(TFOutput, String)
  fullName: TFGraph.SelfAdjointEig(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the Eigen Decomposition of a batch of square self-adjoint matrices.
  remarks: "The input is a tensor of shape `[..., M, M]` whose inner-most 2 dimensions\n              form square matrices, with the same constraints as the single matrix\n              SelfAdjointEig.\n              \n              The result is a [..., M+1, M] matrix with [..., 0,:] containing the\n              eigenvalues, and subsequent [...,1:, :] containing the eigenvectors."
  syntax:
    content: public TensorFlow.TFOutput SelfAdjointEig (TensorFlow.TFOutput input, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: Shape is `[..., M, M]`.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SelfAdjointEig'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Shape is `[..., M+1, M]`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SelfAdjointEig*
  exceptions: []
- uid: TensorFlow.TFGraph.SelfAdjointEigV2(TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: SelfAdjointEigV2(TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SelfAdjointEigV2(TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.SelfAdjointEigV2(TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.SelfAdjointEigV2(TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the eigen decomposition of one or more square self-adjoint matrices.
  remarks: "Computes the eigenvalues and (optionally) eigenvectors of each inner matrix in\n              `input` such that `input[..., :, :] = v[..., :, :] * diag(e[..., :])`.\n              \n              ```python\n              # a is a tensor.\n              # e is a tensor of eigenvalues.\n              # v is a tensor of eigenvectors.\n              e, v = self_adjoint_eig(a)\n              e = self_adjoint_eig(a, compute_v=False)\n              ```"
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput> SelfAdjointEigV2 (TensorFlow.TFOutput input, Nullable<bool> compute_v = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: '`Tensor` input of shape `[N, N]`.'
    - id: compute_v
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If `True` then eigenvectors will be computed and returned in `v`.
                      Otherwise, only the eigenvalues will be computed.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SelfAdjointEigV2'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      e: Eigenvalues. Shape is `[N]`.
                      v: Eigenvectors. Shape is `[N, N]`.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.SelfAdjointEigV2*
  exceptions: []
- uid: TensorFlow.TFGraph.SerializeManySparse(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: SerializeManySparse(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SerializeManySparse(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SerializeManySparse(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SerializeManySparse(TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Serialize an `N`-minibatch `SparseTensor` into an `[N, 3]` string `Tensor`.
  remarks: "The `SparseTensor` must have rank `R` greater than 1, and the first dimension\n              is treated as the minibatch dimension.  Elements of the `SparseTensor`\n              must be sorted in increasing order of this first dimension.  The serialized\n              `SparseTensor` objects going into each row of `serialized_sparse` will have\n              rank `R-1`.\n              \n              The minibatch size `N` is extracted from `sparse_shape[0]`."
  syntax:
    content: public TensorFlow.TFOutput SerializeManySparse (TensorFlow.TFOutput sparse_indices, TensorFlow.TFOutput sparse_values, TensorFlow.TFOutput sparse_shape, string operName = null);
    parameters:
    - id: sparse_indices
      type: TensorFlow.TFOutput
      description: 2-D.  The `indices` of the minibatch `SparseTensor`.
    - id: sparse_values
      type: TensorFlow.TFOutput
      description: 1-D.  The `values` of the minibatch `SparseTensor`.
    - id: sparse_shape
      type: TensorFlow.TFOutput
      description: 1-D.  The `shape` of the minibatch `SparseTensor`.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SerializeManySparse'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SerializeManySparse*
  exceptions: []
- uid: TensorFlow.TFGraph.SerializeSparse(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: SerializeSparse(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SerializeSparse(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SerializeSparse(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SerializeSparse(TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Serialize a `SparseTensor` into a string 3-vector (1-D `Tensor`) object.
  syntax:
    content: public TensorFlow.TFOutput SerializeSparse (TensorFlow.TFOutput sparse_indices, TensorFlow.TFOutput sparse_values, TensorFlow.TFOutput sparse_shape, string operName = null);
    parameters:
    - id: sparse_indices
      type: TensorFlow.TFOutput
      description: 2-D.  The `indices` of the `SparseTensor`.
    - id: sparse_values
      type: TensorFlow.TFOutput
      description: 1-D.  The `values` of the `SparseTensor`.
    - id: sparse_shape
      type: TensorFlow.TFOutput
      description: 1-D.  The `shape` of the `SparseTensor`.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SerializeSparse'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SerializeSparse*
  exceptions: []
- uid: TensorFlow.TFGraph.SetSize(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: SetSize(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SetSize(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.SetSize(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.SetSize(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Number of unique elements along last dimension of input `set`.
  remarks: "Input `set` is a `SparseTensor` represented by `set_indices`, `set_values`,\n              and `set_shape`. The last dimension contains values in a set, duplicates are\n              allowed but ignored.\n              \n              If `validate_indices` is `True`, this op validates the order and range of `set`\n              indices."
  syntax:
    content: public TensorFlow.TFOutput SetSize (TensorFlow.TFOutput set_indices, TensorFlow.TFOutput set_values, TensorFlow.TFOutput set_shape, Nullable<bool> validate_indices = null, string operName = null);
    parameters:
    - id: set_indices
      type: TensorFlow.TFOutput
      description: 2D `Tensor`, indices of a `SparseTensor`.
    - id: set_values
      type: TensorFlow.TFOutput
      description: 1D `Tensor`, values of a `SparseTensor`.
    - id: set_shape
      type: TensorFlow.TFOutput
      description: 1D `Tensor`, shape of a `SparseTensor`.
    - id: validate_indices
      type: System.Nullable{System.Boolean}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SetSize'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        For `set` ranked `n`, this is a `Tensor` with rank `n-1`, and the same 1st
                      `n-1` dimensions as `set`. Each value is the number of unique elements in
                      the corresponding `[0...n-1]` dimension of `set`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SetSize*
  exceptions: []
- uid: TensorFlow.TFGraph.SetTensorShape(TensorFlow.TFOutput,System.Int64[],TensorFlow.TFStatus)
  id: SetTensorShape(TensorFlow.TFOutput,System.Int64[],TensorFlow.TFStatus)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SetTensorShape(TFOutput, Int64[], TFStatus)
  nameWithType: TFGraph.SetTensorShape(TFOutput, Int64[], TFStatus)
  fullName: TFGraph.SetTensorShape(TFOutput, Int64[], TFStatus)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Sets the tensor shape of the tensor referenced by <code>output</code> to the shape described by <code>dims</code>.
  syntax:
    content: public void SetTensorShape (TensorFlow.TFOutput output, long[] dims, TensorFlow.TFStatus status = null);
    parameters:
    - id: output
      type: TensorFlow.TFOutput
      description: The tensor on which this method will operate in the graph.
    - id: dims
      type: System.Int64[]
      description: The tensor shape, specified as an array of dimensions.
    - id: status
      type: TensorFlow.TFStatus
      description: Status buffer, if specified a status code will be left here, if not specified, a <xref href="TensorFlow.TFException"></xref> exception is raised if there is an error.
  overload: TensorFlow.TFGraph.SetTensorShape*
  exceptions: []
- uid: TensorFlow.TFGraph.Shape(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  id: Shape(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Shape(TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.Shape(TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.Shape(TFOutput, Nullable<TFDataType>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns the shape of a tensor.
  remarks: "This operation returns a 1-D integer tensor representing the shape of `input`.\n              \n              For example:\n              \n              ```\n              # 't' is [[[1, 1, 1], [2, 2, 2]], [[3, 3, 3], [4, 4, 4]]]\n              shape(t) ==&gt; [2, 2, 3]\n              ```"
  syntax:
    content: public TensorFlow.TFOutput Shape (TensorFlow.TFOutput input, Nullable<TensorFlow.TFDataType> out_type = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: To be added.
    - id: out_type
      type: System.Nullable{TensorFlow.TFDataType}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Shape'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Shape*
  exceptions: []
- uid: TensorFlow.TFGraph.ShapeN(TensorFlow.TFOutput[],System.Nullable{TensorFlow.TFDataType},System.String)
  id: ShapeN(TensorFlow.TFOutput[],System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ShapeN(TFOutput[], Nullable<TFDataType>, String)
  nameWithType: TFGraph.ShapeN(TFOutput[], Nullable<TFDataType>, String)
  fullName: TFGraph.ShapeN(TFOutput[], Nullable<TFDataType>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns shape of tensors.
  remarks: This operation returns N 1-D integer tensors representing shape of `input[i]s`.
  syntax:
    content: public TensorFlow.TFOutput[] ShapeN (TensorFlow.TFOutput[] input, Nullable<TensorFlow.TFDataType> out_type = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput[]
      description: To be added.
    - id: out_type
      type: System.Nullable{TensorFlow.TFDataType}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ShapeN'.
    return:
      type: TensorFlow.TFOutput[]
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ShapeN*
  exceptions: []
- uid: TensorFlow.TFGraph.ShardedFilename(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: ShardedFilename(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ShardedFilename(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.ShardedFilename(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.ShardedFilename(TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Generate a sharded filename. The filename is printf formatted as
  remarks: '%s-%05d-of-%05d, basename, shard, num_shards.'
  syntax:
    content: public TensorFlow.TFOutput ShardedFilename (TensorFlow.TFOutput basename, TensorFlow.TFOutput shard, TensorFlow.TFOutput num_shards, string operName = null);
    parameters:
    - id: basename
      type: TensorFlow.TFOutput
      description: To be added.
    - id: shard
      type: TensorFlow.TFOutput
      description: To be added.
    - id: num_shards
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ShardedFilename'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ShardedFilename*
  exceptions: []
- uid: TensorFlow.TFGraph.ShardedFilespec(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: ShardedFilespec(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ShardedFilespec(TFOutput, TFOutput, String)
  nameWithType: TFGraph.ShardedFilespec(TFOutput, TFOutput, String)
  fullName: TFGraph.ShardedFilespec(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Generate a glob pattern matching all sharded file names.
  syntax:
    content: public TensorFlow.TFOutput ShardedFilespec (TensorFlow.TFOutput basename, TensorFlow.TFOutput num_shards, string operName = null);
    parameters:
    - id: basename
      type: TensorFlow.TFOutput
      description: To be added.
    - id: num_shards
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ShardedFilespec'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ShardedFilespec*
  exceptions: []
- uid: TensorFlow.TFGraph.ShuffleDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  id: ShuffleDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ShuffleDataset(TFOutput, TFOutput, TFOutput, TFOutput, TFDataType[], TFShape[], String)
  nameWithType: TFGraph.ShuffleDataset(TFOutput, TFOutput, TFOutput, TFOutput, TFDataType[], TFShape[], String)
  fullName: TFGraph.ShuffleDataset(TFOutput, TFOutput, TFOutput, TFOutput, TFDataType[], TFShape[], String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Creates a dataset that shuffles elements from `input_dataset` pseudorandomly.
  syntax:
    content: public TensorFlow.TFOutput ShuffleDataset (TensorFlow.TFOutput input_dataset, TensorFlow.TFOutput buffer_size, TensorFlow.TFOutput seed, TensorFlow.TFOutput seed2, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);
    parameters:
    - id: input_dataset
      type: TensorFlow.TFOutput
      description: To be added.
    - id: buffer_size
      type: TensorFlow.TFOutput
      description: >-
        The number of output elements to buffer in an iterator over
                      this dataset. Compare with the `min_after_dequeue` attr when creating a
                      `RandomShuffleQueue`.
    - id: seed
      type: TensorFlow.TFOutput
      description: >-
        A scalar seed for the random number generator. If either seed or
                      seed2 is set to be non-zero, the random number generator is seeded
                      by the given seed.  Otherwise, a random seed is used.
    - id: seed2
      type: TensorFlow.TFOutput
      description: A second scalar seed to avoid seed collision.
    - id: output_types
      type: TensorFlow.TFDataType[]
      description: To be added.
    - id: output_shapes
      type: TensorFlow.TFShape[]
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ShuffleDataset'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ShuffleDataset*
  exceptions: []
- uid: TensorFlow.TFGraph.Sigmoid(TensorFlow.TFOutput,System.String)
  id: Sigmoid(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Sigmoid(TFOutput, String)
  nameWithType: TFGraph.Sigmoid(TFOutput, String)
  fullName: TFGraph.Sigmoid(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes sigmoid of `x` element-wise.
  remarks: Specifically, `y = 1 / (1 + exp(-x))`.
  syntax:
    content: public TensorFlow.TFOutput Sigmoid (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Sigmoid'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Sigmoid*
  exceptions: []
- uid: TensorFlow.TFGraph.SigmoidGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: SigmoidGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SigmoidGrad(TFOutput, TFOutput, String)
  nameWithType: TFGraph.SigmoidGrad(TFOutput, TFOutput, String)
  fullName: TFGraph.SigmoidGrad(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the gradient of the sigmoid of `x` wrt its input.
  remarks: >-
    Specifically, `grad = dy * y * (1 - y)`, where `y = sigmoid(x)`, and
                  `dy` is the corresponding input gradient.
  syntax:
    content: public TensorFlow.TFOutput SigmoidGrad (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SigmoidGrad'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SigmoidGrad*
  exceptions: []
- uid: TensorFlow.TFGraph.Sign(TensorFlow.TFOutput,System.String)
  id: Sign(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Sign(TFOutput, String)
  nameWithType: TFGraph.Sign(TFOutput, String)
  fullName: TFGraph.Sign(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns an element-wise indication of the sign of a number.
  remarks: "`y = sign(x) = -1` if `x &lt; 0`; 0 if `x == 0`; 1 if `x &gt; 0`.\n              \n              For complex numbers, `y = sign(x) = x / |x|` if `x != 0`, otherwise `y = 0`."
  syntax:
    content: public TensorFlow.TFOutput Sign (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Sign'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Sign*
  exceptions: []
- uid: TensorFlow.TFGraph.Sin(TensorFlow.TFOutput,System.String)
  id: Sin(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Sin(TFOutput, String)
  nameWithType: TFGraph.Sin(TFOutput, String)
  fullName: TFGraph.Sin(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes sin of x element-wise.
  syntax:
    content: public TensorFlow.TFOutput Sin (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Sin'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Sin*
  exceptions: []
- uid: TensorFlow.TFGraph.Sinh(TensorFlow.TFOutput,System.String)
  id: Sinh(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Sinh(TFOutput, String)
  nameWithType: TFGraph.Sinh(TFOutput, String)
  fullName: TFGraph.Sinh(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes hyperbolic sine of x element-wise.
  syntax:
    content: public TensorFlow.TFOutput Sinh (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Sinh'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Sinh*
  exceptions: []
- uid: TensorFlow.TFGraph.Size(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  id: Size(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Size(TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.Size(TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.Size(TFOutput, Nullable<TFDataType>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns the size of a tensor.
  remarks: "This operation returns an integer representing the number of elements in\n              `input`.\n              \n              For example:\n              \n              ```\n              # 't' is [[[1, 1,, 1], [2, 2, 2]], [[3, 3, 3], [4, 4, 4]]]]\n              size(t) ==&gt; 12\n              ```"
  syntax:
    content: public TensorFlow.TFOutput Size (TensorFlow.TFOutput input, Nullable<TensorFlow.TFDataType> out_type = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: To be added.
    - id: out_type
      type: System.Nullable{TensorFlow.TFDataType}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Size'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Size*
  exceptions: []
- uid: TensorFlow.TFGraph.SkipDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  id: SkipDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SkipDataset(TFOutput, TFOutput, TFDataType[], TFShape[], String)
  nameWithType: TFGraph.SkipDataset(TFOutput, TFOutput, TFDataType[], TFShape[], String)
  fullName: TFGraph.SkipDataset(TFOutput, TFOutput, TFDataType[], TFShape[], String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Creates a dataset that skips `count` elements from the `input_dataset`.
  syntax:
    content: public TensorFlow.TFOutput SkipDataset (TensorFlow.TFOutput input_dataset, TensorFlow.TFOutput count, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);
    parameters:
    - id: input_dataset
      type: TensorFlow.TFOutput
      description: To be added.
    - id: count
      type: TensorFlow.TFOutput
      description: >-
        A scalar representing the number of elements from the `input_dataset`
                      that should be skipped.  If count is -1, skips everything.
    - id: output_types
      type: TensorFlow.TFDataType[]
      description: To be added.
    - id: output_shapes
      type: TensorFlow.TFShape[]
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SkipDataset'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SkipDataset*
  exceptions: []
- uid: TensorFlow.TFGraph.Skipgram(System.String,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Single},System.String)
  id: Skipgram(System.String,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Single},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Skipgram(String, Int64, Nullable<Int64>, Nullable<Int64>, Nullable<Single>, String)
  nameWithType: TFGraph.Skipgram(String, Int64, Nullable<Int64>, Nullable<Int64>, Nullable<Single>, String)
  fullName: TFGraph.Skipgram(String, Int64, Nullable<Int64>, Nullable<Int64>, Nullable<Single>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Parses a text file and creates a batch of examples.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> Skipgram (string filename, long batch_size, Nullable<long> window_size = null, Nullable<long> min_count = null, Nullable<float> subsample = null, string operName = null);
    parameters:
    - id: filename
      type: System.String
      description: The corpus's text file name.
    - id: batch_size
      type: System.Int64
      description: The size of produced batch.
    - id: window_size
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      The number of words to predict to the left and right of the target.
    - id: min_count
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      The minimum number of word occurrences for it to be included in the
                      vocabulary.
    - id: subsample
      type: System.Nullable{System.Single}
      description: >-
        Optional argument
                      Threshold for word occurrence. Words that appear with higher
                      frequency will be randomly down-sampled. Set to 0 to disable.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Skipgram'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      vocab_word: A vector of words in the corpus.
                      vocab_freq: Frequencies of words. Sorted in the non-ascending order.
                      words_per_epoch: Number of words per epoch in the data file.
                      current_epoch: The current epoch number.
                      total_words_processed: The total number of words processed so far.
                      examples: A vector of word ids.
                      labels: A vector of word ids.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.Skipgram*
  exceptions: []
- uid: TensorFlow.TFGraph.Slice(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: Slice(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Slice(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.Slice(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.Slice(TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Return a slice from 'input'.
  remarks: "The output tensor is a tensor with dimensions described by 'size'\n              whose values are extracted from 'input' starting at the offsets in\n              'begin'.\n              \n              *Requirements*:\n                0 &lt;= begin[i] &lt;= begin[i] + size[i] &lt;= Di  for i in [0, n)"
  syntax:
    content: public TensorFlow.TFOutput Slice (TensorFlow.TFOutput input, TensorFlow.TFOutput begin, TensorFlow.TFOutput size, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: To be added.
    - id: begin
      type: TensorFlow.TFOutput
      description: >-
        begin[i] specifies the offset into the 'i'th dimension of
                      'input' to slice from.
    - id: size
      type: TensorFlow.TFOutput
      description: >-
        size[i] specifies the number of elements of the 'i'th dimension
                      of 'input' to slice. If size[i] is -1, all remaining elements in dimension
                      i are included in the slice (i.e. this is equivalent to setting
                      size[i] = input.dim_size(i) - begin[i]).
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Slice'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Slice*
  exceptions: []
- uid: TensorFlow.TFGraph.Softmax(TensorFlow.TFOutput,System.String)
  id: Softmax(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Softmax(TFOutput, String)
  nameWithType: TFGraph.Softmax(TFOutput, String)
  fullName: TFGraph.Softmax(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes softmax activations.
  remarks: "For each batch `i` and class `j` we have\n              \n                  softmax[i, j] = exp(logits[i, j]) / sum_j(exp(logits[i, j]))"
  syntax:
    content: public TensorFlow.TFOutput Softmax (TensorFlow.TFOutput logits, string operName = null);
    parameters:
    - id: logits
      type: TensorFlow.TFOutput
      description: 2-D with shape `[batch_size, num_classes]`.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Softmax'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Same shape as `logits`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Softmax*
  exceptions: []
- uid: TensorFlow.TFGraph.SoftmaxCrossEntropyWithLogits(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: SoftmaxCrossEntropyWithLogits(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SoftmaxCrossEntropyWithLogits(TFOutput, TFOutput, String)
  nameWithType: TFGraph.SoftmaxCrossEntropyWithLogits(TFOutput, TFOutput, String)
  fullName: TFGraph.SoftmaxCrossEntropyWithLogits(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes softmax cross entropy cost and gradients to backpropagate.
  remarks: Inputs are the logits, not probabilities.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput> SoftmaxCrossEntropyWithLogits (TensorFlow.TFOutput features, TensorFlow.TFOutput labels, string operName = null);
    parameters:
    - id: features
      type: TensorFlow.TFOutput
      description: batch_size x num_classes matrix
    - id: labels
      type: TensorFlow.TFOutput
      description: >-
        batch_size x num_classes matrix
                      The caller must ensure that each batch of labels represents a valid
                      probability distribution.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SoftmaxCrossEntropyWithLogits'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      loss: Per example loss (batch_size vector).
                      backprop: backpropagated gradients (batch_size x num_classes matrix).
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.SoftmaxCrossEntropyWithLogits*
  exceptions: []
- uid: TensorFlow.TFGraph.Softplus(TensorFlow.TFOutput,System.String)
  id: Softplus(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Softplus(TFOutput, String)
  nameWithType: TFGraph.Softplus(TFOutput, String)
  fullName: TFGraph.Softplus(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: 'Computes softplus: `log(exp(features) + 1)`.'
  syntax:
    content: public TensorFlow.TFOutput Softplus (TensorFlow.TFOutput features, string operName = null);
    parameters:
    - id: features
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Softplus'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Softplus*
  exceptions: []
- uid: TensorFlow.TFGraph.SoftplusGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: SoftplusGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SoftplusGrad(TFOutput, TFOutput, String)
  nameWithType: TFGraph.SoftplusGrad(TFOutput, TFOutput, String)
  fullName: TFGraph.SoftplusGrad(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes softplus gradients for a softplus operation.
  syntax:
    content: public TensorFlow.TFOutput SoftplusGrad (TensorFlow.TFOutput gradients, TensorFlow.TFOutput features, string operName = null);
    parameters:
    - id: gradients
      type: TensorFlow.TFOutput
      description: The backpropagated gradients to the corresponding softplus operation.
    - id: features
      type: TensorFlow.TFOutput
      description: The features passed as input to the corresponding softplus operation.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SoftplusGrad'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The gradients: `gradients / (1 + exp(-features))`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SoftplusGrad*
  exceptions: []
- uid: TensorFlow.TFGraph.Softsign(TensorFlow.TFOutput,System.String)
  id: Softsign(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Softsign(TFOutput, String)
  nameWithType: TFGraph.Softsign(TFOutput, String)
  fullName: TFGraph.Softsign(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: 'Computes softsign: `features / (abs(features) + 1)`.'
  syntax:
    content: public TensorFlow.TFOutput Softsign (TensorFlow.TFOutput features, string operName = null);
    parameters:
    - id: features
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Softsign'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Softsign*
  exceptions: []
- uid: TensorFlow.TFGraph.SoftsignGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: SoftsignGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SoftsignGrad(TFOutput, TFOutput, String)
  nameWithType: TFGraph.SoftsignGrad(TFOutput, TFOutput, String)
  fullName: TFGraph.SoftsignGrad(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes softsign gradients for a softsign operation.
  syntax:
    content: public TensorFlow.TFOutput SoftsignGrad (TensorFlow.TFOutput gradients, TensorFlow.TFOutput features, string operName = null);
    parameters:
    - id: gradients
      type: TensorFlow.TFOutput
      description: The backpropagated gradients to the corresponding softsign operation.
    - id: features
      type: TensorFlow.TFOutput
      description: The features passed as input to the corresponding softsign operation.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SoftsignGrad'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The gradients: `gradients / (1 + abs(-features)) ** 2`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SoftsignGrad*
  exceptions: []
- uid: TensorFlow.TFGraph.SpaceToBatch(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.String)
  id: SpaceToBatch(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SpaceToBatch(TFOutput, TFOutput, Int64, String)
  nameWithType: TFGraph.SpaceToBatch(TFOutput, TFOutput, Int64, String)
  fullName: TFGraph.SpaceToBatch(TFOutput, TFOutput, Int64, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: SpaceToBatch for 4-D tensors of type T.
  remarks: "This is a legacy version of the more general SpaceToBatchND.\n              \n              Zero-pads and then rearranges (permutes) blocks of spatial data into batch.\n              More specifically, this op outputs a copy of the input tensor where values from\n              the `height` and `width` dimensions are moved to the `batch` dimension. After\n              the zero-padding, both `height` and `width` of the input must be divisible by the\n              block size."
  syntax:
    content: public TensorFlow.TFOutput SpaceToBatch (TensorFlow.TFOutput input, TensorFlow.TFOutput paddings, long block_size, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: 4-D with shape `[batch, height, width, depth]`.
    - id: paddings
      type: TensorFlow.TFOutput
      description: "2-D tensor of non-negative integers with shape `[2, 2]`. It specifies\n                the padding of the input with zeros across the spatial dimensions as follows:\n              \n                    paddings = [[pad_top, pad_bottom], [pad_left, pad_right]]\n              \n                The effective spatial dimensions of the zero-padded input tensor will be:\n              \n                    height_pad = pad_top + height + pad_bottom\n                    width_pad = pad_left + width + pad_right\n              \n              The attr `block_size` must be greater than one. It indicates the block size.\n              \n                * Non-overlapping blocks of size `block_size x block size` in the height and\n                  width dimensions are rearranged into the batch dimension at each location.\n                * The batch of the output tensor is `batch * block_size * block_size`.\n                * Both height_pad and width_pad must be divisible by block_size.\n              \n              The shape of the output will be:\n              \n                  [batch*block_size*block_size, height_pad/block_size, width_pad/block_size,\n                   depth]\n              \n              Some examples:\n              \n              (1) For the following input of shape `[1, 2, 2, 1]` and block_size of 2:\n              \n              ```\n              x = [[[[1], [2]], [[3], [4]]]]\n              ```\n              \n              The output tensor has shape `[4, 1, 1, 1]` and value:\n              \n              ```\n              [[[[1]]], [[[2]]], [[[3]]], [[[4]]]]\n              ```\n              \n              (2) For the following input of shape `[1, 2, 2, 3]` and block_size of 2:\n              \n              ```\n              x = [[[[1, 2, 3], [4, 5, 6]],\n                    [[7, 8, 9], [10, 11, 12]]]]\n              ```\n              \n              The output tensor has shape `[4, 1, 1, 3]` and value:\n              \n              ```\n              [[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]\n              ```\n              \n              (3) For the following input of shape `[1, 4, 4, 1]` and block_size of 2:\n              \n              ```\n              x = [[[[1],   [2],  [3],  [4]],\n                    [[5],   [6],  [7],  [8]],\n                    [[9],  [10], [11],  [12]],\n                    [[13], [14], [15],  [16]]]]\n              ```\n              \n              The output tensor has shape `[4, 2, 2, 1]` and value:\n              \n              ```\n              x = [[[[1], [3]], [[9], [11]]],\n                   [[[2], [4]], [[10], [12]]],\n                   [[[5], [7]], [[13], [15]]],\n                   [[[6], [8]], [[14], [16]]]]\n              ```\n              \n              (4) For the following input of shape `[2, 2, 4, 1]` and block_size of 2:\n              \n              ```\n              x = [[[[1],   [2],  [3],  [4]],\n                    [[5],   [6],  [7],  [8]]],\n                   [[[9],  [10], [11],  [12]],\n                    [[13], [14], [15],  [16]]]]\n              ```\n              \n              The output tensor has shape `[8, 1, 2, 1]` and value:\n              \n              ```\n              x = [[[[1], [3]]], [[[9], [11]]], [[[2], [4]]], [[[10], [12]]],\n                   [[[5], [7]]], [[[13], [15]]], [[[6], [8]]], [[[14], [16]]]]\n              ```\n              \n              Among others, this operation is useful for reducing atrous convolution into\n              regular convolution."
    - id: block_size
      type: System.Int64
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SpaceToBatch'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SpaceToBatch*
  exceptions: []
- uid: TensorFlow.TFGraph.SpaceToBatchND(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: SpaceToBatchND(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SpaceToBatchND(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SpaceToBatchND(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SpaceToBatchND(TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: SpaceToBatch for N-D tensors of type T.
  remarks: >-
    This operation divides "spatial" dimensions `[1, ..., M]` of the input into a
                  grid of blocks of shape `block_shape`, and interleaves these blocks with the
                  "batch" dimension (0) such that in the output, the spatial dimensions
                  `[1, ..., M]` correspond to the position within the grid, and the batch
                  dimension combines both the position within a spatial block and the original
                  batch position.  Prior to division into blocks, the spatial dimensions of the
                  input are optionally zero padded according to `paddings`.  See below for a
                  precise description.
  syntax:
    content: public TensorFlow.TFOutput SpaceToBatchND (TensorFlow.TFOutput input, TensorFlow.TFOutput block_shape, TensorFlow.TFOutput paddings, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: >-
        N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`,
                      where spatial_shape has `M` dimensions.
    - id: block_shape
      type: TensorFlow.TFOutput
      description: 1-D with shape `[M]`, all values must be &gt;= 1.
    - id: paddings
      type: TensorFlow.TFOutput
      description: "2-D with shape `[M, 2]`, all values must be &gt;= 0.\n                `paddings[i] = [pad_start, pad_end]` specifies the padding for input dimension\n                `i + 1`, which corresponds to spatial dimension `i`.  It is required that\n                `block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.\n              \n              This operation is equivalent to the following steps:\n              \n              1. Zero-pad the start and end of dimensions `[1, ..., M]` of the\n                 input according to `paddings` to produce `padded` of shape `padded_shape`.\n              \n              2. Reshape `padded` to `reshaped_padded` of shape:\n              \n                   [batch] +\n                   [padded_shape[1] / block_shape[0],\n                     block_shape[0],\n                    ...,\n                    padded_shape[M] / block_shape[M-1],\n                    block_shape[M-1]] +\n                   remaining_shape\n              \n              3. Permute dimensions of `reshaped_padded` to produce\n                 `permuted_reshaped_padded` of shape:\n              \n                   block_shape +\n                   [batch] +\n                   [padded_shape[1] / block_shape[0],\n                    ...,\n                    padded_shape[M] / block_shape[M-1]] +\n                   remaining_shape\n              \n              4. Reshape `permuted_reshaped_padded` to flatten `block_shape` into the batch\n                 dimension, producing an output tensor of shape:\n              \n                   [batch * prod(block_shape)] +\n                   [padded_shape[1] / block_shape[0],\n                    ...,\n                    padded_shape[M] / block_shape[M-1]] +\n                   remaining_shape\n              \n              Some examples:\n              \n              (1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and\n                  `paddings = [[0, 0], [0, 0]]`:\n              \n              ```\n              x = [[[[1], [2]], [[3], [4]]]]\n              ```\n              \n              The output tensor has shape `[4, 1, 1, 1]` and value:\n              \n              ```\n              [[[[1]]], [[[2]]], [[[3]]], [[[4]]]]\n              ```\n              \n              (2) For the following input of shape `[1, 2, 2, 3]`, `block_shape = [2, 2]`, and\n                  `paddings = [[0, 0], [0, 0]]`:\n              \n              ```\n              x = [[[[1, 2, 3], [4, 5, 6]],\n                    [[7, 8, 9], [10, 11, 12]]]]\n              ```\n              \n              The output tensor has shape `[4, 1, 1, 3]` and value:\n              \n              ```\n              [[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]\n              ```\n              \n              (3) For the following input of shape `[1, 4, 4, 1]`, `block_shape = [2, 2]`, and\n                  `paddings = [[0, 0], [0, 0]]`:\n              \n              ```\n              x = [[[[1],   [2],  [3],  [4]],\n                    [[5],   [6],  [7],  [8]],\n                    [[9],  [10], [11],  [12]],\n                    [[13], [14], [15],  [16]]]]\n              ```\n              \n              The output tensor has shape `[4, 2, 2, 1]` and value:\n              \n              ```\n              x = [[[[1], [3]], [[9], [11]]],\n                   [[[2], [4]], [[10], [12]]],\n                   [[[5], [7]], [[13], [15]]],\n                   [[[6], [8]], [[14], [16]]]]\n              ```\n              \n              (4) For the following input of shape `[2, 2, 4, 1]`, block_shape = `[2, 2]`, and\n                  paddings = `[[0, 0], [2, 0]]`:\n              \n              ```\n              x = [[[[1],   [2],  [3],  [4]],\n                    [[5],   [6],  [7],  [8]]],\n                   [[[9],  [10], [11],  [12]],\n                    [[13], [14], [15],  [16]]]]\n              ```\n              \n              The output tensor has shape `[8, 1, 3, 1]` and value:\n              \n              ```\n              x = [[[[0], [1], [3]]], [[[0], [9], [11]]],\n                   [[[0], [2], [4]]], [[[0], [10], [12]]],\n                   [[[0], [5], [7]]], [[[0], [13], [15]]],\n                   [[[0], [6], [8]]], [[[0], [14], [16]]]]\n              ```\n              \n              Among others, this operation is useful for reducing atrous convolution into\n              regular convolution."
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SpaceToBatchND'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SpaceToBatchND*
  exceptions: []
- uid: TensorFlow.TFGraph.SpaceToDepth(TensorFlow.TFOutput,System.Int64,System.String)
  id: SpaceToDepth(TensorFlow.TFOutput,System.Int64,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SpaceToDepth(TFOutput, Int64, String)
  nameWithType: TFGraph.SpaceToDepth(TFOutput, Int64, String)
  fullName: TFGraph.SpaceToDepth(TFOutput, Int64, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: SpaceToDepth for tensors of type T.
  remarks: "Rearranges blocks of spatial data, into depth. More specifically,\n              this op outputs a copy of the input tensor where values from the `height`\n              and `width` dimensions are moved to the `depth` dimension.\n              The attr `block_size` indicates the input block size and how the data is moved.\n              \n                * Non-overlapping blocks of size `block_size x block size` are rearranged\n                  into depth at each location.\n                * The depth of the output tensor is `input_depth * block_size * block_size`.\n                * The input tensor's height and width must be divisible by block_size.\n              \n              That is, assuming the input is in the shape:\n              `[batch, height, width, depth]`,\n              the shape of the output will be:\n              `[batch, height/block_size, width/block_size, depth*block_size*block_size]`\n              \n              This operation requires that the input tensor be of rank 4, and that\n              `block_size` be &gt;=1 and a divisor of both the input `height` and `width`.\n              \n              This operation is useful for resizing the activations between convolutions\n              (but keeping all data), e.g. instead of pooling. It is also useful for training\n              purely convolutional models.\n              \n              For example, given this input of shape `[1, 2, 2, 1]`, and block_size of 2:\n              \n              ```\n              x = [[[[1], [2]],\n                    [[3], [4]]]]\n              ```\n              \n              This operation will output a tensor of shape `[1, 1, 1, 4]`:\n              \n              ```\n              [[[[1, 2, 3, 4]]]]\n              ```\n              \n              Here, the input has a batch of 1 and each batch element has shape `[2, 2, 1]`,\n              the corresponding output will have a single element (i.e. width and height are\n              both 1) and will have a depth of 4 channels (1 * block_size * block_size).\n              The output element shape is `[1, 1, 4]`.\n              \n              For an input tensor with larger depth, here of shape `[1, 2, 2, 3]`, e.g.\n              \n              ```\n              x = [[[[1, 2, 3], [4, 5, 6]],\n                    [[7, 8, 9], [10, 11, 12]]]]\n              ```\n              \n              This operation, for block_size of 2, will return the following tensor of shape\n              `[1, 1, 1, 12]`\n              \n              ```\n              [[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]]]]\n              ```\n              \n              Similarly, for the following input of shape `[1 4 4 1]`, and a block size of 2:\n              \n              ```\n              x = [[[[1],   [2],  [5],  [6]],\n                    [[3],   [4],  [7],  [8]],\n                    [[9],  [10], [13],  [14]],\n                    [[11], [12], [15],  [16]]]]\n              ```\n              \n              the operator will return the following tensor of shape `[1 2 2 4]`:\n              \n              ```\n              x = [[[[1, 2, 3, 4],\n                     [5, 6, 7, 8]],\n                    [[9, 10, 11, 12],\n                     [13, 14, 15, 16]]]]\n              ```"
  syntax:
    content: public TensorFlow.TFOutput SpaceToDepth (TensorFlow.TFOutput input, long block_size, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: To be added.
    - id: block_size
      type: System.Int64
      description: The size of the spatial block.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SpaceToDepth'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SpaceToDepth*
  exceptions: []
- uid: TensorFlow.TFGraph.SparseAdd(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: SparseAdd(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SparseAdd(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseAdd(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseAdd(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Adds two `SparseTensor` objects to produce another `SparseTensor`.
  remarks: "The input `SparseTensor` objects' indices are assumed ordered in standard\n              lexicographic order.  If this is not the case, before this step run\n              `SparseReorder` to restore index ordering.\n              \n              By default, if two values sum to zero at some index, the output `SparseTensor`\n              would still include that particular location in its index, storing a zero in the\n              corresponding value slot.  To override this, callers can specify `thresh`,\n              indicating that if the sum has a magnitude strictly smaller than `thresh`, its\n              corresponding value and index would then not be included.  In particular,\n              `thresh == 0` (default) means everything is kept and actual thresholding happens\n              only for a positive value.\n              \n              In the following shapes, `nnz` is the count after taking `thresh` into account."
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> SparseAdd (TensorFlow.TFOutput a_indices, TensorFlow.TFOutput a_values, TensorFlow.TFOutput a_shape, TensorFlow.TFOutput b_indices, TensorFlow.TFOutput b_values, TensorFlow.TFOutput b_shape, TensorFlow.TFOutput thresh, string operName = null);
    parameters:
    - id: a_indices
      type: TensorFlow.TFOutput
      description: 2-D.  The `indices` of the first `SparseTensor`, size `[nnz, ndims]` Matrix.
    - id: a_values
      type: TensorFlow.TFOutput
      description: 1-D.  The `values` of the first `SparseTensor`, size `[nnz]` Vector.
    - id: a_shape
      type: TensorFlow.TFOutput
      description: 1-D.  The `shape` of the first `SparseTensor`, size `[ndims]` Vector.
    - id: b_indices
      type: TensorFlow.TFOutput
      description: 2-D.  The `indices` of the second `SparseTensor`, size `[nnz, ndims]` Matrix.
    - id: b_values
      type: TensorFlow.TFOutput
      description: 1-D.  The `values` of the second `SparseTensor`, size `[nnz]` Vector.
    - id: b_shape
      type: TensorFlow.TFOutput
      description: 1-D.  The `shape` of the second `SparseTensor`, size `[ndims]` Vector.
    - id: thresh
      type: TensorFlow.TFOutput
      description: >-
        0-D.  The magnitude threshold that determines if an output value/index
                      pair takes space.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseAdd'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: "Returns a tuple with multiple values, as follows:\n              sum_indices: \n              sum_values: \n              sum_shape: \n              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property."
  overload: TensorFlow.TFGraph.SparseAdd*
  exceptions: []
- uid: TensorFlow.TFGraph.SparseAddGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: SparseAddGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SparseAddGrad(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseAddGrad(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseAddGrad(TFOutput, TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: The gradient operator for the SparseAdd op.
  remarks: >-
    The SparseAdd op calculates A + B, where A, B, and the sum are all represented
                  as `SparseTensor` objects.  This op takes in the upstream gradient w.r.t.
                  non-empty values of the sum, and outputs the gradients w.r.t. the non-empty
                  values of A and B.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput> SparseAddGrad (TensorFlow.TFOutput backprop_val_grad, TensorFlow.TFOutput a_indices, TensorFlow.TFOutput b_indices, TensorFlow.TFOutput sum_indices, string operName = null);
    parameters:
    - id: backprop_val_grad
      type: TensorFlow.TFOutput
      description: >-
        1-D with shape `[nnz(sum)]`.  The gradient with respect to
                      the non-empty values of the sum.
    - id: a_indices
      type: TensorFlow.TFOutput
      description: 2-D.  The `indices` of the `SparseTensor` A, size `[nnz(A), ndims]`.
    - id: b_indices
      type: TensorFlow.TFOutput
      description: 2-D.  The `indices` of the `SparseTensor` B, size `[nnz(B), ndims]`.
    - id: sum_indices
      type: TensorFlow.TFOutput
      description: >-
        2-D.  The `indices` of the sum `SparseTensor`, size
                      `[nnz(sum), ndims]`.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseAddGrad'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      a_val_grad: 1-D with shape `[nnz(A)]`. The gradient with respect to the
                      non-empty values of A.
                      b_val_grad: 1-D with shape `[nnz(B)]`. The gradient with respect to the
                      non-empty values of B.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.SparseAddGrad*
  exceptions: []
- uid: TensorFlow.TFGraph.SparseConcat(TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],System.Int64,System.String)
  id: SparseConcat(TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],System.Int64,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SparseConcat(TFOutput[], TFOutput[], TFOutput[], Int64, String)
  nameWithType: TFGraph.SparseConcat(TFOutput[], TFOutput[], TFOutput[], Int64, String)
  fullName: TFGraph.SparseConcat(TFOutput[], TFOutput[], TFOutput[], Int64, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Concatenates a list of `SparseTensor` along the specified dimension.
  remarks: "Concatenation is with respect to the dense versions of these sparse tensors.\n              It is assumed that each input is a `SparseTensor` whose elements are ordered\n              along increasing dimension number.\n              \n              All inputs' shapes must match, except for the concat dimension.  The\n              `indices`, `values`, and `shapes` lists must have the same length.\n              \n              The output shape is identical to the inputs', except along the concat\n              dimension, where it is the sum of the inputs' sizes along that dimension.\n              \n              The output elements will be resorted to preserve the sort order along\n              increasing dimension number.\n              \n              This op runs in `O(M log M)` time, where `M` is the total number of non-empty\n              values across all inputs. This is due to the need for an internal sort in\n              order to concatenate efficiently across an arbitrary dimension.\n              \n              For example, if `concat_dim = 1` and the inputs are\n              \n                  sp_inputs[0]: shape = [2, 3]\n                  [0, 2]: \"a\"\n                  [1, 0]: \"b\"\n                  [1, 1]: \"c\"\n              \n                  sp_inputs[1]: shape = [2, 4]\n                  [0, 1]: \"d\"\n                  [0, 2]: \"e\"\n              \n              then the output will be\n              \n                  shape = [2, 7]\n                  [0, 2]: \"a\"\n                  [0, 4]: \"d\"\n                  [0, 5]: \"e\"\n                  [1, 0]: \"b\"\n                  [1, 1]: \"c\"\n              \n              Graphically this is equivalent to doing\n              \n                  [    a] concat [  d e  ] = [    a   d e  ]\n                  [b c  ]        [       ]   [b c          ]"
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> SparseConcat (TensorFlow.TFOutput[] indices, TensorFlow.TFOutput[] values, TensorFlow.TFOutput[] shapes, long concat_dim, string operName = null);
    parameters:
    - id: indices
      type: TensorFlow.TFOutput[]
      description: 2-D.  Indices of each input `SparseTensor`.
    - id: values
      type: TensorFlow.TFOutput[]
      description: 1-D.  Non-empty values of each `SparseTensor`.
    - id: shapes
      type: TensorFlow.TFOutput[]
      description: 1-D.  Shapes of each `SparseTensor`.
    - id: concat_dim
      type: System.Int64
      description: >-
        Dimension to concatenate along. Must be in range [-rank, rank),
                      where rank is the number of dimensions in each input `SparseTensor`.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseConcat'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      output_indices: 2-D.  Indices of the concatenated `SparseTensor`.
                      output_values: 1-D.  Non-empty values of the concatenated `SparseTensor`.
                      output_shape: 1-D.  Shape of the concatenated `SparseTensor`.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.SparseConcat*
  exceptions: []
- uid: TensorFlow.TFGraph.SparseCross(TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],System.Boolean,System.Int64,System.Int64,TensorFlow.TFDataType,TensorFlow.TFDataType,System.String)
  id: SparseCross(TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],System.Boolean,System.Int64,System.Int64,TensorFlow.TFDataType,TensorFlow.TFDataType,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SparseCross(TFOutput[], TFOutput[], TFOutput[], TFOutput[], Boolean, Int64, Int64, TFDataType, TFDataType, String)
  nameWithType: TFGraph.SparseCross(TFOutput[], TFOutput[], TFOutput[], TFOutput[], Boolean, Int64, Int64, TFDataType, TFDataType, String)
  fullName: TFGraph.SparseCross(TFOutput[], TFOutput[], TFOutput[], TFOutput[], Boolean, Int64, Int64, TFDataType, TFDataType, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Generates sparse cross from a list of sparse and dense tensors.
  remarks: "The op takes two lists, one of 2D `SparseTensor` and one of 2D `Tensor`, each\n              representing features of one feature column. It outputs a 2D `SparseTensor` with\n              the batchwise crosses of these features.\n              \n              For example, if the inputs are\n              \n                  inputs[0]: SparseTensor with shape = [2, 2]\n                  [0, 0]: \"a\"\n                  [1, 0]: \"b\"\n                  [1, 1]: \"c\"\n              \n                  inputs[1]: SparseTensor with shape = [2, 1]\n                  [0, 0]: \"d\"\n                  [1, 0]: \"e\"\n              \n                  inputs[2]: Tensor [[\"f\"], [\"g\"]]\n              \n              then the output will be\n              \n                  shape = [2, 2]\n                  [0, 0]: \"a_X_d_X_f\"\n                  [1, 0]: \"b_X_e_X_g\"\n                  [1, 1]: \"c_X_e_X_g\"\n              \n              if hashed_output=true then the output will be\n              \n                  shape = [2, 2]\n                  [0, 0]: FingerprintCat64(\n                              Fingerprint64(\"f\"), FingerprintCat64(\n                                  Fingerprint64(\"d\"), Fingerprint64(\"a\")))\n                  [1, 0]: FingerprintCat64(\n                              Fingerprint64(\"g\"), FingerprintCat64(\n                                  Fingerprint64(\"e\"), Fingerprint64(\"b\")))\n                  [1, 1]: FingerprintCat64(\n                              Fingerprint64(\"g\"), FingerprintCat64(\n                                  Fingerprint64(\"e\"), Fingerprint64(\"c\")))"
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> SparseCross (TensorFlow.TFOutput[] indices, TensorFlow.TFOutput[] values, TensorFlow.TFOutput[] shapes, TensorFlow.TFOutput[] dense_inputs, bool hashed_output, long num_buckets, long hash_key, TensorFlow.TFDataType out_type, TensorFlow.TFDataType internal_type, string operName = null);
    parameters:
    - id: indices
      type: TensorFlow.TFOutput[]
      description: 2-D.  Indices of each input `SparseTensor`.
    - id: values
      type: TensorFlow.TFOutput[]
      description: 1-D.   values of each `SparseTensor`.
    - id: shapes
      type: TensorFlow.TFOutput[]
      description: 1-D.   Shapes of each `SparseTensor`.
    - id: dense_inputs
      type: TensorFlow.TFOutput[]
      description: 2-D.    Columns represented by dense `Tensor`.
    - id: hashed_output
      type: System.Boolean
      description: >-
        If true, returns the hash of the cross instead of the string.
                      This will allow us avoiding string manipulations.
    - id: num_buckets
      type: System.Int64
      description: >-
        It is used if hashed_output is true.
                      output = hashed_value%num_buckets if num_buckets &gt; 0 else hashed_value.
    - id: hash_key
      type: System.Int64
      description: >-
        Specify the hash_key that will be used by the `FingerprintCat64`
                      function to combine the crosses fingerprints.
    - id: out_type
      type: TensorFlow.TFDataType
      description: To be added.
    - id: internal_type
      type: TensorFlow.TFDataType
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseCross'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      output_indices: 2-D.  Indices of the concatenated `SparseTensor`.
                      output_values: 1-D.  Non-empty values of the concatenated or hashed
                      `SparseTensor`.
                      output_shape: 1-D.  Shape of the concatenated `SparseTensor`.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.SparseCross*
  exceptions: []
- uid: TensorFlow.TFGraph.SparseDenseCwiseAdd(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: SparseDenseCwiseAdd(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SparseDenseCwiseAdd(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseDenseCwiseAdd(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseDenseCwiseAdd(TFOutput, TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: 'Adds up a SparseTensor and a dense Tensor, using these special rules:'
  remarks: "(1) Broadcasts the dense side to have the same shape as the sparse side, if\n                  eligible;\n              (2) Then, only the dense values pointed to by the indices of the SparseTensor\n                  participate in the cwise addition.\n              \n              By these rules, the result is a logical SparseTensor with exactly the same\n              indices and shape, but possibly with different non-zero values.  The output of\n              this Op is the resultant non-zero values."
  syntax:
    content: public TensorFlow.TFOutput SparseDenseCwiseAdd (TensorFlow.TFOutput sp_indices, TensorFlow.TFOutput sp_values, TensorFlow.TFOutput sp_shape, TensorFlow.TFOutput dense, string operName = null);
    parameters:
    - id: sp_indices
      type: TensorFlow.TFOutput
      description: >-
        2-D.  `N x R` matrix with the indices of non-empty values in a
                      SparseTensor, possibly not in canonical ordering.
    - id: sp_values
      type: TensorFlow.TFOutput
      description: 1-D.  `N` non-empty values corresponding to `sp_indices`.
    - id: sp_shape
      type: TensorFlow.TFOutput
      description: 1-D.  Shape of the input SparseTensor.
    - id: dense
      type: TensorFlow.TFOutput
      description: '`R`-D.  The dense Tensor operand.'
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseDenseCwiseAdd'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        1-D.  The `N` values that are operated on.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SparseDenseCwiseAdd*
  exceptions: []
- uid: TensorFlow.TFGraph.SparseDenseCwiseDiv(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: SparseDenseCwiseDiv(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SparseDenseCwiseDiv(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseDenseCwiseDiv(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseDenseCwiseDiv(TFOutput, TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Component-wise divides a SparseTensor by a dense Tensor.
  remarks: >-
    *Limitation*: this Op only broadcasts the dense side to the sparse side, but not
                  the other direction.
  syntax:
    content: public TensorFlow.TFOutput SparseDenseCwiseDiv (TensorFlow.TFOutput sp_indices, TensorFlow.TFOutput sp_values, TensorFlow.TFOutput sp_shape, TensorFlow.TFOutput dense, string operName = null);
    parameters:
    - id: sp_indices
      type: TensorFlow.TFOutput
      description: >-
        2-D.  `N x R` matrix with the indices of non-empty values in a
                      SparseTensor, possibly not in canonical ordering.
    - id: sp_values
      type: TensorFlow.TFOutput
      description: 1-D.  `N` non-empty values corresponding to `sp_indices`.
    - id: sp_shape
      type: TensorFlow.TFOutput
      description: 1-D.  Shape of the input SparseTensor.
    - id: dense
      type: TensorFlow.TFOutput
      description: '`R`-D.  The dense Tensor operand.'
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseDenseCwiseDiv'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        1-D.  The `N` values that are operated on.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SparseDenseCwiseDiv*
  exceptions: []
- uid: TensorFlow.TFGraph.SparseDenseCwiseMul(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: SparseDenseCwiseMul(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SparseDenseCwiseMul(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseDenseCwiseMul(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseDenseCwiseMul(TFOutput, TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Component-wise multiplies a SparseTensor by a dense Tensor.
  remarks: "The output locations corresponding to the implicitly zero elements in the sparse\n              tensor will be zero (i.e., will not take up storage space), regardless of the\n              contents of the dense tensor (even if it's +/-INF and that INF*0 == NaN).\n              \n              *Limitation*: this Op only broadcasts the dense side to the sparse side, but not\n              the other direction."
  syntax:
    content: public TensorFlow.TFOutput SparseDenseCwiseMul (TensorFlow.TFOutput sp_indices, TensorFlow.TFOutput sp_values, TensorFlow.TFOutput sp_shape, TensorFlow.TFOutput dense, string operName = null);
    parameters:
    - id: sp_indices
      type: TensorFlow.TFOutput
      description: >-
        2-D.  `N x R` matrix with the indices of non-empty values in a
                      SparseTensor, possibly not in canonical ordering.
    - id: sp_values
      type: TensorFlow.TFOutput
      description: 1-D.  `N` non-empty values corresponding to `sp_indices`.
    - id: sp_shape
      type: TensorFlow.TFOutput
      description: 1-D.  Shape of the input SparseTensor.
    - id: dense
      type: TensorFlow.TFOutput
      description: '`R`-D.  The dense Tensor operand.'
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseDenseCwiseMul'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        1-D.  The `N` values that are operated on.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SparseDenseCwiseMul*
  exceptions: []
- uid: TensorFlow.TFGraph.SparseFillEmptyRows(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: SparseFillEmptyRows(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SparseFillEmptyRows(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseFillEmptyRows(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseFillEmptyRows(TFOutput, TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Fills empty rows in the input 2-D `SparseTensor` with a default value.
  remarks: "The input `SparseTensor` is represented via the tuple of inputs\n              (`indices`, `values`, `dense_shape`).  The output `SparseTensor` has the\n              same `dense_shape` but with indices `output_indices` and values\n              `output_values`.\n              \n              This op inserts a single entry for every row that doesn't have any values.\n              The index is created as `[row, 0, ..., 0]` and the inserted value\n              is `default_value`.\n              \n              For example, suppose `sp_input` has shape `[5, 6]` and non-empty values:\n              \n                  [0, 1]: a\n                  [0, 3]: b\n                  [2, 0]: c\n                  [3, 1]: d\n              \n              Rows 1 and 4 are empty, so the output will be of shape `[5, 6]` with values:\n              \n                  [0, 1]: a\n                  [0, 3]: b\n                  [1, 0]: default_value\n                  [2, 0]: c\n                  [3, 1]: d\n                  [4, 0]: default_value\n              \n              The output `SparseTensor` will be in row-major order and will have the\n              same shape as the input.\n              \n              This op also returns an indicator vector shaped `[dense_shape[0]]` such that\n              \n                  empty_row_indicator[i] = True iff row i was an empty row.\n              \n              And a reverse index map vector shaped `[indices.shape[0]]` that is used during\n              backpropagation,\n              \n                  reverse_index_map[j] = out_j s.t. indices[j, :] == output_indices[out_j, :]"
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> SparseFillEmptyRows (TensorFlow.TFOutput indices, TensorFlow.TFOutput values, TensorFlow.TFOutput dense_shape, TensorFlow.TFOutput default_value, string operName = null);
    parameters:
    - id: indices
      type: TensorFlow.TFOutput
      description: 2-D. the indices of the sparse tensor.
    - id: values
      type: TensorFlow.TFOutput
      description: 1-D. the values of the sparse tensor.
    - id: dense_shape
      type: TensorFlow.TFOutput
      description: 1-D. the shape of the sparse tensor.
    - id: default_value
      type: TensorFlow.TFOutput
      description: >-
        0-D. default value to insert into location `[row, 0, ..., 0]`
                        for rows missing from the input sparse tensor.
                      output indices: 2-D. the indices of the filled sparse tensor.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseFillEmptyRows'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: "Returns a tuple with multiple values, as follows:\n              output_indices: \n              output_values: 1-D. the values of the filled sparse tensor.\n              empty_row_indicator: 1-D. whether the dense row was missing in the\n              input sparse tensor.\n              reverse_index_map: 1-D. a map from the input indices to the output indices.\n              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property."
  overload: TensorFlow.TFGraph.SparseFillEmptyRows*
  exceptions: []
- uid: TensorFlow.TFGraph.SparseFillEmptyRowsGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: SparseFillEmptyRowsGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SparseFillEmptyRowsGrad(TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseFillEmptyRowsGrad(TFOutput, TFOutput, String)
  fullName: TFGraph.SparseFillEmptyRowsGrad(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: The gradient of SparseFillEmptyRows.
  remarks: "Takes vectors reverse_index_map, shaped `[N]`, and grad_values,\n              shaped `[N_full]`, where `N_full &gt;= N` and copies data into either\n              `d_values` or `d_default_value`.  Here `d_values` is shaped `[N]` and\n              `d_default_value` is a scalar.\n              \n                d_values[j] = grad_values[reverse_index_map[j]]\n                d_default_value = sum_{k : 0 .. N_full - 1} (\n                   grad_values[k] * 1{k not in reverse_index_map})"
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput> SparseFillEmptyRowsGrad (TensorFlow.TFOutput reverse_index_map, TensorFlow.TFOutput grad_values, string operName = null);
    parameters:
    - id: reverse_index_map
      type: TensorFlow.TFOutput
      description: 1-D.  The reverse index map from SparseFillEmptyRows.
    - id: grad_values
      type: TensorFlow.TFOutput
      description: 1-D.  The gradients from backprop.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseFillEmptyRowsGrad'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      d_values: 1-D.  The backprop into values.
                      d_default_value: 0-D.  The backprop into default_value.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.SparseFillEmptyRowsGrad*
  exceptions: []
- uid: TensorFlow.TFGraph.SparseMatMul(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  id: SparseMatMul(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SparseMatMul(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, String)
  nameWithType: TFGraph.SparseMatMul(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, String)
  fullName: TFGraph.SparseMatMul(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Multiply matrix "a" by matrix "b".
  remarks: "The inputs must be two-dimensional matrices and the inner dimension of \"a\" must\n              match the outer dimension of \"b\". This op is optimized for the case where at\n              least one of \"a\" or \"b\" is sparse. The breakeven for using this versus a dense\n              matrix multiply on one platform was 30% zero values in the sparse matrix.\n              \n              The gradient computation of this operation will only take advantage of sparsity\n              in the input gradient when that gradient comes from a Relu."
  syntax:
    content: public TensorFlow.TFOutput SparseMatMul (TensorFlow.TFOutput a, TensorFlow.TFOutput b, Nullable<bool> transpose_a = null, Nullable<bool> transpose_b = null, Nullable<bool> a_is_sparse = null, Nullable<bool> b_is_sparse = null, string operName = null);
    parameters:
    - id: a
      type: TensorFlow.TFOutput
      description: To be added.
    - id: b
      type: TensorFlow.TFOutput
      description: To be added.
    - id: transpose_a
      type: System.Nullable{System.Boolean}
      description: Optional argument
    - id: transpose_b
      type: System.Nullable{System.Boolean}
      description: Optional argument
    - id: a_is_sparse
      type: System.Nullable{System.Boolean}
      description: Optional argument
    - id: b_is_sparse
      type: System.Nullable{System.Boolean}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseMatMul'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SparseMatMul*
  exceptions: []
- uid: TensorFlow.TFGraph.SparseReduceMax(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: SparseReduceMax(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SparseReduceMax(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.SparseReduceMax(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.SparseReduceMax(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the max of elements across dimensions of a SparseTensor.
  remarks: "This Op takes a SparseTensor and is the sparse counterpart to\n              `tf.reduce_max()`.  In particular, this Op also returns a dense `Tensor`\n              instead of a sparse one.\n              \n              Reduces `sp_input` along the dimensions given in `reduction_axes`.  Unless\n              `keep_dims` is true, the rank of the tensor is reduced by 1 for each entry in\n              `reduction_axes`. If `keep_dims` is true, the reduced dimensions are retained\n              with length 1.\n              \n              If `reduction_axes` has no entries, all dimensions are reduced, and a tensor\n              with a single element is returned.  Additionally, the axes can be negative,\n              which are interpreted according to the indexing rules in Python."
  syntax:
    content: public TensorFlow.TFOutput SparseReduceMax (TensorFlow.TFOutput input_indices, TensorFlow.TFOutput input_values, TensorFlow.TFOutput input_shape, TensorFlow.TFOutput reduction_axes, Nullable<bool> keep_dims = null, string operName = null);
    parameters:
    - id: input_indices
      type: TensorFlow.TFOutput
      description: >-
        2-D.  `N x R` matrix with the indices of non-empty values in a
                      SparseTensor, possibly not in canonical ordering.
    - id: input_values
      type: TensorFlow.TFOutput
      description: 1-D.  `N` non-empty values corresponding to `input_indices`.
    - id: input_shape
      type: TensorFlow.TFOutput
      description: 1-D.  Shape of the input SparseTensor.
    - id: reduction_axes
      type: TensorFlow.TFOutput
      description: 1-D.  Length-`K` vector containing the reduction axes.
    - id: keep_dims
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true, retain reduced dimensions with length 1.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseReduceMax'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        `R-K`-D.  The reduced Tensor.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SparseReduceMax*
  exceptions: []
- uid: TensorFlow.TFGraph.SparseReduceMaxSparse(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: SparseReduceMaxSparse(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SparseReduceMaxSparse(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.SparseReduceMaxSparse(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.SparseReduceMaxSparse(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the max of elements across dimensions of a SparseTensor.
  remarks: "This Op takes a SparseTensor and is the sparse counterpart to\n              `tf.reduce_max()`.  In contrast to SparseReduceMax, this Op returns a\n              SparseTensor.\n              \n              Reduces `sp_input` along the dimensions given in `reduction_axes`.  Unless\n              `keep_dims` is true, the rank of the tensor is reduced by 1 for each entry in\n              `reduction_axes`. If `keep_dims` is true, the reduced dimensions are retained\n              with length 1.\n              \n              If `reduction_axes` has no entries, all dimensions are reduced, and a tensor\n              with a single element is returned.  Additionally, the axes can be negative,\n              which are interpreted according to the indexing rules in Python."
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> SparseReduceMaxSparse (TensorFlow.TFOutput input_indices, TensorFlow.TFOutput input_values, TensorFlow.TFOutput input_shape, TensorFlow.TFOutput reduction_axes, Nullable<bool> keep_dims = null, string operName = null);
    parameters:
    - id: input_indices
      type: TensorFlow.TFOutput
      description: >-
        2-D.  `N x R` matrix with the indices of non-empty values in a
                      SparseTensor, possibly not in canonical ordering.
    - id: input_values
      type: TensorFlow.TFOutput
      description: 1-D.  `N` non-empty values corresponding to `input_indices`.
    - id: input_shape
      type: TensorFlow.TFOutput
      description: 1-D.  Shape of the input SparseTensor.
    - id: reduction_axes
      type: TensorFlow.TFOutput
      description: 1-D.  Length-`K` vector containing the reduction axes.
    - id: keep_dims
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true, retain reduced dimensions with length 1.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseReduceMaxSparse'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: "Returns a tuple with multiple values, as follows:\n              output_indices: \n              output_values: \n              output_shape: \n              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property."
  overload: TensorFlow.TFGraph.SparseReduceMaxSparse*
  exceptions: []
- uid: TensorFlow.TFGraph.SparseReduceSum(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: SparseReduceSum(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SparseReduceSum(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.SparseReduceSum(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.SparseReduceSum(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the sum of elements across dimensions of a SparseTensor.
  remarks: "This Op takes a SparseTensor and is the sparse counterpart to\n              `tf.reduce_sum()`.  In particular, this Op also returns a dense `Tensor`\n              instead of a sparse one.\n              \n              Reduces `sp_input` along the dimensions given in `reduction_axes`.  Unless\n              `keep_dims` is true, the rank of the tensor is reduced by 1 for each entry in\n              `reduction_axes`. If `keep_dims` is true, the reduced dimensions are retained\n              with length 1.\n              \n              If `reduction_axes` has no entries, all dimensions are reduced, and a tensor\n              with a single element is returned.  Additionally, the axes can be negative,\n              which are interpreted according to the indexing rules in Python."
  syntax:
    content: public TensorFlow.TFOutput SparseReduceSum (TensorFlow.TFOutput input_indices, TensorFlow.TFOutput input_values, TensorFlow.TFOutput input_shape, TensorFlow.TFOutput reduction_axes, Nullable<bool> keep_dims = null, string operName = null);
    parameters:
    - id: input_indices
      type: TensorFlow.TFOutput
      description: >-
        2-D.  `N x R` matrix with the indices of non-empty values in a
                      SparseTensor, possibly not in canonical ordering.
    - id: input_values
      type: TensorFlow.TFOutput
      description: 1-D.  `N` non-empty values corresponding to `input_indices`.
    - id: input_shape
      type: TensorFlow.TFOutput
      description: 1-D.  Shape of the input SparseTensor.
    - id: reduction_axes
      type: TensorFlow.TFOutput
      description: 1-D.  Length-`K` vector containing the reduction axes.
    - id: keep_dims
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true, retain reduced dimensions with length 1.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseReduceSum'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        `R-K`-D.  The reduced Tensor.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SparseReduceSum*
  exceptions: []
- uid: TensorFlow.TFGraph.SparseReduceSumSparse(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: SparseReduceSumSparse(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SparseReduceSumSparse(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.SparseReduceSumSparse(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.SparseReduceSumSparse(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the sum of elements across dimensions of a SparseTensor.
  remarks: "This Op takes a SparseTensor and is the sparse counterpart to\n              `tf.reduce_sum()`.  In contrast to SparseReduceSum, this Op returns a\n              SparseTensor.\n              \n              Reduces `sp_input` along the dimensions given in `reduction_axes`.  Unless\n              `keep_dims` is true, the rank of the tensor is reduced by 1 for each entry in\n              `reduction_axes`. If `keep_dims` is true, the reduced dimensions are retained\n              with length 1.\n              \n              If `reduction_axes` has no entries, all dimensions are reduced, and a tensor\n              with a single element is returned.  Additionally, the axes can be negative,\n              which are interpreted according to the indexing rules in Python."
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> SparseReduceSumSparse (TensorFlow.TFOutput input_indices, TensorFlow.TFOutput input_values, TensorFlow.TFOutput input_shape, TensorFlow.TFOutput reduction_axes, Nullable<bool> keep_dims = null, string operName = null);
    parameters:
    - id: input_indices
      type: TensorFlow.TFOutput
      description: >-
        2-D.  `N x R` matrix with the indices of non-empty values in a
                      SparseTensor, possibly not in canonical ordering.
    - id: input_values
      type: TensorFlow.TFOutput
      description: 1-D.  `N` non-empty values corresponding to `input_indices`.
    - id: input_shape
      type: TensorFlow.TFOutput
      description: 1-D.  Shape of the input SparseTensor.
    - id: reduction_axes
      type: TensorFlow.TFOutput
      description: 1-D.  Length-`K` vector containing the reduction axes.
    - id: keep_dims
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true, retain reduced dimensions with length 1.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseReduceSumSparse'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: "Returns a tuple with multiple values, as follows:\n              output_indices: \n              output_values: \n              output_shape: \n              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property."
  overload: TensorFlow.TFGraph.SparseReduceSumSparse*
  exceptions: []
- uid: TensorFlow.TFGraph.SparseReorder(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: SparseReorder(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SparseReorder(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseReorder(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseReorder(TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Reorders a SparseTensor into the canonical, row-major ordering.
  remarks: "Note that by convention, all sparse ops preserve the canonical ordering along\n              increasing dimension number. The only time ordering can be violated is during\n              manual manipulation of the indices and values vectors to add entries.\n              \n              Reordering does not affect the shape of the SparseTensor.\n              \n              If the tensor has rank `R` and `N` non-empty values, `input_indices` has\n              shape `[N, R]`, input_values has length `N`, and input_shape has length `R`."
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput> SparseReorder (TensorFlow.TFOutput input_indices, TensorFlow.TFOutput input_values, TensorFlow.TFOutput input_shape, string operName = null);
    parameters:
    - id: input_indices
      type: TensorFlow.TFOutput
      description: >-
        2-D.  `N x R` matrix with the indices of non-empty values in a
                      SparseTensor, possibly not in canonical ordering.
    - id: input_values
      type: TensorFlow.TFOutput
      description: 1-D.  `N` non-empty values corresponding to `input_indices`.
    - id: input_shape
      type: TensorFlow.TFOutput
      description: 1-D.  Shape of the input SparseTensor.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseReorder'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      output_indices: 2-D.  `N x R` matrix with the same indices as input_indices, but
                      in canonical row-major ordering.
                      output_values: 1-D.  `N` non-empty values corresponding to `output_indices`.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.SparseReorder*
  exceptions: []
- uid: TensorFlow.TFGraph.SparseReshape(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: SparseReshape(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SparseReshape(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseReshape(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseReshape(TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Reshapes a SparseTensor to represent values in a new dense shape.
  remarks: "This operation has the same semantics as reshape on the represented dense\n              tensor.  The `input_indices` are recomputed based on the requested `new_shape`.\n              \n              If one component of `new_shape` is the special value -1, the size of that\n              dimension is computed so that the total dense size remains constant.  At\n              most one component of `new_shape` can be -1.  The number of dense elements\n              implied by `new_shape` must be the same as the number of dense elements\n              originally implied by `input_shape`.\n              \n              Reshaping does not affect the order of values in the SparseTensor.\n              \n              If the input tensor has rank `R_in` and `N` non-empty values, and `new_shape`\n              has length `R_out`, then `input_indices` has shape `[N, R_in]`,\n              `input_shape` has length `R_in`, `output_indices` has shape `[N, R_out]`, and\n              `output_shape` has length `R_out`."
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput> SparseReshape (TensorFlow.TFOutput input_indices, TensorFlow.TFOutput input_shape, TensorFlow.TFOutput new_shape, string operName = null);
    parameters:
    - id: input_indices
      type: TensorFlow.TFOutput
      description: >-
        2-D.  `N x R_in` matrix with the indices of non-empty values in a
                      SparseTensor.
    - id: input_shape
      type: TensorFlow.TFOutput
      description: 1-D.  `R_in` vector with the input SparseTensor's dense shape.
    - id: new_shape
      type: TensorFlow.TFOutput
      description: 1-D.  `R_out` vector with the requested new dense shape.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseReshape'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      output_indices: 2-D.  `N x R_out` matrix with the updated indices of non-empty
                      values in the output SparseTensor.
                      output_shape: 1-D.  `R_out` vector with the full dense shape of the output
                      SparseTensor.  This is the same as `new_shape` but with any -1 dimensions
                      filled in.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.SparseReshape*
  exceptions: []
- uid: TensorFlow.TFGraph.SparseSegmentMean(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: SparseSegmentMean(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SparseSegmentMean(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseSegmentMean(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseSegmentMean(TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the mean along sparse segments of a tensor.
  remarks: "Read @{$math_ops#segmentation$the section on segmentation} for an explanation of\n              segments.\n              \n              Like `SegmentMean`, but `segment_ids` can have rank less than `data`'s first\n              dimension, selecting a subset of dimension 0, specified by `indices`."
  syntax:
    content: public TensorFlow.TFOutput SparseSegmentMean (TensorFlow.TFOutput data, TensorFlow.TFOutput indices, TensorFlow.TFOutput segment_ids, string operName = null);
    parameters:
    - id: data
      type: TensorFlow.TFOutput
      description: To be added.
    - id: indices
      type: TensorFlow.TFOutput
      description: A 1-D tensor. Has same rank as `segment_ids`.
    - id: segment_ids
      type: TensorFlow.TFOutput
      description: A 1-D tensor. Values should be sorted and can be repeated.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSegmentMean'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Has same shape as data, except for dimension 0 which
                      has size `k`, the number of segments.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SparseSegmentMean*
  exceptions: []
- uid: TensorFlow.TFGraph.SparseSegmentMeanGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: SparseSegmentMeanGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SparseSegmentMeanGrad(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseSegmentMeanGrad(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseSegmentMeanGrad(TFOutput, TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes gradients for SparseSegmentMean.
  remarks: >-
    Returns tensor "output" with same shape as grad, except for dimension 0 whose
                  value is output_dim0.
  syntax:
    content: public TensorFlow.TFOutput SparseSegmentMeanGrad (TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, TensorFlow.TFOutput segment_ids, TensorFlow.TFOutput output_dim0, string operName = null);
    parameters:
    - id: grad
      type: TensorFlow.TFOutput
      description: gradient propagated to the SparseSegmentMean op.
    - id: indices
      type: TensorFlow.TFOutput
      description: indices passed to the corresponding SparseSegmentMean op.
    - id: segment_ids
      type: TensorFlow.TFOutput
      description: segment_ids passed to the corresponding SparseSegmentMean op.
    - id: output_dim0
      type: TensorFlow.TFOutput
      description: dimension 0 of "data" passed to SparseSegmentMean op.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSegmentMeanGrad'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SparseSegmentMeanGrad*
  exceptions: []
- uid: TensorFlow.TFGraph.SparseSegmentSqrtN(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: SparseSegmentSqrtN(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SparseSegmentSqrtN(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseSegmentSqrtN(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseSegmentSqrtN(TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the sum along sparse segments of a tensor divided by the sqrt of N.
  remarks: "N is the size of the segment being reduced.\n              \n              Read @{$math_ops#segmentation$the section on segmentation} for an explanation of\n              segments."
  syntax:
    content: public TensorFlow.TFOutput SparseSegmentSqrtN (TensorFlow.TFOutput data, TensorFlow.TFOutput indices, TensorFlow.TFOutput segment_ids, string operName = null);
    parameters:
    - id: data
      type: TensorFlow.TFOutput
      description: To be added.
    - id: indices
      type: TensorFlow.TFOutput
      description: A 1-D tensor. Has same rank as `segment_ids`.
    - id: segment_ids
      type: TensorFlow.TFOutput
      description: A 1-D tensor. Values should be sorted and can be repeated.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSegmentSqrtN'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Has same shape as data, except for dimension 0 which
                      has size `k`, the number of segments.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SparseSegmentSqrtN*
  exceptions: []
- uid: TensorFlow.TFGraph.SparseSegmentSqrtNGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: SparseSegmentSqrtNGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SparseSegmentSqrtNGrad(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseSegmentSqrtNGrad(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseSegmentSqrtNGrad(TFOutput, TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes gradients for SparseSegmentSqrtN.
  remarks: >-
    Returns tensor "output" with same shape as grad, except for dimension 0 whose
                  value is output_dim0.
  syntax:
    content: public TensorFlow.TFOutput SparseSegmentSqrtNGrad (TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, TensorFlow.TFOutput segment_ids, TensorFlow.TFOutput output_dim0, string operName = null);
    parameters:
    - id: grad
      type: TensorFlow.TFOutput
      description: gradient propagated to the SparseSegmentSqrtN op.
    - id: indices
      type: TensorFlow.TFOutput
      description: indices passed to the corresponding SparseSegmentSqrtN op.
    - id: segment_ids
      type: TensorFlow.TFOutput
      description: segment_ids passed to the corresponding SparseSegmentSqrtN op.
    - id: output_dim0
      type: TensorFlow.TFOutput
      description: dimension 0 of "data" passed to SparseSegmentSqrtN op.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSegmentSqrtNGrad'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SparseSegmentSqrtNGrad*
  exceptions: []
- uid: TensorFlow.TFGraph.SparseSegmentSum(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: SparseSegmentSum(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SparseSegmentSum(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseSegmentSum(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseSegmentSum(TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the sum along sparse segments of a tensor.
  remarks: "Read @{$math_ops#segmentation$the section on segmentation} for an explanation of\n              segments.\n              \n              Like `SegmentSum`, but `segment_ids` can have rank less than `data`'s first\n              dimension, selecting a subset of dimension 0, specified by `indices`.\n              \n              For example:\n              \n              ```python\n              c = tf.constant([[1,2,3,4], [-1,-2,-3,-4], [5,6,7,8]])\n              \n              # Select two rows, one segment.\n              tf.sparse_segment_sum(c, tf.constant([0, 1]), tf.constant([0, 0]))\n              # =&gt; [[0 0 0 0]]\n              \n              # Select two rows, two segment.\n              tf.sparse_segment_sum(c, tf.constant([0, 1]), tf.constant([0, 1]))\n              # =&gt; [[ 1  2  3  4]\n              #     [-1 -2 -3 -4]]\n              \n              # Select all rows, two segments.\n              tf.sparse_segment_sum(c, tf.constant([0, 1, 2]), tf.constant([0, 0, 1]))\n              # =&gt; [[0 0 0 0]\n              #     [5 6 7 8]]\n              \n              # Which is equivalent to:\n              tf.segment_sum(c, tf.constant([0, 0, 1]))\n              ```"
  syntax:
    content: public TensorFlow.TFOutput SparseSegmentSum (TensorFlow.TFOutput data, TensorFlow.TFOutput indices, TensorFlow.TFOutput segment_ids, string operName = null);
    parameters:
    - id: data
      type: TensorFlow.TFOutput
      description: To be added.
    - id: indices
      type: TensorFlow.TFOutput
      description: A 1-D tensor. Has same rank as `segment_ids`.
    - id: segment_ids
      type: TensorFlow.TFOutput
      description: A 1-D tensor. Values should be sorted and can be repeated.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSegmentSum'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Has same shape as data, except for dimension 0 which
                      has size `k`, the number of segments.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SparseSegmentSum*
  exceptions: []
- uid: TensorFlow.TFGraph.SparseSoftmax(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: SparseSoftmax(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SparseSoftmax(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseSoftmax(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseSoftmax(TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Applies softmax to a batched N-D `SparseTensor`.
  remarks: "The inputs represent an N-D SparseTensor  with logical shape `[..., B, C]`\n              (where `N &gt;= 2`), and with indices sorted in the canonical lexicographic order.\n              \n              This op is equivalent to applying the normal `tf.nn.softmax()` to each innermost\n              logical submatrix with shape `[B, C]`, but with the catch that *the implicitly\n              zero elements do not participate*.  Specifically, the algorithm is equivalent\n              to the following:\n              \n                (1) Applies `tf.nn.softmax()` to a densified view of each innermost submatrix\n                    with shape `[B, C]`, along the size-C dimension;\n                (2) Masks out the original implicitly-zero locations;\n                (3) Renormalizes the remaining elements.\n              \n              Hence, the `SparseTensor` result has exactly the same non-zero indices and\n              shape."
  syntax:
    content: public TensorFlow.TFOutput SparseSoftmax (TensorFlow.TFOutput sp_indices, TensorFlow.TFOutput sp_values, TensorFlow.TFOutput sp_shape, string operName = null);
    parameters:
    - id: sp_indices
      type: TensorFlow.TFOutput
      description: >-
        2-D.  `NNZ x R` matrix with the indices of non-empty values in a
                      SparseTensor, in canonical ordering.
    - id: sp_values
      type: TensorFlow.TFOutput
      description: 1-D.  `NNZ` non-empty values corresponding to `sp_indices`.
    - id: sp_shape
      type: TensorFlow.TFOutput
      description: 1-D.  Shape of the input SparseTensor.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSoftmax'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        1-D.  The `NNZ` values for the result `SparseTensor`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SparseSoftmax*
  exceptions: []
- uid: TensorFlow.TFGraph.SparseSoftmaxCrossEntropyWithLogits(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: SparseSoftmaxCrossEntropyWithLogits(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SparseSoftmaxCrossEntropyWithLogits(TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseSoftmaxCrossEntropyWithLogits(TFOutput, TFOutput, String)
  fullName: TFGraph.SparseSoftmaxCrossEntropyWithLogits(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes softmax cross entropy cost and gradients to backpropagate.
  remarks: "Unlike `SoftmaxCrossEntropyWithLogits`, this operation does not accept\n              a matrix of label probabilities, but rather a single label per row\n              of features.  This label is considered to have probability 1.0 for the\n              given row.\n              \n              Inputs are the logits, not probabilities."
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput> SparseSoftmaxCrossEntropyWithLogits (TensorFlow.TFOutput features, TensorFlow.TFOutput labels, string operName = null);
    parameters:
    - id: features
      type: TensorFlow.TFOutput
      description: batch_size x num_classes matrix
    - id: labels
      type: TensorFlow.TFOutput
      description: >-
        batch_size vector with values in [0, num_classes).
                      This is the label for the given minibatch entry.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSoftmaxCrossEntropyWithLogits'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      loss: Per example loss (batch_size vector).
                      backprop: backpropagated gradients (batch_size x num_classes matrix).
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.SparseSoftmaxCrossEntropyWithLogits*
  exceptions: []
- uid: TensorFlow.TFGraph.SparseSparseMaximum(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: SparseSparseMaximum(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SparseSparseMaximum(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseSparseMaximum(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseSparseMaximum(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns the element-wise max of two SparseTensors.
  remarks: Assumes the two SparseTensors have the same shape, i.e., no broadcasting.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput> SparseSparseMaximum (TensorFlow.TFOutput a_indices, TensorFlow.TFOutput a_values, TensorFlow.TFOutput a_shape, TensorFlow.TFOutput b_indices, TensorFlow.TFOutput b_values, TensorFlow.TFOutput b_shape, string operName = null);
    parameters:
    - id: a_indices
      type: TensorFlow.TFOutput
      description: >-
        2-D.  `N x R` matrix with the indices of non-empty values in a
                      SparseTensor, in the canonical lexicographic ordering.
    - id: a_values
      type: TensorFlow.TFOutput
      description: 1-D.  `N` non-empty values corresponding to `a_indices`.
    - id: a_shape
      type: TensorFlow.TFOutput
      description: 1-D.  Shape of the input SparseTensor.
    - id: b_indices
      type: TensorFlow.TFOutput
      description: counterpart to `a_indices` for the other operand.
    - id: b_values
      type: TensorFlow.TFOutput
      description: counterpart to `a_values` for the other operand; must be of the same dtype.
    - id: b_shape
      type: TensorFlow.TFOutput
      description: counterpart to `a_shape` for the other operand; the two shapes must be equal.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSparseMaximum'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      output_indices: 2-D.  The indices of the output SparseTensor.
                      output_values: 1-D.  The values of the output SparseTensor.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.SparseSparseMaximum*
  exceptions: []
- uid: TensorFlow.TFGraph.SparseSparseMinimum(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: SparseSparseMinimum(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SparseSparseMinimum(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseSparseMinimum(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseSparseMinimum(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns the element-wise min of two SparseTensors.
  remarks: Assumes the two SparseTensors have the same shape, i.e., no broadcasting.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput> SparseSparseMinimum (TensorFlow.TFOutput a_indices, TensorFlow.TFOutput a_values, TensorFlow.TFOutput a_shape, TensorFlow.TFOutput b_indices, TensorFlow.TFOutput b_values, TensorFlow.TFOutput b_shape, string operName = null);
    parameters:
    - id: a_indices
      type: TensorFlow.TFOutput
      description: >-
        2-D.  `N x R` matrix with the indices of non-empty values in a
                      SparseTensor, in the canonical lexicographic ordering.
    - id: a_values
      type: TensorFlow.TFOutput
      description: 1-D.  `N` non-empty values corresponding to `a_indices`.
    - id: a_shape
      type: TensorFlow.TFOutput
      description: 1-D.  Shape of the input SparseTensor.
    - id: b_indices
      type: TensorFlow.TFOutput
      description: counterpart to `a_indices` for the other operand.
    - id: b_values
      type: TensorFlow.TFOutput
      description: counterpart to `a_values` for the other operand; must be of the same dtype.
    - id: b_shape
      type: TensorFlow.TFOutput
      description: counterpart to `a_shape` for the other operand; the two shapes must be equal.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSparseMinimum'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      output_indices: 2-D.  The indices of the output SparseTensor.
                      output_values: 1-D.  The values of the output SparseTensor.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.SparseSparseMinimum*
  exceptions: []
- uid: TensorFlow.TFGraph.SparseSplit(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.String)
  id: SparseSplit(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SparseSplit(TFOutput, TFOutput, TFOutput, TFOutput, Int64, String)
  nameWithType: TFGraph.SparseSplit(TFOutput, TFOutput, TFOutput, TFOutput, Int64, String)
  fullName: TFGraph.SparseSplit(TFOutput, TFOutput, TFOutput, TFOutput, Int64, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Split a `SparseTensor` into `num_split` tensors along one dimension.
  remarks: "If the `shape[split_dim]` is not an integer multiple of `num_split`. Slices\n              `[0 : shape[split_dim] % num_split]` gets one extra dimension.\n              For example, if `split_dim = 1` and `num_split = 2` and the input is\n              \n                  input_tensor = shape = [2, 7]\n                  [    a   d e  ]\n                  [b c          ]\n              \n              Graphically the output tensors are:\n              \n                  output_tensor[0] = shape = [2, 4]\n                  [    a  ]\n                  [b c    ]\n              \n                  output_tensor[1] = shape = [2, 3]\n                  [ d e  ]\n                  [      ]"
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[]> SparseSplit (TensorFlow.TFOutput split_dim, TensorFlow.TFOutput indices, TensorFlow.TFOutput values, TensorFlow.TFOutput shape, long num_split, string operName = null);
    parameters:
    - id: split_dim
      type: TensorFlow.TFOutput
      description: >-
        0-D.  The dimension along which to split.  Must be in the range
                      `[0, rank(shape))`.
    - id: indices
      type: TensorFlow.TFOutput
      description: 2-D tensor represents the indices of the sparse tensor.
    - id: values
      type: TensorFlow.TFOutput
      description: 1-D tensor represents the values of the sparse tensor.
    - id: shape
      type: TensorFlow.TFOutput
      description: >-
        1-D. tensor represents the shape of the sparse tensor.
                      output indices: A list of 1-D tensors represents the indices of the output
                      sparse tensors.
    - id: num_split
      type: System.Int64
      description: The number of ways to split.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSplit'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[]}
      description: "Returns a tuple with multiple values, as follows:\n              output_indices: \n              output_values: A list of 1-D tensors represents the values of the output sparse\n              tensors.\n              output_shape: A list of 1-D tensors represents the shape of the output sparse\n              tensors.\n              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property."
  overload: TensorFlow.TFGraph.SparseSplit*
  exceptions: []
- uid: TensorFlow.TFGraph.SparseTensorDenseAdd(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: SparseTensorDenseAdd(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SparseTensorDenseAdd(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseTensorDenseAdd(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseTensorDenseAdd(TFOutput, TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Adds up a `SparseTensor` and a dense `Tensor`, producing a dense `Tensor`.
  remarks: This Op does not require `a_indices` be sorted in standard lexicographic order.
  syntax:
    content: public TensorFlow.TFOutput SparseTensorDenseAdd (TensorFlow.TFOutput a_indices, TensorFlow.TFOutput a_values, TensorFlow.TFOutput a_shape, TensorFlow.TFOutput b, string operName = null);
    parameters:
    - id: a_indices
      type: TensorFlow.TFOutput
      description: 2-D.  The `indices` of the `SparseTensor`, with shape `[nnz, ndims]`.
    - id: a_values
      type: TensorFlow.TFOutput
      description: 1-D.  The `values` of the `SparseTensor`, with shape `[nnz]`.
    - id: a_shape
      type: TensorFlow.TFOutput
      description: 1-D.  The `shape` of the `SparseTensor`, with shape `[ndims]`.
    - id: b
      type: TensorFlow.TFOutput
      description: '`ndims`-D Tensor.  With shape `a_shape`.'
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseTensorDenseAdd'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SparseTensorDenseAdd*
  exceptions: []
- uid: TensorFlow.TFGraph.SparseTensorDenseMatMul(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  id: SparseTensorDenseMatMul(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SparseTensorDenseMatMul(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  nameWithType: TFGraph.SparseTensorDenseMatMul(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  fullName: TFGraph.SparseTensorDenseMatMul(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Multiply SparseTensor (of rank 2) "A" by dense matrix "B".
  remarks: "No validity checking is performed on the indices of A.  However, the following\n              input format is recommended for optimal behavior:\n              \n              if adjoint_a == false:\n                A should be sorted in lexicographically increasing order.  Use SparseReorder\n                if you're not sure.\n              if adjoint_a == true:\n                A should be sorted in order of increasing dimension 1 (i.e., \"column major\"\n                order instead of \"row major\" order)."
  syntax:
    content: public TensorFlow.TFOutput SparseTensorDenseMatMul (TensorFlow.TFOutput a_indices, TensorFlow.TFOutput a_values, TensorFlow.TFOutput a_shape, TensorFlow.TFOutput b, Nullable<bool> adjoint_a = null, Nullable<bool> adjoint_b = null, string operName = null);
    parameters:
    - id: a_indices
      type: TensorFlow.TFOutput
      description: 2-D.  The `indices` of the `SparseTensor`, size `[nnz, 2]` Matrix.
    - id: a_values
      type: TensorFlow.TFOutput
      description: 1-D.  The `values` of the `SparseTensor`, size `[nnz]` Vector.
    - id: a_shape
      type: TensorFlow.TFOutput
      description: 1-D.  The `shape` of the `SparseTensor`, size `[2]` Vector.
    - id: b
      type: TensorFlow.TFOutput
      description: 2-D.  A dense Matrix.
    - id: adjoint_a
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      Use the adjoint of A in the matrix multiply.  If A is complex, this
                      is transpose(conj(A)).  Otherwise it's transpose(A).
    - id: adjoint_b
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      Use the adjoint of B in the matrix multiply.  If B is complex, this
                      is transpose(conj(B)).  Otherwise it's transpose(B).
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseTensorDenseMatMul'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SparseTensorDenseMatMul*
  exceptions: []
- uid: TensorFlow.TFGraph.SparseTensorSliceDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: SparseTensorSliceDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SparseTensorSliceDataset(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseTensorSliceDataset(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseTensorSliceDataset(TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Creates a dataset that splits a SparseTensor into elements row-wise.
  syntax:
    content: public TensorFlow.TFOutput SparseTensorSliceDataset (TensorFlow.TFOutput indices, TensorFlow.TFOutput values, TensorFlow.TFOutput dense_shape, string operName = null);
    parameters:
    - id: indices
      type: TensorFlow.TFOutput
      description: To be added.
    - id: values
      type: TensorFlow.TFOutput
      description: To be added.
    - id: dense_shape
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseTensorSliceDataset'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SparseTensorSliceDataset*
  exceptions: []
- uid: TensorFlow.TFGraph.SparseToDense(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: SparseToDense(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SparseToDense(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.SparseToDense(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.SparseToDense(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Converts a sparse representation into a dense tensor.
  remarks: "Builds an array `dense` with shape `output_shape` such that\n              \n              ```\n              # If sparse_indices is scalar\n              dense[i] = (i == sparse_indices ? sparse_values : default_value)\n              \n              # If sparse_indices is a vector, then for each i\n              dense[sparse_indices[i]] = sparse_values[i]\n              \n              # If sparse_indices is an n by d matrix, then for each i in [0, n)\n              dense[sparse_indices[i][0], ..., sparse_indices[i][d-1]] = sparse_values[i]\n              ```\n              \n              All other values in `dense` are set to `default_value`.  If `sparse_values` is a\n              scalar, all sparse indices are set to this single value.\n              \n              Indices should be sorted in lexicographic order, and indices must not\n              contain any repeats. If `validate_indices` is true, these properties\n              are checked during execution."
  syntax:
    content: public TensorFlow.TFOutput SparseToDense (TensorFlow.TFOutput sparse_indices, TensorFlow.TFOutput output_shape, TensorFlow.TFOutput sparse_values, TensorFlow.TFOutput default_value, Nullable<bool> validate_indices = null, string operName = null);
    parameters:
    - id: sparse_indices
      type: TensorFlow.TFOutput
      description: >-
        0-D, 1-D, or 2-D.  `sparse_indices[i]` contains the complete
                      index where `sparse_values[i]` will be placed.
    - id: output_shape
      type: TensorFlow.TFOutput
      description: 1-D.  Shape of the dense output tensor.
    - id: sparse_values
      type: TensorFlow.TFOutput
      description: >-
        1-D.  Values corresponding to each row of `sparse_indices`,
                      or a scalar value to be used for all sparse indices.
    - id: default_value
      type: TensorFlow.TFOutput
      description: >-
        Scalar value to set for indices not specified in
                      `sparse_indices`.
    - id: validate_indices
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true, indices are checked to make sure they are sorted in
                      lexicographic order and that there are no repeats.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseToDense'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Dense output tensor of shape `output_shape`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SparseToDense*
  exceptions: []
- uid: TensorFlow.TFGraph.SparseToSparseSetOperation(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.Nullable{System.Boolean},System.String)
  id: SparseToSparseSetOperation(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SparseToSparseSetOperation(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, String, Nullable<Boolean>, String)
  nameWithType: TFGraph.SparseToSparseSetOperation(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, String, Nullable<Boolean>, String)
  fullName: TFGraph.SparseToSparseSetOperation(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, String, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Applies set operation along last dimension of 2 `SparseTensor` inputs.
  remarks: "See SetOperationOp::SetOperationFromContext for values of `set_operation`.\n              \n              If `validate_indices` is `True`, `SparseToSparseSetOperation` validates the\n              order and range of `set1` and `set2` indices.\n              \n              Input `set1` is a `SparseTensor` represented by `set1_indices`, `set1_values`,\n              and `set1_shape`. For `set1` ranked `n`, 1st `n-1` dimensions must be the same\n              as `set2`. Dimension `n` contains values in a set, duplicates are allowed but\n              ignored.\n              \n              Input `set2` is a `SparseTensor` represented by `set2_indices`, `set2_values`,\n              and `set2_shape`. For `set2` ranked `n`, 1st `n-1` dimensions must be the same\n              as `set1`. Dimension `n` contains values in a set, duplicates are allowed but\n              ignored.\n              \n              If `validate_indices` is `True`, this op validates the order and range of `set1`\n              and `set2` indices.\n              \n              Output `result` is a `SparseTensor` represented by `result_indices`,\n              `result_values`, and `result_shape`. For `set1` and `set2` ranked `n`, this\n              has rank `n` and the same 1st `n-1` dimensions as `set1` and `set2`. The `nth`\n              dimension contains the result of `set_operation` applied to the corresponding\n              `[0...n-1]` dimension of `set`."
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> SparseToSparseSetOperation (TensorFlow.TFOutput set1_indices, TensorFlow.TFOutput set1_values, TensorFlow.TFOutput set1_shape, TensorFlow.TFOutput set2_indices, TensorFlow.TFOutput set2_values, TensorFlow.TFOutput set2_shape, string set_operation, Nullable<bool> validate_indices = null, string operName = null);
    parameters:
    - id: set1_indices
      type: TensorFlow.TFOutput
      description: >-
        2D `Tensor`, indices of a `SparseTensor`. Must be in row-major
                      order.
    - id: set1_values
      type: TensorFlow.TFOutput
      description: >-
        1D `Tensor`, values of a `SparseTensor`. Must be in row-major
                      order.
    - id: set1_shape
      type: TensorFlow.TFOutput
      description: >-
        1D `Tensor`, shape of a `SparseTensor`. `set1_shape[0...n-1]` must
                      be the same as `set2_shape[0...n-1]`, `set1_shape[n]` is the
                      max set size across `0...n-1` dimensions.
    - id: set2_indices
      type: TensorFlow.TFOutput
      description: >-
        2D `Tensor`, indices of a `SparseTensor`. Must be in row-major
                      order.
    - id: set2_values
      type: TensorFlow.TFOutput
      description: >-
        1D `Tensor`, values of a `SparseTensor`. Must be in row-major
                      order.
    - id: set2_shape
      type: TensorFlow.TFOutput
      description: >-
        1D `Tensor`, shape of a `SparseTensor`. `set2_shape[0...n-1]` must
                      be the same as `set1_shape[0...n-1]`, `set2_shape[n]` is the
                      max set size across `0...n-1` dimensions.
    - id: set_operation
      type: System.String
      description: To be added.
    - id: validate_indices
      type: System.Nullable{System.Boolean}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseToSparseSetOperation'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      result_indices: 2D indices of a `SparseTensor`.
                      result_values: 1D values of a `SparseTensor`.
                      result_shape: 1D `Tensor` shape of a `SparseTensor`. `result_shape[0...n-1]` is
                      the same as the 1st `n-1` dimensions of `set1` and `set2`, `result_shape[n]`
                      is the max result set size across all `0...n-1` dimensions.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.SparseToSparseSetOperation*
  exceptions: []
- uid: TensorFlow.TFGraph.Split(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.String)
  id: Split(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Split(TFOutput, TFOutput, Int64, String)
  nameWithType: TFGraph.Split(TFOutput, TFOutput, Int64, String)
  fullName: TFGraph.Split(TFOutput, TFOutput, Int64, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Splits a tensor into `num_split` tensors along one dimension.
  syntax:
    content: public TensorFlow.TFOutput[] Split (TensorFlow.TFOutput split_dim, TensorFlow.TFOutput value, long num_split, string operName = null);
    parameters:
    - id: split_dim
      type: TensorFlow.TFOutput
      description: >-
        0-D.  The dimension along which to split.  Must be in the range
                      `[-rank(value), rank(value))`.
    - id: value
      type: TensorFlow.TFOutput
      description: The tensor to split.
    - id: num_split
      type: System.Int64
      description: >-
        The number of ways to split.  Must evenly divide
                      `value.shape[split_dim]`.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Split'.
    return:
      type: TensorFlow.TFOutput[]
      description: >-
        They are identically shaped tensors, whose shape matches that of `value`
                      except along `split_dim`, where their sizes are
                      `values.shape[split_dim] / num_split`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Split*
  exceptions: []
- uid: TensorFlow.TFGraph.SplitV(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.String)
  id: SplitV(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SplitV(TFOutput, TFOutput, TFOutput, Int64, String)
  nameWithType: TFGraph.SplitV(TFOutput, TFOutput, TFOutput, Int64, String)
  fullName: TFGraph.SplitV(TFOutput, TFOutput, TFOutput, Int64, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Splits a tensor into `num_split` tensors along one dimension.
  syntax:
    content: public TensorFlow.TFOutput[] SplitV (TensorFlow.TFOutput value, TensorFlow.TFOutput size_splits, TensorFlow.TFOutput split_dim, long num_split, string operName = null);
    parameters:
    - id: value
      type: TensorFlow.TFOutput
      description: The tensor to split.
    - id: size_splits
      type: TensorFlow.TFOutput
      description: >-
        list containing the sizes of each output tensor along the split
                      dimension. Must sum to the dimension of value along split_dim.
                      Can contain one -1 indicating that dimension is to be inferred.
    - id: split_dim
      type: TensorFlow.TFOutput
      description: >-
        0-D.  The dimension along which to split.  Must be in the range
                      `[-rank(value), rank(value))`.
    - id: num_split
      type: System.Int64
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SplitV'.
    return:
      type: TensorFlow.TFOutput[]
      description: >-
        Tensors whose shape matches that of `value`
                      except along `split_dim`, where their sizes are
                      `size_splits[i]`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SplitV*
  exceptions: []
- uid: TensorFlow.TFGraph.Sqrt(TensorFlow.TFOutput,System.String)
  id: Sqrt(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Sqrt(TFOutput, String)
  nameWithType: TFGraph.Sqrt(TFOutput, String)
  fullName: TFGraph.Sqrt(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes square root of x element-wise.
  remarks: I.e., \\(y = \sqrt{x} = x^{1/2}\\).
  syntax:
    content: public TensorFlow.TFOutput Sqrt (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Sqrt'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Sqrt*
  exceptions: []
- uid: TensorFlow.TFGraph.SqrtGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: SqrtGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SqrtGrad(TFOutput, TFOutput, String)
  nameWithType: TFGraph.SqrtGrad(TFOutput, TFOutput, String)
  fullName: TFGraph.SqrtGrad(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the gradient for the sqrt of `x` wrt its input.
  remarks: >-
    Specifically, `grad = dy * 0.5 / y`, where `y = sqrt(x)`, and `dy`
                  is the corresponding input gradient.
  syntax:
    content: public TensorFlow.TFOutput SqrtGrad (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SqrtGrad'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SqrtGrad*
  exceptions: []
- uid: TensorFlow.TFGraph.Square(TensorFlow.TFOutput,System.String)
  id: Square(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Square(TFOutput, String)
  nameWithType: TFGraph.Square(TFOutput, String)
  fullName: TFGraph.Square(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes square of x element-wise.
  remarks: I.e., \\(y = x * x = x^2\\).
  syntax:
    content: public TensorFlow.TFOutput Square (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Square'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Square*
  exceptions: []
- uid: TensorFlow.TFGraph.SquaredDifference(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: SquaredDifference(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: SquaredDifference(TFOutput, TFOutput, String)
  nameWithType: TFGraph.SquaredDifference(TFOutput, TFOutput, String)
  fullName: TFGraph.SquaredDifference(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns (x - y)(x - y) element-wise.
  remarks: >-
    *NOTE*: `SquaredDifference` supports broadcasting. More about broadcasting
                  [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
  syntax:
    content: public TensorFlow.TFOutput SquaredDifference (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'SquaredDifference'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.SquaredDifference*
  exceptions: []
- uid: TensorFlow.TFGraph.Squeeze(TensorFlow.TFOutput,System.Int64[],System.String)
  id: Squeeze(TensorFlow.TFOutput,System.Int64[],System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Squeeze(TFOutput, Int64[], String)
  nameWithType: TFGraph.Squeeze(TFOutput, Int64[], String)
  fullName: TFGraph.Squeeze(TFOutput, Int64[], String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Removes dimensions of size 1 from the shape of a tensor.
  remarks: "Given a tensor `input`, this operation returns a tensor of the same type with\n              all dimensions of size 1 removed. If you don't want to remove all size 1\n              dimensions, you can remove specific size 1 dimensions by specifying\n              `squeeze_dims`.\n              \n              For example:\n              \n              ```\n              # 't' is a tensor of shape [1, 2, 1, 3, 1, 1]\n              shape(squeeze(t)) ==&gt; [2, 3]\n              ```\n              \n              Or, to remove specific size 1 dimensions:\n              \n              ```\n              # 't' is a tensor of shape [1, 2, 1, 3, 1, 1]\n              shape(squeeze(t, [2, 4])) ==&gt; [1, 2, 3, 1]\n              ```"
  syntax:
    content: public TensorFlow.TFOutput Squeeze (TensorFlow.TFOutput input, long[] squeeze_dims = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: The `input` to squeeze.
    - id: squeeze_dims
      type: System.Int64[]
      description: >-
        Optional argument
                      If specified, only squeezes the dimensions listed. The dimension
                      index starts at 0. It is an error to squeeze a dimension that is not 1.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Squeeze'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Contains the same data as `input`, but has one or more dimensions of
                      size 1 removed.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Squeeze*
  exceptions: []
- uid: TensorFlow.TFGraph.Stage(TensorFlow.TFOutput[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  id: Stage(TensorFlow.TFOutput[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Stage(TFOutput[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.Stage(TFOutput[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.Stage(TFOutput[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Stage values similar to a lightweight Enqueue.
  remarks: >-
    The basic functionality of this Op is similar to a queue with many
                  fewer capabilities and options.  This Op is optimized for performance.
  syntax:
    content: public TensorFlow.TFOperation Stage (TensorFlow.TFOutput[] values, Nullable<long> capacity = null, Nullable<long> memory_limit = null, string container = null, string shared_name = null, string operName = null);
    parameters:
    - id: values
      type: TensorFlow.TFOutput[]
      description: >-
        a list of tensors
                      dtypes A list of data types that inserted values should adhere to.
    - id: capacity
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      Maximum number of elements in the Staging Area. If &gt; 0, inserts
                      on the container will block when the capacity is reached.
    - id: memory_limit
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      The maximum number of bytes allowed for Tensors in the Staging Area.
                      If &gt; 0, inserts will block until sufficient space is available.
    - id: container
      type: System.String
      description: >-
        Optional argument
                      If non-empty, this queue is placed in the given container. Otherwise,
                      a default container is used.
    - id: shared_name
      type: System.String
      description: >-
        Optional argument
                      It is necessary to match this name to the matching Unstage Op.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Stage'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.Stage*
  exceptions: []
- uid: TensorFlow.TFGraph.Stage(TensorFlow.TFOutput[],System.String,System.String,System.String)
  id: Stage(TensorFlow.TFOutput[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Stage(TFOutput[], String, String, String)
  nameWithType: TFGraph.Stage(TFOutput[], String, String, String)
  fullName: TFGraph.Stage(TFOutput[], String, String, String)
  type: Method
  assemblies: []
  namespace: TensorFlow
  summary: Stage values similar to a lightweight Enqueue.
  remarks: >-
    The basic functionality of this Op is similar to a queue with many
                  fewer capabilities and options.  This Op is optimized for performance.
  syntax:
    content: public TensorFlow.TFOperation Stage (TensorFlow.TFOutput[] values, string container = null, string shared_name = null, string operName = null);
    parameters:
    - id: values
      type: TensorFlow.TFOutput[]
      description: a list of tensors
    - id: container
      type: System.String
      description: >-
        Optional argument
                      If non-empty, this queue is placed in the given container. Otherwise,
                      a default container is used.
    - id: shared_name
      type: System.String
      description: >-
        Optional argument
                      It is necessary to match this name to the matching Unstage Op.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Stage'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.Stage*
  exceptions: []
- uid: TensorFlow.TFGraph.StageClear(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  id: StageClear(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: StageClear(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.StageClear(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.StageClear(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Op removes all elements in the underlying container.
  syntax:
    content: public TensorFlow.TFOperation StageClear (TensorFlow.TFDataType[] dtypes, Nullable<long> capacity = null, Nullable<long> memory_limit = null, string container = null, string shared_name = null, string operName = null);
    parameters:
    - id: dtypes
      type: TensorFlow.TFDataType[]
      description: To be added.
    - id: capacity
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: memory_limit
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: container
      type: System.String
      description: Optional argument
    - id: shared_name
      type: System.String
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'StageClear'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.StageClear*
  exceptions: []
- uid: TensorFlow.TFGraph.StagePeek(TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  id: StagePeek(TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: StagePeek(TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.StagePeek(TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.StagePeek(TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Op peeks at the values at the specified index.  If the
  remarks: >-
    underlying container does not contain sufficient elements
                  this op will block until it does.   This Op is optimized for
                  performance.
  syntax:
    content: public TensorFlow.TFOutput[] StagePeek (TensorFlow.TFOutput index, TensorFlow.TFDataType[] dtypes, Nullable<long> capacity = null, Nullable<long> memory_limit = null, string container = null, string shared_name = null, string operName = null);
    parameters:
    - id: index
      type: TensorFlow.TFOutput
      description: To be added.
    - id: dtypes
      type: TensorFlow.TFDataType[]
      description: To be added.
    - id: capacity
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: memory_limit
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: container
      type: System.String
      description: Optional argument
    - id: shared_name
      type: System.String
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'StagePeek'.
    return:
      type: TensorFlow.TFOutput[]
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.StagePeek*
  exceptions: []
- uid: TensorFlow.TFGraph.StageSize(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  id: StageSize(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: StageSize(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.StageSize(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.StageSize(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Op returns the number of elements in the underlying container.
  syntax:
    content: public TensorFlow.TFOutput StageSize (TensorFlow.TFDataType[] dtypes, Nullable<long> capacity = null, Nullable<long> memory_limit = null, string container = null, string shared_name = null, string operName = null);
    parameters:
    - id: dtypes
      type: TensorFlow.TFDataType[]
      description: To be added.
    - id: capacity
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: memory_limit
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: container
      type: System.String
      description: Optional argument
    - id: shared_name
      type: System.String
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'StageSize'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.StageSize*
  exceptions: []
- uid: TensorFlow.TFGraph.StatelessRandomNormal(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  id: StatelessRandomNormal(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: StatelessRandomNormal(TFOutput, TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.StatelessRandomNormal(TFOutput, TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.StatelessRandomNormal(TFOutput, TFOutput, Nullable<TFDataType>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Outputs deterministic pseudorandom values from a normal distribution.
  remarks: "The generated values will have mean 0 and standard deviation 1.\n              \n              The outputs are a deterministic function of `shape` and `seed`."
  syntax:
    content: public TensorFlow.TFOutput StatelessRandomNormal (TensorFlow.TFOutput shape, TensorFlow.TFOutput seed, Nullable<TensorFlow.TFDataType> dtype = null, string operName = null);
    parameters:
    - id: shape
      type: TensorFlow.TFOutput
      description: The shape of the output tensor.
    - id: seed
      type: TensorFlow.TFOutput
      description: 2 seeds (shape [2]).
    - id: dtype
      type: System.Nullable{TensorFlow.TFDataType}
      description: >-
        Optional argument
                      The type of the output.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'StatelessRandomNormal'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Random values with specified shape.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.StatelessRandomNormal*
  exceptions: []
- uid: TensorFlow.TFGraph.StatelessRandomUniform(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  id: StatelessRandomUniform(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: StatelessRandomUniform(TFOutput, TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.StatelessRandomUniform(TFOutput, TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.StatelessRandomUniform(TFOutput, TFOutput, Nullable<TFDataType>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Outputs deterministic pseudorandom random values from a uniform distribution.
  remarks: "The generated values follow a uniform distribution in the range `[0, 1)`. The\n              lower bound 0 is included in the range, while the upper bound 1 is excluded.\n              \n              The outputs are a deterministic function of `shape` and `seed`."
  syntax:
    content: public TensorFlow.TFOutput StatelessRandomUniform (TensorFlow.TFOutput shape, TensorFlow.TFOutput seed, Nullable<TensorFlow.TFDataType> dtype = null, string operName = null);
    parameters:
    - id: shape
      type: TensorFlow.TFOutput
      description: The shape of the output tensor.
    - id: seed
      type: TensorFlow.TFOutput
      description: 2 seeds (shape [2]).
    - id: dtype
      type: System.Nullable{TensorFlow.TFDataType}
      description: >-
        Optional argument
                      The type of the output.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'StatelessRandomUniform'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Random values with specified shape.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.StatelessRandomUniform*
  exceptions: []
- uid: TensorFlow.TFGraph.StatelessTruncatedNormal(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  id: StatelessTruncatedNormal(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: StatelessTruncatedNormal(TFOutput, TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.StatelessTruncatedNormal(TFOutput, TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.StatelessTruncatedNormal(TFOutput, TFOutput, Nullable<TFDataType>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Outputs deterministic pseudorandom values from a truncated normal distribution.
  remarks: "The generated values follow a normal distribution with mean 0 and standard\n              deviation 1, except that values whose magnitude is more than 2 standard\n              deviations from the mean are dropped and re-picked.\n              \n              The outputs are a deterministic function of `shape` and `seed`."
  syntax:
    content: public TensorFlow.TFOutput StatelessTruncatedNormal (TensorFlow.TFOutput shape, TensorFlow.TFOutput seed, Nullable<TensorFlow.TFDataType> dtype = null, string operName = null);
    parameters:
    - id: shape
      type: TensorFlow.TFOutput
      description: The shape of the output tensor.
    - id: seed
      type: TensorFlow.TFOutput
      description: 2 seeds (shape [2]).
    - id: dtype
      type: System.Nullable{TensorFlow.TFDataType}
      description: >-
        Optional argument
                      The type of the output.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'StatelessTruncatedNormal'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Random values with specified shape.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.StatelessTruncatedNormal*
  exceptions: []
- uid: TensorFlow.TFGraph.StopGradient(TensorFlow.TFOutput,System.String)
  id: StopGradient(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: StopGradient(TFOutput, String)
  nameWithType: TFGraph.StopGradient(TFOutput, String)
  fullName: TFGraph.StopGradient(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Stops gradient computation.
  remarks: "When executed in a graph, this op outputs its input tensor as-is.\n              \n              When building ops to compute gradients, this op prevents the contribution of\n              its inputs to be taken into account.  Normally, the gradient generator adds ops\n              to a graph to compute the derivatives of a specified 'loss' by recursively\n              finding out inputs that contributed to its computation.  If you insert this op\n              in the graph it inputs are masked from the gradient generator.  They are not\n              taken into account for computing gradients.\n              \n              This is useful any time you want to compute a value with TensorFlow but need\n              to pretend that the value was a constant. Some examples include:\n              \n              *  The *EM* algorithm where the *M-step* should not involve backpropagation\n                 through the output of the *E-step*.\n              *  Contrastive divergence training of Boltzmann machines where, when\n                 differentiating the energy function, the training must not backpropagate\n                 through the graph that generated the samples from the model.\n              *  Adversarial training, where no backprop should happen through the adversarial\n                 example generation process."
  syntax:
    content: public TensorFlow.TFOutput StopGradient (TensorFlow.TFOutput input, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'StopGradient'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.StopGradient*
  exceptions: []
- uid: TensorFlow.TFGraph.StridedSlice(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  id: StridedSlice(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: StridedSlice(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.StridedSlice(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.StridedSlice(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Return a strided slice from `input`.
  remarks: "Note, most python users will want to use the Python `Tensor.__getitem__`\n              or `Variable.__getitem__` rather than this op directly.\n              \n              The goal of this op is to produce a new tensor with a subset of\n              the elements from the `n` dimensional `input` tensor. The subset is chosen using\n              a sequence of `m` sparse range specifications encoded into the arguments\n              of this function. Note, in some cases\n              `m` could be equal to `n`, but this need not be the case. Each\n              range specification entry can be one of the following:\n              \n              - An ellipsis (...). Ellipses are used to imply zero or more\n                dimensions of full-dimension selection and are produced using\n                `ellipsis_mask`. For example, `foo[...]` is the identity slice.\n              \n              - A new axis. This is used to insert a new shape=1 dimension and is\n                produced using `new_axis_mask`. For example, `foo[:, ...]` where\n                `foo` is shape `(3, 4)` produces a `(1, 3, 4)` tensor.\n              \n              \n              - A range `begin:end:stride`. This is used to specify how much to choose from\n                a given dimension. `stride` can be any integer but 0.  `begin` is an integer\n                which represents the index of the first value to select while `end` represents\n                the index of the last value to select. The number of values selected in each\n                dimension is `end - begin` if `stride &gt; 0` and `begin - end` if `stride &lt; 0`.\n                `begin` and `end` can be negative where `-1` is the last element, `-2` is\n                the second to last. `begin_mask` controls whether to replace the explicitly\n                given `begin` with an implicit effective value of `0` if `stride &gt; 0` and\n                `-1` if `stride &lt; 0`. `end_mask` is analogous but produces the number\n                required to create the largest open interval. For example, given a shape\n                `(3,)` tensor `foo[:]`, the effective `begin` and `end` are `0` and `3`. Do\n                not assume this is equivalent to `foo[0:-1]` which has an effective `begin`\n                and `end` of `0` and `2`. Another example is `foo[-2::-1]` which reverses the\n                first dimension of a tensor while dropping the last two (in the original\n                order elements). For example `foo = [1,2,3,4]; foo[-2::-1]` is `[4,3]`.\n              \n              - A single index. This is used to keep only elements that have a given\n                index. For example (`foo[2, :]` on a shape `(5,6)` tensor produces a\n                shape `(6,)` tensor. This is encoded in `begin` and `end` and\n                `shrink_axis_mask`.\n              \n              Each conceptual range specification is encoded in the op's argument. This\n              encoding is best understand by considering a non-trivial example. In\n              particular,\n              `foo[1, 2:4, None, ..., :-3:-1, :]` will be encoded as\n              \n              ```\n              begin = [1, 2, x, x, 0, x] # x denotes don't care (usually 0)\n              end = [2, 4, x, x, -3, x]\n              strides = [1, 1, x, x, -1, 1]\n              begin_mask = 1&lt;&lt;4 | 1 &lt;&lt; 5 = 48\n              end_mask = 1&lt;&lt;5 = 32\n              ellipsis_mask = 1&lt;&lt;3 = 8\n              new_axis_mask = 1&lt;&lt;2 4\n              shrink_axis_mask = 1&lt;&lt;0\n              ```\n              \n              In this case if `foo.shape` is (5, 5, 5, 5, 5, 5) the final shape of\n              the slice becomes (2, 1, 5, 5, 2, 5).\n              Let us walk step by step through each argument specification.\n              \n              1.  The first argument in the example slice is turned into `begin = 1` and\n              `end = begin + 1 = 2`. To disambiguate from the original spec `2:4` we\n              also set the appropriate bit in `shrink_axis_mask`.\n              \n              2. `2:4` is contributes 2, 4, 1 to begin, end, and stride. All masks have\n              zero bits contributed.\n              \n              3. None is a synonym for `tf.newaxis`. This means insert a dimension of size 1\n              dimension in the final shape. Dummy values are contributed to begin,\n              end and stride, while the new_axis_mask bit is set.\n              \n              4. `...` grab the full ranges from as many dimensions as needed to\n              fully specify a slice for every dimension of the input shape.\n              \n              5. `:-3:-1` shows the use of negative indices. A negative index `i` associated\n              with a dimension that has shape `s` is converted to a positive index\n              `s + i`. So `-1` becomes `s-1` (i.e. the last element). This conversion\n              is done internally so begin, end and strides receive x, -3, and -1.\n              The appropriate begin_mask bit is set to indicate the start range is the\n              full range (ignoring the x).\n              \n              6. `:` indicates that the entire contents of the corresponding dimension\n              is selected. This is equivalent to `::` or `0::1`. begin, end, and strides\n              receive 0, 0, and 1, respectively. The appropriate bits in `begin_mask` and\n              `end_mask` are also set.\n              \n              *Requirements*:\n                `0 != strides[i] for i in [0, m)`\n                `ellipsis_mask must be a power of two (only one ellipsis)`"
  syntax:
    content: public TensorFlow.TFOutput StridedSlice (TensorFlow.TFOutput input, TensorFlow.TFOutput begin, TensorFlow.TFOutput end, TensorFlow.TFOutput strides, Nullable<long> begin_mask = null, Nullable<long> end_mask = null, Nullable<long> ellipsis_mask = null, Nullable<long> new_axis_mask = null, Nullable<long> shrink_axis_mask = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: To be added.
    - id: begin
      type: TensorFlow.TFOutput
      description: >-
        `begin[k]` specifies the offset into the `k`th range specification.
                      The exact dimension this corresponds to will be determined by context.
                      Out-of-bounds values will be silently clamped. If the `k`th bit of
                      `begin_mask` then `begin[k]` is ignored and the full range of the
                      appropriate dimension is used instead. Negative values causes indexing
                      to start from the highest element e.g. If `foo==[1,2,3]` then `foo[-1]==3`.
    - id: end
      type: TensorFlow.TFOutput
      description: >-
        `end[i]` is like `begin` with the exception that `end_mask` is
                      used to determine full ranges.
    - id: strides
      type: TensorFlow.TFOutput
      description: >-
        `strides[i]` specifies the increment in the `i`th specification
                      after extracting a given element. Negative indices will reverse
                      the original order. Out or range values are
                      clamped to `[0,dim[i]) if slice[i]&gt;0` or `[-1,dim[i]-1] if slice[i] &lt; 0`
    - id: begin_mask
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      a bitmask where a bit i being 1 means to ignore the begin
                      value and instead use the largest interval possible. At runtime
                      begin[i] will be replaced with `[0, n-1) if `stride[i] &gt; 0` or
                      `[-1, n-1]` if `stride[i] &lt; 0`
    - id: end_mask
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      analogous to `begin_mask`
    - id: ellipsis_mask
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      a bitmask where bit `i` being 1 means the `i`th
                      position is actually an ellipsis. One bit at most can be 1.
                      If `ellipsis_mask == 0`, then an implicit ellipsis mask of `1 &lt;&lt; (m+1)`
                      is provided. This means that `foo[3:5] == foo[3:5, ...]`. An ellipsis
                      implicitly creates as many range specifications as necessary to fully
                      specify the sliced range for every dimension. For example for a 4-dimensional
                      tensor `foo` the slice `foo[2, ..., 5:8]` implies `foo[2, :, :, 5:8]`.
    - id: new_axis_mask
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      a bitmask where bit `i` being 1 means the `i`th
                      specification creates a new shape 1 dimension. For example
                      `foo[:4, tf.newaxis, :2]` would produce a shape `(4, 1, 2)` tensor.
    - id: shrink_axis_mask
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      a bitmask where bit `i` implies that the `i`th
                      specification should shrink the dimensionality. begin and end
                      must imply a slice of size 1 in the dimension. For example in
                      python one might do `foo[:, 3, :]` which would result in
                      `shrink_axis_mask` being 2.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'StridedSlice'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.StridedSlice*
  exceptions: []
- uid: TensorFlow.TFGraph.StridedSliceGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  id: StridedSliceGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: StridedSliceGrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.StridedSliceGrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.StridedSliceGrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns the gradient of `StridedSlice`.
  remarks: "Since `StridedSlice` cuts out pieces of its `input` which is size\n              `shape`, its gradient will have the same shape (which is passed here\n              as `shape`). The gradient will be zero in any element that the slice\n              does not select.\n              \n              Arguments are the same as StridedSliceGrad with the exception that\n              `dy` is the input gradient to be propagated and `shape` is the\n              shape of `StridedSlice`'s `input`."
  syntax:
    content: public TensorFlow.TFOutput StridedSliceGrad (TensorFlow.TFOutput shape, TensorFlow.TFOutput begin, TensorFlow.TFOutput end, TensorFlow.TFOutput strides, TensorFlow.TFOutput dy, Nullable<long> begin_mask = null, Nullable<long> end_mask = null, Nullable<long> ellipsis_mask = null, Nullable<long> new_axis_mask = null, Nullable<long> shrink_axis_mask = null, string operName = null);
    parameters:
    - id: shape
      type: TensorFlow.TFOutput
      description: To be added.
    - id: begin
      type: TensorFlow.TFOutput
      description: To be added.
    - id: end
      type: TensorFlow.TFOutput
      description: To be added.
    - id: strides
      type: TensorFlow.TFOutput
      description: To be added.
    - id: dy
      type: TensorFlow.TFOutput
      description: To be added.
    - id: begin_mask
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: end_mask
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: ellipsis_mask
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: new_axis_mask
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: shrink_axis_mask
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'StridedSliceGrad'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.StridedSliceGrad*
  exceptions: []
- uid: TensorFlow.TFGraph.StringJoin(TensorFlow.TFOutput[],System.String,System.String)
  id: StringJoin(TensorFlow.TFOutput[],System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: StringJoin(TFOutput[], String, String)
  nameWithType: TFGraph.StringJoin(TFOutput[], String, String)
  fullName: TFGraph.StringJoin(TFOutput[], String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Joins the strings in the given list of string tensors into one tensor;
  remarks: with the given separator (default is an empty separator).
  syntax:
    content: public TensorFlow.TFOutput StringJoin (TensorFlow.TFOutput[] inputs, string separator = null, string operName = null);
    parameters:
    - id: inputs
      type: TensorFlow.TFOutput[]
      description: >-
        A list of string tensors.  The tensors must all have the same shape,
                      or be scalars.  Scalars may be mixed in; these will be broadcast to the shape
                      of non-scalar inputs.
    - id: separator
      type: System.String
      description: >-
        Optional argument
                      string, an optional join separator.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'StringJoin'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.StringJoin*
  exceptions: []
- uid: TensorFlow.TFGraph.StringSplit(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: StringSplit(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: StringSplit(TFOutput, TFOutput, String)
  nameWithType: TFGraph.StringSplit(TFOutput, TFOutput, String)
  fullName: TFGraph.StringSplit(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Split elements of `input` based on `delimiter` into a `SparseTensor`.
  remarks: "Let N be the size of source (typically N will be the batch size). Split each\n              element of `input` based on `delimiter` and return a `SparseTensor`\n              containing the splitted tokens. Empty tokens are ignored.\n              \n              `delimiter` can be empty, or a string of split characters. If `delimiter` is an\n               empty string, each element of `input` is split into individual single-byte\n               character strings, including splitting of UTF-8 multibyte sequences. Otherwise\n               every character of `delimiter` is a potential split point.\n              \n              For example:\n                N = 2, input[0] is 'hello world' and input[1] is 'a b c', then the output\n                will be\n              \n                indices = [0, 0;\n                           0, 1;\n                           1, 0;\n                           1, 1;\n                           1, 2]\n                shape = [2, 3]\n                values = ['hello', 'world', 'a', 'b', 'c']"
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> StringSplit (TensorFlow.TFOutput input, TensorFlow.TFOutput delimiter, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: 1-D. Strings to split.
    - id: delimiter
      type: TensorFlow.TFOutput
      description: 0-D. Delimiter characters (bytes), or empty string.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'StringSplit'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      indices: A dense matrix of int64 representing the indices of the sparse tensor.
                      values: A vector of strings corresponding to the splited values.
                      shape: a length-2 vector of int64 representing the shape of the sparse
                      tensor, where the first value is N and the second value is the maximum number
                      of tokens in a single input entry.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.StringSplit*
  exceptions: []
- uid: TensorFlow.TFGraph.StringToHashBucket(TensorFlow.TFOutput,System.Int64,System.String)
  id: StringToHashBucket(TensorFlow.TFOutput,System.Int64,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: StringToHashBucket(TFOutput, Int64, String)
  nameWithType: TFGraph.StringToHashBucket(TFOutput, Int64, String)
  fullName: TFGraph.StringToHashBucket(TFOutput, Int64, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Converts each string in the input Tensor to its hash mod by a number of buckets.
  remarks: "The hash function is deterministic on the content of the string within the\n              process.\n              \n              Note that the hash function may change from time to time.\n              This functionality will be deprecated and it's recommended to use\n              `tf.string_to_hash_bucket_fast()` or `tf.string_to_hash_bucket_strong()`."
  syntax:
    content: public TensorFlow.TFOutput StringToHashBucket (TensorFlow.TFOutput string_tensor, long num_buckets, string operName = null);
    parameters:
    - id: string_tensor
      type: TensorFlow.TFOutput
      description: To be added.
    - id: num_buckets
      type: System.Int64
      description: The number of buckets.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'StringToHashBucket'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        A Tensor of the same shape as the input `string_tensor`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.StringToHashBucket*
  exceptions: []
- uid: TensorFlow.TFGraph.StringToHashBucketFast(TensorFlow.TFOutput,System.Int64,System.String)
  id: StringToHashBucketFast(TensorFlow.TFOutput,System.Int64,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: StringToHashBucketFast(TFOutput, Int64, String)
  nameWithType: TFGraph.StringToHashBucketFast(TFOutput, Int64, String)
  fullName: TFGraph.StringToHashBucketFast(TFOutput, Int64, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Converts each string in the input Tensor to its hash mod by a number of buckets.
  remarks: >-
    The hash function is deterministic on the content of the string within the
                  process and will never change. However, it is not suitable for cryptography.
                  This function may be used when CPU time is scarce and inputs are trusted or
                  unimportant. There is a risk of adversaries constructing inputs that all hash
                  to the same bucket. To prevent this problem, use a strong hash function with
                  `tf.string_to_hash_bucket_strong`.
  syntax:
    content: public TensorFlow.TFOutput StringToHashBucketFast (TensorFlow.TFOutput input, long num_buckets, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: The strings to assign a hash bucket.
    - id: num_buckets
      type: System.Int64
      description: The number of buckets.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'StringToHashBucketFast'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        A Tensor of the same shape as the input `string_tensor`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.StringToHashBucketFast*
  exceptions: []
- uid: TensorFlow.TFGraph.StringToHashBucketStrong(TensorFlow.TFOutput,System.Int64,System.Int64[],System.String)
  id: StringToHashBucketStrong(TensorFlow.TFOutput,System.Int64,System.Int64[],System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: StringToHashBucketStrong(TFOutput, Int64, Int64[], String)
  nameWithType: TFGraph.StringToHashBucketStrong(TFOutput, Int64, Int64[], String)
  fullName: TFGraph.StringToHashBucketStrong(TFOutput, Int64, Int64[], String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Converts each string in the input Tensor to its hash mod by a number of buckets.
  remarks: "The hash function is deterministic on the content of the string within the\n              process. The hash function is a keyed hash function, where attribute `key`\n              defines the key of the hash function. `key` is an array of 2 elements.\n              \n              A strong hash is important when inputs may be malicious, e.g. URLs with\n              additional components. Adversaries could try to make their inputs hash to the\n              same bucket for a denial-of-service attack or to skew the results. A strong\n              hash prevents this by making it difficult, if not infeasible, to compute inputs\n              that hash to the same bucket. This comes at a cost of roughly 4x higher compute\n              time than `tf.string_to_hash_bucket_fast`."
  syntax:
    content: public TensorFlow.TFOutput StringToHashBucketStrong (TensorFlow.TFOutput input, long num_buckets, long[] key, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: The strings to assign a hash bucket.
    - id: num_buckets
      type: System.Int64
      description: The number of buckets.
    - id: key
      type: System.Int64[]
      description: >-
        The key for the keyed hash function passed as a list of two uint64
                      elements.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'StringToHashBucketStrong'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        A Tensor of the same shape as the input `string_tensor`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.StringToHashBucketStrong*
  exceptions: []
- uid: TensorFlow.TFGraph.StringToNumber(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  id: StringToNumber(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: StringToNumber(TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.StringToNumber(TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.StringToNumber(TFOutput, Nullable<TFDataType>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Converts each string in the input Tensor to the specified numeric type.
  remarks: >-
    (Note that int32 overflow results in an error while float overflow
                  results in a rounded value.)
  syntax:
    content: public TensorFlow.TFOutput StringToNumber (TensorFlow.TFOutput string_tensor, Nullable<TensorFlow.TFDataType> out_type = null, string operName = null);
    parameters:
    - id: string_tensor
      type: TensorFlow.TFOutput
      description: To be added.
    - id: out_type
      type: System.Nullable{TensorFlow.TFDataType}
      description: >-
        Optional argument
                      The numeric type to interpret each string in `string_tensor` as.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'StringToNumber'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        A Tensor of the same shape as the input `string_tensor`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.StringToNumber*
  exceptions: []
- uid: TensorFlow.TFGraph.Sub(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: Sub(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Sub(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Sub(TFOutput, TFOutput, String)
  fullName: TFGraph.Sub(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns x - y element-wise.
  remarks: >-
    *NOTE*: `Sub` supports broadcasting. More about broadcasting
                  [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
  syntax:
    content: public TensorFlow.TFOutput Sub (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Sub'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Sub*
  exceptions: []
- uid: TensorFlow.TFGraph.Substr(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: Substr(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Substr(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.Substr(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.Substr(TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Return substrings from `Tensor` of strings.
  remarks: "For each string in the input `Tensor`, creates a substring starting at index\n              `pos` with a total length of `len`.\n              \n              If `len` defines a substring that would extend beyond the length of the input\n              string, then as many characters as possible are used.\n              \n              If `pos` is negative or specifies a character index larger than any of the input\n              strings, then an `InvalidArgumentError` is thrown.\n              \n              `pos` and `len` must have the same shape, otherwise a `ValueError` is thrown on\n              Op creation.\n              \n              *NOTE*: `Substr` supports broadcasting up to two dimensions. More about\n              broadcasting\n              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)\n              \n              ---\n              \n              Examples\n              \n              Using scalar `pos` and `len`:\n              \n              ```python\n              input = [b'Hello', b'World']\n              position = 1\n              length = 3\n              \n              output = [b'ell', b'orl']\n              ```\n              \n              Using `pos` and `len` with same shape as `input`:\n              \n              ```python\n              input = [[b'ten', b'eleven', b'twelve'],\n                       [b'thirteen', b'fourteen', b'fifteen'],\n                       [b'sixteen', b'seventeen', b'eighteen']]\n              position = [[1, 2, 3],\n                          [1, 2, 3],\n                          [1, 2, 3]]\n              length =   [[2, 3, 4],\n                          [4, 3, 2],\n                          [5, 5, 5]]\n              \n              output = [[b'en', b'eve', b'lve'],\n                        [b'hirt', b'urt', b'te'],\n                        [b'ixtee', b'vente', b'hteen']]\n              ```\n              \n              Broadcasting `pos` and `len` onto `input`:\n              \n              ```\n              input = [[b'ten', b'eleven', b'twelve'],\n                       [b'thirteen', b'fourteen', b'fifteen'],\n                       [b'sixteen', b'seventeen', b'eighteen'],\n                       [b'nineteen', b'twenty', b'twentyone']]\n              position = [1, 2, 3]\n              length =   [1, 2, 3]\n              \n              output = [[b'e', b'ev', b'lve'],\n                        [b'h', b'ur', b'tee'],\n                        [b'i', b've', b'hte'],\n                        [b'i', b'en', b'nty']]\n              ```\n              \n              Broadcasting `input` onto `pos` and `len`:\n              \n              ```\n              input = b'thirteen'\n              position = [1, 5, 7]\n              length =   [3, 2, 1]\n              \n              output = [b'hir', b'ee', b'n\"]\n              ```"
  syntax:
    content: public TensorFlow.TFOutput Substr (TensorFlow.TFOutput input, TensorFlow.TFOutput pos, TensorFlow.TFOutput len, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: Tensor of strings
    - id: pos
      type: TensorFlow.TFOutput
      description: Scalar defining the position of first character in each substring
    - id: len
      type: TensorFlow.TFOutput
      description: Scalar defining the number of characters to include in each substring
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Substr'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Tensor of substrings
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Substr*
  exceptions: []
- uid: TensorFlow.TFGraph.Sum(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: Sum(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Sum(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.Sum(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.Sum(TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the sum of elements across dimensions of a tensor.
  remarks: >-
    Reduces `input` along the dimensions given in `reduction_indices`. Unless
                  `keep_dims` is true, the rank of the tensor is reduced by 1 for each entry in
                  `reduction_indices`. If `keep_dims` is true, the reduced dimensions are
                  retained with length 1.
  syntax:
    content: public TensorFlow.TFOutput Sum (TensorFlow.TFOutput input, TensorFlow.TFOutput reduction_indices, Nullable<bool> keep_dims = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: The tensor to reduce.
    - id: reduction_indices
      type: TensorFlow.TFOutput
      description: The dimensions to reduce.
    - id: keep_dims
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true, retain reduced dimensions with length 1.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Sum'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The reduced tensor.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Sum*
  exceptions: []
- uid: TensorFlow.TFGraph.Svd(TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  id: Svd(TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Svd(TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  nameWithType: TFGraph.Svd(TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  fullName: TFGraph.Svd(TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the singular value decompositions of one or more matrices.
  remarks: "Computes the SVD of each inner matrix in `input` such that\n              `input[..., :, :] = u[..., :, :] * diag(s[..., :, :]) * transpose(v[..., :, :])`\n              \n              ```python\n              # a is a tensor containing a batch of matrices.\n              # s is a tensor of singular values for each matrix.\n              # u is the tensor containing of left singular vectors for each matrix.\n              # v is the tensor containing of right singular vectors for each matrix.\n              s, u, v = svd(a)\n              s, _, _ = svd(a, compute_uv=False)\n              ```"
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> Svd (TensorFlow.TFOutput input, Nullable<bool> compute_uv = null, Nullable<bool> full_matrices = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: >-
        A tensor of shape `[..., M, N]` whose inner-most 2 dimensions
                      form matrices of size `[M, N]`. Let `P` be the minimum of `M` and `N`.
    - id: compute_uv
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true, left and right singular vectors will be
                      computed and returned in `u` and `v`, respectively.
                      If false, `u` and `v` are not set and should never referenced.
    - id: full_matrices
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true, compute full-sized `u` and `v`. If false
                      (the default), compute only the leading `P` singular vectors.
                      Ignored if `compute_uv` is `False`.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Svd'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      s: Singular values. Shape is `[..., P]`.
                      u: Left singular vectors. If `full_matrices` is `False` then shape is
                      `[..., M, P]`; if `full_matrices` is `True` then shape is
                      `[..., M, M]`. Undefined if `compute_uv` is `False`.
                      v: Left singular vectors. If `full_matrices` is `False` then shape is
                      `[..., N, P]`. If `full_matrices` is `True` then shape is `[..., N, N]`.
                      Undefined if `compute_uv` is false.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.Svd*
  exceptions: []
- uid: TensorFlow.TFGraph.Switch(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: Switch(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Switch(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Switch(TFOutput, TFOutput, String)
  fullName: TFGraph.Switch(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Forwards `data` to the output port determined by `pred`.
  remarks: "If `pred` is true, the `data` input is forwarded to `output_true`. Otherwise,\n              the data goes to `output_false`.\n              \n              See also `RefSwitch` and `Merge`."
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput> Switch (TensorFlow.TFOutput data, TensorFlow.TFOutput pred, string operName = null);
    parameters:
    - id: data
      type: TensorFlow.TFOutput
      description: The tensor to be forwarded to the appropriate output.
    - id: pred
      type: TensorFlow.TFOutput
      description: A scalar that specifies which output port will receive data.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Switch'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      output_false: If `pred` is false, data will be forwarded to this output.
                      output_true: If `pred` is true, data will be forwarded to this output.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.Switch*
  exceptions: []
- uid: TensorFlow.TFGraph.TakeDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  id: TakeDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TakeDataset(TFOutput, TFOutput, TFDataType[], TFShape[], String)
  nameWithType: TFGraph.TakeDataset(TFOutput, TFOutput, TFDataType[], TFShape[], String)
  fullName: TFGraph.TakeDataset(TFOutput, TFOutput, TFDataType[], TFShape[], String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Creates a dataset that contains `count` elements from the `input_dataset`.
  syntax:
    content: public TensorFlow.TFOutput TakeDataset (TensorFlow.TFOutput input_dataset, TensorFlow.TFOutput count, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);
    parameters:
    - id: input_dataset
      type: TensorFlow.TFOutput
      description: To be added.
    - id: count
      type: TensorFlow.TFOutput
      description: >-
        A scalar representing the number of elements from the `input_dataset`
                      that should be taken. A value of `-1` indicates that all of `input_dataset`
                      is taken.
    - id: output_types
      type: TensorFlow.TFDataType[]
      description: To be added.
    - id: output_shapes
      type: TensorFlow.TFShape[]
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TakeDataset'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.TakeDataset*
  exceptions: []
- uid: TensorFlow.TFGraph.TakeManySparseFromTensorsMap(TensorFlow.TFOutput,TensorFlow.TFDataType,System.String,System.String,System.String)
  id: TakeManySparseFromTensorsMap(TensorFlow.TFOutput,TensorFlow.TFDataType,System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TakeManySparseFromTensorsMap(TFOutput, TFDataType, String, String, String)
  nameWithType: TFGraph.TakeManySparseFromTensorsMap(TFOutput, TFDataType, String, String, String)
  fullName: TFGraph.TakeManySparseFromTensorsMap(TFOutput, TFDataType, String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Read `SparseTensors` from a `SparseTensorsMap` and concatenate them.
  remarks: "The input `sparse_handles` must be an `int64` matrix of shape `[N, 1]` where\n              `N` is the minibatch size and the rows correspond to the output handles of\n              `AddSparseToTensorsMap` or `AddManySparseToTensorsMap`.  The ranks of the\n              original `SparseTensor` objects that went into the given input ops must all\n              match.  When the final `SparseTensor` is created, it has rank one\n              higher than the ranks of the incoming `SparseTensor` objects\n              (they have been concatenated along a new row dimension on the left).\n              \n              The output `SparseTensor` object's shape values for all dimensions but the\n              first are the max across the input `SparseTensor` objects' shape values\n              for the corresponding dimensions.  Its first shape value is `N`, the minibatch\n              size.\n              \n              The input `SparseTensor` objects' indices are assumed ordered in\n              standard lexicographic order.  If this is not the case, after this\n              step run `SparseReorder` to restore index ordering.\n              \n              For example, if the handles represent an input, which is a `[2, 3]` matrix\n              representing two original `SparseTensor` objects:\n              \n              ```\n                  index = [ 0]\n                          [10]\n                          [20]\n                  values = [1, 2, 3]\n                  shape = [50]\n              ```\n              \n              and\n              \n              ```\n                  index = [ 2]\n                          [10]\n                  values = [4, 5]\n                  shape = [30]\n              ```\n              \n              then the final `SparseTensor` will be:\n              \n              ```\n                  index = [0  0]\n                          [0 10]\n                          [0 20]\n                          [1  2]\n                          [1 10]\n                  values = [1, 2, 3, 4, 5]\n                  shape = [2 50]\n              ```"
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> TakeManySparseFromTensorsMap (TensorFlow.TFOutput sparse_handles, TensorFlow.TFDataType dtype, string container = null, string shared_name = null, string operName = null);
    parameters:
    - id: sparse_handles
      type: TensorFlow.TFOutput
      description: >-
        1-D, The `N` serialized `SparseTensor` objects.
                      Shape: `[N]`.
    - id: dtype
      type: TensorFlow.TFDataType
      description: >-
        The `dtype` of the `SparseTensor` objects stored in the
                      `SparseTensorsMap`.
    - id: container
      type: System.String
      description: >-
        Optional argument
                      The container name for the `SparseTensorsMap` read by this op.
    - id: shared_name
      type: System.String
      description: >-
        Optional argument
                      The shared name for the `SparseTensorsMap` read by this op.
                      It should not be blank; rather the `shared_name` or unique Operation name
                      of the Op that created the original `SparseTensorsMap` should be used.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TakeManySparseFromTensorsMap'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      sparse_indices: 2-D.  The `indices` of the minibatch `SparseTensor`.
                      sparse_values: 1-D.  The `values` of the minibatch `SparseTensor`.
                      sparse_shape: 1-D.  The `shape` of the minibatch `SparseTensor`.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.TakeManySparseFromTensorsMap*
  exceptions: []
- uid: TensorFlow.TFGraph.Tan(TensorFlow.TFOutput,System.String)
  id: Tan(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Tan(TFOutput, String)
  nameWithType: TFGraph.Tan(TFOutput, String)
  fullName: TFGraph.Tan(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes tan of x element-wise.
  syntax:
    content: public TensorFlow.TFOutput Tan (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Tan'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Tan*
  exceptions: []
- uid: TensorFlow.TFGraph.Tanh(TensorFlow.TFOutput,System.String)
  id: Tanh(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Tanh(TFOutput, String)
  nameWithType: TFGraph.Tanh(TFOutput, String)
  fullName: TFGraph.Tanh(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes hyperbolic tangent of `x` element-wise.
  syntax:
    content: public TensorFlow.TFOutput Tanh (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Tanh'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Tanh*
  exceptions: []
- uid: TensorFlow.TFGraph.TanhGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: TanhGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TanhGrad(TFOutput, TFOutput, String)
  nameWithType: TFGraph.TanhGrad(TFOutput, TFOutput, String)
  fullName: TFGraph.TanhGrad(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the gradient for the tanh of `x` wrt its input.
  remarks: >-
    Specifically, `grad = dy * (1 - y*y)`, where `y = tanh(x)`, and `dy`
                  is the corresponding input gradient.
  syntax:
    content: public TensorFlow.TFOutput TanhGrad (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TanhGrad'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.TanhGrad*
  exceptions: []
- uid: TensorFlow.TFGraph.TensorArrayCloseV2(TensorFlow.TFOutput,System.String)
  id: TensorArrayCloseV2(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TensorArrayCloseV2(TFOutput, String)
  nameWithType: TFGraph.TensorArrayCloseV2(TFOutput, String)
  fullName: TFGraph.TensorArrayCloseV2(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Deprecated. Use TensorArrayCloseV3
  syntax:
    content: public TensorFlow.TFOperation TensorArrayCloseV2 (TensorFlow.TFOutput handle, string operName = null);
    parameters:
    - id: handle
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayCloseV2'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.TensorArrayCloseV2*
  exceptions: []
- uid: TensorFlow.TFGraph.TensorArrayCloseV3(TensorFlow.TFOutput,System.String)
  id: TensorArrayCloseV3(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TensorArrayCloseV3(TFOutput, String)
  nameWithType: TFGraph.TensorArrayCloseV3(TFOutput, String)
  fullName: TFGraph.TensorArrayCloseV3(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Delete the TensorArray from its resource container.
  remarks: >-
    This enables the user to close and release the resource in the middle
                  of a step/run.
  syntax:
    content: public TensorFlow.TFOperation TensorArrayCloseV3 (TensorFlow.TFOutput handle, string operName = null);
    parameters:
    - id: handle
      type: TensorFlow.TFOutput
      description: The handle to a TensorArray (output of TensorArray or TensorArrayGrad).
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayCloseV3'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.TensorArrayCloseV3*
  exceptions: []
- uid: TensorFlow.TFGraph.TensorArrayConcatV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,TensorFlow.TFShape,System.String)
  id: TensorArrayConcatV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,TensorFlow.TFShape,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TensorArrayConcatV2(TFOutput, TFOutput, TFDataType, TFShape, String)
  nameWithType: TFGraph.TensorArrayConcatV2(TFOutput, TFOutput, TFDataType, TFShape, String)
  fullName: TFGraph.TensorArrayConcatV2(TFOutput, TFOutput, TFDataType, TFShape, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Deprecated. Use TensorArrayConcatV3
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput> TensorArrayConcatV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput flow_in, TensorFlow.TFDataType dtype, TensorFlow.TFShape element_shape_except0 = null, string operName = null);
    parameters:
    - id: handle
      type: TensorFlow.TFOutput
      description: To be added.
    - id: flow_in
      type: TensorFlow.TFOutput
      description: To be added.
    - id: dtype
      type: TensorFlow.TFDataType
      description: To be added.
    - id: element_shape_except0
      type: TensorFlow.TFShape
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayConcatV2'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: "Returns a tuple with multiple values, as follows:\n              value: \n              lengths: \n              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property."
  overload: TensorFlow.TFGraph.TensorArrayConcatV2*
  exceptions: []
- uid: TensorFlow.TFGraph.TensorArrayConcatV3(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,TensorFlow.TFShape,System.String)
  id: TensorArrayConcatV3(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,TensorFlow.TFShape,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TensorArrayConcatV3(TFOutput, TFOutput, TFDataType, TFShape, String)
  nameWithType: TFGraph.TensorArrayConcatV3(TFOutput, TFOutput, TFDataType, TFShape, String)
  fullName: TFGraph.TensorArrayConcatV3(TFOutput, TFOutput, TFDataType, TFShape, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Concat the elements from the TensorArray into value `value`.
  remarks: "Takes `T` elements of shapes\n              \n                ```\n                (n0 x d0 x d1 x ...), (n1 x d0 x d1 x ...), ..., (n(T-1) x d0 x d1 x ...)\n                ```\n              \n              and concatenates them into a Tensor of shape:\n              \n                ```(n0 + n1 + ... + n(T-1) x d0 x d1 x ...)```\n              \n              All elements must have the same shape (excepting the first dimension)."
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput> TensorArrayConcatV3 (TensorFlow.TFOutput handle, TensorFlow.TFOutput flow_in, TensorFlow.TFDataType dtype, TensorFlow.TFShape element_shape_except0 = null, string operName = null);
    parameters:
    - id: handle
      type: TensorFlow.TFOutput
      description: The handle to a TensorArray.
    - id: flow_in
      type: TensorFlow.TFOutput
      description: A float scalar that enforces proper chaining of operations.
    - id: dtype
      type: TensorFlow.TFDataType
      description: The type of the elem that is returned.
    - id: element_shape_except0
      type: TensorFlow.TFShape
      description: >-
        Optional argument
                      The expected shape of an element, if known,
                      excluding the first dimension. Used to validate the shapes of
                      TensorArray elements. If this shape is not fully specified, concatenating
                      zero-size TensorArrays is an error.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayConcatV3'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      value: All of the elements in the TensorArray, concatenated along the first
                      axis.
                      lengths: A vector of the row sizes of the original T elements in the
                      value output.  In the example above, this would be the values:
                      `(n1, n2, ..., n(T-1))`.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.TensorArrayConcatV3*
  exceptions: []
- uid: TensorFlow.TFGraph.TensorArrayGatherV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,TensorFlow.TFShape,System.String)
  id: TensorArrayGatherV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,TensorFlow.TFShape,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TensorArrayGatherV2(TFOutput, TFOutput, TFOutput, TFDataType, TFShape, String)
  nameWithType: TFGraph.TensorArrayGatherV2(TFOutput, TFOutput, TFOutput, TFDataType, TFShape, String)
  fullName: TFGraph.TensorArrayGatherV2(TFOutput, TFOutput, TFOutput, TFDataType, TFShape, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Deprecated. Use TensorArrayGatherV3
  syntax:
    content: public TensorFlow.TFOutput TensorArrayGatherV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput indices, TensorFlow.TFOutput flow_in, TensorFlow.TFDataType dtype, TensorFlow.TFShape element_shape = null, string operName = null);
    parameters:
    - id: handle
      type: TensorFlow.TFOutput
      description: To be added.
    - id: indices
      type: TensorFlow.TFOutput
      description: To be added.
    - id: flow_in
      type: TensorFlow.TFOutput
      description: To be added.
    - id: dtype
      type: TensorFlow.TFDataType
      description: To be added.
    - id: element_shape
      type: TensorFlow.TFShape
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayGatherV2'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.TensorArrayGatherV2*
  exceptions: []
- uid: TensorFlow.TFGraph.TensorArrayGatherV3(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,TensorFlow.TFShape,System.String)
  id: TensorArrayGatherV3(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,TensorFlow.TFShape,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TensorArrayGatherV3(TFOutput, TFOutput, TFOutput, TFDataType, TFShape, String)
  nameWithType: TFGraph.TensorArrayGatherV3(TFOutput, TFOutput, TFOutput, TFDataType, TFShape, String)
  fullName: TFGraph.TensorArrayGatherV3(TFOutput, TFOutput, TFOutput, TFDataType, TFShape, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Gather specific elements from the TensorArray into output `value`.
  remarks: All elements selected by `indices` must have the same shape.
  syntax:
    content: public TensorFlow.TFOutput TensorArrayGatherV3 (TensorFlow.TFOutput handle, TensorFlow.TFOutput indices, TensorFlow.TFOutput flow_in, TensorFlow.TFDataType dtype, TensorFlow.TFShape element_shape = null, string operName = null);
    parameters:
    - id: handle
      type: TensorFlow.TFOutput
      description: The handle to a TensorArray.
    - id: indices
      type: TensorFlow.TFOutput
      description: The locations in the TensorArray from which to read tensor elements.
    - id: flow_in
      type: TensorFlow.TFOutput
      description: A float scalar that enforces proper chaining of operations.
    - id: dtype
      type: TensorFlow.TFDataType
      description: The type of the elem that is returned.
    - id: element_shape
      type: TensorFlow.TFShape
      description: >-
        Optional argument
                      The expected shape of an element, if known. Used to
                      validate the shapes of TensorArray elements. If this shape is not
                      fully specified, gathering zero-size TensorArrays is an error.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayGatherV3'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        All of the elements in the TensorArray, concatenated along a new
                      axis (the new dimension 0).
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.TensorArrayGatherV3*
  exceptions: []
- uid: TensorFlow.TFGraph.TensorArrayGradV2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String)
  id: TensorArrayGradV2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TensorArrayGradV2(TFOutput, TFOutput, String, String)
  nameWithType: TFGraph.TensorArrayGradV2(TFOutput, TFOutput, String, String)
  fullName: TFGraph.TensorArrayGradV2(TFOutput, TFOutput, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Deprecated. Use TensorArrayGradV3
  syntax:
    content: public TensorFlow.TFOutput TensorArrayGradV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput flow_in, string source, string operName = null);
    parameters:
    - id: handle
      type: TensorFlow.TFOutput
      description: To be added.
    - id: flow_in
      type: TensorFlow.TFOutput
      description: To be added.
    - id: source
      type: System.String
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayGradV2'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.TensorArrayGradV2*
  exceptions: []
- uid: TensorFlow.TFGraph.TensorArrayGradV3(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String)
  id: TensorArrayGradV3(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TensorArrayGradV3(TFOutput, TFOutput, String, String)
  nameWithType: TFGraph.TensorArrayGradV3(TFOutput, TFOutput, String, String)
  fullName: TFGraph.TensorArrayGradV3(TFOutput, TFOutput, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Creates a TensorArray for storing the gradients of values in the given handle.
  remarks: "If the given TensorArray gradient already exists, returns a reference to it.\n              \n              Locks the size of the original TensorArray by disabling its dynamic size flag.\n              \n              **A note about the input flow_in:**\n              \n              The handle flow_in forces the execution of the gradient lookup to occur\n              only after certain other operations have occurred.  For example, when\n              the forward TensorArray is dynamically sized, writes to this TensorArray\n              may resize the object.  The gradient TensorArray is statically sized based\n              on the size of the forward TensorArray when this operation executes.\n              Furthermore, the size of the forward TensorArray is frozen by this call.\n              As a result, the flow is used to ensure that the call to generate the gradient\n              TensorArray only happens after all writes are executed.\n              \n              In the case of dynamically sized TensorArrays, gradient computation should\n              only be performed on read operations that have themselves been chained via\n              flow to occur only after all writes have executed. That way the final size\n              of the forward TensorArray is known when this operation is called.\n              \n              **A note about the source attribute:**\n              \n              TensorArray gradient calls use an accumulator TensorArray object.  If\n              multiple gradients are calculated and run in the same session, the multiple\n              gradient nodes may accidentally flow through the same accumulator TensorArray.\n              This double counts and generally breaks the TensorArray gradient flow.\n              \n              The solution is to identify which gradient call this particular\n              TensorArray gradient is being called in.  This is performed by identifying\n              a unique string (e.g. \"gradients\", \"gradients_1\", ...) from the input\n              gradient Tensor's name.  This string is used as a suffix when creating\n              the TensorArray gradient object here (the attribute `source`).\n              \n              The attribute `source` is added as a suffix to the forward TensorArray's\n              name when performing the creation / lookup, so that each separate gradient\n              calculation gets its own TensorArray accumulator."
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput> TensorArrayGradV3 (TensorFlow.TFOutput handle, TensorFlow.TFOutput flow_in, string source, string operName = null);
    parameters:
    - id: handle
      type: TensorFlow.TFOutput
      description: The handle to the forward TensorArray.
    - id: flow_in
      type: TensorFlow.TFOutput
      description: A float scalar that enforces proper chaining of operations.
    - id: source
      type: System.String
      description: >-
        The gradient source string, used to decide which gradient TensorArray
                      to return.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayGradV3'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: "Returns a tuple with multiple values, as follows:\n              grad_handle: \n              flow_out: \n              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property."
  overload: TensorFlow.TFGraph.TensorArrayGradV3*
  exceptions: []
- uid: TensorFlow.TFGraph.TensorArrayReadV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  id: TensorArrayReadV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TensorArrayReadV2(TFOutput, TFOutput, TFOutput, TFDataType, String)
  nameWithType: TFGraph.TensorArrayReadV2(TFOutput, TFOutput, TFOutput, TFDataType, String)
  fullName: TFGraph.TensorArrayReadV2(TFOutput, TFOutput, TFOutput, TFDataType, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Deprecated. Use TensorArrayReadV3
  syntax:
    content: public TensorFlow.TFOutput TensorArrayReadV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput index, TensorFlow.TFOutput flow_in, TensorFlow.TFDataType dtype, string operName = null);
    parameters:
    - id: handle
      type: TensorFlow.TFOutput
      description: To be added.
    - id: index
      type: TensorFlow.TFOutput
      description: To be added.
    - id: flow_in
      type: TensorFlow.TFOutput
      description: To be added.
    - id: dtype
      type: TensorFlow.TFDataType
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayReadV2'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.TensorArrayReadV2*
  exceptions: []
- uid: TensorFlow.TFGraph.TensorArrayReadV3(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  id: TensorArrayReadV3(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TensorArrayReadV3(TFOutput, TFOutput, TFOutput, TFDataType, String)
  nameWithType: TFGraph.TensorArrayReadV3(TFOutput, TFOutput, TFOutput, TFDataType, String)
  fullName: TFGraph.TensorArrayReadV3(TFOutput, TFOutput, TFOutput, TFDataType, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Read an element from the TensorArray into output `value`.
  syntax:
    content: public TensorFlow.TFOutput TensorArrayReadV3 (TensorFlow.TFOutput handle, TensorFlow.TFOutput index, TensorFlow.TFOutput flow_in, TensorFlow.TFDataType dtype, string operName = null);
    parameters:
    - id: handle
      type: TensorFlow.TFOutput
      description: The handle to a TensorArray.
    - id: index
      type: TensorFlow.TFOutput
      description: To be added.
    - id: flow_in
      type: TensorFlow.TFOutput
      description: A float scalar that enforces proper chaining of operations.
    - id: dtype
      type: TensorFlow.TFDataType
      description: The type of the elem that is returned.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayReadV3'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The tensor that is read from the TensorArray.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.TensorArrayReadV3*
  exceptions: []
- uid: TensorFlow.TFGraph.TensorArrayScatterV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: TensorArrayScatterV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TensorArrayScatterV2(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.TensorArrayScatterV2(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.TensorArrayScatterV2(TFOutput, TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Deprecated. Use TensorArrayScatterV3
  syntax:
    content: public TensorFlow.TFOutput TensorArrayScatterV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput indices, TensorFlow.TFOutput value, TensorFlow.TFOutput flow_in, string operName = null);
    parameters:
    - id: handle
      type: TensorFlow.TFOutput
      description: To be added.
    - id: indices
      type: TensorFlow.TFOutput
      description: To be added.
    - id: value
      type: TensorFlow.TFOutput
      description: To be added.
    - id: flow_in
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayScatterV2'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.TensorArrayScatterV2*
  exceptions: []
- uid: TensorFlow.TFGraph.TensorArrayScatterV3(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: TensorArrayScatterV3(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TensorArrayScatterV3(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.TensorArrayScatterV3(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.TensorArrayScatterV3(TFOutput, TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Scatter the data from the input value into specific TensorArray elements.
  remarks: '`indices` must be a vector, its length must match the first dim of `value`.'
  syntax:
    content: public TensorFlow.TFOutput TensorArrayScatterV3 (TensorFlow.TFOutput handle, TensorFlow.TFOutput indices, TensorFlow.TFOutput value, TensorFlow.TFOutput flow_in, string operName = null);
    parameters:
    - id: handle
      type: TensorFlow.TFOutput
      description: The handle to a TensorArray.
    - id: indices
      type: TensorFlow.TFOutput
      description: The locations at which to write the tensor elements.
    - id: value
      type: TensorFlow.TFOutput
      description: The concatenated tensor to write to the TensorArray.
    - id: flow_in
      type: TensorFlow.TFOutput
      description: A float scalar that enforces proper chaining of operations.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayScatterV3'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        A float scalar that enforces proper chaining of operations.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.TensorArrayScatterV3*
  exceptions: []
- uid: TensorFlow.TFGraph.TensorArraySizeV2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: TensorArraySizeV2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TensorArraySizeV2(TFOutput, TFOutput, String)
  nameWithType: TFGraph.TensorArraySizeV2(TFOutput, TFOutput, String)
  fullName: TFGraph.TensorArraySizeV2(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Deprecated. Use TensorArraySizeV3
  syntax:
    content: public TensorFlow.TFOutput TensorArraySizeV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput flow_in, string operName = null);
    parameters:
    - id: handle
      type: TensorFlow.TFOutput
      description: To be added.
    - id: flow_in
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArraySizeV2'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.TensorArraySizeV2*
  exceptions: []
- uid: TensorFlow.TFGraph.TensorArraySizeV3(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: TensorArraySizeV3(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TensorArraySizeV3(TFOutput, TFOutput, String)
  nameWithType: TFGraph.TensorArraySizeV3(TFOutput, TFOutput, String)
  fullName: TFGraph.TensorArraySizeV3(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Get the current size of the TensorArray.
  syntax:
    content: public TensorFlow.TFOutput TensorArraySizeV3 (TensorFlow.TFOutput handle, TensorFlow.TFOutput flow_in, string operName = null);
    parameters:
    - id: handle
      type: TensorFlow.TFOutput
      description: The handle to a TensorArray (output of TensorArray or TensorArrayGrad).
    - id: flow_in
      type: TensorFlow.TFOutput
      description: A float scalar that enforces proper chaining of operations.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArraySizeV3'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The current size of the TensorArray.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.TensorArraySizeV3*
  exceptions: []
- uid: TensorFlow.TFGraph.TensorArraySplitV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: TensorArraySplitV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TensorArraySplitV2(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.TensorArraySplitV2(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.TensorArraySplitV2(TFOutput, TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Deprecated. Use TensorArraySplitV3
  syntax:
    content: public TensorFlow.TFOutput TensorArraySplitV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput value, TensorFlow.TFOutput lengths, TensorFlow.TFOutput flow_in, string operName = null);
    parameters:
    - id: handle
      type: TensorFlow.TFOutput
      description: To be added.
    - id: value
      type: TensorFlow.TFOutput
      description: To be added.
    - id: lengths
      type: TensorFlow.TFOutput
      description: To be added.
    - id: flow_in
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArraySplitV2'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.TensorArraySplitV2*
  exceptions: []
- uid: TensorFlow.TFGraph.TensorArraySplitV3(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: TensorArraySplitV3(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TensorArraySplitV3(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.TensorArraySplitV3(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.TensorArraySplitV3(TFOutput, TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Split the data from the input value into TensorArray elements.
  remarks: "Assuming that `lengths` takes on values\n              \n                ```(n0, n1, ..., n(T-1))```\n              \n              and that `value` has shape\n              \n                ```(n0 + n1 + ... + n(T-1) x d0 x d1 x ...)```,\n              \n              this splits values into a TensorArray with T tensors.\n              \n              TensorArray index t will be the subtensor of values with starting position\n              \n                ```(n0 + n1 + ... + n(t-1), 0, 0, ...)```\n              \n              and having size\n              \n                ```nt x d0 x d1 x ...```"
  syntax:
    content: public TensorFlow.TFOutput TensorArraySplitV3 (TensorFlow.TFOutput handle, TensorFlow.TFOutput value, TensorFlow.TFOutput lengths, TensorFlow.TFOutput flow_in, string operName = null);
    parameters:
    - id: handle
      type: TensorFlow.TFOutput
      description: The handle to a TensorArray.
    - id: value
      type: TensorFlow.TFOutput
      description: The concatenated tensor to write to the TensorArray.
    - id: lengths
      type: TensorFlow.TFOutput
      description: >-
        The vector of lengths, how to split the rows of value into the
                      TensorArray.
    - id: flow_in
      type: TensorFlow.TFOutput
      description: A float scalar that enforces proper chaining of operations.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArraySplitV3'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        A float scalar that enforces proper chaining of operations.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.TensorArraySplitV3*
  exceptions: []
- uid: TensorFlow.TFGraph.TensorArrayV2(TensorFlow.TFOutput,TensorFlow.TFDataType,TensorFlow.TFShape,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String)
  id: TensorArrayV2(TensorFlow.TFOutput,TensorFlow.TFDataType,TensorFlow.TFShape,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TensorArrayV2(TFOutput, TFDataType, TFShape, Nullable<Boolean>, Nullable<Boolean>, String, String)
  nameWithType: TFGraph.TensorArrayV2(TFOutput, TFDataType, TFShape, Nullable<Boolean>, Nullable<Boolean>, String, String)
  fullName: TFGraph.TensorArrayV2(TFOutput, TFDataType, TFShape, Nullable<Boolean>, Nullable<Boolean>, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Deprecated. Use TensorArrayV3
  syntax:
    content: public TensorFlow.TFOutput TensorArrayV2 (TensorFlow.TFOutput size, TensorFlow.TFDataType dtype, TensorFlow.TFShape element_shape = null, Nullable<bool> dynamic_size = null, Nullable<bool> clear_after_read = null, string tensor_array_name = null, string operName = null);
    parameters:
    - id: size
      type: TensorFlow.TFOutput
      description: To be added.
    - id: dtype
      type: TensorFlow.TFDataType
      description: To be added.
    - id: element_shape
      type: TensorFlow.TFShape
      description: Optional argument
    - id: dynamic_size
      type: System.Nullable{System.Boolean}
      description: Optional argument
    - id: clear_after_read
      type: System.Nullable{System.Boolean}
      description: Optional argument
    - id: tensor_array_name
      type: System.String
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayV2'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.TensorArrayV2*
  exceptions: []
- uid: TensorFlow.TFGraph.TensorArrayV3(TensorFlow.TFOutput,TensorFlow.TFDataType,TensorFlow.TFShape,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String)
  id: TensorArrayV3(TensorFlow.TFOutput,TensorFlow.TFDataType,TensorFlow.TFShape,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TensorArrayV3(TFOutput, TFDataType, TFShape, Nullable<Boolean>, Nullable<Boolean>, String, String)
  nameWithType: TFGraph.TensorArrayV3(TFOutput, TFDataType, TFShape, Nullable<Boolean>, Nullable<Boolean>, String, String)
  fullName: TFGraph.TensorArrayV3(TFOutput, TFDataType, TFShape, Nullable<Boolean>, Nullable<Boolean>, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: An array of Tensors of given size.
  remarks: Write data via Write and read via Read or Pack.
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput> TensorArrayV3 (TensorFlow.TFOutput size, TensorFlow.TFDataType dtype, TensorFlow.TFShape element_shape = null, Nullable<bool> dynamic_size = null, Nullable<bool> clear_after_read = null, string tensor_array_name = null, string operName = null);
    parameters:
    - id: size
      type: TensorFlow.TFOutput
      description: The size of the array.
    - id: dtype
      type: TensorFlow.TFDataType
      description: The type of the elements on the tensor_array.
    - id: element_shape
      type: TensorFlow.TFShape
      description: >-
        Optional argument
                      The expected shape of an element, if known. Used to
                      validate the shapes of TensorArray elements. If this shape is not
                      fully specified, gathering zero-size TensorArrays is an error.
    - id: dynamic_size
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      A boolean that determines whether writes to the TensorArray
                      are allowed to grow the size.  By default, this is not allowed.
    - id: clear_after_read
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true (default), Tensors in the TensorArray are cleared
                      after being read.  This disables multiple read semantics but allows early
                      release of memory.
    - id: tensor_array_name
      type: System.String
      description: >-
        Optional argument
                      Overrides the name used for the temporary tensor_array
                      resource. Default value is the name of the 'TensorArray' op (which
                      is guaranteed unique).
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayV3'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      handle: The handle to the TensorArray.
                      flow: A scalar used to control gradient flow.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.TensorArrayV3*
  exceptions: []
- uid: TensorFlow.TFGraph.TensorArrayWriteV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: TensorArrayWriteV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TensorArrayWriteV2(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.TensorArrayWriteV2(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.TensorArrayWriteV2(TFOutput, TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Deprecated. Use TensorArrayGradV3
  syntax:
    content: public TensorFlow.TFOutput TensorArrayWriteV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput index, TensorFlow.TFOutput value, TensorFlow.TFOutput flow_in, string operName = null);
    parameters:
    - id: handle
      type: TensorFlow.TFOutput
      description: To be added.
    - id: index
      type: TensorFlow.TFOutput
      description: To be added.
    - id: value
      type: TensorFlow.TFOutput
      description: To be added.
    - id: flow_in
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayWriteV2'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.TensorArrayWriteV2*
  exceptions: []
- uid: TensorFlow.TFGraph.TensorArrayWriteV3(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: TensorArrayWriteV3(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TensorArrayWriteV3(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.TensorArrayWriteV3(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.TensorArrayWriteV3(TFOutput, TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Push an element onto the tensor_array.
  syntax:
    content: public TensorFlow.TFOutput TensorArrayWriteV3 (TensorFlow.TFOutput handle, TensorFlow.TFOutput index, TensorFlow.TFOutput value, TensorFlow.TFOutput flow_in, string operName = null);
    parameters:
    - id: handle
      type: TensorFlow.TFOutput
      description: The handle to a TensorArray.
    - id: index
      type: TensorFlow.TFOutput
      description: The position to write to inside the TensorArray.
    - id: value
      type: TensorFlow.TFOutput
      description: The tensor to write to the TensorArray.
    - id: flow_in
      type: TensorFlow.TFOutput
      description: A float scalar that enforces proper chaining of operations.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayWriteV3'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        A float scalar that enforces proper chaining of operations.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.TensorArrayWriteV3*
  exceptions: []
- uid: TensorFlow.TFGraph.TensorDataset(TensorFlow.TFOutput[],TensorFlow.TFShape[],System.String)
  id: TensorDataset(TensorFlow.TFOutput[],TensorFlow.TFShape[],System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TensorDataset(TFOutput[], TFShape[], String)
  nameWithType: TFGraph.TensorDataset(TFOutput[], TFShape[], String)
  fullName: TFGraph.TensorDataset(TFOutput[], TFShape[], String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Creates a dataset that emits `components` as a tuple of tensors once.
  syntax:
    content: public TensorFlow.TFOutput TensorDataset (TensorFlow.TFOutput[] components, TensorFlow.TFShape[] output_shapes, string operName = null);
    parameters:
    - id: components
      type: TensorFlow.TFOutput[]
      description: To be added.
    - id: output_shapes
      type: TensorFlow.TFShape[]
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorDataset'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.TensorDataset*
  exceptions: []
- uid: TensorFlow.TFGraph.TensorSliceDataset(TensorFlow.TFOutput[],TensorFlow.TFShape[],System.String)
  id: TensorSliceDataset(TensorFlow.TFOutput[],TensorFlow.TFShape[],System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TensorSliceDataset(TFOutput[], TFShape[], String)
  nameWithType: TFGraph.TensorSliceDataset(TFOutput[], TFShape[], String)
  fullName: TFGraph.TensorSliceDataset(TFOutput[], TFShape[], String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Creates a dataset that emits each dim-0 slice of `components` once.
  syntax:
    content: public TensorFlow.TFOutput TensorSliceDataset (TensorFlow.TFOutput[] components, TensorFlow.TFShape[] output_shapes, string operName = null);
    parameters:
    - id: components
      type: TensorFlow.TFOutput[]
      description: To be added.
    - id: output_shapes
      type: TensorFlow.TFShape[]
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorSliceDataset'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.TensorSliceDataset*
  exceptions: []
- uid: TensorFlow.TFGraph.TensorSummary(TensorFlow.TFOutput,System.String,System.String[],System.String,System.String)
  id: TensorSummary(TensorFlow.TFOutput,System.String,System.String[],System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TensorSummary(TFOutput, String, String[], String, String)
  nameWithType: TFGraph.TensorSummary(TFOutput, String, String[], String, String)
  fullName: TFGraph.TensorSummary(TFOutput, String, String[], String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Outputs a `Summary` protocol buffer with a tensor.
  remarks: >-
    This op is being phased out in favor of TensorSummaryV2, which lets callers pass
                  a tag as well as a serialized SummaryMetadata proto string that contains
                  plugin-specific data. We will keep this op to maintain backwards compatibility.
  syntax:
    content: public TensorFlow.TFOutput TensorSummary (TensorFlow.TFOutput tensor, string description = null, string[] labels = null, string display_name = null, string operName = null);
    parameters:
    - id: tensor
      type: TensorFlow.TFOutput
      description: A tensor to serialize.
    - id: description
      type: System.String
      description: >-
        Optional argument
                      A json-encoded SummaryDescription proto.
    - id: labels
      type: System.String[]
      description: >-
        Optional argument
                      An unused list of strings.
    - id: display_name
      type: System.String
      description: >-
        Optional argument
                      An unused string.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorSummary'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.TensorSummary*
  exceptions: []
- uid: TensorFlow.TFGraph.TensorSummaryV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: TensorSummaryV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TensorSummaryV2(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.TensorSummaryV2(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.TensorSummaryV2(TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Outputs a `Summary` protocol buffer with a tensor and per-plugin data.
  syntax:
    content: public TensorFlow.TFOutput TensorSummaryV2 (TensorFlow.TFOutput tag, TensorFlow.TFOutput tensor, TensorFlow.TFOutput serialized_summary_metadata, string operName = null);
    parameters:
    - id: tag
      type: TensorFlow.TFOutput
      description: A string attached to this summary. Used for organization in TensorBoard.
    - id: tensor
      type: TensorFlow.TFOutput
      description: A tensor to serialize.
    - id: serialized_summary_metadata
      type: TensorFlow.TFOutput
      description: >-
        A serialized SummaryMetadata proto. Contains plugin
                      data.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorSummaryV2'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.TensorSummaryV2*
  exceptions: []
- uid: TensorFlow.TFGraph.TextLineDataset(TensorFlow.TFOutput,System.String)
  id: TextLineDataset(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TextLineDataset(TFOutput, String)
  nameWithType: TFGraph.TextLineDataset(TFOutput, String)
  fullName: TFGraph.TextLineDataset(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Creates a dataset that emits the lines of one or more text files.
  syntax:
    content: public TensorFlow.TFOutput TextLineDataset (TensorFlow.TFOutput filenames, string operName = null);
    parameters:
    - id: filenames
      type: TensorFlow.TFOutput
      description: >-
        A scalar or a vector containing the name(s) of the file(s) to be
                      read.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TextLineDataset'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.TextLineDataset*
  exceptions: []
- uid: TensorFlow.TFGraph.TextLineReaderV2(System.Nullable{System.Int64},System.String,System.String,System.String)
  id: TextLineReaderV2(System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TextLineReaderV2(Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.TextLineReaderV2(Nullable<Int64>, String, String, String)
  fullName: TFGraph.TextLineReaderV2(Nullable<Int64>, String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: A Reader that outputs the lines of a file delimited by '\n'.
  syntax:
    content: public TensorFlow.TFOutput TextLineReaderV2 (Nullable<long> skip_header_lines = null, string container = null, string shared_name = null, string operName = null);
    parameters:
    - id: skip_header_lines
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      Number of lines to skip from the beginning of every file.
    - id: container
      type: System.String
      description: >-
        Optional argument
                      If non-empty, this reader is placed in the given container.
                      Otherwise, a default container is used.
    - id: shared_name
      type: System.String
      description: >-
        Optional argument
                      If non-empty, this reader is named in the given bucket
                      with this shared_name. Otherwise, the node name is used instead.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TextLineReaderV2'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The handle to reference the Reader.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.TextLineReaderV2*
  exceptions: []
- uid: TensorFlow.TFGraph.TFRecordDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: TFRecordDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TFRecordDataset(TFOutput, TFOutput, String)
  nameWithType: TFGraph.TFRecordDataset(TFOutput, TFOutput, String)
  fullName: TFGraph.TFRecordDataset(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Creates a dataset that emits the records from one or more TFRecord files.
  syntax:
    content: public TensorFlow.TFOutput TFRecordDataset (TensorFlow.TFOutput filenames, TensorFlow.TFOutput compression_type, string operName = null);
    parameters:
    - id: filenames
      type: TensorFlow.TFOutput
      description: >-
        A scalar or vector containing the name(s) of the file(s) to be
                      read.
    - id: compression_type
      type: TensorFlow.TFOutput
      description: >-
        A scalar containing either (i) the empty string (no
                      compression), (ii) "ZLIB", or (iii) "GZIP".
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TFRecordDataset'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.TFRecordDataset*
  exceptions: []
- uid: TensorFlow.TFGraph.TFRecordReaderV2(System.String,System.String,System.String,System.String)
  id: TFRecordReaderV2(System.String,System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TFRecordReaderV2(String, String, String, String)
  nameWithType: TFGraph.TFRecordReaderV2(String, String, String, String)
  fullName: TFGraph.TFRecordReaderV2(String, String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: A Reader that outputs the records from a TensorFlow Records file.
  syntax:
    content: public TensorFlow.TFOutput TFRecordReaderV2 (string container = null, string shared_name = null, string compression_type = null, string operName = null);
    parameters:
    - id: container
      type: System.String
      description: >-
        Optional argument
                      If non-empty, this reader is placed in the given container.
                      Otherwise, a default container is used.
    - id: shared_name
      type: System.String
      description: >-
        Optional argument
                      If non-empty, this reader is named in the given bucket
                      with this shared_name. Otherwise, the node name is used instead.
    - id: compression_type
      type: System.String
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TFRecordReaderV2'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The handle to reference the Reader.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.TFRecordReaderV2*
  exceptions: []
- uid: TensorFlow.TFGraph.ThreadUnsafeUnigramCandidateSampler(TensorFlow.TFOutput,System.Int64,System.Int64,System.Boolean,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  id: ThreadUnsafeUnigramCandidateSampler(TensorFlow.TFOutput,System.Int64,System.Int64,System.Boolean,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ThreadUnsafeUnigramCandidateSampler(TFOutput, Int64, Int64, Boolean, Int64, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.ThreadUnsafeUnigramCandidateSampler(TFOutput, Int64, Int64, Boolean, Int64, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.ThreadUnsafeUnigramCandidateSampler(TFOutput, Int64, Int64, Boolean, Int64, Nullable<Int64>, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Generates labels for candidate sampling with a learned unigram distribution.
  remarks: "See explanations of candidate sampling and the data formats at\n              go/candidate-sampling.\n              \n              For each batch, this op picks a single set of sampled candidate labels.\n              \n              The advantages of sampling candidates per-batch are simplicity and the\n              possibility of efficient dense matrix multiplication. The disadvantage is that\n              the sampled candidates must be chosen independently of the context and of the\n              true labels."
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> ThreadUnsafeUnigramCandidateSampler (TensorFlow.TFOutput true_classes, long num_true, long num_sampled, bool unique, long range_max, Nullable<long> seed = null, Nullable<long> seed2 = null, string operName = null);
    parameters:
    - id: true_classes
      type: TensorFlow.TFOutput
      description: >-
        A batch_size * num_true matrix, in which each row contains the
                      IDs of the num_true target_classes in the corresponding original label.
    - id: num_true
      type: System.Int64
      description: Number of true labels per context.
    - id: num_sampled
      type: System.Int64
      description: Number of candidates to randomly sample.
    - id: unique
      type: System.Boolean
      description: >-
        If unique is true, we sample with rejection, so that all sampled
                      candidates in a batch are unique. This requires some approximation to
                      estimate the post-rejection sampling probabilities.
    - id: range_max
      type: System.Int64
      description: The sampler will sample integers from the interval [0, range_max).
    - id: seed
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      If either seed or seed2 are set to be non-zero, the random number
                      generator is seeded by the given seed.  Otherwise, it is seeded by a
                      random seed.
    - id: seed2
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      An second seed to avoid seed collision.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ThreadUnsafeUnigramCandidateSampler'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      sampled_candidates: A vector of length num_sampled, in which each element is
                      the ID of a sampled candidate.
                      true_expected_count: A batch_size * num_true matrix, representing
                      the number of times each candidate is expected to occur in a batch
                      of sampled candidates. If unique=true, then this is a probability.
                      sampled_expected_count: A vector of length num_sampled, for each sampled
                      candidate representing the number of times the candidate is expected
                      to occur in a batch of sampled candidates.  If unique=true, then this is a
                      probability.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.ThreadUnsafeUnigramCandidateSampler*
  exceptions: []
- uid: TensorFlow.TFGraph.Tile(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: Tile(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Tile(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Tile(TFOutput, TFOutput, String)
  fullName: TFGraph.Tile(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Constructs a tensor by tiling a given tensor.
  remarks: >-
    This operation creates a new tensor by replicating `input` `multiples` times.
                  The output tensor's i'th dimension has `input.dims(i) * multiples[i]` elements,
                  and the values of `input` are replicated `multiples[i]` times along the 'i'th
                  dimension. For example, tiling `[a b c d]` by `[2]` produces
                  `[a b c d a b c d]`.
  syntax:
    content: public TensorFlow.TFOutput Tile (TensorFlow.TFOutput input, TensorFlow.TFOutput multiples, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: 1-D or higher.
    - id: multiples
      type: TensorFlow.TFOutput
      description: 1-D. Length must be the same as the number of dimensions in `input`
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Tile'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Tile*
  exceptions: []
- uid: TensorFlow.TFGraph.TileGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: TileGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TileGrad(TFOutput, TFOutput, String)
  nameWithType: TFGraph.TileGrad(TFOutput, TFOutput, String)
  fullName: TFGraph.TileGrad(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns the gradient of `Tile`.
  remarks: >-
    Since `Tile` takes an input and repeats the input `multiples` times
                  along each dimension, `TileGrad` takes in `multiples` and aggregates
                  each repeated tile of `input` into `output`.
  syntax:
    content: public TensorFlow.TFOutput TileGrad (TensorFlow.TFOutput input, TensorFlow.TFOutput multiples, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: To be added.
    - id: multiples
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TileGrad'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.TileGrad*
  exceptions: []
- uid: TensorFlow.TFGraph.ToGraphDef(TensorFlow.TFBuffer,TensorFlow.TFStatus)
  id: ToGraphDef(TensorFlow.TFBuffer,TensorFlow.TFStatus)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ToGraphDef(TFBuffer, TFStatus)
  nameWithType: TFGraph.ToGraphDef(TFBuffer, TFStatus)
  fullName: TFGraph.ToGraphDef(TFBuffer, TFStatus)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Write out a serialized representation of the graph (as a GraphDef protocol buffer message) into <code>outputGraphDef</code>.
  syntax:
    content: public void ToGraphDef (TensorFlow.TFBuffer outputGraphDef, TensorFlow.TFStatus status = null);
    parameters:
    - id: outputGraphDef
      type: TensorFlow.TFBuffer
      description: Target buffer where the graphs is serialized into.
    - id: status
      type: TensorFlow.TFStatus
      description: Status buffer, if specified a status code will be left here, if not specified, a <xref href="TensorFlow.TFException"></xref> exception is raised if there is an error.
  overload: TensorFlow.TFGraph.ToGraphDef*
  exceptions: []
- uid: TensorFlow.TFGraph.TopK(TensorFlow.TFOutput,System.Int64,System.Nullable{System.Boolean},System.String)
  id: TopK(TensorFlow.TFOutput,System.Int64,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TopK(TFOutput, Int64, Nullable<Boolean>, String)
  nameWithType: TFGraph.TopK(TFOutput, Int64, Nullable<Boolean>, String)
  fullName: TFGraph.TopK(TFOutput, Int64, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Finds values and indices of the `k` largest elements for the last dimension.
  remarks: "If the input is a vector (rank-1), finds the `k` largest entries in the vector\n              and outputs their values and indices as vectors.  Thus `values[j]` is the\n              `j`-th largest entry in `input`, and its index is `indices[j]`.\n              \n              For matrices (resp. higher rank input), computes the top `k` entries in each\n              row (resp. vector along the last dimension).  Thus,\n              \n                  values.shape = indices.shape = input.shape[:-1] + [k]\n              \n              If two elements are equal, the lower-index element appears first.\n              \n              If `k` varies dynamically, use `TopKV2` below."
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput> TopK (TensorFlow.TFOutput input, long k, Nullable<bool> sorted = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: 1-D or higher with last dimension at least `k`.
    - id: k
      type: System.Int64
      description: >-
        Number of top elements to look for along the last dimension (along each
                      row for matrices).
    - id: sorted
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true the resulting `k` elements will be sorted by the values in
                      descending order.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TopK'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      values: The `k` largest elements along each last dimensional slice.
                      indices: The indices of `values` within the last dimension of `input`.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.TopK*
  exceptions: []
- uid: TensorFlow.TFGraph.TopKV2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  id: TopKV2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TopKV2(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.TopKV2(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.TopKV2(TFOutput, TFOutput, Nullable<Boolean>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Finds values and indices of the `k` largest elements for the last dimension.
  remarks: "If the input is a vector (rank-1), finds the `k` largest entries in the vector\n              and outputs their values and indices as vectors.  Thus `values[j]` is the\n              `j`-th largest entry in `input`, and its index is `indices[j]`.\n              \n              For matrices (resp. higher rank input), computes the top `k` entries in each\n              row (resp. vector along the last dimension).  Thus,\n              \n                  values.shape = indices.shape = input.shape[:-1] + [k]\n              \n              If two elements are equal, the lower-index element appears first."
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput> TopKV2 (TensorFlow.TFOutput input, TensorFlow.TFOutput k, Nullable<bool> sorted = null, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: 1-D or higher with last dimension at least `k`.
    - id: k
      type: TensorFlow.TFOutput
      description: >-
        0-D.  Number of top elements to look for along the last dimension (along each
                      row for matrices).
    - id: sorted
      type: System.Nullable{System.Boolean}
      description: >-
        Optional argument
                      If true the resulting `k` elements will be sorted by the values in
                      descending order.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TopKV2'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      values: The `k` largest elements along each last dimensional slice.
                      indices: The indices of `values` within the last dimension of `input`.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.TopKV2*
  exceptions: []
- uid: TensorFlow.TFGraph.Transpose(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: Transpose(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Transpose(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Transpose(TFOutput, TFOutput, String)
  fullName: TFGraph.Transpose(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Shuffle dimensions of x according to a permutation.
  remarks: >-
    The output `y` has the same rank as `x`. The shapes of `x` and `y` satisfy:
                    `y.shape[i] == x.shape[perm[i]] for i in [0, 1, ..., rank(x) - 1]`
  syntax:
    content: public TensorFlow.TFOutput Transpose (TensorFlow.TFOutput x, TensorFlow.TFOutput perm, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: perm
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Transpose'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Transpose*
  exceptions: []
- uid: TensorFlow.TFGraph.TruncateDiv(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: TruncateDiv(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TruncateDiv(TFOutput, TFOutput, String)
  nameWithType: TFGraph.TruncateDiv(TFOutput, TFOutput, String)
  fullName: TFGraph.TruncateDiv(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns x / y element-wise for integer types.
  remarks: "Truncation designates that negative numbers will round fractional quantities\n              toward zero. I.e. -7 / 5 = 1. This matches C semantics but it is different\n              than Python semantics. See `FloorDiv` for a division function that matches\n              Python Semantics.\n              \n              *NOTE*: `TruncateDiv` supports broadcasting. More about broadcasting\n              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)"
  syntax:
    content: public TensorFlow.TFOutput TruncateDiv (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TruncateDiv'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.TruncateDiv*
  exceptions: []
- uid: TensorFlow.TFGraph.TruncatedNormal(TensorFlow.TFOutput,TensorFlow.TFDataType,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  id: TruncatedNormal(TensorFlow.TFOutput,TensorFlow.TFDataType,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TruncatedNormal(TFOutput, TFDataType, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.TruncatedNormal(TFOutput, TFDataType, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.TruncatedNormal(TFOutput, TFDataType, Nullable<Int64>, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Outputs random values from a truncated normal distribution.
  remarks: >-
    The generated values follow a normal distribution with mean 0 and standard
                  deviation 1, except that values whose magnitude is more than 2 standard
                  deviations from the mean are dropped and re-picked.
  syntax:
    content: public TensorFlow.TFOutput TruncatedNormal (TensorFlow.TFOutput shape, TensorFlow.TFDataType dtype, Nullable<long> seed = null, Nullable<long> seed2 = null, string operName = null);
    parameters:
    - id: shape
      type: TensorFlow.TFOutput
      description: The shape of the output tensor.
    - id: dtype
      type: TensorFlow.TFDataType
      description: The type of the output.
    - id: seed
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      If either `seed` or `seed2` are set to be non-zero, the random number
                      generator is seeded by the given seed.  Otherwise, it is seeded by a
                      random seed.
    - id: seed2
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      A second seed to avoid seed collision.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TruncatedNormal'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        A tensor of the specified shape filled with random truncated normal
                      values.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.TruncatedNormal*
  exceptions: []
- uid: TensorFlow.TFGraph.TruncateMod(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: TruncateMod(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: TruncateMod(TFOutput, TFOutput, String)
  nameWithType: TFGraph.TruncateMod(TFOutput, TFOutput, String)
  fullName: TFGraph.TruncateMod(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns element-wise remainder of division. This emulates C semantics in that
  remarks: "the result here is consistent with a truncating divide. E.g. `truncate(x / y) *\n              y + truncate_mod(x, y) = x`.\n              \n              *NOTE*: `TruncateMod` supports broadcasting. More about broadcasting\n              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)"
  syntax:
    content: public TensorFlow.TFOutput TruncateMod (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: y
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'TruncateMod'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.TruncateMod*
  exceptions: []
- uid: TensorFlow.TFGraph.UniformCandidateSampler(TensorFlow.TFOutput,System.Int64,System.Int64,System.Boolean,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  id: UniformCandidateSampler(TensorFlow.TFOutput,System.Int64,System.Int64,System.Boolean,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: UniformCandidateSampler(TFOutput, Int64, Int64, Boolean, Int64, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.UniformCandidateSampler(TFOutput, Int64, Int64, Boolean, Int64, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.UniformCandidateSampler(TFOutput, Int64, Int64, Boolean, Int64, Nullable<Int64>, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Generates labels for candidate sampling with a uniform distribution.
  remarks: "See explanations of candidate sampling and the data formats at\n              go/candidate-sampling.\n              \n              For each batch, this op picks a single set of sampled candidate labels.\n              \n              The advantages of sampling candidates per-batch are simplicity and the\n              possibility of efficient dense matrix multiplication. The disadvantage is that\n              the sampled candidates must be chosen independently of the context and of the\n              true labels."
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> UniformCandidateSampler (TensorFlow.TFOutput true_classes, long num_true, long num_sampled, bool unique, long range_max, Nullable<long> seed = null, Nullable<long> seed2 = null, string operName = null);
    parameters:
    - id: true_classes
      type: TensorFlow.TFOutput
      description: >-
        A batch_size * num_true matrix, in which each row contains the
                      IDs of the num_true target_classes in the corresponding original label.
    - id: num_true
      type: System.Int64
      description: Number of true labels per context.
    - id: num_sampled
      type: System.Int64
      description: Number of candidates to randomly sample.
    - id: unique
      type: System.Boolean
      description: >-
        If unique is true, we sample with rejection, so that all sampled
                      candidates in a batch are unique. This requires some approximation to
                      estimate the post-rejection sampling probabilities.
    - id: range_max
      type: System.Int64
      description: The sampler will sample integers from the interval [0, range_max).
    - id: seed
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      If either seed or seed2 are set to be non-zero, the random number
                      generator is seeded by the given seed.  Otherwise, it is seeded by a
                      random seed.
    - id: seed2
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      An second seed to avoid seed collision.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'UniformCandidateSampler'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      sampled_candidates: A vector of length num_sampled, in which each element is
                      the ID of a sampled candidate.
                      true_expected_count: A batch_size * num_true matrix, representing
                      the number of times each candidate is expected to occur in a batch
                      of sampled candidates. If unique=true, then this is a probability.
                      sampled_expected_count: A vector of length num_sampled, for each sampled
                      candidate representing the number of times the candidate is expected
                      to occur in a batch of sampled candidates.  If unique=true, then this is a
                      probability.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.UniformCandidateSampler*
  exceptions: []
- uid: TensorFlow.TFGraph.Unique(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  id: Unique(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Unique(TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.Unique(TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.Unique(TFOutput, Nullable<TFDataType>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Finds unique elements in a 1-D tensor.
  remarks: "This operation returns a tensor `y` containing all of the unique elements of `x`\n              sorted in the same order that they occur in `x`. This operation also returns a\n              tensor `idx` the same size as `x` that contains the index of each value of `x`\n              in the unique output `y`. In other words:\n              \n              `y[idx[i]] = x[i] for i in [0, 1,...,rank(x) - 1]`\n              \n              For example:\n              \n              ```\n              # tensor 'x' is [1, 1, 2, 4, 4, 4, 7, 8, 8]\n              y, idx = unique(x)\n              y ==&gt; [1, 2, 4, 7, 8]\n              idx ==&gt; [0, 0, 1, 2, 2, 2, 3, 4, 4]\n              ```"
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput> Unique (TensorFlow.TFOutput x, Nullable<TensorFlow.TFDataType> out_idx = null, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: 1-D.
    - id: out_idx
      type: System.Nullable{TensorFlow.TFDataType}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Unique'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      y: 1-D.
                      idx: 1-D.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.Unique*
  exceptions: []
- uid: TensorFlow.TFGraph.UniqueWithCounts(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  id: UniqueWithCounts(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: UniqueWithCounts(TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.UniqueWithCounts(TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.UniqueWithCounts(TFOutput, Nullable<TFDataType>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Finds unique elements in a 1-D tensor.
  remarks: "This operation returns a tensor `y` containing all of the unique elements of `x`\n              sorted in the same order that they occur in `x`. This operation also returns a\n              tensor `idx` the same size as `x` that contains the index of each value of `x`\n              in the unique output `y`. Finally, it returns a third tensor `count` that\n              contains the count of each element of `y` in `x`. In other words:\n              \n              `y[idx[i]] = x[i] for i in [0, 1,...,rank(x) - 1]`\n              \n              For example:\n              \n              ```\n              # tensor 'x' is [1, 1, 2, 4, 4, 4, 7, 8, 8]\n              y, idx, count = unique_with_counts(x)\n              y ==&gt; [1, 2, 4, 7, 8]\n              idx ==&gt; [0, 0, 1, 2, 2, 2, 3, 4, 4]\n              count ==&gt; [2, 1, 3, 1, 2]\n              ```"
  syntax:
    content: public ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput> UniqueWithCounts (TensorFlow.TFOutput x, Nullable<TensorFlow.TFDataType> out_idx = null, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: 1-D.
    - id: out_idx
      type: System.Nullable{TensorFlow.TFDataType}
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'UniqueWithCounts'.
    return:
      type: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
      description: >-
        Returns a tuple with multiple values, as follows:
                      y: 1-D.
                      idx: 1-D.
                      count: 1-D.
                      The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
  overload: TensorFlow.TFGraph.UniqueWithCounts*
  exceptions: []
- uid: TensorFlow.TFGraph.Unpack(TensorFlow.TFOutput,System.Int64,System.Nullable{System.Int64},System.String)
  id: Unpack(TensorFlow.TFOutput,System.Int64,System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Unpack(TFOutput, Int64, Nullable<Int64>, String)
  nameWithType: TFGraph.Unpack(TFOutput, Int64, Nullable<Int64>, String)
  fullName: TFGraph.Unpack(TFOutput, Int64, Nullable<Int64>, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Unpacks a given dimension of a rank-`R` tensor into `num` rank-`(R-1)` tensors.
  remarks: "Unpacks `num` tensors from `value` by chipping it along the `axis` dimension.\n              For example, given a tensor of shape `(A, B, C, D)`;\n              \n              If `axis == 0` then the i'th tensor in `output` is the slice `value[i, :, :, :]`\n                and each tensor in `output` will have shape `(B, C, D)`. (Note that the\n                dimension unpacked along is gone, unlike `split`).\n              \n              If `axis == 1` then the i'th tensor in `output` is the slice `value[:, i, :, :]`\n                and each tensor in `output` will have shape `(A, C, D)`.\n              Etc.\n              \n              This is the opposite of `pack`."
  syntax:
    content: public TensorFlow.TFOutput[] Unpack (TensorFlow.TFOutput value, long num, Nullable<long> axis = null, string operName = null);
    parameters:
    - id: value
      type: TensorFlow.TFOutput
      description: 1-D or higher, with `axis` dimension size equal to `num`.
    - id: num
      type: System.Int64
      description: To be added.
    - id: axis
      type: System.Nullable{System.Int64}
      description: >-
        Optional argument
                      Dimension along which to unpack.  Negative values wrap around, so the
                      valid range is `[-R, R)`.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Unpack'.
    return:
      type: TensorFlow.TFOutput[]
      description: >-
        The list of tensors unpacked from `value`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Unpack*
  exceptions: []
- uid: TensorFlow.TFGraph.UnsortedSegmentMax(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: UnsortedSegmentMax(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: UnsortedSegmentMax(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.UnsortedSegmentMax(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.UnsortedSegmentMax(TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the Max along segments of a tensor.
  remarks: "Read @{$math_ops#segmentation$the section on segmentation} for an explanation of\n              segments.\n              \n              This operator is similar to the [unsorted segment sum operator](../../../api_docs/python/math_ops.md#UnsortedSegmentSum).\n              Instead of computing the sum over segments, it computes the maximum\n              such that:\n              \n              \\\\(output_i = \\max_j data_j\\\\) where max is over `j` such\n              that `segment_ids[j] == i`.\n              \n              If the maximum is empty for a given segment ID `i`, it outputs the smallest possible value for specific numeric type,\n               `output[i] = numeric_limits&lt;T&gt;::min()`.\n              \n              &lt;div style=\"width:70%; margin:auto; margin-bottom:10px; margin-top:20px;\"&gt;\n              &lt;img style=\"width:100%\" src=\"https://www.tensorflow.org/images/UnsortedSegmentSum.png\" alt&gt;\n              &lt;/div&gt;"
  syntax:
    content: public TensorFlow.TFOutput UnsortedSegmentMax (TensorFlow.TFOutput data, TensorFlow.TFOutput segment_ids, TensorFlow.TFOutput num_segments, string operName = null);
    parameters:
    - id: data
      type: TensorFlow.TFOutput
      description: To be added.
    - id: segment_ids
      type: TensorFlow.TFOutput
      description: >-
        A 1-D tensor whose rank is equal to the rank of `data`'s
                      first dimension.
    - id: num_segments
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'UnsortedSegmentMax'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Has same shape as data, except for dimension 0 which
                      has size `num_segments`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.UnsortedSegmentMax*
  exceptions: []
- uid: TensorFlow.TFGraph.UnsortedSegmentSum(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: UnsortedSegmentSum(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: UnsortedSegmentSum(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.UnsortedSegmentSum(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.UnsortedSegmentSum(TFOutput, TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Computes the sum along segments of a tensor.
  remarks: "Read @{$math_ops#segmentation$the section on segmentation} for an explanation of\n              segments.\n              \n              Computes a tensor such that\n              `(output[i] = sum_{j...} data[j...]` where the sum is over tuples `j...` such\n              that `segment_ids[j...] == i`.  Unlike `SegmentSum`, `segment_ids`\n              need not be sorted and need not cover all values in the full\n              range of valid values.\n              \n              If the sum is empty for a given segment ID `i`, `output[i] = 0`.\n              \n              `num_segments` should equal the number of distinct segment IDs.\n              \n              &lt;div style=\"width:70%; margin:auto; margin-bottom:10px; margin-top:20px;\"&gt;\n              &lt;img style=\"width:100%\" src=\"https://www.tensorflow.org/images/UnsortedSegmentSum.png\" alt&gt;\n              &lt;/div&gt;"
  syntax:
    content: public TensorFlow.TFOutput UnsortedSegmentSum (TensorFlow.TFOutput data, TensorFlow.TFOutput segment_ids, TensorFlow.TFOutput num_segments, string operName = null);
    parameters:
    - id: data
      type: TensorFlow.TFOutput
      description: To be added.
    - id: segment_ids
      type: TensorFlow.TFOutput
      description: A tensor whose shape is a prefix of `data.shape`.
    - id: num_segments
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'UnsortedSegmentSum'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        Has same shape as data, except for the first `segment_ids.rank`
                      dimensions, which are replaced with a single dimension which has size
                      `num_segments`.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.UnsortedSegmentSum*
  exceptions: []
- uid: TensorFlow.TFGraph.Unstage(TensorFlow.TFDataType[],System.String,System.String,System.String)
  id: Unstage(TensorFlow.TFDataType[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Unstage(TFDataType[], String, String, String)
  nameWithType: TFGraph.Unstage(TFDataType[], String, String, String)
  fullName: TFGraph.Unstage(TFDataType[], String, String, String)
  type: Method
  assemblies: []
  namespace: TensorFlow
  summary: Op is similar to a lightweight Dequeue.
  remarks: >-
    The basic funtionality is similar to dequeue with many fewer
                  capabilities and options.  This Op is optimized for performance.
  syntax:
    content: public TensorFlow.TFOutput[] Unstage (TensorFlow.TFDataType[] dtypes, string container = null, string shared_name = null, string operName = null);
    parameters:
    - id: dtypes
      type: TensorFlow.TFDataType[]
      description: To be added.
    - id: container
      type: System.String
      description: Optional argument
    - id: shared_name
      type: System.String
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Unstage'.
    return:
      type: TensorFlow.TFOutput[]
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Unstage*
  exceptions: []
- uid: TensorFlow.TFGraph.Unstage(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  id: Unstage(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Unstage(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.Unstage(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.Unstage(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Op is similar to a lightweight Dequeue.
  remarks: >-
    The basic functionality is similar to dequeue with many fewer
                  capabilities and options.  This Op is optimized for performance.
  syntax:
    content: public TensorFlow.TFOutput[] Unstage (TensorFlow.TFDataType[] dtypes, Nullable<long> capacity = null, Nullable<long> memory_limit = null, string container = null, string shared_name = null, string operName = null);
    parameters:
    - id: dtypes
      type: TensorFlow.TFDataType[]
      description: To be added.
    - id: capacity
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: memory_limit
      type: System.Nullable{System.Int64}
      description: Optional argument
    - id: container
      type: System.String
      description: Optional argument
    - id: shared_name
      type: System.String
      description: Optional argument
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Unstage'.
    return:
      type: TensorFlow.TFOutput[]
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Unstage*
  exceptions: []
- uid: TensorFlow.TFGraph.VarHandleOp(TensorFlow.TFDataType,TensorFlow.TFShape,System.String,System.String,System.String)
  id: VarHandleOp(TensorFlow.TFDataType,TensorFlow.TFShape,System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: VarHandleOp(TFDataType, TFShape, String, String, String)
  nameWithType: TFGraph.VarHandleOp(TFDataType, TFShape, String, String, String)
  fullName: TFGraph.VarHandleOp(TFDataType, TFShape, String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Creates a handle to a Variable resource.
  syntax:
    content: public TensorFlow.TFOutput VarHandleOp (TensorFlow.TFDataType dtype, TensorFlow.TFShape shape, string container = null, string shared_name = null, string operName = null);
    parameters:
    - id: dtype
      type: TensorFlow.TFDataType
      description: >-
        the type of this variable. Must agree with the dtypes
                      of all ops using this variable.
    - id: shape
      type: TensorFlow.TFShape
      description: The (possibly partially specified) shape of this variable.
    - id: container
      type: System.String
      description: >-
        Optional argument
                      the container this variable is placed in.
    - id: shared_name
      type: System.String
      description: >-
        Optional argument
                      the name by which this variable is referred to.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'VarHandleOp'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.VarHandleOp*
  exceptions: []
- uid: TensorFlow.TFGraph.Variable(TensorFlow.TFOutput,TensorFlow.TFOutput@,System.String)
  id: Variable(TensorFlow.TFOutput,TensorFlow.TFOutput@,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Variable(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Variable(TFOutput, TFOutput, String)
  fullName: TFGraph.Variable(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Variable node, with a starting initial value.  Convenience that registers the init variable to a global queue.
  remarks: "Variables need to be initialized before the main execution so you will typically want to\n            run the session on the variable.\n            \n            The init sequence for the variable is stored in the graph, you must manually initialize \n            those by running the session on the global variables."
  syntax:
    content: public TensorFlow.TFOutput Variable (TensorFlow.TFOutput initialValue, out TensorFlow.TFOutput value, string operName = null);
    parameters:
    - id: initialValue
      type: TensorFlow.TFOutput
      description: Initial value.
    - id: value
      type: TensorFlow.TFOutput
      description: Returns the value of the variable.
    - id: operName
      type: System.String
      description: Operation name, optional.
    return:
      type: TensorFlow.TFOutput
      description: The returning TFOutput returns the handle to the variable.
  overload: TensorFlow.TFGraph.Variable*
  exceptions: []
- uid: TensorFlow.TFGraph.Variable(TensorFlow.TFOutput,TensorFlow.TFOperation@,TensorFlow.TFOutput@,System.String)
  id: Variable(TensorFlow.TFOutput,TensorFlow.TFOperation@,TensorFlow.TFOutput@,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Variable(TFOutput, TFOperation, TFOutput, String)
  nameWithType: TFGraph.Variable(TFOutput, TFOperation, TFOutput, String)
  fullName: TFGraph.Variable(TFOutput, TFOperation, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Variable node, with a starting initial value.
  remarks: >-
    Variables need to be initialized before the main execution so you will typically want to
                run the session on the variable
  syntax:
    content: public TensorFlow.TFOutput Variable (TensorFlow.TFOutput initialValue, out TensorFlow.TFOperation init, out TensorFlow.TFOutput value, string operName = null);
    parameters:
    - id: initialValue
      type: TensorFlow.TFOutput
      description: Initial value.
    - id: init
      type: TensorFlow.TFOperation
      description: Returns the operation that initializes the value of the variable.
    - id: value
      type: TensorFlow.TFOutput
      description: Returns the value of the variable.
    - id: operName
      type: System.String
      description: Operation name, optional.
    return:
      type: TensorFlow.TFOutput
      description: The returning TFOutput returns the handle to the variable.
  overload: TensorFlow.TFGraph.Variable*
  exceptions: []
- uid: TensorFlow.TFGraph.Variable(TensorFlow.TFOutput,System.String)
  id: Variable(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Variable(TFOutput, String)
  nameWithType: TFGraph.Variable(TFOutput, String)
  fullName: TFGraph.Variable(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Variable node, with a starting initial value.  Convenience that registers the init variable to a global queue.
  remarks: "Variables need to be initialized before the main execution so you will typically want to\n            run the session on the variable.\n            \n            The init sequence for the variable is stored in the graph, you must manually initialize \n            those by running the session on the global variables."
  syntax:
    content: public TensorFlow.TFOutput Variable (TensorFlow.TFOutput initialValue, string operName = null);
    parameters:
    - id: initialValue
      type: TensorFlow.TFOutput
      description: Initial value.
    - id: operName
      type: System.String
      description: Operation name, optional.
    return:
      type: TensorFlow.TFOutput
      description: The returning TFOutput returns the handle to the variable.
  overload: TensorFlow.TFGraph.Variable*
  exceptions: []
- uid: TensorFlow.TFGraph.VarIsInitializedOp(TensorFlow.TFOutput,System.String)
  id: VarIsInitializedOp(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: VarIsInitializedOp(TFOutput, String)
  nameWithType: TFGraph.VarIsInitializedOp(TFOutput, String)
  fullName: TFGraph.VarIsInitializedOp(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Checks whether a resource handle-based variable has been initialized.
  syntax:
    content: public TensorFlow.TFOutput VarIsInitializedOp (TensorFlow.TFOutput resource, string operName = null);
    parameters:
    - id: resource
      type: TensorFlow.TFOutput
      description: the input resource handle.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'VarIsInitializedOp'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        a scalar boolean which is true if the variable has been
                      initialized.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.VarIsInitializedOp*
  exceptions: []
- uid: TensorFlow.TFGraph.Where(TensorFlow.TFOutput,System.String)
  id: Where(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Where(TFOutput, String)
  nameWithType: TFGraph.Where(TFOutput, String)
  fullName: TFGraph.Where(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns locations of true values in a boolean tensor.
  remarks: "This operation returns the coordinates of true elements in `input`. The\n              coordinates are returned in a 2-D tensor where the first dimension (rows)\n              represents the number of true elements, and the second dimension (columns)\n              represents the coordinates of the true elements. Keep in mind, the shape of\n              the output tensor can vary depending on how many true values there are in\n              `input`. Indices are output in row-major order.\n              \n              For example:\n              \n              ```\n              # 'input' tensor is [[True, False]\n              #                    [True, False]]\n              # 'input' has two true values, so output has two coordinates.\n              # 'input' has rank of 2, so coordinates have two indices.\n              where(input) ==&gt; [[0, 0],\n                                [1, 0]]\n              \n              # `input` tensor is [[[True, False]\n              #                     [True, False]]\n              #                    [[False, True]\n              #                     [False, True]]\n              #                    [[False, False]\n              #                     [False, True]]]\n              # 'input' has 5 true values, so output has 5 coordinates.\n              # 'input' has rank of 3, so coordinates have three indices.\n              where(input) ==&gt; [[0, 0, 0],\n                                [0, 1, 0],\n                                [1, 0, 1],\n                                [1, 1, 1],\n                                [2, 1, 1]]\n              ```"
  syntax:
    content: public TensorFlow.TFOutput Where (TensorFlow.TFOutput input, string operName = null);
    parameters:
    - id: input
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Where'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Where*
  exceptions: []
- uid: TensorFlow.TFGraph.While(TensorFlow.TFOutput[],TensorFlow.TFGraph.WhileConstructor,TensorFlow.TFStatus)
  id: While(TensorFlow.TFOutput[],TensorFlow.TFGraph.WhileConstructor,TensorFlow.TFStatus)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: While(TFOutput[], TFGraph+WhileConstructor, TFStatus)
  nameWithType: TFGraph.While(TFOutput[], TFGraph+WhileConstructor, TFStatus)
  fullName: TFGraph.While(TFOutput[], TFGraph+WhileConstructor, TFStatus)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Constructs a while loop with the specified inputs and a callback that composes the while loop
  syntax:
    content: public TensorFlow.TFOutput[] While (TensorFlow.TFOutput[] inputs, TensorFlow.TFGraph.WhileConstructor constructor, TensorFlow.TFStatus status = null);
    parameters:
    - id: inputs
      type: TensorFlow.TFOutput[]
      description: Inputs.
    - id: constructor
      type: TensorFlow.TFGraph+WhileConstructor
      description: Callback method that fills out the various while loop parameters.
    - id: status
      type: TensorFlow.TFStatus
      description: Status buffer, if specified a status code will be left here, if not specified, a <xref href="TensorFlow.TFException"></xref> exception is raised if there is an error.
    return:
      type: TensorFlow.TFOutput[]
      description: "An array of TFOutputs from creating the While loop, or null if there is an error creating the \n            while loop, or if the constructor raised an exception when it was invoked."
  overload: TensorFlow.TFGraph.While*
  exceptions: []
- uid: TensorFlow.TFGraph.WholeFileReaderV2(System.String,System.String,System.String)
  id: WholeFileReaderV2(System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: WholeFileReaderV2(String, String, String)
  nameWithType: TFGraph.WholeFileReaderV2(String, String, String)
  fullName: TFGraph.WholeFileReaderV2(String, String, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: A Reader that outputs the entire contents of a file as a value.
  remarks: >-
    To use, enqueue filenames in a Queue.  The output of ReaderRead will
                  be a filename (key) and the contents of that file (value).
  syntax:
    content: public TensorFlow.TFOutput WholeFileReaderV2 (string container = null, string shared_name = null, string operName = null);
    parameters:
    - id: container
      type: System.String
      description: >-
        Optional argument
                      If non-empty, this reader is placed in the given container.
                      Otherwise, a default container is used.
    - id: shared_name
      type: System.String
      description: >-
        Optional argument
                      If non-empty, this reader is named in the given bucket
                      with this shared_name. Otherwise, the node name is used instead.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'WholeFileReaderV2'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        The handle to reference the Reader.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.WholeFileReaderV2*
  exceptions: []
- uid: TensorFlow.TFGraph.WithScope(System.String)
  id: WithScope(System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: WithScope(String)
  nameWithType: TFGraph.WithScope(String)
  fullName: TFGraph.WithScope(String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Creates a new namescope by setting the scope to the description provided.
  remarks: >-
    <p>
                To more easily name your operations and group then, you can use the
                WithScope method to set a current name scope that alter the complete name
                of an operation added to the graph.
                </p>
        <p>
                The graph starts with a scope set to the empty string, you can introduce new
                scopes by calling WithScope, and can be conveniently used with the C# using
                statement, like this:
                </p>
        <pre><code>
                Assert (graph.CurrentNamescope, "");
                using (var nested = graph.WithScope ("nested")){
                   Assert (graph.CurrentNameScope, "nested");
                   using (var inner = graph.WithScope ("inner")){
                       Assert (graph.CurrentNameScope, "nested/inner");
                   }
                }
                </code></pre>
  syntax:
    content: public TensorFlow.TFScope WithScope (string nameScopeDesc);
    parameters:
    - id: nameScopeDesc
      type: System.String
      description: >-
        The namescope description, if the value is null, this
                    will reset the toplevel namescope to be the empty value.
    return:
      type: TensorFlow.TFScope
      description: A new scope that will remain in use until the return TFScope is disposed.
  overload: TensorFlow.TFGraph.WithScope*
  exceptions: []
- uid: TensorFlow.TFGraph.WriteFile(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: WriteFile(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: WriteFile(TFOutput, TFOutput, String)
  nameWithType: TFGraph.WriteFile(TFOutput, TFOutput, String)
  fullName: TFGraph.WriteFile(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Writes contents to the file at input filename. Creates file if not existing.
  syntax:
    content: public TensorFlow.TFOperation WriteFile (TensorFlow.TFOutput filename, TensorFlow.TFOutput contents, string operName = null);
    parameters:
    - id: filename
      type: TensorFlow.TFOutput
      description: scalar. The name of the file to which we write the contents.
    - id: contents
      type: TensorFlow.TFOutput
      description: scalar. The content to be written to the output file.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'WriteFile'.
    return:
      type: TensorFlow.TFOperation
      description: Returns the description of the operation
  overload: TensorFlow.TFGraph.WriteFile*
  exceptions: []
- uid: TensorFlow.TFGraph.ZerosLike(TensorFlow.TFOutput,System.String)
  id: ZerosLike(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ZerosLike(TFOutput, String)
  nameWithType: TFGraph.ZerosLike(TFOutput, String)
  fullName: TFGraph.ZerosLike(TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Returns a tensor of zeros with the same shape and type as x.
  syntax:
    content: public TensorFlow.TFOutput ZerosLike (TensorFlow.TFOutput x, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: a tensor of type T.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ZerosLike'.
    return:
      type: TensorFlow.TFOutput
      description: >-
        a tensor of the same shape and type as x but filled with zeros.
                      The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ZerosLike*
  exceptions: []
- uid: TensorFlow.TFGraph.Zeta(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  id: Zeta(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: Zeta(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Zeta(TFOutput, TFOutput, String)
  fullName: TFGraph.Zeta(TFOutput, TFOutput, String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Compute the Hurwitz zeta function \\(\zeta(x, q)\\).
  remarks: "The Hurwitz zeta function is defined as:\n              \n              \n              \\\\(\\zeta(x, q) = \\sum_{n=0}^{\\infty} (q + n)^{-x}\\\\)"
  syntax:
    content: public TensorFlow.TFOutput Zeta (TensorFlow.TFOutput x, TensorFlow.TFOutput q, string operName = null);
    parameters:
    - id: x
      type: TensorFlow.TFOutput
      description: To be added.
    - id: q
      type: TensorFlow.TFOutput
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'Zeta'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.Zeta*
  exceptions: []
- uid: TensorFlow.TFGraph.ZipDataset(TensorFlow.TFOutput[],TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  id: ZipDataset(TensorFlow.TFOutput[],TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  parent: TensorFlow.TFGraph
  langs:
  - csharp
  name: ZipDataset(TFOutput[], TFDataType[], TFShape[], String)
  nameWithType: TFGraph.ZipDataset(TFOutput[], TFDataType[], TFShape[], String)
  fullName: TFGraph.ZipDataset(TFOutput[], TFDataType[], TFShape[], String)
  type: Method
  assemblies:
  - TensorFlowSharp
  namespace: TensorFlow
  summary: Creates a dataset that zips together `input_datasets`.
  syntax:
    content: public TensorFlow.TFOutput ZipDataset (TensorFlow.TFOutput[] input_datasets, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);
    parameters:
    - id: input_datasets
      type: TensorFlow.TFOutput[]
      description: To be added.
    - id: output_types
      type: TensorFlow.TFDataType[]
      description: To be added.
    - id: output_shapes
      type: TensorFlow.TFShape[]
      description: To be added.
    - id: operName
      type: System.String
      description: If specified, the created operation in the graph will be this one, otherwise it will be named 'ZipDataset'.
    return:
      type: TensorFlow.TFOutput
      description: The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
  overload: TensorFlow.TFGraph.ZipDataset*
  exceptions: []
references:
- uid: TensorFlow.TFDisposable
  parent: TensorFlow
  isExternal: false
  name: TFDisposable
  nameWithType: TFDisposable
  fullName: TensorFlow.TFDisposable
- uid: TensorFlow.TFGraph.#ctor
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TFGraph()
  nameWithType: TFGraph.TFGraph()
  fullName: TFGraph.TFGraph()
- uid: TensorFlow.TFGraph.Abort(System.String,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Abort(String, Nullable<Boolean>, String)
  nameWithType: TFGraph.Abort(String, Nullable<Boolean>, String)
  fullName: TFGraph.Abort(String, Nullable<Boolean>, String)
- uid: TensorFlow.TFOperation
  parent: TensorFlow
  isExternal: false
  name: TFOperation
  nameWithType: TFOperation
  fullName: TensorFlow.TFOperation
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Nullable`1
  name: Nullable
  nameWithType: Nullable
  fullName: System.Nullable
- uid: System.Boolean
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Nullable{System.Boolean}
  parent: System
  isExternal: true
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TensorFlow.TFGraph.Abs(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Abs(TFOutput, String)
  nameWithType: TFGraph.Abs(TFOutput, String)
  fullName: TFGraph.Abs(TFOutput, String)
- uid: TensorFlow.TFOutput
  parent: TensorFlow
  isExternal: false
  name: TFOutput
  nameWithType: TFOutput
  fullName: TensorFlow.TFOutput
- uid: TensorFlow.TFGraph.Acos(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Acos(TFOutput, String)
  nameWithType: TFGraph.Acos(TFOutput, String)
  fullName: TFGraph.Acos(TFOutput, String)
- uid: TensorFlow.TFGraph.Add(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Add(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Add(TFOutput, TFOutput, String)
  fullName: TFGraph.Add(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.AddGradients(TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFStatus)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AddGradients(TFOutput[], TFOutput[], TFOutput[], TFStatus)
  nameWithType: TFGraph.AddGradients(TFOutput[], TFOutput[], TFOutput[], TFStatus)
  fullName: TFGraph.AddGradients(TFOutput[], TFOutput[], TFOutput[], TFStatus)
- uid: TensorFlow.TFOutput[]
  parent: TensorFlow
  isExternal: false
  name: TFOutput[]
  nameWithType: TFOutput[]
  fullName: TensorFlow.TFOutput[]
  spec.csharp:
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: TensorFlow.TFStatus
  parent: TensorFlow
  isExternal: false
  name: TFStatus
  nameWithType: TFStatus
  fullName: TensorFlow.TFStatus
- uid: TensorFlow.TFGraph.AddInitVariable(TensorFlow.TFOperation)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AddInitVariable(TFOperation)
  nameWithType: TFGraph.AddInitVariable(TFOperation)
  fullName: TFGraph.AddInitVariable(TFOperation)
- uid: TensorFlow.TFGraph.AddManySparseToTensorsMap(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AddManySparseToTensorsMap(TFOutput, TFOutput, TFOutput, String, String, String)
  nameWithType: TFGraph.AddManySparseToTensorsMap(TFOutput, TFOutput, TFOutput, String, String, String)
  fullName: TFGraph.AddManySparseToTensorsMap(TFOutput, TFOutput, TFOutput, String, String, String)
- uid: TensorFlow.TFGraph.AddN(TensorFlow.TFOutput[],System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AddN(TFOutput[], String)
  nameWithType: TFGraph.AddN(TFOutput[], String)
  fullName: TFGraph.AddN(TFOutput[], String)
- uid: TensorFlow.TFGraph.AddSparseToTensorsMap(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AddSparseToTensorsMap(TFOutput, TFOutput, TFOutput, String, String, String)
  nameWithType: TFGraph.AddSparseToTensorsMap(TFOutput, TFOutput, TFOutput, String, String, String)
  fullName: TFGraph.AddSparseToTensorsMap(TFOutput, TFOutput, TFOutput, String, String, String)
- uid: TensorFlow.TFGraph.AdjustContrast(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AdjustContrast(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.AdjustContrast(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.AdjustContrast(TFOutput, TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.AdjustContrastv2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AdjustContrastv2(TFOutput, TFOutput, String)
  nameWithType: TFGraph.AdjustContrastv2(TFOutput, TFOutput, String)
  fullName: TFGraph.AdjustContrastv2(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.AdjustHue(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AdjustHue(TFOutput, TFOutput, String)
  nameWithType: TFGraph.AdjustHue(TFOutput, TFOutput, String)
  fullName: TFGraph.AdjustHue(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.AdjustSaturation(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AdjustSaturation(TFOutput, TFOutput, String)
  nameWithType: TFGraph.AdjustSaturation(TFOutput, TFOutput, String)
  fullName: TFGraph.AdjustSaturation(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.All(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: All(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.All(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.All(TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.AllCandidateSampler(TensorFlow.TFOutput,System.Int64,System.Int64,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AllCandidateSampler(TFOutput, Int64, Int64, Boolean, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.AllCandidateSampler(TFOutput, Int64, Int64, Boolean, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.AllCandidateSampler(TFOutput, Int64, Int64, Boolean, Nullable<Int64>, Nullable<Int64>, String)
- uid: System.ValueTuple`3
  name: ValueTuple
  nameWithType: ValueTuple
  fullName: System.ValueTuple
- uid: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
  parent: System
  isExternal: true
  name: ValueTuple<TFOutput,TFOutput,TFOutput>
  nameWithType: ValueTuple<TFOutput,TFOutput,TFOutput>
  fullName: System.ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput>
  spec.csharp:
  - uid: System.ValueTuple`3
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Nullable{System.Int64}
  parent: System
  isExternal: true
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TensorFlow.TFGraph.Any(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Any(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.Any(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.Any(TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.ApplyDelayCompensatedGradientDescent(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ApplyDelayCompensatedGradientDescent(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ApplyDelayCompensatedGradientDescent(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ApplyDelayCompensatedGradientDescent(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.ApproximateEqual(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Single},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ApproximateEqual(TFOutput, TFOutput, Nullable<Single>, String)
  nameWithType: TFGraph.ApproximateEqual(TFOutput, TFOutput, Nullable<Single>, String)
  fullName: TFGraph.ApproximateEqual(TFOutput, TFOutput, Nullable<Single>, String)
- uid: System.Single
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Nullable{System.Single}
  parent: System
  isExternal: true
  name: Nullable<Single>
  nameWithType: Nullable<Single>
  fullName: System.Nullable<System.Single>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TensorFlow.TFGraph.ArgMax(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ArgMax(TFOutput, TFOutput, String)
  nameWithType: TFGraph.ArgMax(TFOutput, TFOutput, String)
  fullName: TFGraph.ArgMax(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.ArgMin(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ArgMin(TFOutput, TFOutput, String)
  nameWithType: TFGraph.ArgMin(TFOutput, TFOutput, String)
  fullName: TFGraph.ArgMin(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.Asin(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Asin(TFOutput, String)
  nameWithType: TFGraph.Asin(TFOutput, String)
  fullName: TFGraph.Asin(TFOutput, String)
- uid: TensorFlow.TFGraph.Assert(TensorFlow.TFOutput,TensorFlow.TFOutput[],System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Assert(TFOutput, TFOutput[], Nullable<Int64>, String)
  nameWithType: TFGraph.Assert(TFOutput, TFOutput[], Nullable<Int64>, String)
  fullName: TFGraph.Assert(TFOutput, TFOutput[], Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.AssignAddVariableOp(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AssignAddVariableOp(TFOutput, TFOutput, String)
  nameWithType: TFGraph.AssignAddVariableOp(TFOutput, TFOutput, String)
  fullName: TFGraph.AssignAddVariableOp(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.AssignSubVariableOp(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AssignSubVariableOp(TFOutput, TFOutput, String)
  nameWithType: TFGraph.AssignSubVariableOp(TFOutput, TFOutput, String)
  fullName: TFGraph.AssignSubVariableOp(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.AssignVariableOp(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AssignVariableOp(TFOutput, TFOutput, String)
  nameWithType: TFGraph.AssignVariableOp(TFOutput, TFOutput, String)
  fullName: TFGraph.AssignVariableOp(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.AsString(TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AsString(TFOutput, Nullable<Int64>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Int64>, String, String)
  nameWithType: TFGraph.AsString(TFOutput, Nullable<Int64>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Int64>, String, String)
  fullName: TFGraph.AsString(TFOutput, Nullable<Int64>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Int64>, String, String)
- uid: TensorFlow.TFGraph.Atan(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Atan(TFOutput, String)
  nameWithType: TFGraph.Atan(TFOutput, String)
  fullName: TFGraph.Atan(TFOutput, String)
- uid: TensorFlow.TFGraph.Atan2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Atan2(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Atan2(TFOutput, TFOutput, String)
  fullName: TFGraph.Atan2(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.AudioSpectrogram(TensorFlow.TFOutput,System.Int64,System.Int64,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AudioSpectrogram(TFOutput, Int64, Int64, Nullable<Boolean>, String)
  nameWithType: TFGraph.AudioSpectrogram(TFOutput, Int64, Int64, Nullable<Boolean>, String)
  fullName: TFGraph.AudioSpectrogram(TFOutput, Int64, Int64, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.AudioSummary(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Single,System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AudioSummary(TFOutput, TFOutput, Single, Nullable<Int64>, String)
  nameWithType: TFGraph.AudioSummary(TFOutput, TFOutput, Single, Nullable<Int64>, String)
  fullName: TFGraph.AudioSummary(TFOutput, TFOutput, Single, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.AudioSummaryV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AudioSummaryV2(TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
  nameWithType: TFGraph.AudioSummaryV2(TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
  fullName: TFGraph.AudioSummaryV2(TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.AvgPool(TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AvgPool(TFOutput, Int64[], Int64[], String, String, String)
  nameWithType: TFGraph.AvgPool(TFOutput, Int64[], Int64[], String, String, String)
  fullName: TFGraph.AvgPool(TFOutput, Int64[], Int64[], String, String, String)
- uid: System.Int64[]
  parent: System
  isExternal: true
  name: Int64[]
  nameWithType: Int64[]
  fullName: System.Int64[]
  spec.csharp:
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: TensorFlow.TFGraph.AvgPool3D(TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AvgPool3D(TFOutput, Int64[], Int64[], String, String, String)
  nameWithType: TFGraph.AvgPool3D(TFOutput, Int64[], Int64[], String, String, String)
  fullName: TFGraph.AvgPool3D(TFOutput, Int64[], Int64[], String, String, String)
- uid: TensorFlow.TFGraph.AvgPool3DGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AvgPool3DGrad(TFOutput, TFOutput, Int64[], Int64[], String, String, String)
  nameWithType: TFGraph.AvgPool3DGrad(TFOutput, TFOutput, Int64[], Int64[], String, String, String)
  fullName: TFGraph.AvgPool3DGrad(TFOutput, TFOutput, Int64[], Int64[], String, String, String)
- uid: TensorFlow.TFGraph.AvgPoolGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AvgPoolGrad(TFOutput, TFOutput, Int64[], Int64[], String, String, String)
  nameWithType: TFGraph.AvgPoolGrad(TFOutput, TFOutput, Int64[], Int64[], String, String, String)
  fullName: TFGraph.AvgPoolGrad(TFOutput, TFOutput, Int64[], Int64[], String, String, String)
- uid: TensorFlow.TFGraph.BatchDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: BatchDataset(TFOutput, TFOutput, TFDataType[], TFShape[], String)
  nameWithType: TFGraph.BatchDataset(TFOutput, TFOutput, TFDataType[], TFShape[], String)
  fullName: TFGraph.BatchDataset(TFOutput, TFOutput, TFDataType[], TFShape[], String)
- uid: TensorFlow.TFDataType
  name: TFDataType
  nameWithType: TFDataType
  fullName: TensorFlow.TFDataType
- uid: TensorFlow.TFDataType[]
  parent: TensorFlow
  isExternal: false
  name: TFDataType[]
  nameWithType: TFDataType[]
  fullName: TensorFlow.TFDataType[]
  spec.csharp:
  - uid: TensorFlow.TFDataType
    name: TFDataType
    nameWithType: TFDataType
    fullName: TensorFlow.TFDataType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: TensorFlow.TFShape
  name: TFShape
  nameWithType: TFShape
  fullName: TensorFlow.TFShape
- uid: TensorFlow.TFShape[]
  parent: TensorFlow
  isExternal: false
  name: TFShape[]
  nameWithType: TFShape[]
  fullName: TensorFlow.TFShape[]
  spec.csharp:
  - uid: TensorFlow.TFShape
    name: TFShape
    nameWithType: TFShape
    fullName: TensorFlow.TFShape
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: TensorFlow.TFGraph.BatchMatMul(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: BatchMatMul(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  nameWithType: TFGraph.BatchMatMul(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  fullName: TFGraph.BatchMatMul(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.BatchNormWithGlobalNormalization(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Single,System.Boolean,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: BatchNormWithGlobalNormalization(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Single, Boolean, String)
  nameWithType: TFGraph.BatchNormWithGlobalNormalization(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Single, Boolean, String)
  fullName: TFGraph.BatchNormWithGlobalNormalization(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Single, Boolean, String)
- uid: TensorFlow.TFGraph.BatchNormWithGlobalNormalizationGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Single,System.Boolean,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: BatchNormWithGlobalNormalizationGrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Single, Boolean, String)
  nameWithType: TFGraph.BatchNormWithGlobalNormalizationGrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Single, Boolean, String)
  fullName: TFGraph.BatchNormWithGlobalNormalizationGrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Single, Boolean, String)
- uid: System.ValueTuple`5
  name: ValueTuple
  nameWithType: ValueTuple
  fullName: System.ValueTuple
- uid: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
  parent: System
  isExternal: true
  name: ValueTuple<TFOutput,TFOutput,TFOutput,TFOutput,TFOutput>
  nameWithType: ValueTuple<TFOutput,TFOutput,TFOutput,TFOutput,TFOutput>
  fullName: System.ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput>
  spec.csharp:
  - uid: System.ValueTuple`5
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TensorFlow.TFGraph.BatchToSpace(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: BatchToSpace(TFOutput, TFOutput, Int64, String)
  nameWithType: TFGraph.BatchToSpace(TFOutput, TFOutput, Int64, String)
  fullName: TFGraph.BatchToSpace(TFOutput, TFOutput, Int64, String)
- uid: TensorFlow.TFGraph.BatchToSpaceND(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: BatchToSpaceND(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.BatchToSpaceND(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.BatchToSpaceND(TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.Betainc(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Betainc(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.Betainc(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.Betainc(TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.BiasAdd(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: BiasAdd(TFOutput, TFOutput, String, String)
  nameWithType: TFGraph.BiasAdd(TFOutput, TFOutput, String, String)
  fullName: TFGraph.BiasAdd(TFOutput, TFOutput, String, String)
- uid: TensorFlow.TFGraph.BiasAddGrad(TensorFlow.TFOutput,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: BiasAddGrad(TFOutput, String, String)
  nameWithType: TFGraph.BiasAddGrad(TFOutput, String, String)
  fullName: TFGraph.BiasAddGrad(TFOutput, String, String)
- uid: TensorFlow.TFGraph.BiasAddV1(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: BiasAddV1(TFOutput, TFOutput, String)
  nameWithType: TFGraph.BiasAddV1(TFOutput, TFOutput, String)
  fullName: TFGraph.BiasAddV1(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.Bincount(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Bincount(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.Bincount(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.Bincount(TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.Bitcast(TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Bitcast(TFOutput, TFDataType, String)
  nameWithType: TFGraph.Bitcast(TFOutput, TFDataType, String)
  fullName: TFGraph.Bitcast(TFOutput, TFDataType, String)
- uid: TensorFlow.TFGraph.BitwiseAnd(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: BitwiseAnd(TFOutput, TFOutput, String)
  nameWithType: TFGraph.BitwiseAnd(TFOutput, TFOutput, String)
  fullName: TFGraph.BitwiseAnd(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.BitwiseOr(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: BitwiseOr(TFOutput, TFOutput, String)
  nameWithType: TFGraph.BitwiseOr(TFOutput, TFOutput, String)
  fullName: TFGraph.BitwiseOr(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.BitwiseXor(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: BitwiseXor(TFOutput, TFOutput, String)
  nameWithType: TFGraph.BitwiseXor(TFOutput, TFOutput, String)
  fullName: TFGraph.BitwiseXor(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.BroadcastArgs(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: BroadcastArgs(TFOutput, TFOutput, String)
  nameWithType: TFGraph.BroadcastArgs(TFOutput, TFOutput, String)
  fullName: TFGraph.BroadcastArgs(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.BroadcastGradientArgs(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: BroadcastGradientArgs(TFOutput, TFOutput, String)
  nameWithType: TFGraph.BroadcastGradientArgs(TFOutput, TFOutput, String)
  fullName: TFGraph.BroadcastGradientArgs(TFOutput, TFOutput, String)
- uid: System.ValueTuple`2
  name: ValueTuple
  nameWithType: ValueTuple
  fullName: System.ValueTuple
- uid: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput}
  parent: System
  isExternal: true
  name: ValueTuple<TFOutput,TFOutput>
  nameWithType: ValueTuple<TFOutput,TFOutput>
  fullName: System.ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput>
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TensorFlow.TFGraph.Bucketize(TensorFlow.TFOutput,System.Single[],System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Bucketize(TFOutput, Single[], String)
  nameWithType: TFGraph.Bucketize(TFOutput, Single[], String)
  fullName: TFGraph.Bucketize(TFOutput, Single[], String)
- uid: System.Single[]
  parent: System
  isExternal: true
  name: Single[]
  nameWithType: Single[]
  fullName: System.Single[]
  spec.csharp:
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: TensorFlow.TFGraph.CacheDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: CacheDataset(TFOutput, TFOutput, TFDataType[], TFShape[], String)
  nameWithType: TFGraph.CacheDataset(TFOutput, TFOutput, TFDataType[], TFShape[], String)
  fullName: TFGraph.CacheDataset(TFOutput, TFOutput, TFDataType[], TFShape[], String)
- uid: TensorFlow.TFGraph.Cast(TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Cast(TFOutput, TFDataType, String)
  nameWithType: TFGraph.Cast(TFOutput, TFDataType, String)
  fullName: TFGraph.Cast(TFOutput, TFDataType, String)
- uid: TensorFlow.TFGraph.Ceil(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Ceil(TFOutput, String)
  nameWithType: TFGraph.Ceil(TFOutput, String)
  fullName: TFGraph.Ceil(TFOutput, String)
- uid: TensorFlow.TFGraph.CheckNumerics(TensorFlow.TFOutput,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: CheckNumerics(TFOutput, String, String)
  nameWithType: TFGraph.CheckNumerics(TFOutput, String, String)
  fullName: TFGraph.CheckNumerics(TFOutput, String, String)
- uid: TensorFlow.TFGraph.Cholesky(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Cholesky(TFOutput, String)
  nameWithType: TFGraph.Cholesky(TFOutput, String)
  fullName: TFGraph.Cholesky(TFOutput, String)
- uid: TensorFlow.TFGraph.CholeskyGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: CholeskyGrad(TFOutput, TFOutput, String)
  nameWithType: TFGraph.CholeskyGrad(TFOutput, TFOutput, String)
  fullName: TFGraph.CholeskyGrad(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.Complex(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Complex(TFOutput, TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.Complex(TFOutput, TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.Complex(TFOutput, TFOutput, Nullable<TFDataType>, String)
- uid: System.Nullable{TensorFlow.TFDataType}
  parent: System
  isExternal: true
  name: Nullable<TFDataType>
  nameWithType: Nullable<TFDataType>
  fullName: System.Nullable<TensorFlow.TFDataType>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
  - name: <
    nameWithType: <
    fullName: <
  - uid: TensorFlow.TFDataType
    name: TFDataType
    nameWithType: TFDataType
    fullName: TensorFlow.TFDataType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TensorFlow.TFGraph.ComplexAbs(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ComplexAbs(TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.ComplexAbs(TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.ComplexAbs(TFOutput, Nullable<TFDataType>, String)
- uid: TensorFlow.TFGraph.ComputeAccidentalHits(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ComputeAccidentalHits(TFOutput, TFOutput, Int64, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.ComputeAccidentalHits(TFOutput, TFOutput, Int64, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.ComputeAccidentalHits(TFOutput, TFOutput, Int64, Nullable<Int64>, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.Concat(TensorFlow.TFOutput,TensorFlow.TFOutput[],System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Concat(TFOutput, TFOutput[], String)
  nameWithType: TFGraph.Concat(TFOutput, TFOutput[], String)
  fullName: TFGraph.Concat(TFOutput, TFOutput[], String)
- uid: TensorFlow.TFGraph.ConcatOffset(TensorFlow.TFOutput,TensorFlow.TFOutput[],System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ConcatOffset(TFOutput, TFOutput[], String)
  nameWithType: TFGraph.ConcatOffset(TFOutput, TFOutput[], String)
  fullName: TFGraph.ConcatOffset(TFOutput, TFOutput[], String)
- uid: TensorFlow.TFGraph.ConcatV2(TensorFlow.TFOutput[],TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ConcatV2(TFOutput[], TFOutput, String)
  nameWithType: TFGraph.ConcatV2(TFOutput[], TFOutput, String)
  fullName: TFGraph.ConcatV2(TFOutput[], TFOutput, String)
- uid: TensorFlow.TFGraph.Conj(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Conj(TFOutput, String)
  nameWithType: TFGraph.Conj(TFOutput, String)
  fullName: TFGraph.Conj(TFOutput, String)
- uid: TensorFlow.TFGraph.Const(TensorFlow.TFTensor,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Const(TFTensor, String)
  nameWithType: TFGraph.Const(TFTensor, String)
  fullName: TFGraph.Const(TFTensor, String)
- uid: TensorFlow.TFTensor
  parent: TensorFlow
  isExternal: false
  name: TFTensor
  nameWithType: TFTensor
  fullName: TensorFlow.TFTensor
- uid: TensorFlow.TFGraph.Const(TensorFlow.TFTensor,TensorFlow.TFDataType,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Const(TFTensor, TFDataType, String)
  nameWithType: TFGraph.Const(TFTensor, TFDataType, String)
  fullName: TFGraph.Const(TFTensor, TFDataType, String)
- uid: TensorFlow.TFGraph.ControlTrigger(System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ControlTrigger(String)
  nameWithType: TFGraph.ControlTrigger(String)
  fullName: TFGraph.ControlTrigger(String)
- uid: TensorFlow.TFGraph.Conv2D(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.Nullable{System.Boolean},System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Conv2D(TFOutput, TFOutput, Int64[], String, Nullable<Boolean>, String, String)
  nameWithType: TFGraph.Conv2D(TFOutput, TFOutput, Int64[], String, Nullable<Boolean>, String, String)
  fullName: TFGraph.Conv2D(TFOutput, TFOutput, Int64[], String, Nullable<Boolean>, String, String)
- uid: TensorFlow.TFGraph.Conv2DBackpropFilter(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.Nullable{System.Boolean},System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Conv2DBackpropFilter(TFOutput, TFOutput, TFOutput, Int64[], String, Nullable<Boolean>, String, String)
  nameWithType: TFGraph.Conv2DBackpropFilter(TFOutput, TFOutput, TFOutput, Int64[], String, Nullable<Boolean>, String, String)
  fullName: TFGraph.Conv2DBackpropFilter(TFOutput, TFOutput, TFOutput, Int64[], String, Nullable<Boolean>, String, String)
- uid: TensorFlow.TFGraph.Conv2DBackpropInput(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.Nullable{System.Boolean},System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Conv2DBackpropInput(TFOutput, TFOutput, TFOutput, Int64[], String, Nullable<Boolean>, String, String)
  nameWithType: TFGraph.Conv2DBackpropInput(TFOutput, TFOutput, TFOutput, Int64[], String, Nullable<Boolean>, String, String)
  fullName: TFGraph.Conv2DBackpropInput(TFOutput, TFOutput, TFOutput, Int64[], String, Nullable<Boolean>, String, String)
- uid: TensorFlow.TFGraph.Conv3D(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Conv3D(TFOutput, TFOutput, Int64[], String, String, String)
  nameWithType: TFGraph.Conv3D(TFOutput, TFOutput, Int64[], String, String, String)
  fullName: TFGraph.Conv3D(TFOutput, TFOutput, Int64[], String, String, String)
- uid: TensorFlow.TFGraph.Conv3DBackpropFilter(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Conv3DBackpropFilter(TFOutput, TFOutput, TFOutput, Int64[], String, String)
  nameWithType: TFGraph.Conv3DBackpropFilter(TFOutput, TFOutput, TFOutput, Int64[], String, String)
  fullName: TFGraph.Conv3DBackpropFilter(TFOutput, TFOutput, TFOutput, Int64[], String, String)
- uid: TensorFlow.TFGraph.Conv3DBackpropFilterV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Conv3DBackpropFilterV2(TFOutput, TFOutput, TFOutput, Int64[], String, String, String)
  nameWithType: TFGraph.Conv3DBackpropFilterV2(TFOutput, TFOutput, TFOutput, Int64[], String, String, String)
  fullName: TFGraph.Conv3DBackpropFilterV2(TFOutput, TFOutput, TFOutput, Int64[], String, String, String)
- uid: TensorFlow.TFGraph.Conv3DBackpropInput(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Conv3DBackpropInput(TFOutput, TFOutput, TFOutput, Int64[], String, String)
  nameWithType: TFGraph.Conv3DBackpropInput(TFOutput, TFOutput, TFOutput, Int64[], String, String)
  fullName: TFGraph.Conv3DBackpropInput(TFOutput, TFOutput, TFOutput, Int64[], String, String)
- uid: TensorFlow.TFGraph.Conv3DBackpropInputV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Conv3DBackpropInputV2(TFOutput, TFOutput, TFOutput, Int64[], String, String, String)
  nameWithType: TFGraph.Conv3DBackpropInputV2(TFOutput, TFOutput, TFOutput, Int64[], String, String, String)
  fullName: TFGraph.Conv3DBackpropInputV2(TFOutput, TFOutput, TFOutput, Int64[], String, String, String)
- uid: TensorFlow.TFGraph.Cos(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Cos(TFOutput, String)
  nameWithType: TFGraph.Cos(TFOutput, String)
  fullName: TFGraph.Cos(TFOutput, String)
- uid: TensorFlow.TFGraph.Cosh(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Cosh(TFOutput, String)
  nameWithType: TFGraph.Cosh(TFOutput, String)
  fullName: TFGraph.Cosh(TFOutput, String)
- uid: TensorFlow.TFGraph.CropAndResize(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.Nullable{System.Single},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: CropAndResize(TFOutput, TFOutput, TFOutput, TFOutput, String, Nullable<Single>, String)
  nameWithType: TFGraph.CropAndResize(TFOutput, TFOutput, TFOutput, TFOutput, String, Nullable<Single>, String)
  fullName: TFGraph.CropAndResize(TFOutput, TFOutput, TFOutput, TFOutput, String, Nullable<Single>, String)
- uid: TensorFlow.TFGraph.CropAndResizeGradBoxes(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: CropAndResizeGradBoxes(TFOutput, TFOutput, TFOutput, TFOutput, String, String)
  nameWithType: TFGraph.CropAndResizeGradBoxes(TFOutput, TFOutput, TFOutput, TFOutput, String, String)
  fullName: TFGraph.CropAndResizeGradBoxes(TFOutput, TFOutput, TFOutput, TFOutput, String, String)
- uid: TensorFlow.TFGraph.CropAndResizeGradImage(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: CropAndResizeGradImage(TFOutput, TFOutput, TFOutput, TFOutput, TFDataType, String, String)
  nameWithType: TFGraph.CropAndResizeGradImage(TFOutput, TFOutput, TFOutput, TFOutput, TFDataType, String, String)
  fullName: TFGraph.CropAndResizeGradImage(TFOutput, TFOutput, TFOutput, TFOutput, TFDataType, String, String)
- uid: TensorFlow.TFGraph.Cross(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Cross(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Cross(TFOutput, TFOutput, String)
  fullName: TFGraph.Cross(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.CTCBeamSearchDecoder(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.Int64,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: CTCBeamSearchDecoder(TFOutput, TFOutput, Int64, Int64, Nullable<Boolean>, String)
  nameWithType: TFGraph.CTCBeamSearchDecoder(TFOutput, TFOutput, Int64, Int64, Nullable<Boolean>, String)
  fullName: TFGraph.CTCBeamSearchDecoder(TFOutput, TFOutput, Int64, Int64, Nullable<Boolean>, String)
- uid: System.ValueTuple`4
  name: ValueTuple
  nameWithType: ValueTuple
  fullName: System.ValueTuple
- uid: System.ValueTuple{TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput}
  parent: System
  isExternal: true
  name: ValueTuple<TFOutput[],TFOutput[],TFOutput[],TFOutput>
  nameWithType: ValueTuple<TFOutput[],TFOutput[],TFOutput[],TFOutput>
  fullName: System.ValueTuple<TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput>
  spec.csharp:
  - uid: System.ValueTuple`4
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TensorFlow.TFGraph.CTCGreedyDecoder(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: CTCGreedyDecoder(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.CTCGreedyDecoder(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.CTCGreedyDecoder(TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
  parent: System
  isExternal: true
  name: ValueTuple<TFOutput,TFOutput,TFOutput,TFOutput>
  nameWithType: ValueTuple<TFOutput,TFOutput,TFOutput,TFOutput>
  fullName: System.ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput>
  spec.csharp:
  - uid: System.ValueTuple`4
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TensorFlow.TFGraph.CTCLoss(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: CTCLoss(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, String)
  nameWithType: TFGraph.CTCLoss(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, String)
  fullName: TFGraph.CTCLoss(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.Cumprod(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Cumprod(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  nameWithType: TFGraph.Cumprod(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  fullName: TFGraph.Cumprod(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.Cumsum(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Cumsum(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  nameWithType: TFGraph.Cumsum(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  fullName: TFGraph.Cumsum(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.CurrentNameScope
  parent: TensorFlow.TFGraph
  isExternal: false
  name: CurrentNameScope
  nameWithType: TFGraph.CurrentNameScope
  fullName: TFGraph.CurrentNameScope
- uid: TensorFlow.TFGraph.DecodeBase64(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DecodeBase64(TFOutput, String)
  nameWithType: TFGraph.DecodeBase64(TFOutput, String)
  fullName: TFGraph.DecodeBase64(TFOutput, String)
- uid: TensorFlow.TFGraph.DecodeBmp(TensorFlow.TFOutput,System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DecodeBmp(TFOutput, Nullable<Int64>, String)
  nameWithType: TFGraph.DecodeBmp(TFOutput, Nullable<Int64>, String)
  fullName: TFGraph.DecodeBmp(TFOutput, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.DecodeCSV(TensorFlow.TFOutput,TensorFlow.TFOutput[],System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DecodeCSV(TFOutput, TFOutput[], String, String)
  nameWithType: TFGraph.DecodeCSV(TFOutput, TFOutput[], String, String)
  fullName: TFGraph.DecodeCSV(TFOutput, TFOutput[], String, String)
- uid: TensorFlow.TFGraph.DecodeCSV(TensorFlow.TFOutput,TensorFlow.TFOutput[],System.String,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DecodeCSV(TFOutput, TFOutput[], String, Nullable<Boolean>, String)
  nameWithType: TFGraph.DecodeCSV(TFOutput, TFOutput[], String, Nullable<Boolean>, String)
  fullName: TFGraph.DecodeCSV(TFOutput, TFOutput[], String, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.DecodeGif(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DecodeGif(TFOutput, String)
  nameWithType: TFGraph.DecodeGif(TFOutput, String)
  fullName: TFGraph.DecodeGif(TFOutput, String)
- uid: TensorFlow.TFGraph.DecodeJpeg(TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Single},System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DecodeJpeg(TFOutput, Nullable<Int64>, Nullable<Int64>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Single>, String, String)
  nameWithType: TFGraph.DecodeJpeg(TFOutput, Nullable<Int64>, Nullable<Int64>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Single>, String, String)
  fullName: TFGraph.DecodeJpeg(TFOutput, Nullable<Int64>, Nullable<Int64>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Single>, String, String)
- uid: TensorFlow.TFGraph.DecodeJSONExample(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DecodeJSONExample(TFOutput, String)
  nameWithType: TFGraph.DecodeJSONExample(TFOutput, String)
  fullName: TFGraph.DecodeJSONExample(TFOutput, String)
- uid: TensorFlow.TFGraph.DecodePng(TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DecodePng(TFOutput, Nullable<Int64>, Nullable<TFDataType>, String)
  nameWithType: TFGraph.DecodePng(TFOutput, Nullable<Int64>, Nullable<TFDataType>, String)
  fullName: TFGraph.DecodePng(TFOutput, Nullable<Int64>, Nullable<TFDataType>, String)
- uid: TensorFlow.TFGraph.DecodeRaw(TensorFlow.TFOutput,TensorFlow.TFDataType,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DecodeRaw(TFOutput, TFDataType, Nullable<Boolean>, String)
  nameWithType: TFGraph.DecodeRaw(TFOutput, TFDataType, Nullable<Boolean>, String)
  fullName: TFGraph.DecodeRaw(TFOutput, TFDataType, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.DecodeWav(TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DecodeWav(TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.DecodeWav(TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.DecodeWav(TFOutput, Nullable<Int64>, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.DeleteSessionTensor(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DeleteSessionTensor(TFOutput, String)
  nameWithType: TFGraph.DeleteSessionTensor(TFOutput, String)
  fullName: TFGraph.DeleteSessionTensor(TFOutput, String)
- uid: TensorFlow.TFGraph.DenseToDenseSetOperation(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DenseToDenseSetOperation(TFOutput, TFOutput, String, Nullable<Boolean>, String)
  nameWithType: TFGraph.DenseToDenseSetOperation(TFOutput, TFOutput, String, Nullable<Boolean>, String)
  fullName: TFGraph.DenseToDenseSetOperation(TFOutput, TFOutput, String, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.DenseToSparseBatchDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DenseToSparseBatchDataset(TFOutput, TFOutput, TFOutput, TFDataType[], TFShape[], String)
  nameWithType: TFGraph.DenseToSparseBatchDataset(TFOutput, TFOutput, TFOutput, TFDataType[], TFShape[], String)
  fullName: TFGraph.DenseToSparseBatchDataset(TFOutput, TFOutput, TFOutput, TFDataType[], TFShape[], String)
- uid: TensorFlow.TFGraph.DenseToSparseSetOperation(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DenseToSparseSetOperation(TFOutput, TFOutput, TFOutput, TFOutput, String, Nullable<Boolean>, String)
  nameWithType: TFGraph.DenseToSparseSetOperation(TFOutput, TFOutput, TFOutput, TFOutput, String, Nullable<Boolean>, String)
  fullName: TFGraph.DenseToSparseSetOperation(TFOutput, TFOutput, TFOutput, TFOutput, String, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.DepthToSpace(TensorFlow.TFOutput,System.Int64,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DepthToSpace(TFOutput, Int64, String)
  nameWithType: TFGraph.DepthToSpace(TFOutput, Int64, String)
  fullName: TFGraph.DepthToSpace(TFOutput, Int64, String)
- uid: TensorFlow.TFGraph.DepthwiseConv2dNative(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DepthwiseConv2dNative(TFOutput, TFOutput, Int64[], String, String, String)
  nameWithType: TFGraph.DepthwiseConv2dNative(TFOutput, TFOutput, Int64[], String, String, String)
  fullName: TFGraph.DepthwiseConv2dNative(TFOutput, TFOutput, Int64[], String, String, String)
- uid: TensorFlow.TFGraph.DepthwiseConv2dNativeBackpropFilter(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DepthwiseConv2dNativeBackpropFilter(TFOutput, TFOutput, TFOutput, Int64[], String, String, String)
  nameWithType: TFGraph.DepthwiseConv2dNativeBackpropFilter(TFOutput, TFOutput, TFOutput, Int64[], String, String, String)
  fullName: TFGraph.DepthwiseConv2dNativeBackpropFilter(TFOutput, TFOutput, TFOutput, Int64[], String, String, String)
- uid: TensorFlow.TFGraph.DepthwiseConv2dNativeBackpropInput(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DepthwiseConv2dNativeBackpropInput(TFOutput, TFOutput, TFOutput, Int64[], String, String, String)
  nameWithType: TFGraph.DepthwiseConv2dNativeBackpropInput(TFOutput, TFOutput, TFOutput, Int64[], String, String, String)
  fullName: TFGraph.DepthwiseConv2dNativeBackpropInput(TFOutput, TFOutput, TFOutput, Int64[], String, String, String)
- uid: TensorFlow.TFGraph.Dequantize(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Dequantize(TFOutput, TFOutput, TFOutput, String, String)
  nameWithType: TFGraph.Dequantize(TFOutput, TFOutput, TFOutput, String, String)
  fullName: TFGraph.Dequantize(TFOutput, TFOutput, TFOutput, String, String)
- uid: TensorFlow.TFGraph.DeserializeManySparse(TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DeserializeManySparse(TFOutput, TFDataType, String)
  nameWithType: TFGraph.DeserializeManySparse(TFOutput, TFDataType, String)
  fullName: TFGraph.DeserializeManySparse(TFOutput, TFDataType, String)
- uid: TensorFlow.TFGraph.DestroyResourceOp(TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DestroyResourceOp(TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.DestroyResourceOp(TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.DestroyResourceOp(TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.Diag(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Diag(TFOutput, String)
  nameWithType: TFGraph.Diag(TFOutput, String)
  fullName: TFGraph.Diag(TFOutput, String)
- uid: TensorFlow.TFGraph.DiagPart(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DiagPart(TFOutput, String)
  nameWithType: TFGraph.DiagPart(TFOutput, String)
  fullName: TFGraph.DiagPart(TFOutput, String)
- uid: TensorFlow.TFGraph.Digamma(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Digamma(TFOutput, String)
  nameWithType: TFGraph.Digamma(TFOutput, String)
  fullName: TFGraph.Digamma(TFOutput, String)
- uid: TensorFlow.TFGraph.Dilation2D(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Dilation2D(TFOutput, TFOutput, Int64[], Int64[], String, String)
  nameWithType: TFGraph.Dilation2D(TFOutput, TFOutput, Int64[], Int64[], String, String)
  fullName: TFGraph.Dilation2D(TFOutput, TFOutput, Int64[], Int64[], String, String)
- uid: TensorFlow.TFGraph.Dilation2DBackpropFilter(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Dilation2DBackpropFilter(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
  nameWithType: TFGraph.Dilation2DBackpropFilter(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
  fullName: TFGraph.Dilation2DBackpropFilter(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
- uid: TensorFlow.TFGraph.Dilation2DBackpropInput(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Dilation2DBackpropInput(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
  nameWithType: TFGraph.Dilation2DBackpropInput(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
  fullName: TFGraph.Dilation2DBackpropInput(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
- uid: TensorFlow.TFGraph.Div(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Div(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Div(TFOutput, TFOutput, String)
  fullName: TFGraph.Div(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.DrawBoundingBoxes(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DrawBoundingBoxes(TFOutput, TFOutput, String)
  nameWithType: TFGraph.DrawBoundingBoxes(TFOutput, TFOutput, String)
  fullName: TFGraph.DrawBoundingBoxes(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.Dropout(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFShape,System.Nullable{System.Int32},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Dropout(TFOutput, TFOutput, TFShape, Nullable<Int32>, String)
  nameWithType: TFGraph.Dropout(TFOutput, TFOutput, TFShape, Nullable<Int32>, String)
  fullName: TFGraph.Dropout(TFOutput, TFOutput, TFShape, Nullable<Int32>, String)
- uid: System.Int32
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Nullable{System.Int32}
  parent: System
  isExternal: true
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TensorFlow.TFGraph.Dropout(TensorFlow.TFOutput,System.Double,TensorFlow.TFShape,System.Nullable{System.Int32},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Dropout(TFOutput, Double, TFShape, Nullable<Int32>, String)
  nameWithType: TFGraph.Dropout(TFOutput, Double, TFShape, Nullable<Int32>, String)
  fullName: TFGraph.Dropout(TFOutput, Double, TFShape, Nullable<Int32>, String)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: TensorFlow.TFGraph.DynamicPartition(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DynamicPartition(TFOutput, TFOutput, Int64, String)
  nameWithType: TFGraph.DynamicPartition(TFOutput, TFOutput, Int64, String)
  fullName: TFGraph.DynamicPartition(TFOutput, TFOutput, Int64, String)
- uid: TensorFlow.TFGraph.DynamicStitch(TensorFlow.TFOutput[],TensorFlow.TFOutput[],System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DynamicStitch(TFOutput[], TFOutput[], String)
  nameWithType: TFGraph.DynamicStitch(TFOutput[], TFOutput[], String)
  fullName: TFGraph.DynamicStitch(TFOutput[], TFOutput[], String)
- uid: TensorFlow.TFGraph.EditDistance(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: EditDistance(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.EditDistance(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.EditDistance(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.Elu(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Elu(TFOutput, String)
  nameWithType: TFGraph.Elu(TFOutput, String)
  fullName: TFGraph.Elu(TFOutput, String)
- uid: TensorFlow.TFGraph.EluGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: EluGrad(TFOutput, TFOutput, String)
  nameWithType: TFGraph.EluGrad(TFOutput, TFOutput, String)
  fullName: TFGraph.EluGrad(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.EncodeBase64(TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: EncodeBase64(TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.EncodeBase64(TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.EncodeBase64(TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.EncodeJpeg(TensorFlow.TFOutput,System.String,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: EncodeJpeg(TFOutput, String, Nullable<Int64>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, String, Nullable<Int64>, Nullable<Int64>, String, String)
  nameWithType: TFGraph.EncodeJpeg(TFOutput, String, Nullable<Int64>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, String, Nullable<Int64>, Nullable<Int64>, String, String)
  fullName: TFGraph.EncodeJpeg(TFOutput, String, Nullable<Int64>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, String, Nullable<Int64>, Nullable<Int64>, String, String)
- uid: TensorFlow.TFGraph.EncodePng(TensorFlow.TFOutput,System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: EncodePng(TFOutput, Nullable<Int64>, String)
  nameWithType: TFGraph.EncodePng(TFOutput, Nullable<Int64>, String)
  fullName: TFGraph.EncodePng(TFOutput, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.EncodeWav(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: EncodeWav(TFOutput, TFOutput, String)
  nameWithType: TFGraph.EncodeWav(TFOutput, TFOutput, String)
  fullName: TFGraph.EncodeWav(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.Enter(TensorFlow.TFOutput,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Enter(TFOutput, String, Nullable<Boolean>, Nullable<Int64>, String)
  nameWithType: TFGraph.Enter(TFOutput, String, Nullable<Boolean>, Nullable<Int64>, String)
  fullName: TFGraph.Enter(TFOutput, String, Nullable<Boolean>, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.Equal(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Equal(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Equal(TFOutput, TFOutput, String)
  fullName: TFGraph.Equal(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.Erf(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Erf(TFOutput, String)
  nameWithType: TFGraph.Erf(TFOutput, String)
  fullName: TFGraph.Erf(TFOutput, String)
- uid: TensorFlow.TFGraph.Erfc(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Erfc(TFOutput, String)
  nameWithType: TFGraph.Erfc(TFOutput, String)
  fullName: TFGraph.Erfc(TFOutput, String)
- uid: TensorFlow.TFGraph.Exit(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Exit(TFOutput, String)
  nameWithType: TFGraph.Exit(TFOutput, String)
  fullName: TFGraph.Exit(TFOutput, String)
- uid: TensorFlow.TFGraph.Exp(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Exp(TFOutput, String)
  nameWithType: TFGraph.Exp(TFOutput, String)
  fullName: TFGraph.Exp(TFOutput, String)
- uid: TensorFlow.TFGraph.ExpandDims(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ExpandDims(TFOutput, TFOutput, String)
  nameWithType: TFGraph.ExpandDims(TFOutput, TFOutput, String)
  fullName: TFGraph.ExpandDims(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.Expm1(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Expm1(TFOutput, String)
  nameWithType: TFGraph.Expm1(TFOutput, String)
  fullName: TFGraph.Expm1(TFOutput, String)
- uid: TensorFlow.TFGraph.ExtractGlimpse(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ExtractGlimpse(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, String)
  nameWithType: TFGraph.ExtractGlimpse(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, String)
  fullName: TFGraph.ExtractGlimpse(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.ExtractImagePatches(TensorFlow.TFOutput,System.Int64[],System.Int64[],System.Int64[],System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ExtractImagePatches(TFOutput, Int64[], Int64[], Int64[], String, String)
  nameWithType: TFGraph.ExtractImagePatches(TFOutput, Int64[], Int64[], Int64[], String, String)
  fullName: TFGraph.ExtractImagePatches(TFOutput, Int64[], Int64[], Int64[], String, String)
- uid: TensorFlow.TFGraph.Fact(System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Fact(String)
  nameWithType: TFGraph.Fact(String)
  fullName: TFGraph.Fact(String)
- uid: TensorFlow.TFGraph.FakeQuantWithMinMaxArgs(TensorFlow.TFOutput,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FakeQuantWithMinMaxArgs(TFOutput, Nullable<Single>, Nullable<Single>, Nullable<Int64>, String)
  nameWithType: TFGraph.FakeQuantWithMinMaxArgs(TFOutput, Nullable<Single>, Nullable<Single>, Nullable<Int64>, String)
  fullName: TFGraph.FakeQuantWithMinMaxArgs(TFOutput, Nullable<Single>, Nullable<Single>, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.FakeQuantWithMinMaxArgs(TensorFlow.TFOutput,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FakeQuantWithMinMaxArgs(TFOutput, Nullable<Single>, Nullable<Single>, Nullable<Int64>, Nullable<Boolean>, String)
  nameWithType: TFGraph.FakeQuantWithMinMaxArgs(TFOutput, Nullable<Single>, Nullable<Single>, Nullable<Int64>, Nullable<Boolean>, String)
  fullName: TFGraph.FakeQuantWithMinMaxArgs(TFOutput, Nullable<Single>, Nullable<Single>, Nullable<Int64>, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.FakeQuantWithMinMaxArgsGradient(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FakeQuantWithMinMaxArgsGradient(TFOutput, TFOutput, Nullable<Single>, Nullable<Single>, Nullable<Int64>, String)
  nameWithType: TFGraph.FakeQuantWithMinMaxArgsGradient(TFOutput, TFOutput, Nullable<Single>, Nullable<Single>, Nullable<Int64>, String)
  fullName: TFGraph.FakeQuantWithMinMaxArgsGradient(TFOutput, TFOutput, Nullable<Single>, Nullable<Single>, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.FakeQuantWithMinMaxArgsGradient(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FakeQuantWithMinMaxArgsGradient(TFOutput, TFOutput, Nullable<Single>, Nullable<Single>, Nullable<Int64>, Nullable<Boolean>, String)
  nameWithType: TFGraph.FakeQuantWithMinMaxArgsGradient(TFOutput, TFOutput, Nullable<Single>, Nullable<Single>, Nullable<Int64>, Nullable<Boolean>, String)
  fullName: TFGraph.FakeQuantWithMinMaxArgsGradient(TFOutput, TFOutput, Nullable<Single>, Nullable<Single>, Nullable<Int64>, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.FakeQuantWithMinMaxVars(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FakeQuantWithMinMaxVars(TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
  nameWithType: TFGraph.FakeQuantWithMinMaxVars(TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
  fullName: TFGraph.FakeQuantWithMinMaxVars(TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.FakeQuantWithMinMaxVars(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FakeQuantWithMinMaxVars(TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Boolean>, String)
  nameWithType: TFGraph.FakeQuantWithMinMaxVars(TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Boolean>, String)
  fullName: TFGraph.FakeQuantWithMinMaxVars(TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.FakeQuantWithMinMaxVarsGradient(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FakeQuantWithMinMaxVarsGradient(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Boolean>, String)
  nameWithType: TFGraph.FakeQuantWithMinMaxVarsGradient(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Boolean>, String)
  fullName: TFGraph.FakeQuantWithMinMaxVarsGradient(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.FakeQuantWithMinMaxVarsGradient(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FakeQuantWithMinMaxVarsGradient(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
  nameWithType: TFGraph.FakeQuantWithMinMaxVarsGradient(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
  fullName: TFGraph.FakeQuantWithMinMaxVarsGradient(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.FakeQuantWithMinMaxVarsPerChannel(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FakeQuantWithMinMaxVarsPerChannel(TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
  nameWithType: TFGraph.FakeQuantWithMinMaxVarsPerChannel(TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
  fullName: TFGraph.FakeQuantWithMinMaxVarsPerChannel(TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.FakeQuantWithMinMaxVarsPerChannel(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FakeQuantWithMinMaxVarsPerChannel(TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Boolean>, String)
  nameWithType: TFGraph.FakeQuantWithMinMaxVarsPerChannel(TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Boolean>, String)
  fullName: TFGraph.FakeQuantWithMinMaxVarsPerChannel(TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.FakeQuantWithMinMaxVarsPerChannelGradient(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FakeQuantWithMinMaxVarsPerChannelGradient(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
  nameWithType: TFGraph.FakeQuantWithMinMaxVarsPerChannelGradient(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
  fullName: TFGraph.FakeQuantWithMinMaxVarsPerChannelGradient(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.FakeQuantWithMinMaxVarsPerChannelGradient(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FakeQuantWithMinMaxVarsPerChannelGradient(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Boolean>, String)
  nameWithType: TFGraph.FakeQuantWithMinMaxVarsPerChannelGradient(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Boolean>, String)
  fullName: TFGraph.FakeQuantWithMinMaxVarsPerChannelGradient(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.FFT(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FFT(TFOutput, String)
  nameWithType: TFGraph.FFT(TFOutput, String)
  fullName: TFGraph.FFT(TFOutput, String)
- uid: TensorFlow.TFGraph.FFT2D(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FFT2D(TFOutput, String)
  nameWithType: TFGraph.FFT2D(TFOutput, String)
  fullName: TFGraph.FFT2D(TFOutput, String)
- uid: TensorFlow.TFGraph.FFT3D(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FFT3D(TFOutput, String)
  nameWithType: TFGraph.FFT3D(TFOutput, String)
  fullName: TFGraph.FFT3D(TFOutput, String)
- uid: TensorFlow.TFGraph.FIFOQueueV2(TensorFlow.TFDataType[],TensorFlow.TFShape[],System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FIFOQueueV2(TFDataType[], TFShape[], Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.FIFOQueueV2(TFDataType[], TFShape[], Nullable<Int64>, String, String, String)
  fullName: TFGraph.FIFOQueueV2(TFDataType[], TFShape[], Nullable<Int64>, String, String, String)
- uid: TensorFlow.TFGraph.Fill(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Fill(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Fill(TFOutput, TFOutput, String)
  fullName: TFGraph.Fill(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.FixedLengthRecordDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FixedLengthRecordDataset(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.FixedLengthRecordDataset(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.FixedLengthRecordDataset(TFOutput, TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.FixedLengthRecordReaderV2(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FixedLengthRecordReaderV2(Int64, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.FixedLengthRecordReaderV2(Int64, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.FixedLengthRecordReaderV2(Int64, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String, String, String)
- uid: TensorFlow.TFGraph.FixedUnigramCandidateSampler(TensorFlow.TFOutput,System.Int64,System.Int64,System.Boolean,System.Int64,System.String,System.Nullable{System.Single},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Single[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FixedUnigramCandidateSampler(TFOutput, Int64, Int64, Boolean, Int64, String, Nullable<Single>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Single[], Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.FixedUnigramCandidateSampler(TFOutput, Int64, Int64, Boolean, Int64, String, Nullable<Single>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Single[], Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.FixedUnigramCandidateSampler(TFOutput, Int64, Int64, Boolean, Int64, String, Nullable<Single>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Single[], Nullable<Int64>, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.Floor(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Floor(TFOutput, String)
  nameWithType: TFGraph.Floor(TFOutput, String)
  fullName: TFGraph.Floor(TFOutput, String)
- uid: TensorFlow.TFGraph.FloorDiv(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FloorDiv(TFOutput, TFOutput, String)
  nameWithType: TFGraph.FloorDiv(TFOutput, TFOutput, String)
  fullName: TFGraph.FloorDiv(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.FloorMod(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FloorMod(TFOutput, TFOutput, String)
  nameWithType: TFGraph.FloorMod(TFOutput, TFOutput, String)
  fullName: TFGraph.FloorMod(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.FractionalAvgPool(TensorFlow.TFOutput,System.Single[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FractionalAvgPool(TFOutput, Single[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.FractionalAvgPool(TFOutput, Single[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.FractionalAvgPool(TFOutput, Single[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Int64>, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.FractionalAvgPoolGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FractionalAvgPoolGrad(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.FractionalAvgPoolGrad(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.FractionalAvgPoolGrad(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.FractionalMaxPool(TensorFlow.TFOutput,System.Single[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FractionalMaxPool(TFOutput, Single[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.FractionalMaxPool(TFOutput, Single[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.FractionalMaxPool(TFOutput, Single[], Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Int64>, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.FractionalMaxPoolGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FractionalMaxPoolGrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.FractionalMaxPoolGrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.FractionalMaxPoolGrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.FusedBatchNorm(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Single},System.String,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FusedBatchNorm(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Single>, String, Nullable<Boolean>, String)
  nameWithType: TFGraph.FusedBatchNorm(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Single>, String, Nullable<Boolean>, String)
  fullName: TFGraph.FusedBatchNorm(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Single>, String, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.FusedBatchNormGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Single},System.String,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FusedBatchNormGrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Single>, String, Nullable<Boolean>, String)
  nameWithType: TFGraph.FusedBatchNormGrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Single>, String, Nullable<Boolean>, String)
  fullName: TFGraph.FusedBatchNormGrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Single>, String, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.FusedPadConv2D(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.Int64[],System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FusedPadConv2D(TFOutput, TFOutput, TFOutput, String, Int64[], String, String)
  nameWithType: TFGraph.FusedPadConv2D(TFOutput, TFOutput, TFOutput, String, Int64[], String, String)
  fullName: TFGraph.FusedPadConv2D(TFOutput, TFOutput, TFOutput, String, Int64[], String, String)
- uid: TensorFlow.TFGraph.FusedResizeAndPadConv2D(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.Int64[],System.String,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FusedResizeAndPadConv2D(TFOutput, TFOutput, TFOutput, TFOutput, String, Int64[], String, Nullable<Boolean>, String)
  nameWithType: TFGraph.FusedResizeAndPadConv2D(TFOutput, TFOutput, TFOutput, TFOutput, String, Int64[], String, Nullable<Boolean>, String)
  fullName: TFGraph.FusedResizeAndPadConv2D(TFOutput, TFOutput, TFOutput, TFOutput, String, Int64[], String, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.Gather(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Gather(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.Gather(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.Gather(TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.GatherNd(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: GatherNd(TFOutput, TFOutput, String)
  nameWithType: TFGraph.GatherNd(TFOutput, TFOutput, String)
  fullName: TFGraph.GatherNd(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.GetEnumerator
  parent: TensorFlow.TFGraph
  isExternal: false
  name: GetEnumerator()
  nameWithType: TFGraph.GetEnumerator()
  fullName: TFGraph.GetEnumerator()
- uid: System.Collections.Generic.IEnumerable`1
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.Generic.IEnumerable
- uid: System.Collections.Generic.IEnumerable{TensorFlow.TFOperation}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<TFOperation>
  nameWithType: IEnumerable<TFOperation>
  fullName: System.Collections.Generic.IEnumerable<TensorFlow.TFOperation>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: TensorFlow.TFOperation
    name: TFOperation
    nameWithType: TFOperation
    fullName: TensorFlow.TFOperation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TensorFlow.TFGraph.GetGlobalVariablesInitializer
  parent: TensorFlow.TFGraph
  isExternal: false
  name: GetGlobalVariablesInitializer()
  nameWithType: TFGraph.GetGlobalVariablesInitializer()
  fullName: TFGraph.GetGlobalVariablesInitializer()
- uid: TensorFlow.TFOperation[]
  parent: TensorFlow
  isExternal: false
  name: TFOperation[]
  nameWithType: TFOperation[]
  fullName: TensorFlow.TFOperation[]
  spec.csharp:
  - uid: TensorFlow.TFOperation
    name: TFOperation
    nameWithType: TFOperation
    fullName: TensorFlow.TFOperation
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: TensorFlow.TFGraph.GetRandomSeeds(System.Nullable{System.Int32},System.Int32@,System.Int32@)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: GetRandomSeeds(Nullable<Int32>, Int32, Int32)
  nameWithType: TFGraph.GetRandomSeeds(Nullable<Int32>, Int32, Int32)
  fullName: TFGraph.GetRandomSeeds(Nullable<Int32>, Int32, Int32)
- uid: TensorFlow.TFGraph.GetSessionHandle(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: GetSessionHandle(TFOutput, String)
  nameWithType: TFGraph.GetSessionHandle(TFOutput, String)
  fullName: TFGraph.GetSessionHandle(TFOutput, String)
- uid: TensorFlow.TFGraph.GetSessionHandleV2(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: GetSessionHandleV2(TFOutput, String)
  nameWithType: TFGraph.GetSessionHandleV2(TFOutput, String)
  fullName: TFGraph.GetSessionHandleV2(TFOutput, String)
- uid: TensorFlow.TFGraph.GetSessionTensor(TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: GetSessionTensor(TFOutput, TFDataType, String)
  nameWithType: TFGraph.GetSessionTensor(TFOutput, TFDataType, String)
  fullName: TFGraph.GetSessionTensor(TFOutput, TFDataType, String)
- uid: TensorFlow.TFGraph.GetShape(TensorFlow.TFOutput,TensorFlow.TFStatus)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: GetShape(TFOutput, TFStatus)
  nameWithType: TFGraph.GetShape(TFOutput, TFStatus)
  fullName: TFGraph.GetShape(TFOutput, TFStatus)
- uid: TensorFlow.TFGraph.GetTensorNumDims(TensorFlow.TFOutput,TensorFlow.TFStatus)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: GetTensorNumDims(TFOutput, TFStatus)
  nameWithType: TFGraph.GetTensorNumDims(TFOutput, TFStatus)
  fullName: TFGraph.GetTensorNumDims(TFOutput, TFStatus)
- uid: TensorFlow.TFGraph.GetTensorShape(TensorFlow.TFOutput,TensorFlow.TFStatus)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: GetTensorShape(TFOutput, TFStatus)
  nameWithType: TFGraph.GetTensorShape(TFOutput, TFStatus)
  fullName: TFGraph.GetTensorShape(TFOutput, TFStatus)
- uid: TensorFlow.TFGraph.Greater(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Greater(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Greater(TFOutput, TFOutput, String)
  fullName: TFGraph.Greater(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.GreaterEqual(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: GreaterEqual(TFOutput, TFOutput, String)
  nameWithType: TFGraph.GreaterEqual(TFOutput, TFOutput, String)
  fullName: TFGraph.GreaterEqual(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.HashTableV2(TensorFlow.TFDataType,TensorFlow.TFDataType,System.String,System.String,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: HashTableV2(TFDataType, TFDataType, String, String, Nullable<Boolean>, String)
  nameWithType: TFGraph.HashTableV2(TFDataType, TFDataType, String, String, Nullable<Boolean>, String)
  fullName: TFGraph.HashTableV2(TFDataType, TFDataType, String, String, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.HistogramSummary(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: HistogramSummary(TFOutput, TFOutput, String)
  nameWithType: TFGraph.HistogramSummary(TFOutput, TFOutput, String)
  fullName: TFGraph.HistogramSummary(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.HSVToRGB(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: HSVToRGB(TFOutput, String)
  nameWithType: TFGraph.HSVToRGB(TFOutput, String)
  fullName: TFGraph.HSVToRGB(TFOutput, String)
- uid: TensorFlow.TFGraph.Identity(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Identity(TFOutput, String)
  nameWithType: TFGraph.Identity(TFOutput, String)
  fullName: TFGraph.Identity(TFOutput, String)
- uid: TensorFlow.TFGraph.IdentityReaderV2(System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: IdentityReaderV2(String, String, String)
  nameWithType: TFGraph.IdentityReaderV2(String, String, String)
  fullName: TFGraph.IdentityReaderV2(String, String, String)
- uid: TensorFlow.TFGraph.IFFT(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: IFFT(TFOutput, String)
  nameWithType: TFGraph.IFFT(TFOutput, String)
  fullName: TFGraph.IFFT(TFOutput, String)
- uid: TensorFlow.TFGraph.IFFT2D(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: IFFT2D(TFOutput, String)
  nameWithType: TFGraph.IFFT2D(TFOutput, String)
  fullName: TFGraph.IFFT2D(TFOutput, String)
- uid: TensorFlow.TFGraph.IFFT3D(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: IFFT3D(TFOutput, String)
  nameWithType: TFGraph.IFFT3D(TFOutput, String)
  fullName: TFGraph.IFFT3D(TFOutput, String)
- uid: TensorFlow.TFGraph.Igamma(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Igamma(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Igamma(TFOutput, TFOutput, String)
  fullName: TFGraph.Igamma(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.Igammac(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Igammac(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Igammac(TFOutput, TFOutput, String)
  fullName: TFGraph.Igammac(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.Imag(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Imag(TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.Imag(TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.Imag(TFOutput, Nullable<TFDataType>, String)
- uid: TensorFlow.TFGraph.ImageSummary(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},TensorFlow.TFTensor,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ImageSummary(TFOutput, TFOutput, Nullable<Int64>, TFTensor, String)
  nameWithType: TFGraph.ImageSummary(TFOutput, TFOutput, Nullable<Int64>, TFTensor, String)
  fullName: TFGraph.ImageSummary(TFOutput, TFOutput, Nullable<Int64>, TFTensor, String)
- uid: TensorFlow.TFGraph.ImmutableConst(TensorFlow.TFDataType,TensorFlow.TFShape,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ImmutableConst(TFDataType, TFShape, String, String)
  nameWithType: TFGraph.ImmutableConst(TFDataType, TFShape, String, String)
  fullName: TFGraph.ImmutableConst(TFDataType, TFShape, String, String)
- uid: TensorFlow.TFGraph.Import(System.Byte[],System.String,TensorFlow.TFStatus)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Import(Byte[], String, TFStatus)
  nameWithType: TFGraph.Import(Byte[], String, TFStatus)
  fullName: TFGraph.Import(Byte[], String, TFStatus)
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: TensorFlow.TFGraph.Import(System.Byte[],TensorFlow.TFImportGraphDefOptions,TensorFlow.TFStatus)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Import(Byte[], TFImportGraphDefOptions, TFStatus)
  nameWithType: TFGraph.Import(Byte[], TFImportGraphDefOptions, TFStatus)
  fullName: TFGraph.Import(Byte[], TFImportGraphDefOptions, TFStatus)
- uid: TensorFlow.TFImportGraphDefOptions
  parent: TensorFlow
  isExternal: false
  name: TFImportGraphDefOptions
  nameWithType: TFImportGraphDefOptions
  fullName: TensorFlow.TFImportGraphDefOptions
- uid: TensorFlow.TFGraph.Import(TensorFlow.TFBuffer,System.String,TensorFlow.TFStatus)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Import(TFBuffer, String, TFStatus)
  nameWithType: TFGraph.Import(TFBuffer, String, TFStatus)
  fullName: TFGraph.Import(TFBuffer, String, TFStatus)
- uid: TensorFlow.TFBuffer
  parent: TensorFlow
  isExternal: false
  name: TFBuffer
  nameWithType: TFBuffer
  fullName: TensorFlow.TFBuffer
- uid: TensorFlow.TFGraph.Import(TensorFlow.TFBuffer,TensorFlow.TFImportGraphDefOptions,TensorFlow.TFStatus)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Import(TFBuffer, TFImportGraphDefOptions, TFStatus)
  nameWithType: TFGraph.Import(TFBuffer, TFImportGraphDefOptions, TFStatus)
  fullName: TFGraph.Import(TFBuffer, TFImportGraphDefOptions, TFStatus)
- uid: TensorFlow.TFGraph.ImportGraphDef(TensorFlow.TFBuffer,TensorFlow.TFImportGraphDefOptions,TensorFlow.TFOutput[],TensorFlow.TFStatus)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ImportGraphDef(TFBuffer, TFImportGraphDefOptions, TFOutput[], TFStatus)
  nameWithType: TFGraph.ImportGraphDef(TFBuffer, TFImportGraphDefOptions, TFOutput[], TFStatus)
  fullName: TFGraph.ImportGraphDef(TFBuffer, TFImportGraphDefOptions, TFOutput[], TFStatus)
- uid: TensorFlow.TFGraph.InitializeTableFromTextFileV2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.Int64,System.Nullable{System.Int64},System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: InitializeTableFromTextFileV2(TFOutput, TFOutput, Int64, Int64, Nullable<Int64>, String, String)
  nameWithType: TFGraph.InitializeTableFromTextFileV2(TFOutput, TFOutput, Int64, Int64, Nullable<Int64>, String, String)
  fullName: TFGraph.InitializeTableFromTextFileV2(TFOutput, TFOutput, Int64, Int64, Nullable<Int64>, String, String)
- uid: TensorFlow.TFGraph.InitializeTableV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: InitializeTableV2(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.InitializeTableV2(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.InitializeTableV2(TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.InTopK(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: InTopK(TFOutput, TFOutput, Int64, String)
  nameWithType: TFGraph.InTopK(TFOutput, TFOutput, Int64, String)
  fullName: TFGraph.InTopK(TFOutput, TFOutput, Int64, String)
- uid: TensorFlow.TFGraph.Inv(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Inv(TFOutput, String)
  nameWithType: TFGraph.Inv(TFOutput, String)
  fullName: TFGraph.Inv(TFOutput, String)
- uid: TensorFlow.TFGraph.Invert(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Invert(TFOutput, String)
  nameWithType: TFGraph.Invert(TFOutput, String)
  fullName: TFGraph.Invert(TFOutput, String)
- uid: TensorFlow.TFGraph.InvertPermutation(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: InvertPermutation(TFOutput, String)
  nameWithType: TFGraph.InvertPermutation(TFOutput, String)
  fullName: TFGraph.InvertPermutation(TFOutput, String)
- uid: TensorFlow.TFGraph.InvGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: InvGrad(TFOutput, TFOutput, String)
  nameWithType: TFGraph.InvGrad(TFOutput, TFOutput, String)
  fullName: TFGraph.InvGrad(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.IRFFT(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: IRFFT(TFOutput, TFOutput, String)
  nameWithType: TFGraph.IRFFT(TFOutput, TFOutput, String)
  fullName: TFGraph.IRFFT(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.IRFFT2D(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: IRFFT2D(TFOutput, TFOutput, String)
  nameWithType: TFGraph.IRFFT2D(TFOutput, TFOutput, String)
  fullName: TFGraph.IRFFT2D(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.IRFFT3D(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: IRFFT3D(TFOutput, TFOutput, String)
  nameWithType: TFGraph.IRFFT3D(TFOutput, TFOutput, String)
  fullName: TFGraph.IRFFT3D(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.IsFinite(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: IsFinite(TFOutput, String)
  nameWithType: TFGraph.IsFinite(TFOutput, String)
  fullName: TFGraph.IsFinite(TFOutput, String)
- uid: TensorFlow.TFGraph.IsInf(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: IsInf(TFOutput, String)
  nameWithType: TFGraph.IsInf(TFOutput, String)
  fullName: TFGraph.IsInf(TFOutput, String)
- uid: TensorFlow.TFGraph.IsNan(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: IsNan(TFOutput, String)
  nameWithType: TFGraph.IsNan(TFOutput, String)
  fullName: TFGraph.IsNan(TFOutput, String)
- uid: TensorFlow.TFGraph.Item(System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Item(String)
  nameWithType: TFGraph.Item(String)
  fullName: TFGraph.Item(String)
- uid: TensorFlow.TFGraph.Iterator(System.String,System.String,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Iterator(String, String, TFDataType[], TFShape[], String)
  nameWithType: TFGraph.Iterator(String, String, TFDataType[], TFShape[], String)
  fullName: TFGraph.Iterator(String, String, TFDataType[], TFShape[], String)
- uid: TensorFlow.TFGraph.IteratorDispose(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: IteratorDispose(TFOutput, String)
  nameWithType: TFGraph.IteratorDispose(TFOutput, String)
  fullName: TFGraph.IteratorDispose(TFOutput, String)
- uid: TensorFlow.TFGraph.IteratorGetNext(TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: IteratorGetNext(TFOutput, TFDataType[], TFShape[], String)
  nameWithType: TFGraph.IteratorGetNext(TFOutput, TFDataType[], TFShape[], String)
  fullName: TFGraph.IteratorGetNext(TFOutput, TFDataType[], TFShape[], String)
- uid: TensorFlow.TFGraph.L2Loss(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: L2Loss(TFOutput, String)
  nameWithType: TFGraph.L2Loss(TFOutput, String)
  fullName: TFGraph.L2Loss(TFOutput, String)
- uid: TensorFlow.TFGraph.LearnedUnigramCandidateSampler(TensorFlow.TFOutput,System.Int64,System.Int64,System.Boolean,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: LearnedUnigramCandidateSampler(TFOutput, Int64, Int64, Boolean, Int64, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.LearnedUnigramCandidateSampler(TFOutput, Int64, Int64, Boolean, Int64, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.LearnedUnigramCandidateSampler(TFOutput, Int64, Int64, Boolean, Int64, Nullable<Int64>, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.Less(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Less(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Less(TFOutput, TFOutput, String)
  fullName: TFGraph.Less(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.LessEqual(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: LessEqual(TFOutput, TFOutput, String)
  nameWithType: TFGraph.LessEqual(TFOutput, TFOutput, String)
  fullName: TFGraph.LessEqual(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.Lgamma(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Lgamma(TFOutput, String)
  nameWithType: TFGraph.Lgamma(TFOutput, String)
  fullName: TFGraph.Lgamma(TFOutput, String)
- uid: TensorFlow.TFGraph.LinSpace(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: LinSpace(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.LinSpace(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.LinSpace(TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.ListDiff(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ListDiff(TFOutput, TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.ListDiff(TFOutput, TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.ListDiff(TFOutput, TFOutput, Nullable<TFDataType>, String)
- uid: TensorFlow.TFGraph.Log(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Log(TFOutput, String)
  nameWithType: TFGraph.Log(TFOutput, String)
  fullName: TFGraph.Log(TFOutput, String)
- uid: TensorFlow.TFGraph.Log1p(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Log1p(TFOutput, String)
  nameWithType: TFGraph.Log1p(TFOutput, String)
  fullName: TFGraph.Log1p(TFOutput, String)
- uid: TensorFlow.TFGraph.LogicalAnd(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: LogicalAnd(TFOutput, TFOutput, String)
  nameWithType: TFGraph.LogicalAnd(TFOutput, TFOutput, String)
  fullName: TFGraph.LogicalAnd(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.LogicalNot(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: LogicalNot(TFOutput, String)
  nameWithType: TFGraph.LogicalNot(TFOutput, String)
  fullName: TFGraph.LogicalNot(TFOutput, String)
- uid: TensorFlow.TFGraph.LogicalOr(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: LogicalOr(TFOutput, TFOutput, String)
  nameWithType: TFGraph.LogicalOr(TFOutput, TFOutput, String)
  fullName: TFGraph.LogicalOr(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.LogSoftmax(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: LogSoftmax(TFOutput, String)
  nameWithType: TFGraph.LogSoftmax(TFOutput, String)
  fullName: TFGraph.LogSoftmax(TFOutput, String)
- uid: TensorFlow.TFGraph.LogUniformCandidateSampler(TensorFlow.TFOutput,System.Int64,System.Int64,System.Boolean,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: LogUniformCandidateSampler(TFOutput, Int64, Int64, Boolean, Int64, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.LogUniformCandidateSampler(TFOutput, Int64, Int64, Boolean, Int64, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.LogUniformCandidateSampler(TFOutput, Int64, Int64, Boolean, Int64, Nullable<Int64>, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.LookupTableExportV2(TensorFlow.TFOutput,TensorFlow.TFDataType,TensorFlow.TFDataType,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: LookupTableExportV2(TFOutput, TFDataType, TFDataType, String)
  nameWithType: TFGraph.LookupTableExportV2(TFOutput, TFDataType, TFDataType, String)
  fullName: TFGraph.LookupTableExportV2(TFOutput, TFDataType, TFDataType, String)
- uid: TensorFlow.TFGraph.LookupTableFindV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: LookupTableFindV2(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.LookupTableFindV2(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.LookupTableFindV2(TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.LookupTableImportV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: LookupTableImportV2(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.LookupTableImportV2(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.LookupTableImportV2(TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.LookupTableInsertV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: LookupTableInsertV2(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.LookupTableInsertV2(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.LookupTableInsertV2(TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.LookupTableSizeV2(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: LookupTableSizeV2(TFOutput, String)
  nameWithType: TFGraph.LookupTableSizeV2(TFOutput, String)
  fullName: TFGraph.LookupTableSizeV2(TFOutput, String)
- uid: TensorFlow.TFGraph.LoopCond(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: LoopCond(TFOutput, String)
  nameWithType: TFGraph.LoopCond(TFOutput, String)
  fullName: TFGraph.LoopCond(TFOutput, String)
- uid: TensorFlow.TFGraph.LRN(TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: LRN(TFOutput, Nullable<Int64>, Nullable<Single>, Nullable<Single>, Nullable<Single>, String)
  nameWithType: TFGraph.LRN(TFOutput, Nullable<Int64>, Nullable<Single>, Nullable<Single>, Nullable<Single>, String)
  fullName: TFGraph.LRN(TFOutput, Nullable<Int64>, Nullable<Single>, Nullable<Single>, Nullable<Single>, String)
- uid: TensorFlow.TFGraph.LRNGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: LRNGrad(TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Single>, Nullable<Single>, Nullable<Single>, String)
  nameWithType: TFGraph.LRNGrad(TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Single>, Nullable<Single>, Nullable<Single>, String)
  fullName: TFGraph.LRNGrad(TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Single>, Nullable<Single>, Nullable<Single>, String)
- uid: TensorFlow.TFGraph.MakeIterator(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MakeIterator(TFOutput, TFOutput, String)
  nameWithType: TFGraph.MakeIterator(TFOutput, TFOutput, String)
  fullName: TFGraph.MakeIterator(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.MapClear(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MapClear(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.MapClear(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.MapClear(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
- uid: TensorFlow.TFGraph.MapIncompleteSize(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MapIncompleteSize(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.MapIncompleteSize(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.MapIncompleteSize(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
- uid: TensorFlow.TFGraph.MapPeek(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MapPeek(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.MapPeek(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.MapPeek(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
- uid: TensorFlow.TFGraph.MapSize(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MapSize(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.MapSize(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.MapSize(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
- uid: TensorFlow.TFGraph.MapStage(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MapStage(TFOutput, TFOutput, TFOutput[], TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.MapStage(TFOutput, TFOutput, TFOutput[], TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.MapStage(TFOutput, TFOutput, TFOutput[], TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
- uid: TensorFlow.TFGraph.MapUnstage(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MapUnstage(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.MapUnstage(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.MapUnstage(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
- uid: TensorFlow.TFGraph.MapUnstageNoKey(TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MapUnstageNoKey(TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.MapUnstageNoKey(TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.MapUnstageNoKey(TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
- uid: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput[]}
  parent: System
  isExternal: true
  name: ValueTuple<TFOutput,TFOutput[]>
  nameWithType: ValueTuple<TFOutput,TFOutput[]>
  fullName: System.ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput[]>
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TensorFlow.TFGraph.MatchingFiles(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MatchingFiles(TFOutput, String)
  nameWithType: TFGraph.MatchingFiles(TFOutput, String)
  fullName: TFGraph.MatchingFiles(TFOutput, String)
- uid: TensorFlow.TFGraph.MatMul(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MatMul(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  nameWithType: TFGraph.MatMul(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  fullName: TFGraph.MatMul(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.MatrixBandPart(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MatrixBandPart(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.MatrixBandPart(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.MatrixBandPart(TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.MatrixDeterminant(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MatrixDeterminant(TFOutput, String)
  nameWithType: TFGraph.MatrixDeterminant(TFOutput, String)
  fullName: TFGraph.MatrixDeterminant(TFOutput, String)
- uid: TensorFlow.TFGraph.MatrixDiag(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MatrixDiag(TFOutput, String)
  nameWithType: TFGraph.MatrixDiag(TFOutput, String)
  fullName: TFGraph.MatrixDiag(TFOutput, String)
- uid: TensorFlow.TFGraph.MatrixDiagPart(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MatrixDiagPart(TFOutput, String)
  nameWithType: TFGraph.MatrixDiagPart(TFOutput, String)
  fullName: TFGraph.MatrixDiagPart(TFOutput, String)
- uid: TensorFlow.TFGraph.MatrixInverse(TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MatrixInverse(TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.MatrixInverse(TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.MatrixInverse(TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.MatrixSetDiag(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MatrixSetDiag(TFOutput, TFOutput, String)
  nameWithType: TFGraph.MatrixSetDiag(TFOutput, TFOutput, String)
  fullName: TFGraph.MatrixSetDiag(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.MatrixSolve(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MatrixSolve(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.MatrixSolve(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.MatrixSolve(TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.MatrixSolveLs(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MatrixSolveLs(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.MatrixSolveLs(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.MatrixSolveLs(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.MatrixTriangularSolve(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MatrixTriangularSolve(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  nameWithType: TFGraph.MatrixTriangularSolve(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  fullName: TFGraph.MatrixTriangularSolve(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.Max(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Max(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.Max(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.Max(TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.Maximum(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Maximum(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Maximum(TFOutput, TFOutput, String)
  fullName: TFGraph.Maximum(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.MaxPool(TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MaxPool(TFOutput, Int64[], Int64[], String, String, String)
  nameWithType: TFGraph.MaxPool(TFOutput, Int64[], Int64[], String, String, String)
  fullName: TFGraph.MaxPool(TFOutput, Int64[], Int64[], String, String, String)
- uid: TensorFlow.TFGraph.MaxPool3D(TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MaxPool3D(TFOutput, Int64[], Int64[], String, String, String)
  nameWithType: TFGraph.MaxPool3D(TFOutput, Int64[], Int64[], String, String, String)
  fullName: TFGraph.MaxPool3D(TFOutput, Int64[], Int64[], String, String, String)
- uid: TensorFlow.TFGraph.MaxPool3DGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MaxPool3DGrad(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String, String)
  nameWithType: TFGraph.MaxPool3DGrad(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String, String)
  fullName: TFGraph.MaxPool3DGrad(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String, String)
- uid: TensorFlow.TFGraph.MaxPool3DGradGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MaxPool3DGradGrad(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String, String)
  nameWithType: TFGraph.MaxPool3DGradGrad(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String, String)
  fullName: TFGraph.MaxPool3DGradGrad(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String, String)
- uid: TensorFlow.TFGraph.MaxPoolGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MaxPoolGrad(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String, String)
  nameWithType: TFGraph.MaxPoolGrad(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String, String)
  fullName: TFGraph.MaxPoolGrad(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String, String)
- uid: TensorFlow.TFGraph.MaxPoolGradGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MaxPoolGradGrad(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String, String)
  nameWithType: TFGraph.MaxPoolGradGrad(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String, String)
  fullName: TFGraph.MaxPoolGradGrad(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String, String)
- uid: TensorFlow.TFGraph.MaxPoolGradGradWithArgmax(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MaxPoolGradGradWithArgmax(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
  nameWithType: TFGraph.MaxPoolGradGradWithArgmax(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
  fullName: TFGraph.MaxPoolGradGradWithArgmax(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
- uid: TensorFlow.TFGraph.MaxPoolGradWithArgmax(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MaxPoolGradWithArgmax(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
  nameWithType: TFGraph.MaxPoolGradWithArgmax(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
  fullName: TFGraph.MaxPoolGradWithArgmax(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
- uid: TensorFlow.TFGraph.MaxPoolWithArgmax(TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MaxPoolWithArgmax(TFOutput, Int64[], Int64[], String, Nullable<TFDataType>, String)
  nameWithType: TFGraph.MaxPoolWithArgmax(TFOutput, Int64[], Int64[], String, Nullable<TFDataType>, String)
  fullName: TFGraph.MaxPoolWithArgmax(TFOutput, Int64[], Int64[], String, Nullable<TFDataType>, String)
- uid: TensorFlow.TFGraph.Mean(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Mean(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.Mean(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.Mean(TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.Merge(TensorFlow.TFOutput[],System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Merge(TFOutput[], String)
  nameWithType: TFGraph.Merge(TFOutput[], String)
  fullName: TFGraph.Merge(TFOutput[], String)
- uid: TensorFlow.TFGraph.MergeSummary(TensorFlow.TFOutput[],System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MergeSummary(TFOutput[], String)
  nameWithType: TFGraph.MergeSummary(TFOutput[], String)
  fullName: TFGraph.MergeSummary(TFOutput[], String)
- uid: TensorFlow.TFGraph.MergeV2Checkpoints(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MergeV2Checkpoints(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.MergeV2Checkpoints(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.MergeV2Checkpoints(TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.Mfcc(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Mfcc(TFOutput, TFOutput, Nullable<Single>, Nullable<Single>, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.Mfcc(TFOutput, TFOutput, Nullable<Single>, Nullable<Single>, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.Mfcc(TFOutput, TFOutput, Nullable<Single>, Nullable<Single>, Nullable<Int64>, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.Min(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Min(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.Min(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.Min(TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.Minimum(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Minimum(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Minimum(TFOutput, TFOutput, String)
  fullName: TFGraph.Minimum(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.MirrorPad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MirrorPad(TFOutput, TFOutput, String, String)
  nameWithType: TFGraph.MirrorPad(TFOutput, TFOutput, String, String)
  fullName: TFGraph.MirrorPad(TFOutput, TFOutput, String, String)
- uid: TensorFlow.TFGraph.MirrorPadGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MirrorPadGrad(TFOutput, TFOutput, String, String)
  nameWithType: TFGraph.MirrorPadGrad(TFOutput, TFOutput, String, String)
  fullName: TFGraph.MirrorPadGrad(TFOutput, TFOutput, String, String)
- uid: TensorFlow.TFGraph.Mod(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Mod(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Mod(TFOutput, TFOutput, String)
  fullName: TFGraph.Mod(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.Mul(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Mul(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Mul(TFOutput, TFOutput, String)
  fullName: TFGraph.Mul(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.Multinomial(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Multinomial(TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.Multinomial(TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.Multinomial(TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.MutableDenseHashTableV2(TensorFlow.TFOutput,TensorFlow.TFDataType,System.String,System.String,System.Nullable{System.Boolean},TensorFlow.TFShape,System.Nullable{System.Int64},System.Nullable{System.Single},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MutableDenseHashTableV2(TFOutput, TFDataType, String, String, Nullable<Boolean>, TFShape, Nullable<Int64>, Nullable<Single>, String)
  nameWithType: TFGraph.MutableDenseHashTableV2(TFOutput, TFDataType, String, String, Nullable<Boolean>, TFShape, Nullable<Int64>, Nullable<Single>, String)
  fullName: TFGraph.MutableDenseHashTableV2(TFOutput, TFDataType, String, String, Nullable<Boolean>, TFShape, Nullable<Int64>, Nullable<Single>, String)
- uid: TensorFlow.TFGraph.MutableHashTableOfTensorsV2(TensorFlow.TFDataType,TensorFlow.TFDataType,System.String,System.String,System.Nullable{System.Boolean},TensorFlow.TFShape,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MutableHashTableOfTensorsV2(TFDataType, TFDataType, String, String, Nullable<Boolean>, TFShape, String)
  nameWithType: TFGraph.MutableHashTableOfTensorsV2(TFDataType, TFDataType, String, String, Nullable<Boolean>, TFShape, String)
  fullName: TFGraph.MutableHashTableOfTensorsV2(TFDataType, TFDataType, String, String, Nullable<Boolean>, TFShape, String)
- uid: TensorFlow.TFGraph.MutableHashTableV2(TensorFlow.TFDataType,TensorFlow.TFDataType,System.String,System.String,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MutableHashTableV2(TFDataType, TFDataType, String, String, Nullable<Boolean>, String)
  nameWithType: TFGraph.MutableHashTableV2(TFDataType, TFDataType, String, String, Nullable<Boolean>, String)
  fullName: TFGraph.MutableHashTableV2(TFDataType, TFDataType, String, String, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.Neg(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Neg(TFOutput, String)
  nameWithType: TFGraph.Neg(TFOutput, String)
  fullName: TFGraph.Neg(TFOutput, String)
- uid: TensorFlow.TFGraph.NextIteration(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: NextIteration(TFOutput, String)
  nameWithType: TFGraph.NextIteration(TFOutput, String)
  fullName: TFGraph.NextIteration(TFOutput, String)
- uid: TensorFlow.TFGraph.NonMaxSuppression(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Single},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: NonMaxSuppression(TFOutput, TFOutput, TFOutput, Nullable<Single>, String)
  nameWithType: TFGraph.NonMaxSuppression(TFOutput, TFOutput, TFOutput, Nullable<Single>, String)
  fullName: TFGraph.NonMaxSuppression(TFOutput, TFOutput, TFOutput, Nullable<Single>, String)
- uid: TensorFlow.TFGraph.NonMaxSuppressionV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: NonMaxSuppressionV2(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.NonMaxSuppressionV2(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.NonMaxSuppressionV2(TFOutput, TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.NoOp(System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: NoOp(String)
  nameWithType: TFGraph.NoOp(String)
  fullName: TFGraph.NoOp(String)
- uid: TensorFlow.TFGraph.NotEqual(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: NotEqual(TFOutput, TFOutput, String)
  nameWithType: TFGraph.NotEqual(TFOutput, TFOutput, String)
  fullName: TFGraph.NotEqual(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.OneHot(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: OneHot(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
  nameWithType: TFGraph.OneHot(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
  fullName: TFGraph.OneHot(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.OnesLike(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: OnesLike(TFOutput, String)
  nameWithType: TFGraph.OnesLike(TFOutput, String)
  fullName: TFGraph.OnesLike(TFOutput, String)
- uid: TensorFlow.TFGraph.OrderedMapClear(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: OrderedMapClear(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.OrderedMapClear(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.OrderedMapClear(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
- uid: TensorFlow.TFGraph.OrderedMapIncompleteSize(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: OrderedMapIncompleteSize(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.OrderedMapIncompleteSize(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.OrderedMapIncompleteSize(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
- uid: TensorFlow.TFGraph.OrderedMapPeek(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: OrderedMapPeek(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.OrderedMapPeek(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.OrderedMapPeek(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
- uid: TensorFlow.TFGraph.OrderedMapSize(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: OrderedMapSize(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.OrderedMapSize(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.OrderedMapSize(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
- uid: TensorFlow.TFGraph.OrderedMapStage(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: OrderedMapStage(TFOutput, TFOutput, TFOutput[], TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.OrderedMapStage(TFOutput, TFOutput, TFOutput[], TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.OrderedMapStage(TFOutput, TFOutput, TFOutput[], TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
- uid: TensorFlow.TFGraph.OrderedMapUnstage(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: OrderedMapUnstage(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.OrderedMapUnstage(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.OrderedMapUnstage(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
- uid: TensorFlow.TFGraph.OrderedMapUnstageNoKey(TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: OrderedMapUnstageNoKey(TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.OrderedMapUnstageNoKey(TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.OrderedMapUnstageNoKey(TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
- uid: TensorFlow.TFGraph.Pack(TensorFlow.TFOutput[],System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Pack(TFOutput[], Nullable<Int64>, String)
  nameWithType: TFGraph.Pack(TFOutput[], Nullable<Int64>, String)
  fullName: TFGraph.Pack(TFOutput[], Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.Pad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Pad(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Pad(TFOutput, TFOutput, String)
  fullName: TFGraph.Pad(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.PaddedBatchDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFShape[],System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: PaddedBatchDataset(TFOutput, TFOutput, TFOutput[], TFOutput[], TFShape[], String)
  nameWithType: TFGraph.PaddedBatchDataset(TFOutput, TFOutput, TFOutput[], TFOutput[], TFShape[], String)
  fullName: TFGraph.PaddedBatchDataset(TFOutput, TFOutput, TFOutput[], TFOutput[], TFShape[], String)
- uid: TensorFlow.TFGraph.PaddingFIFOQueueV2(TensorFlow.TFDataType[],TensorFlow.TFShape[],System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: PaddingFIFOQueueV2(TFDataType[], TFShape[], Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.PaddingFIFOQueueV2(TFDataType[], TFShape[], Nullable<Int64>, String, String, String)
  fullName: TFGraph.PaddingFIFOQueueV2(TFDataType[], TFShape[], Nullable<Int64>, String, String, String)
- uid: TensorFlow.TFGraph.ParallelConcat(TensorFlow.TFOutput[],TensorFlow.TFShape,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ParallelConcat(TFOutput[], TFShape, String)
  nameWithType: TFGraph.ParallelConcat(TFOutput[], TFShape, String)
  fullName: TFGraph.ParallelConcat(TFOutput[], TFShape, String)
- uid: TensorFlow.TFGraph.ParameterizedTruncatedNormal(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ParameterizedTruncatedNormal(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.ParameterizedTruncatedNormal(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.ParameterizedTruncatedNormal(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.ParseExample(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ParseExample(TFOutput, TFOutput, TFOutput[], TFOutput[], TFOutput[], TFDataType[], TFShape[], String)
  nameWithType: TFGraph.ParseExample(TFOutput, TFOutput, TFOutput[], TFOutput[], TFOutput[], TFDataType[], TFShape[], String)
  fullName: TFGraph.ParseExample(TFOutput, TFOutput, TFOutput[], TFOutput[], TFOutput[], TFDataType[], TFShape[], String)
- uid: System.ValueTuple{TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[]}
  parent: System
  isExternal: true
  name: ValueTuple<TFOutput[],TFOutput[],TFOutput[],TFOutput[]>
  nameWithType: ValueTuple<TFOutput[],TFOutput[],TFOutput[],TFOutput[]>
  fullName: System.ValueTuple<TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[]>
  spec.csharp:
  - uid: System.ValueTuple`4
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TensorFlow.TFGraph.ParseSingleSequenceExample(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFDataType[],TensorFlow.TFShape[],TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ParseSingleSequenceExample(TFOutput, TFOutput, TFOutput[], TFOutput[], TFOutput[], TFOutput[], TFOutput[], TFOutput, TFDataType[], TFDataType[], TFShape[], TFDataType[], TFShape[], String)
  nameWithType: TFGraph.ParseSingleSequenceExample(TFOutput, TFOutput, TFOutput[], TFOutput[], TFOutput[], TFOutput[], TFOutput[], TFOutput, TFDataType[], TFDataType[], TFShape[], TFDataType[], TFShape[], String)
  fullName: TFGraph.ParseSingleSequenceExample(TFOutput, TFOutput, TFOutput[], TFOutput[], TFOutput[], TFOutput[], TFOutput[], TFOutput, TFDataType[], TFDataType[], TFShape[], TFDataType[], TFShape[], String)
- uid: System.ValueTuple`8
  name: ValueTuple
  nameWithType: ValueTuple
  fullName: System.ValueTuple
- uid: System.ValueTuple`1
  name: ValueTuple
  nameWithType: ValueTuple
  fullName: System.ValueTuple
- uid: System.ValueTuple{TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],System.ValueTuple{TensorFlow.TFOutput[]}}
  parent: System
  isExternal: true
  name: ValueTuple<TFOutput[],TFOutput[],TFOutput[],TFOutput[],TFOutput[],TFOutput[],TFOutput[],ValueTuple<TFOutput[]>>
  nameWithType: ValueTuple<TFOutput[],TFOutput[],TFOutput[],TFOutput[],TFOutput[],TFOutput[],TFOutput[],ValueTuple<TFOutput[]>>
  fullName: System.ValueTuple<TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],System.ValueTuple<TensorFlow.TFOutput[]>>
  spec.csharp:
  - uid: System.ValueTuple`8
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.ValueTuple`1
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TensorFlow.TFGraph.ParseTensor(TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ParseTensor(TFOutput, TFDataType, String)
  nameWithType: TFGraph.ParseTensor(TFOutput, TFDataType, String)
  fullName: TFGraph.ParseTensor(TFOutput, TFDataType, String)
- uid: TensorFlow.TFGraph.Placeholder(TensorFlow.TFDataType,TensorFlow.TFShape,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Placeholder(TFDataType, TFShape, String)
  nameWithType: TFGraph.Placeholder(TFDataType, TFShape, String)
  fullName: TFGraph.Placeholder(TFDataType, TFShape, String)
- uid: TensorFlow.TFGraph.PlaceholderV2(TensorFlow.TFDataType,TensorFlow.TFShape,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: PlaceholderV2(TFDataType, TFShape, String)
  nameWithType: TFGraph.PlaceholderV2(TFDataType, TFShape, String)
  fullName: TFGraph.PlaceholderV2(TFDataType, TFShape, String)
- uid: TensorFlow.TFGraph.PlaceholderWithDefault(TensorFlow.TFOutput,TensorFlow.TFShape,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: PlaceholderWithDefault(TFOutput, TFShape, String)
  nameWithType: TFGraph.PlaceholderWithDefault(TFOutput, TFShape, String)
  fullName: TFGraph.PlaceholderWithDefault(TFOutput, TFShape, String)
- uid: TensorFlow.TFGraph.Polygamma(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Polygamma(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Polygamma(TFOutput, TFOutput, String)
  fullName: TFGraph.Polygamma(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.Pow(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Pow(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Pow(TFOutput, TFOutput, String)
  fullName: TFGraph.Pow(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.PreventGradient(TensorFlow.TFOutput,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: PreventGradient(TFOutput, String, String)
  nameWithType: TFGraph.PreventGradient(TFOutput, String, String)
  fullName: TFGraph.PreventGradient(TFOutput, String, String)
- uid: TensorFlow.TFGraph.Print(TensorFlow.TFOutput,TensorFlow.TFOutput[],System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Print(TFOutput, TFOutput[], String, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.Print(TFOutput, TFOutput[], String, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.Print(TFOutput, TFOutput[], String, Nullable<Int64>, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.PriorityQueueV2(TensorFlow.TFShape[],TensorFlow.TFDataType[],System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: PriorityQueueV2(TFShape[], TFDataType[], Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.PriorityQueueV2(TFShape[], TFDataType[], Nullable<Int64>, String, String, String)
  fullName: TFGraph.PriorityQueueV2(TFShape[], TFDataType[], Nullable<Int64>, String, String, String)
- uid: TensorFlow.TFGraph.Prod(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Prod(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.Prod(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.Prod(TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.Qr(TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Qr(TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.Qr(TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.Qr(TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.QuantizeAndDequantize(TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Single},System.Nullable{System.Single},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizeAndDequantize(TFOutput, Nullable<Boolean>, Nullable<Int64>, Nullable<Boolean>, Nullable<Single>, Nullable<Single>, String)
  nameWithType: TFGraph.QuantizeAndDequantize(TFOutput, Nullable<Boolean>, Nullable<Int64>, Nullable<Boolean>, Nullable<Single>, Nullable<Single>, String)
  fullName: TFGraph.QuantizeAndDequantize(TFOutput, Nullable<Boolean>, Nullable<Int64>, Nullable<Boolean>, Nullable<Single>, Nullable<Single>, String)
- uid: TensorFlow.TFGraph.QuantizeAndDequantizeV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizeAndDequantizeV2(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Int64>, Nullable<Boolean>, String)
  nameWithType: TFGraph.QuantizeAndDequantizeV2(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Int64>, Nullable<Boolean>, String)
  fullName: TFGraph.QuantizeAndDequantizeV2(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Int64>, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.QuantizedAdd(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizedAdd(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.QuantizedAdd(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.QuantizedAdd(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, String)
- uid: TensorFlow.TFGraph.QuantizedAvgPool(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizedAvgPool(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
  nameWithType: TFGraph.QuantizedAvgPool(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
  fullName: TFGraph.QuantizedAvgPool(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
- uid: TensorFlow.TFGraph.QuantizedBatchNormWithGlobalNormalization(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.Single,System.Boolean,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizedBatchNormWithGlobalNormalization(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFDataType, Single, Boolean, String)
  nameWithType: TFGraph.QuantizedBatchNormWithGlobalNormalization(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFDataType, Single, Boolean, String)
  fullName: TFGraph.QuantizedBatchNormWithGlobalNormalization(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFDataType, Single, Boolean, String)
- uid: TensorFlow.TFGraph.QuantizedBiasAdd(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizedBiasAdd(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFDataType, String)
  nameWithType: TFGraph.QuantizedBiasAdd(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFDataType, String)
  fullName: TFGraph.QuantizedBiasAdd(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFDataType, String)
- uid: TensorFlow.TFGraph.QuantizedConcat(TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizedConcat(TFOutput, TFOutput[], TFOutput[], TFOutput[], String)
  nameWithType: TFGraph.QuantizedConcat(TFOutput, TFOutput[], TFOutput[], TFOutput[], String)
  fullName: TFGraph.QuantizedConcat(TFOutput, TFOutput[], TFOutput[], TFOutput[], String)
- uid: TensorFlow.TFGraph.QuantizedConv2D(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.String,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizedConv2D(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Int64[], String, Nullable<TFDataType>, String)
  nameWithType: TFGraph.QuantizedConv2D(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Int64[], String, Nullable<TFDataType>, String)
  fullName: TFGraph.QuantizedConv2D(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Int64[], String, Nullable<TFDataType>, String)
- uid: TensorFlow.TFGraph.QuantizedInstanceNorm(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizedInstanceNorm(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Single>, Nullable<Single>, Nullable<Single>, Nullable<Single>, String)
  nameWithType: TFGraph.QuantizedInstanceNorm(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Single>, Nullable<Single>, Nullable<Single>, Nullable<Single>, String)
  fullName: TFGraph.QuantizedInstanceNorm(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Single>, Nullable<Single>, Nullable<Single>, Nullable<Single>, String)
- uid: TensorFlow.TFGraph.QuantizedMatMul(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizedMatMul(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, Nullable<Boolean>, Nullable<Boolean>, Nullable<TFDataType>, String)
  nameWithType: TFGraph.QuantizedMatMul(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, Nullable<Boolean>, Nullable<Boolean>, Nullable<TFDataType>, String)
  fullName: TFGraph.QuantizedMatMul(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, Nullable<Boolean>, Nullable<Boolean>, Nullable<TFDataType>, String)
- uid: TensorFlow.TFGraph.QuantizedMaxPool(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64[],System.Int64[],System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizedMaxPool(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
  nameWithType: TFGraph.QuantizedMaxPool(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
  fullName: TFGraph.QuantizedMaxPool(TFOutput, TFOutput, TFOutput, Int64[], Int64[], String, String)
- uid: TensorFlow.TFGraph.QuantizedMul(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizedMul(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.QuantizedMul(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.QuantizedMul(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, String)
- uid: TensorFlow.TFGraph.QuantizeDownAndShrinkRange(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizeDownAndShrinkRange(TFOutput, TFOutput, TFOutput, TFDataType, String)
  nameWithType: TFGraph.QuantizeDownAndShrinkRange(TFOutput, TFOutput, TFOutput, TFDataType, String)
  fullName: TFGraph.QuantizeDownAndShrinkRange(TFOutput, TFOutput, TFOutput, TFDataType, String)
- uid: TensorFlow.TFGraph.QuantizedRelu(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizedRelu(TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.QuantizedRelu(TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.QuantizedRelu(TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, String)
- uid: TensorFlow.TFGraph.QuantizedRelu6(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizedRelu6(TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.QuantizedRelu6(TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.QuantizedRelu6(TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, String)
- uid: TensorFlow.TFGraph.QuantizedReluX(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizedReluX(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.QuantizedReluX(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.QuantizedReluX(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<TFDataType>, String)
- uid: TensorFlow.TFGraph.QuantizedReshape(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizedReshape(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.QuantizedReshape(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.QuantizedReshape(TFOutput, TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.QuantizedResizeBilinear(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizedResizeBilinear(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.QuantizedResizeBilinear(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.QuantizedResizeBilinear(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.QuantizeV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizeV2(TFOutput, TFOutput, TFOutput, TFDataType, String, String)
  nameWithType: TFGraph.QuantizeV2(TFOutput, TFOutput, TFOutput, TFDataType, String, String)
  fullName: TFGraph.QuantizeV2(TFOutput, TFOutput, TFOutput, TFDataType, String, String)
- uid: TensorFlow.TFGraph.QueueCloseV2(TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QueueCloseV2(TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.QueueCloseV2(TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.QueueCloseV2(TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.QueueDequeueManyV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QueueDequeueManyV2(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, String)
  nameWithType: TFGraph.QueueDequeueManyV2(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, String)
  fullName: TFGraph.QueueDequeueManyV2(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.QueueDequeueUpToV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QueueDequeueUpToV2(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, String)
  nameWithType: TFGraph.QueueDequeueUpToV2(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, String)
  fullName: TFGraph.QueueDequeueUpToV2(TFOutput, TFOutput, TFDataType[], Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.QueueDequeueV2(TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QueueDequeueV2(TFOutput, TFDataType[], Nullable<Int64>, String)
  nameWithType: TFGraph.QueueDequeueV2(TFOutput, TFDataType[], Nullable<Int64>, String)
  fullName: TFGraph.QueueDequeueV2(TFOutput, TFDataType[], Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.QueueEnqueueManyV2(TensorFlow.TFOutput,TensorFlow.TFOutput[],System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QueueEnqueueManyV2(TFOutput, TFOutput[], Nullable<Int64>, String)
  nameWithType: TFGraph.QueueEnqueueManyV2(TFOutput, TFOutput[], Nullable<Int64>, String)
  fullName: TFGraph.QueueEnqueueManyV2(TFOutput, TFOutput[], Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.QueueEnqueueV2(TensorFlow.TFOutput,TensorFlow.TFOutput[],System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QueueEnqueueV2(TFOutput, TFOutput[], Nullable<Int64>, String)
  nameWithType: TFGraph.QueueEnqueueV2(TFOutput, TFOutput[], Nullable<Int64>, String)
  fullName: TFGraph.QueueEnqueueV2(TFOutput, TFOutput[], Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.QueueSizeV2(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QueueSizeV2(TFOutput, String)
  nameWithType: TFGraph.QueueSizeV2(TFOutput, String)
  fullName: TFGraph.QueueSizeV2(TFOutput, String)
- uid: TensorFlow.TFGraph.RandomCrop(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RandomCrop(TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.RandomCrop(TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.RandomCrop(TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.RandomGamma(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RandomGamma(TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.RandomGamma(TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.RandomGamma(TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.RandomNormal(TensorFlow.TFShape,System.Double,System.Double,System.Nullable{System.Int32},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RandomNormal(TFShape, Double, Double, Nullable<Int32>, String)
  nameWithType: TFGraph.RandomNormal(TFShape, Double, Double, Nullable<Int32>, String)
  fullName: TFGraph.RandomNormal(TFShape, Double, Double, Nullable<Int32>, String)
- uid: TensorFlow.TFGraph.RandomPoisson(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RandomPoisson(TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.RandomPoisson(TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.RandomPoisson(TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.RandomShuffle(TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RandomShuffle(TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.RandomShuffle(TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.RandomShuffle(TFOutput, Nullable<Int64>, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.RandomShuffleQueueV2(TensorFlow.TFDataType[],TensorFlow.TFShape[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RandomShuffleQueueV2(TFDataType[], TFShape[], Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.RandomShuffleQueueV2(TFDataType[], TFShape[], Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.RandomShuffleQueueV2(TFDataType[], TFShape[], Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String, String, String)
- uid: TensorFlow.TFGraph.RandomStandardNormal(TensorFlow.TFOutput,TensorFlow.TFDataType,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RandomStandardNormal(TFOutput, TFDataType, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.RandomStandardNormal(TFOutput, TFDataType, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.RandomStandardNormal(TFOutput, TFDataType, Nullable<Int64>, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.RandomUniform(TensorFlow.TFOutput,TensorFlow.TFDataType,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RandomUniform(TFOutput, TFDataType, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.RandomUniform(TFOutput, TFDataType, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.RandomUniform(TFOutput, TFDataType, Nullable<Int64>, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.RandomUniformInt(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RandomUniformInt(TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.RandomUniformInt(TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.RandomUniformInt(TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.Range(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Range(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.Range(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.Range(TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.RangeDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RangeDataset(TFOutput, TFOutput, TFOutput, TFDataType[], TFShape[], String)
  nameWithType: TFGraph.RangeDataset(TFOutput, TFOutput, TFOutput, TFDataType[], TFShape[], String)
  fullName: TFGraph.RangeDataset(TFOutput, TFOutput, TFOutput, TFDataType[], TFShape[], String)
- uid: TensorFlow.TFGraph.Rank(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Rank(TFOutput, String)
  nameWithType: TFGraph.Rank(TFOutput, String)
  fullName: TFGraph.Rank(TFOutput, String)
- uid: TensorFlow.TFGraph.ReaderNumRecordsProducedV2(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ReaderNumRecordsProducedV2(TFOutput, String)
  nameWithType: TFGraph.ReaderNumRecordsProducedV2(TFOutput, String)
  fullName: TFGraph.ReaderNumRecordsProducedV2(TFOutput, String)
- uid: TensorFlow.TFGraph.ReaderNumWorkUnitsCompletedV2(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ReaderNumWorkUnitsCompletedV2(TFOutput, String)
  nameWithType: TFGraph.ReaderNumWorkUnitsCompletedV2(TFOutput, String)
  fullName: TFGraph.ReaderNumWorkUnitsCompletedV2(TFOutput, String)
- uid: TensorFlow.TFGraph.ReaderReadUpToV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ReaderReadUpToV2(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.ReaderReadUpToV2(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.ReaderReadUpToV2(TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.ReaderReadV2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ReaderReadV2(TFOutput, TFOutput, String)
  nameWithType: TFGraph.ReaderReadV2(TFOutput, TFOutput, String)
  fullName: TFGraph.ReaderReadV2(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.ReaderResetV2(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ReaderResetV2(TFOutput, String)
  nameWithType: TFGraph.ReaderResetV2(TFOutput, String)
  fullName: TFGraph.ReaderResetV2(TFOutput, String)
- uid: TensorFlow.TFGraph.ReaderRestoreStateV2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ReaderRestoreStateV2(TFOutput, TFOutput, String)
  nameWithType: TFGraph.ReaderRestoreStateV2(TFOutput, TFOutput, String)
  fullName: TFGraph.ReaderRestoreStateV2(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.ReaderSerializeStateV2(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ReaderSerializeStateV2(TFOutput, String)
  nameWithType: TFGraph.ReaderSerializeStateV2(TFOutput, String)
  fullName: TFGraph.ReaderSerializeStateV2(TFOutput, String)
- uid: TensorFlow.TFGraph.ReadFile(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ReadFile(TFOutput, String)
  nameWithType: TFGraph.ReadFile(TFOutput, String)
  fullName: TFGraph.ReadFile(TFOutput, String)
- uid: TensorFlow.TFGraph.ReadVariableOp(TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ReadVariableOp(TFOutput, TFDataType, String)
  nameWithType: TFGraph.ReadVariableOp(TFOutput, TFDataType, String)
  fullName: TFGraph.ReadVariableOp(TFOutput, TFDataType, String)
- uid: TensorFlow.TFGraph.Real(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Real(TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.Real(TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.Real(TFOutput, Nullable<TFDataType>, String)
- uid: TensorFlow.TFGraph.RealDiv(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RealDiv(TFOutput, TFOutput, String)
  nameWithType: TFGraph.RealDiv(TFOutput, TFOutput, String)
  fullName: TFGraph.RealDiv(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.Reciprocal(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Reciprocal(TFOutput, String)
  nameWithType: TFGraph.Reciprocal(TFOutput, String)
  fullName: TFGraph.Reciprocal(TFOutput, String)
- uid: TensorFlow.TFGraph.ReciprocalGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ReciprocalGrad(TFOutput, TFOutput, String)
  nameWithType: TFGraph.ReciprocalGrad(TFOutput, TFOutput, String)
  fullName: TFGraph.ReciprocalGrad(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.RecordInput(System.String,System.Nullable{System.Int64},System.Nullable{System.Single},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RecordInput(String, Nullable<Int64>, Nullable<Single>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.RecordInput(String, Nullable<Int64>, Nullable<Single>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.RecordInput(String, Nullable<Int64>, Nullable<Single>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.ReduceJoin(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ReduceJoin(TFOutput, TFOutput, Nullable<Boolean>, String, String)
  nameWithType: TFGraph.ReduceJoin(TFOutput, TFOutput, Nullable<Boolean>, String, String)
  fullName: TFGraph.ReduceJoin(TFOutput, TFOutput, Nullable<Boolean>, String, String)
- uid: TensorFlow.TFGraph.ReduceSum(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFOutput},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ReduceSum(TFOutput, Nullable<TFOutput>, Nullable<Boolean>, String)
  nameWithType: TFGraph.ReduceSum(TFOutput, Nullable<TFOutput>, Nullable<Boolean>, String)
  fullName: TFGraph.ReduceSum(TFOutput, Nullable<TFOutput>, Nullable<Boolean>, String)
- uid: System.Nullable{TensorFlow.TFOutput}
  parent: System
  isExternal: true
  name: Nullable<TFOutput>
  nameWithType: Nullable<TFOutput>
  fullName: System.Nullable<TensorFlow.TFOutput>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
  - name: <
    nameWithType: <
    fullName: <
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TensorFlow.TFGraph.Relu(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Relu(TFOutput, String)
  nameWithType: TFGraph.Relu(TFOutput, String)
  fullName: TFGraph.Relu(TFOutput, String)
- uid: TensorFlow.TFGraph.Relu6(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Relu6(TFOutput, String)
  nameWithType: TFGraph.Relu6(TFOutput, String)
  fullName: TFGraph.Relu6(TFOutput, String)
- uid: TensorFlow.TFGraph.Relu6Grad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Relu6Grad(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Relu6Grad(TFOutput, TFOutput, String)
  fullName: TFGraph.Relu6Grad(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.ReluGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ReluGrad(TFOutput, TFOutput, String)
  nameWithType: TFGraph.ReluGrad(TFOutput, TFOutput, String)
  fullName: TFGraph.ReluGrad(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.RemoteFusedGraphExecute(TensorFlow.TFOutput[],TensorFlow.TFDataType[],System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RemoteFusedGraphExecute(TFOutput[], TFDataType[], String, String)
  nameWithType: TFGraph.RemoteFusedGraphExecute(TFOutput[], TFDataType[], String, String)
  fullName: TFGraph.RemoteFusedGraphExecute(TFOutput[], TFDataType[], String, String)
- uid: TensorFlow.TFGraph.RepeatDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RepeatDataset(TFOutput, TFOutput, TFDataType[], TFShape[], String)
  nameWithType: TFGraph.RepeatDataset(TFOutput, TFOutput, TFDataType[], TFShape[], String)
  fullName: TFGraph.RepeatDataset(TFOutput, TFOutput, TFDataType[], TFShape[], String)
- uid: TensorFlow.TFGraph.RequantizationRange(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RequantizationRange(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.RequantizationRange(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.RequantizationRange(TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.Requantize(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Requantize(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFDataType, String)
  nameWithType: TFGraph.Requantize(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFDataType, String)
  fullName: TFGraph.Requantize(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFDataType, String)
- uid: TensorFlow.TFGraph.Reshape(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Reshape(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Reshape(TFOutput, TFOutput, String)
  fullName: TFGraph.Reshape(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.ResizeArea(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResizeArea(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResizeArea(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResizeArea(TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.ResizeBicubic(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResizeBicubic(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResizeBicubic(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResizeBicubic(TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.ResizeBilinear(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResizeBilinear(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResizeBilinear(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResizeBilinear(TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.ResizeBilinearGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResizeBilinearGrad(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResizeBilinearGrad(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResizeBilinearGrad(TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.ResizeNearestNeighbor(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResizeNearestNeighbor(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResizeNearestNeighbor(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResizeNearestNeighbor(TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.ResizeNearestNeighborGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResizeNearestNeighborGrad(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResizeNearestNeighborGrad(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResizeNearestNeighborGrad(TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.ResourceApplyAdadelta(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceApplyAdadelta(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceApplyAdadelta(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceApplyAdadelta(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.ResourceApplyAdagrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceApplyAdagrad(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceApplyAdagrad(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceApplyAdagrad(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.ResourceApplyAdagradDA(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceApplyAdagradDA(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceApplyAdagradDA(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceApplyAdagradDA(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.ResourceApplyAdam(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceApplyAdam(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceApplyAdam(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceApplyAdam(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.ResourceApplyCenteredRMSProp(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceApplyCenteredRMSProp(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceApplyCenteredRMSProp(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceApplyCenteredRMSProp(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.ResourceApplyFtrl(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceApplyFtrl(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceApplyFtrl(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceApplyFtrl(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.ResourceApplyGradientDescent(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceApplyGradientDescent(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceApplyGradientDescent(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceApplyGradientDescent(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.ResourceApplyMomentum(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceApplyMomentum(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceApplyMomentum(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceApplyMomentum(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.ResourceApplyProximalAdagrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceApplyProximalAdagrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceApplyProximalAdagrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceApplyProximalAdagrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.ResourceApplyProximalGradientDescent(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceApplyProximalGradientDescent(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceApplyProximalGradientDescent(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceApplyProximalGradientDescent(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.ResourceApplyRMSProp(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceApplyRMSProp(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceApplyRMSProp(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceApplyRMSProp(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.ResourceGather(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceGather(TFOutput, TFOutput, TFDataType, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceGather(TFOutput, TFOutput, TFDataType, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceGather(TFOutput, TFOutput, TFDataType, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.ResourceScatterAdd(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceScatterAdd(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.ResourceScatterAdd(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.ResourceScatterAdd(TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.ResourceSparseApplyAdadelta(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceSparseApplyAdadelta(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceSparseApplyAdadelta(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceSparseApplyAdadelta(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.ResourceSparseApplyAdagrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceSparseApplyAdagrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceSparseApplyAdagrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceSparseApplyAdagrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.ResourceSparseApplyAdagradDA(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceSparseApplyAdagradDA(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceSparseApplyAdagradDA(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceSparseApplyAdagradDA(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.ResourceSparseApplyCenteredRMSProp(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceSparseApplyCenteredRMSProp(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceSparseApplyCenteredRMSProp(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceSparseApplyCenteredRMSProp(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.ResourceSparseApplyFtrl(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceSparseApplyFtrl(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceSparseApplyFtrl(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceSparseApplyFtrl(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.ResourceSparseApplyMomentum(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceSparseApplyMomentum(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceSparseApplyMomentum(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceSparseApplyMomentum(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.ResourceSparseApplyProximalAdagrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceSparseApplyProximalAdagrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceSparseApplyProximalAdagrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceSparseApplyProximalAdagrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.ResourceSparseApplyProximalGradientDescent(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceSparseApplyProximalGradientDescent(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceSparseApplyProximalGradientDescent(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceSparseApplyProximalGradientDescent(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.ResourceSparseApplyRMSProp(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceSparseApplyRMSProp(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.ResourceSparseApplyRMSProp(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.ResourceSparseApplyRMSProp(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.ResourceStridedSliceAssign(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceStridedSliceAssign(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.ResourceStridedSliceAssign(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.ResourceStridedSliceAssign(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.Restore(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Restore(TFOutput, TFOutput, TFDataType, Nullable<Int64>, String)
  nameWithType: TFGraph.Restore(TFOutput, TFOutput, TFDataType, Nullable<Int64>, String)
  fullName: TFGraph.Restore(TFOutput, TFOutput, TFDataType, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.RestoreSlice(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RestoreSlice(TFOutput, TFOutput, TFOutput, TFDataType, Nullable<Int64>, String)
  nameWithType: TFGraph.RestoreSlice(TFOutput, TFOutput, TFOutput, TFDataType, Nullable<Int64>, String)
  fullName: TFGraph.RestoreSlice(TFOutput, TFOutput, TFOutput, TFDataType, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.RestoreV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RestoreV2(TFOutput, TFOutput, TFOutput, TFDataType[], String)
  nameWithType: TFGraph.RestoreV2(TFOutput, TFOutput, TFOutput, TFDataType[], String)
  fullName: TFGraph.RestoreV2(TFOutput, TFOutput, TFOutput, TFDataType[], String)
- uid: TensorFlow.TFGraph.Reverse(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Reverse(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Reverse(TFOutput, TFOutput, String)
  fullName: TFGraph.Reverse(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.ReverseSequence(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ReverseSequence(TFOutput, TFOutput, Int64, Nullable<Int64>, String)
  nameWithType: TFGraph.ReverseSequence(TFOutput, TFOutput, Int64, Nullable<Int64>, String)
  fullName: TFGraph.ReverseSequence(TFOutput, TFOutput, Int64, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.ReverseV2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ReverseV2(TFOutput, TFOutput, String)
  nameWithType: TFGraph.ReverseV2(TFOutput, TFOutput, String)
  fullName: TFGraph.ReverseV2(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.RFFT(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RFFT(TFOutput, TFOutput, String)
  nameWithType: TFGraph.RFFT(TFOutput, TFOutput, String)
  fullName: TFGraph.RFFT(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.RFFT2D(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RFFT2D(TFOutput, TFOutput, String)
  nameWithType: TFGraph.RFFT2D(TFOutput, TFOutput, String)
  fullName: TFGraph.RFFT2D(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.RFFT3D(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RFFT3D(TFOutput, TFOutput, String)
  nameWithType: TFGraph.RFFT3D(TFOutput, TFOutput, String)
  fullName: TFGraph.RFFT3D(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.RGBToHSV(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RGBToHSV(TFOutput, String)
  nameWithType: TFGraph.RGBToHSV(TFOutput, String)
  fullName: TFGraph.RGBToHSV(TFOutput, String)
- uid: TensorFlow.TFGraph.Rint(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Rint(TFOutput, String)
  nameWithType: TFGraph.Rint(TFOutput, String)
  fullName: TFGraph.Rint(TFOutput, String)
- uid: TensorFlow.TFGraph.Round(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Round(TFOutput, String)
  nameWithType: TFGraph.Round(TFOutput, String)
  fullName: TFGraph.Round(TFOutput, String)
- uid: TensorFlow.TFGraph.Rsqrt(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Rsqrt(TFOutput, String)
  nameWithType: TFGraph.Rsqrt(TFOutput, String)
  fullName: TFGraph.Rsqrt(TFOutput, String)
- uid: TensorFlow.TFGraph.RsqrtGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RsqrtGrad(TFOutput, TFOutput, String)
  nameWithType: TFGraph.RsqrtGrad(TFOutput, TFOutput, String)
  fullName: TFGraph.RsqrtGrad(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.SampleDistortedBoundingBox(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Single},System.Single[],System.Single[],System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SampleDistortedBoundingBox(TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, Nullable<Single>, Single[], Single[], Nullable<Int64>, Nullable<Boolean>, String)
  nameWithType: TFGraph.SampleDistortedBoundingBox(TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, Nullable<Single>, Single[], Single[], Nullable<Int64>, Nullable<Boolean>, String)
  fullName: TFGraph.SampleDistortedBoundingBox(TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, Nullable<Single>, Single[], Single[], Nullable<Int64>, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.Save(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Save(TFOutput, TFOutput, TFOutput[], String)
  nameWithType: TFGraph.Save(TFOutput, TFOutput, TFOutput[], String)
  fullName: TFGraph.Save(TFOutput, TFOutput, TFOutput[], String)
- uid: TensorFlow.TFGraph.SaveSlices(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SaveSlices(TFOutput, TFOutput, TFOutput, TFOutput[], String)
  nameWithType: TFGraph.SaveSlices(TFOutput, TFOutput, TFOutput, TFOutput[], String)
  fullName: TFGraph.SaveSlices(TFOutput, TFOutput, TFOutput, TFOutput[], String)
- uid: TensorFlow.TFGraph.SaveV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SaveV2(TFOutput, TFOutput, TFOutput, TFOutput[], String)
  nameWithType: TFGraph.SaveV2(TFOutput, TFOutput, TFOutput, TFOutput[], String)
  fullName: TFGraph.SaveV2(TFOutput, TFOutput, TFOutput, TFOutput[], String)
- uid: TensorFlow.TFGraph.ScalarSummary(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ScalarSummary(TFOutput, TFOutput, String)
  nameWithType: TFGraph.ScalarSummary(TFOutput, TFOutput, String)
  fullName: TFGraph.ScalarSummary(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.ScatterNd(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ScatterNd(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.ScatterNd(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.ScatterNd(TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.SdcaFprint(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SdcaFprint(TFOutput, String)
  nameWithType: TFGraph.SdcaFprint(TFOutput, String)
  fullName: TFGraph.SdcaFprint(TFOutput, String)
- uid: TensorFlow.TFGraph.SdcaOptimizer(TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput,System.String,System.Single,System.Single,System.Int64,System.Int64,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SdcaOptimizer(TFOutput[], TFOutput[], TFOutput[], TFOutput[], TFOutput, TFOutput, TFOutput[], TFOutput[], TFOutput[], TFOutput, String, Single, Single, Int64, Int64, Nullable<Boolean>, String)
  nameWithType: TFGraph.SdcaOptimizer(TFOutput[], TFOutput[], TFOutput[], TFOutput[], TFOutput, TFOutput, TFOutput[], TFOutput[], TFOutput[], TFOutput, String, Single, Single, Int64, Int64, Nullable<Boolean>, String)
  fullName: TFGraph.SdcaOptimizer(TFOutput[], TFOutput[], TFOutput[], TFOutput[], TFOutput, TFOutput, TFOutput[], TFOutput[], TFOutput[], TFOutput, String, Single, Single, Int64, Int64, Nullable<Boolean>, String)
- uid: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFOutput[]}
  parent: System
  isExternal: true
  name: ValueTuple<TFOutput,TFOutput[],TFOutput[]>
  nameWithType: ValueTuple<TFOutput,TFOutput[],TFOutput[]>
  fullName: System.ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFOutput[]>
  spec.csharp:
  - uid: System.ValueTuple`3
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TensorFlow.TFGraph.Seed
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Seed
  nameWithType: TFGraph.Seed
  fullName: TFGraph.Seed
- uid: TensorFlow.TFGraph.SegmentMax(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SegmentMax(TFOutput, TFOutput, String)
  nameWithType: TFGraph.SegmentMax(TFOutput, TFOutput, String)
  fullName: TFGraph.SegmentMax(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.SegmentMean(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SegmentMean(TFOutput, TFOutput, String)
  nameWithType: TFGraph.SegmentMean(TFOutput, TFOutput, String)
  fullName: TFGraph.SegmentMean(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.SegmentMin(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SegmentMin(TFOutput, TFOutput, String)
  nameWithType: TFGraph.SegmentMin(TFOutput, TFOutput, String)
  fullName: TFGraph.SegmentMin(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.SegmentProd(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SegmentProd(TFOutput, TFOutput, String)
  nameWithType: TFGraph.SegmentProd(TFOutput, TFOutput, String)
  fullName: TFGraph.SegmentProd(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.SegmentSum(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SegmentSum(TFOutput, TFOutput, String)
  nameWithType: TFGraph.SegmentSum(TFOutput, TFOutput, String)
  fullName: TFGraph.SegmentSum(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.Select(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Select(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.Select(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.Select(TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.SelfAdjointEig(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SelfAdjointEig(TFOutput, String)
  nameWithType: TFGraph.SelfAdjointEig(TFOutput, String)
  fullName: TFGraph.SelfAdjointEig(TFOutput, String)
- uid: TensorFlow.TFGraph.SelfAdjointEigV2(TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SelfAdjointEigV2(TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.SelfAdjointEigV2(TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.SelfAdjointEigV2(TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.SerializeManySparse(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SerializeManySparse(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SerializeManySparse(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SerializeManySparse(TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.SerializeSparse(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SerializeSparse(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SerializeSparse(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SerializeSparse(TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.SetSize(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SetSize(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.SetSize(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.SetSize(TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.SetTensorShape(TensorFlow.TFOutput,System.Int64[],TensorFlow.TFStatus)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SetTensorShape(TFOutput, Int64[], TFStatus)
  nameWithType: TFGraph.SetTensorShape(TFOutput, Int64[], TFStatus)
  fullName: TFGraph.SetTensorShape(TFOutput, Int64[], TFStatus)
- uid: TensorFlow.TFGraph.Shape(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Shape(TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.Shape(TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.Shape(TFOutput, Nullable<TFDataType>, String)
- uid: TensorFlow.TFGraph.ShapeN(TensorFlow.TFOutput[],System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ShapeN(TFOutput[], Nullable<TFDataType>, String)
  nameWithType: TFGraph.ShapeN(TFOutput[], Nullable<TFDataType>, String)
  fullName: TFGraph.ShapeN(TFOutput[], Nullable<TFDataType>, String)
- uid: TensorFlow.TFGraph.ShardedFilename(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ShardedFilename(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.ShardedFilename(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.ShardedFilename(TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.ShardedFilespec(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ShardedFilespec(TFOutput, TFOutput, String)
  nameWithType: TFGraph.ShardedFilespec(TFOutput, TFOutput, String)
  fullName: TFGraph.ShardedFilespec(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.ShuffleDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ShuffleDataset(TFOutput, TFOutput, TFOutput, TFOutput, TFDataType[], TFShape[], String)
  nameWithType: TFGraph.ShuffleDataset(TFOutput, TFOutput, TFOutput, TFOutput, TFDataType[], TFShape[], String)
  fullName: TFGraph.ShuffleDataset(TFOutput, TFOutput, TFOutput, TFOutput, TFDataType[], TFShape[], String)
- uid: TensorFlow.TFGraph.Sigmoid(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Sigmoid(TFOutput, String)
  nameWithType: TFGraph.Sigmoid(TFOutput, String)
  fullName: TFGraph.Sigmoid(TFOutput, String)
- uid: TensorFlow.TFGraph.SigmoidGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SigmoidGrad(TFOutput, TFOutput, String)
  nameWithType: TFGraph.SigmoidGrad(TFOutput, TFOutput, String)
  fullName: TFGraph.SigmoidGrad(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.Sign(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Sign(TFOutput, String)
  nameWithType: TFGraph.Sign(TFOutput, String)
  fullName: TFGraph.Sign(TFOutput, String)
- uid: TensorFlow.TFGraph.Sin(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Sin(TFOutput, String)
  nameWithType: TFGraph.Sin(TFOutput, String)
  fullName: TFGraph.Sin(TFOutput, String)
- uid: TensorFlow.TFGraph.Sinh(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Sinh(TFOutput, String)
  nameWithType: TFGraph.Sinh(TFOutput, String)
  fullName: TFGraph.Sinh(TFOutput, String)
- uid: TensorFlow.TFGraph.Size(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Size(TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.Size(TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.Size(TFOutput, Nullable<TFDataType>, String)
- uid: TensorFlow.TFGraph.SkipDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SkipDataset(TFOutput, TFOutput, TFDataType[], TFShape[], String)
  nameWithType: TFGraph.SkipDataset(TFOutput, TFOutput, TFDataType[], TFShape[], String)
  fullName: TFGraph.SkipDataset(TFOutput, TFOutput, TFDataType[], TFShape[], String)
- uid: TensorFlow.TFGraph.Skipgram(System.String,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Single},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Skipgram(String, Int64, Nullable<Int64>, Nullable<Int64>, Nullable<Single>, String)
  nameWithType: TFGraph.Skipgram(String, Int64, Nullable<Int64>, Nullable<Int64>, Nullable<Single>, String)
  fullName: TFGraph.Skipgram(String, Int64, Nullable<Int64>, Nullable<Int64>, Nullable<Single>, String)
- uid: System.ValueTuple`7
  name: ValueTuple
  nameWithType: ValueTuple
  fullName: System.ValueTuple
- uid: System.ValueTuple{TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput}
  parent: System
  isExternal: true
  name: ValueTuple<TFOutput,TFOutput,TFOutput,TFOutput,TFOutput,TFOutput,TFOutput>
  nameWithType: ValueTuple<TFOutput,TFOutput,TFOutput,TFOutput,TFOutput,TFOutput,TFOutput>
  fullName: System.ValueTuple<TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput>
  spec.csharp:
  - uid: System.ValueTuple`7
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TensorFlow.TFGraph.Slice(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Slice(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.Slice(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.Slice(TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.Softmax(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Softmax(TFOutput, String)
  nameWithType: TFGraph.Softmax(TFOutput, String)
  fullName: TFGraph.Softmax(TFOutput, String)
- uid: TensorFlow.TFGraph.SoftmaxCrossEntropyWithLogits(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SoftmaxCrossEntropyWithLogits(TFOutput, TFOutput, String)
  nameWithType: TFGraph.SoftmaxCrossEntropyWithLogits(TFOutput, TFOutput, String)
  fullName: TFGraph.SoftmaxCrossEntropyWithLogits(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.Softplus(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Softplus(TFOutput, String)
  nameWithType: TFGraph.Softplus(TFOutput, String)
  fullName: TFGraph.Softplus(TFOutput, String)
- uid: TensorFlow.TFGraph.SoftplusGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SoftplusGrad(TFOutput, TFOutput, String)
  nameWithType: TFGraph.SoftplusGrad(TFOutput, TFOutput, String)
  fullName: TFGraph.SoftplusGrad(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.Softsign(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Softsign(TFOutput, String)
  nameWithType: TFGraph.Softsign(TFOutput, String)
  fullName: TFGraph.Softsign(TFOutput, String)
- uid: TensorFlow.TFGraph.SoftsignGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SoftsignGrad(TFOutput, TFOutput, String)
  nameWithType: TFGraph.SoftsignGrad(TFOutput, TFOutput, String)
  fullName: TFGraph.SoftsignGrad(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.SpaceToBatch(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SpaceToBatch(TFOutput, TFOutput, Int64, String)
  nameWithType: TFGraph.SpaceToBatch(TFOutput, TFOutput, Int64, String)
  fullName: TFGraph.SpaceToBatch(TFOutput, TFOutput, Int64, String)
- uid: TensorFlow.TFGraph.SpaceToBatchND(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SpaceToBatchND(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SpaceToBatchND(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SpaceToBatchND(TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.SpaceToDepth(TensorFlow.TFOutput,System.Int64,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SpaceToDepth(TFOutput, Int64, String)
  nameWithType: TFGraph.SpaceToDepth(TFOutput, Int64, String)
  fullName: TFGraph.SpaceToDepth(TFOutput, Int64, String)
- uid: TensorFlow.TFGraph.SparseAdd(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseAdd(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseAdd(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseAdd(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.SparseAddGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseAddGrad(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseAddGrad(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseAddGrad(TFOutput, TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.SparseConcat(TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],System.Int64,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseConcat(TFOutput[], TFOutput[], TFOutput[], Int64, String)
  nameWithType: TFGraph.SparseConcat(TFOutput[], TFOutput[], TFOutput[], Int64, String)
  fullName: TFGraph.SparseConcat(TFOutput[], TFOutput[], TFOutput[], Int64, String)
- uid: TensorFlow.TFGraph.SparseCross(TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],System.Boolean,System.Int64,System.Int64,TensorFlow.TFDataType,TensorFlow.TFDataType,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseCross(TFOutput[], TFOutput[], TFOutput[], TFOutput[], Boolean, Int64, Int64, TFDataType, TFDataType, String)
  nameWithType: TFGraph.SparseCross(TFOutput[], TFOutput[], TFOutput[], TFOutput[], Boolean, Int64, Int64, TFDataType, TFDataType, String)
  fullName: TFGraph.SparseCross(TFOutput[], TFOutput[], TFOutput[], TFOutput[], Boolean, Int64, Int64, TFDataType, TFDataType, String)
- uid: TensorFlow.TFGraph.SparseDenseCwiseAdd(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseDenseCwiseAdd(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseDenseCwiseAdd(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseDenseCwiseAdd(TFOutput, TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.SparseDenseCwiseDiv(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseDenseCwiseDiv(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseDenseCwiseDiv(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseDenseCwiseDiv(TFOutput, TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.SparseDenseCwiseMul(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseDenseCwiseMul(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseDenseCwiseMul(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseDenseCwiseMul(TFOutput, TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.SparseFillEmptyRows(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseFillEmptyRows(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseFillEmptyRows(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseFillEmptyRows(TFOutput, TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.SparseFillEmptyRowsGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseFillEmptyRowsGrad(TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseFillEmptyRowsGrad(TFOutput, TFOutput, String)
  fullName: TFGraph.SparseFillEmptyRowsGrad(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.SparseMatMul(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseMatMul(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, String)
  nameWithType: TFGraph.SparseMatMul(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, String)
  fullName: TFGraph.SparseMatMul(TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.SparseReduceMax(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseReduceMax(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.SparseReduceMax(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.SparseReduceMax(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.SparseReduceMaxSparse(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseReduceMaxSparse(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.SparseReduceMaxSparse(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.SparseReduceMaxSparse(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.SparseReduceSum(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseReduceSum(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.SparseReduceSum(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.SparseReduceSum(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.SparseReduceSumSparse(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseReduceSumSparse(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.SparseReduceSumSparse(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.SparseReduceSumSparse(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.SparseReorder(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseReorder(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseReorder(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseReorder(TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.SparseReshape(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseReshape(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseReshape(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseReshape(TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.SparseSegmentMean(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseSegmentMean(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseSegmentMean(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseSegmentMean(TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.SparseSegmentMeanGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseSegmentMeanGrad(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseSegmentMeanGrad(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseSegmentMeanGrad(TFOutput, TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.SparseSegmentSqrtN(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseSegmentSqrtN(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseSegmentSqrtN(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseSegmentSqrtN(TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.SparseSegmentSqrtNGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseSegmentSqrtNGrad(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseSegmentSqrtNGrad(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseSegmentSqrtNGrad(TFOutput, TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.SparseSegmentSum(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseSegmentSum(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseSegmentSum(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseSegmentSum(TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.SparseSoftmax(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseSoftmax(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseSoftmax(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseSoftmax(TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.SparseSoftmaxCrossEntropyWithLogits(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseSoftmaxCrossEntropyWithLogits(TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseSoftmaxCrossEntropyWithLogits(TFOutput, TFOutput, String)
  fullName: TFGraph.SparseSoftmaxCrossEntropyWithLogits(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.SparseSparseMaximum(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseSparseMaximum(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseSparseMaximum(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseSparseMaximum(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.SparseSparseMinimum(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseSparseMinimum(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseSparseMinimum(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseSparseMinimum(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.SparseSplit(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseSplit(TFOutput, TFOutput, TFOutput, TFOutput, Int64, String)
  nameWithType: TFGraph.SparseSplit(TFOutput, TFOutput, TFOutput, TFOutput, Int64, String)
  fullName: TFGraph.SparseSplit(TFOutput, TFOutput, TFOutput, TFOutput, Int64, String)
- uid: System.ValueTuple{TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[]}
  parent: System
  isExternal: true
  name: ValueTuple<TFOutput[],TFOutput[],TFOutput[]>
  nameWithType: ValueTuple<TFOutput[],TFOutput[],TFOutput[]>
  fullName: System.ValueTuple<TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[]>
  spec.csharp:
  - uid: System.ValueTuple`3
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TensorFlow.TFOutput
    name: TFOutput
    nameWithType: TFOutput
    fullName: TensorFlow.TFOutput
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TensorFlow.TFGraph.SparseTensorDenseAdd(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseTensorDenseAdd(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseTensorDenseAdd(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseTensorDenseAdd(TFOutput, TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.SparseTensorDenseMatMul(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseTensorDenseMatMul(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  nameWithType: TFGraph.SparseTensorDenseMatMul(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  fullName: TFGraph.SparseTensorDenseMatMul(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.SparseTensorSliceDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseTensorSliceDataset(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.SparseTensorSliceDataset(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.SparseTensorSliceDataset(TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.SparseToDense(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseToDense(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.SparseToDense(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.SparseToDense(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.SparseToSparseSetOperation(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseToSparseSetOperation(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, String, Nullable<Boolean>, String)
  nameWithType: TFGraph.SparseToSparseSetOperation(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, String, Nullable<Boolean>, String)
  fullName: TFGraph.SparseToSparseSetOperation(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, String, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.Split(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Split(TFOutput, TFOutput, Int64, String)
  nameWithType: TFGraph.Split(TFOutput, TFOutput, Int64, String)
  fullName: TFGraph.Split(TFOutput, TFOutput, Int64, String)
- uid: TensorFlow.TFGraph.SplitV(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Int64,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SplitV(TFOutput, TFOutput, TFOutput, Int64, String)
  nameWithType: TFGraph.SplitV(TFOutput, TFOutput, TFOutput, Int64, String)
  fullName: TFGraph.SplitV(TFOutput, TFOutput, TFOutput, Int64, String)
- uid: TensorFlow.TFGraph.Sqrt(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Sqrt(TFOutput, String)
  nameWithType: TFGraph.Sqrt(TFOutput, String)
  fullName: TFGraph.Sqrt(TFOutput, String)
- uid: TensorFlow.TFGraph.SqrtGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SqrtGrad(TFOutput, TFOutput, String)
  nameWithType: TFGraph.SqrtGrad(TFOutput, TFOutput, String)
  fullName: TFGraph.SqrtGrad(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.Square(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Square(TFOutput, String)
  nameWithType: TFGraph.Square(TFOutput, String)
  fullName: TFGraph.Square(TFOutput, String)
- uid: TensorFlow.TFGraph.SquaredDifference(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SquaredDifference(TFOutput, TFOutput, String)
  nameWithType: TFGraph.SquaredDifference(TFOutput, TFOutput, String)
  fullName: TFGraph.SquaredDifference(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.Squeeze(TensorFlow.TFOutput,System.Int64[],System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Squeeze(TFOutput, Int64[], String)
  nameWithType: TFGraph.Squeeze(TFOutput, Int64[], String)
  fullName: TFGraph.Squeeze(TFOutput, Int64[], String)
- uid: TensorFlow.TFGraph.Stage(TensorFlow.TFOutput[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Stage(TFOutput[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.Stage(TFOutput[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.Stage(TFOutput[], Nullable<Int64>, Nullable<Int64>, String, String, String)
- uid: TensorFlow.TFGraph.Stage(TensorFlow.TFOutput[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Stage(TFOutput[], String, String, String)
  nameWithType: TFGraph.Stage(TFOutput[], String, String, String)
  fullName: TFGraph.Stage(TFOutput[], String, String, String)
- uid: TensorFlow.TFGraph.StageClear(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: StageClear(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.StageClear(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.StageClear(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
- uid: TensorFlow.TFGraph.StagePeek(TensorFlow.TFOutput,TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: StagePeek(TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.StagePeek(TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.StagePeek(TFOutput, TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
- uid: TensorFlow.TFGraph.StageSize(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: StageSize(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.StageSize(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.StageSize(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
- uid: TensorFlow.TFGraph.StatelessRandomNormal(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: StatelessRandomNormal(TFOutput, TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.StatelessRandomNormal(TFOutput, TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.StatelessRandomNormal(TFOutput, TFOutput, Nullable<TFDataType>, String)
- uid: TensorFlow.TFGraph.StatelessRandomUniform(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: StatelessRandomUniform(TFOutput, TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.StatelessRandomUniform(TFOutput, TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.StatelessRandomUniform(TFOutput, TFOutput, Nullable<TFDataType>, String)
- uid: TensorFlow.TFGraph.StatelessTruncatedNormal(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: StatelessTruncatedNormal(TFOutput, TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.StatelessTruncatedNormal(TFOutput, TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.StatelessTruncatedNormal(TFOutput, TFOutput, Nullable<TFDataType>, String)
- uid: TensorFlow.TFGraph.StopGradient(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: StopGradient(TFOutput, String)
  nameWithType: TFGraph.StopGradient(TFOutput, String)
  fullName: TFGraph.StopGradient(TFOutput, String)
- uid: TensorFlow.TFGraph.StridedSlice(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: StridedSlice(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.StridedSlice(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.StridedSlice(TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.StridedSliceGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: StridedSliceGrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.StridedSliceGrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.StridedSliceGrad(TFOutput, TFOutput, TFOutput, TFOutput, TFOutput, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.StringJoin(TensorFlow.TFOutput[],System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: StringJoin(TFOutput[], String, String)
  nameWithType: TFGraph.StringJoin(TFOutput[], String, String)
  fullName: TFGraph.StringJoin(TFOutput[], String, String)
- uid: TensorFlow.TFGraph.StringSplit(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: StringSplit(TFOutput, TFOutput, String)
  nameWithType: TFGraph.StringSplit(TFOutput, TFOutput, String)
  fullName: TFGraph.StringSplit(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.StringToHashBucket(TensorFlow.TFOutput,System.Int64,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: StringToHashBucket(TFOutput, Int64, String)
  nameWithType: TFGraph.StringToHashBucket(TFOutput, Int64, String)
  fullName: TFGraph.StringToHashBucket(TFOutput, Int64, String)
- uid: TensorFlow.TFGraph.StringToHashBucketFast(TensorFlow.TFOutput,System.Int64,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: StringToHashBucketFast(TFOutput, Int64, String)
  nameWithType: TFGraph.StringToHashBucketFast(TFOutput, Int64, String)
  fullName: TFGraph.StringToHashBucketFast(TFOutput, Int64, String)
- uid: TensorFlow.TFGraph.StringToHashBucketStrong(TensorFlow.TFOutput,System.Int64,System.Int64[],System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: StringToHashBucketStrong(TFOutput, Int64, Int64[], String)
  nameWithType: TFGraph.StringToHashBucketStrong(TFOutput, Int64, Int64[], String)
  fullName: TFGraph.StringToHashBucketStrong(TFOutput, Int64, Int64[], String)
- uid: TensorFlow.TFGraph.StringToNumber(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: StringToNumber(TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.StringToNumber(TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.StringToNumber(TFOutput, Nullable<TFDataType>, String)
- uid: TensorFlow.TFGraph.Sub(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Sub(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Sub(TFOutput, TFOutput, String)
  fullName: TFGraph.Sub(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.Substr(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Substr(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.Substr(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.Substr(TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.Sum(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Sum(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.Sum(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.Sum(TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.Svd(TensorFlow.TFOutput,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Svd(TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  nameWithType: TFGraph.Svd(TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
  fullName: TFGraph.Svd(TFOutput, Nullable<Boolean>, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.Switch(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Switch(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Switch(TFOutput, TFOutput, String)
  fullName: TFGraph.Switch(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.TakeDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TakeDataset(TFOutput, TFOutput, TFDataType[], TFShape[], String)
  nameWithType: TFGraph.TakeDataset(TFOutput, TFOutput, TFDataType[], TFShape[], String)
  fullName: TFGraph.TakeDataset(TFOutput, TFOutput, TFDataType[], TFShape[], String)
- uid: TensorFlow.TFGraph.TakeManySparseFromTensorsMap(TensorFlow.TFOutput,TensorFlow.TFDataType,System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TakeManySparseFromTensorsMap(TFOutput, TFDataType, String, String, String)
  nameWithType: TFGraph.TakeManySparseFromTensorsMap(TFOutput, TFDataType, String, String, String)
  fullName: TFGraph.TakeManySparseFromTensorsMap(TFOutput, TFDataType, String, String, String)
- uid: TensorFlow.TFGraph.Tan(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Tan(TFOutput, String)
  nameWithType: TFGraph.Tan(TFOutput, String)
  fullName: TFGraph.Tan(TFOutput, String)
- uid: TensorFlow.TFGraph.Tanh(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Tanh(TFOutput, String)
  nameWithType: TFGraph.Tanh(TFOutput, String)
  fullName: TFGraph.Tanh(TFOutput, String)
- uid: TensorFlow.TFGraph.TanhGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TanhGrad(TFOutput, TFOutput, String)
  nameWithType: TFGraph.TanhGrad(TFOutput, TFOutput, String)
  fullName: TFGraph.TanhGrad(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.TensorArrayCloseV2(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArrayCloseV2(TFOutput, String)
  nameWithType: TFGraph.TensorArrayCloseV2(TFOutput, String)
  fullName: TFGraph.TensorArrayCloseV2(TFOutput, String)
- uid: TensorFlow.TFGraph.TensorArrayCloseV3(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArrayCloseV3(TFOutput, String)
  nameWithType: TFGraph.TensorArrayCloseV3(TFOutput, String)
  fullName: TFGraph.TensorArrayCloseV3(TFOutput, String)
- uid: TensorFlow.TFGraph.TensorArrayConcatV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,TensorFlow.TFShape,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArrayConcatV2(TFOutput, TFOutput, TFDataType, TFShape, String)
  nameWithType: TFGraph.TensorArrayConcatV2(TFOutput, TFOutput, TFDataType, TFShape, String)
  fullName: TFGraph.TensorArrayConcatV2(TFOutput, TFOutput, TFDataType, TFShape, String)
- uid: TensorFlow.TFGraph.TensorArrayConcatV3(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,TensorFlow.TFShape,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArrayConcatV3(TFOutput, TFOutput, TFDataType, TFShape, String)
  nameWithType: TFGraph.TensorArrayConcatV3(TFOutput, TFOutput, TFDataType, TFShape, String)
  fullName: TFGraph.TensorArrayConcatV3(TFOutput, TFOutput, TFDataType, TFShape, String)
- uid: TensorFlow.TFGraph.TensorArrayGatherV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,TensorFlow.TFShape,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArrayGatherV2(TFOutput, TFOutput, TFOutput, TFDataType, TFShape, String)
  nameWithType: TFGraph.TensorArrayGatherV2(TFOutput, TFOutput, TFOutput, TFDataType, TFShape, String)
  fullName: TFGraph.TensorArrayGatherV2(TFOutput, TFOutput, TFOutput, TFDataType, TFShape, String)
- uid: TensorFlow.TFGraph.TensorArrayGatherV3(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,TensorFlow.TFShape,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArrayGatherV3(TFOutput, TFOutput, TFOutput, TFDataType, TFShape, String)
  nameWithType: TFGraph.TensorArrayGatherV3(TFOutput, TFOutput, TFOutput, TFDataType, TFShape, String)
  fullName: TFGraph.TensorArrayGatherV3(TFOutput, TFOutput, TFOutput, TFDataType, TFShape, String)
- uid: TensorFlow.TFGraph.TensorArrayGradV2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArrayGradV2(TFOutput, TFOutput, String, String)
  nameWithType: TFGraph.TensorArrayGradV2(TFOutput, TFOutput, String, String)
  fullName: TFGraph.TensorArrayGradV2(TFOutput, TFOutput, String, String)
- uid: TensorFlow.TFGraph.TensorArrayGradV3(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArrayGradV3(TFOutput, TFOutput, String, String)
  nameWithType: TFGraph.TensorArrayGradV3(TFOutput, TFOutput, String, String)
  fullName: TFGraph.TensorArrayGradV3(TFOutput, TFOutput, String, String)
- uid: TensorFlow.TFGraph.TensorArrayReadV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArrayReadV2(TFOutput, TFOutput, TFOutput, TFDataType, String)
  nameWithType: TFGraph.TensorArrayReadV2(TFOutput, TFOutput, TFOutput, TFDataType, String)
  fullName: TFGraph.TensorArrayReadV2(TFOutput, TFOutput, TFOutput, TFDataType, String)
- uid: TensorFlow.TFGraph.TensorArrayReadV3(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFDataType,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArrayReadV3(TFOutput, TFOutput, TFOutput, TFDataType, String)
  nameWithType: TFGraph.TensorArrayReadV3(TFOutput, TFOutput, TFOutput, TFDataType, String)
  fullName: TFGraph.TensorArrayReadV3(TFOutput, TFOutput, TFOutput, TFDataType, String)
- uid: TensorFlow.TFGraph.TensorArrayScatterV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArrayScatterV2(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.TensorArrayScatterV2(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.TensorArrayScatterV2(TFOutput, TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.TensorArrayScatterV3(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArrayScatterV3(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.TensorArrayScatterV3(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.TensorArrayScatterV3(TFOutput, TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.TensorArraySizeV2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArraySizeV2(TFOutput, TFOutput, String)
  nameWithType: TFGraph.TensorArraySizeV2(TFOutput, TFOutput, String)
  fullName: TFGraph.TensorArraySizeV2(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.TensorArraySizeV3(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArraySizeV3(TFOutput, TFOutput, String)
  nameWithType: TFGraph.TensorArraySizeV3(TFOutput, TFOutput, String)
  fullName: TFGraph.TensorArraySizeV3(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.TensorArraySplitV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArraySplitV2(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.TensorArraySplitV2(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.TensorArraySplitV2(TFOutput, TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.TensorArraySplitV3(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArraySplitV3(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.TensorArraySplitV3(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.TensorArraySplitV3(TFOutput, TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.TensorArrayV2(TensorFlow.TFOutput,TensorFlow.TFDataType,TensorFlow.TFShape,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArrayV2(TFOutput, TFDataType, TFShape, Nullable<Boolean>, Nullable<Boolean>, String, String)
  nameWithType: TFGraph.TensorArrayV2(TFOutput, TFDataType, TFShape, Nullable<Boolean>, Nullable<Boolean>, String, String)
  fullName: TFGraph.TensorArrayV2(TFOutput, TFDataType, TFShape, Nullable<Boolean>, Nullable<Boolean>, String, String)
- uid: TensorFlow.TFGraph.TensorArrayV3(TensorFlow.TFOutput,TensorFlow.TFDataType,TensorFlow.TFShape,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArrayV3(TFOutput, TFDataType, TFShape, Nullable<Boolean>, Nullable<Boolean>, String, String)
  nameWithType: TFGraph.TensorArrayV3(TFOutput, TFDataType, TFShape, Nullable<Boolean>, Nullable<Boolean>, String, String)
  fullName: TFGraph.TensorArrayV3(TFOutput, TFDataType, TFShape, Nullable<Boolean>, Nullable<Boolean>, String, String)
- uid: TensorFlow.TFGraph.TensorArrayWriteV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArrayWriteV2(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.TensorArrayWriteV2(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.TensorArrayWriteV2(TFOutput, TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.TensorArrayWriteV3(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArrayWriteV3(TFOutput, TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.TensorArrayWriteV3(TFOutput, TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.TensorArrayWriteV3(TFOutput, TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.TensorDataset(TensorFlow.TFOutput[],TensorFlow.TFShape[],System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorDataset(TFOutput[], TFShape[], String)
  nameWithType: TFGraph.TensorDataset(TFOutput[], TFShape[], String)
  fullName: TFGraph.TensorDataset(TFOutput[], TFShape[], String)
- uid: TensorFlow.TFGraph.TensorSliceDataset(TensorFlow.TFOutput[],TensorFlow.TFShape[],System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorSliceDataset(TFOutput[], TFShape[], String)
  nameWithType: TFGraph.TensorSliceDataset(TFOutput[], TFShape[], String)
  fullName: TFGraph.TensorSliceDataset(TFOutput[], TFShape[], String)
- uid: TensorFlow.TFGraph.TensorSummary(TensorFlow.TFOutput,System.String,System.String[],System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorSummary(TFOutput, String, String[], String, String)
  nameWithType: TFGraph.TensorSummary(TFOutput, String, String[], String, String)
  fullName: TFGraph.TensorSummary(TFOutput, String, String[], String, String)
- uid: System.String[]
  parent: System
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: TensorFlow.TFGraph.TensorSummaryV2(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorSummaryV2(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.TensorSummaryV2(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.TensorSummaryV2(TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.TextLineDataset(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TextLineDataset(TFOutput, String)
  nameWithType: TFGraph.TextLineDataset(TFOutput, String)
  fullName: TFGraph.TextLineDataset(TFOutput, String)
- uid: TensorFlow.TFGraph.TextLineReaderV2(System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TextLineReaderV2(Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.TextLineReaderV2(Nullable<Int64>, String, String, String)
  fullName: TFGraph.TextLineReaderV2(Nullable<Int64>, String, String, String)
- uid: TensorFlow.TFGraph.TFRecordDataset(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TFRecordDataset(TFOutput, TFOutput, String)
  nameWithType: TFGraph.TFRecordDataset(TFOutput, TFOutput, String)
  fullName: TFGraph.TFRecordDataset(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.TFRecordReaderV2(System.String,System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TFRecordReaderV2(String, String, String, String)
  nameWithType: TFGraph.TFRecordReaderV2(String, String, String, String)
  fullName: TFGraph.TFRecordReaderV2(String, String, String, String)
- uid: TensorFlow.TFGraph.ThreadUnsafeUnigramCandidateSampler(TensorFlow.TFOutput,System.Int64,System.Int64,System.Boolean,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ThreadUnsafeUnigramCandidateSampler(TFOutput, Int64, Int64, Boolean, Int64, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.ThreadUnsafeUnigramCandidateSampler(TFOutput, Int64, Int64, Boolean, Int64, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.ThreadUnsafeUnigramCandidateSampler(TFOutput, Int64, Int64, Boolean, Int64, Nullable<Int64>, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.Tile(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Tile(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Tile(TFOutput, TFOutput, String)
  fullName: TFGraph.Tile(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.TileGrad(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TileGrad(TFOutput, TFOutput, String)
  nameWithType: TFGraph.TileGrad(TFOutput, TFOutput, String)
  fullName: TFGraph.TileGrad(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.ToGraphDef(TensorFlow.TFBuffer,TensorFlow.TFStatus)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ToGraphDef(TFBuffer, TFStatus)
  nameWithType: TFGraph.ToGraphDef(TFBuffer, TFStatus)
  fullName: TFGraph.ToGraphDef(TFBuffer, TFStatus)
- uid: TensorFlow.TFGraph.TopK(TensorFlow.TFOutput,System.Int64,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TopK(TFOutput, Int64, Nullable<Boolean>, String)
  nameWithType: TFGraph.TopK(TFOutput, Int64, Nullable<Boolean>, String)
  fullName: TFGraph.TopK(TFOutput, Int64, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.TopKV2(TensorFlow.TFOutput,TensorFlow.TFOutput,System.Nullable{System.Boolean},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TopKV2(TFOutput, TFOutput, Nullable<Boolean>, String)
  nameWithType: TFGraph.TopKV2(TFOutput, TFOutput, Nullable<Boolean>, String)
  fullName: TFGraph.TopKV2(TFOutput, TFOutput, Nullable<Boolean>, String)
- uid: TensorFlow.TFGraph.Transpose(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Transpose(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Transpose(TFOutput, TFOutput, String)
  fullName: TFGraph.Transpose(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.TruncateDiv(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TruncateDiv(TFOutput, TFOutput, String)
  nameWithType: TFGraph.TruncateDiv(TFOutput, TFOutput, String)
  fullName: TFGraph.TruncateDiv(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.TruncatedNormal(TensorFlow.TFOutput,TensorFlow.TFDataType,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TruncatedNormal(TFOutput, TFDataType, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.TruncatedNormal(TFOutput, TFDataType, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.TruncatedNormal(TFOutput, TFDataType, Nullable<Int64>, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.TruncateMod(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TruncateMod(TFOutput, TFOutput, String)
  nameWithType: TFGraph.TruncateMod(TFOutput, TFOutput, String)
  fullName: TFGraph.TruncateMod(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.UniformCandidateSampler(TensorFlow.TFOutput,System.Int64,System.Int64,System.Boolean,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: UniformCandidateSampler(TFOutput, Int64, Int64, Boolean, Int64, Nullable<Int64>, Nullable<Int64>, String)
  nameWithType: TFGraph.UniformCandidateSampler(TFOutput, Int64, Int64, Boolean, Int64, Nullable<Int64>, Nullable<Int64>, String)
  fullName: TFGraph.UniformCandidateSampler(TFOutput, Int64, Int64, Boolean, Int64, Nullable<Int64>, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.Unique(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Unique(TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.Unique(TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.Unique(TFOutput, Nullable<TFDataType>, String)
- uid: TensorFlow.TFGraph.UniqueWithCounts(TensorFlow.TFOutput,System.Nullable{TensorFlow.TFDataType},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: UniqueWithCounts(TFOutput, Nullable<TFDataType>, String)
  nameWithType: TFGraph.UniqueWithCounts(TFOutput, Nullable<TFDataType>, String)
  fullName: TFGraph.UniqueWithCounts(TFOutput, Nullable<TFDataType>, String)
- uid: TensorFlow.TFGraph.Unpack(TensorFlow.TFOutput,System.Int64,System.Nullable{System.Int64},System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Unpack(TFOutput, Int64, Nullable<Int64>, String)
  nameWithType: TFGraph.Unpack(TFOutput, Int64, Nullable<Int64>, String)
  fullName: TFGraph.Unpack(TFOutput, Int64, Nullable<Int64>, String)
- uid: TensorFlow.TFGraph.UnsortedSegmentMax(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: UnsortedSegmentMax(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.UnsortedSegmentMax(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.UnsortedSegmentMax(TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.UnsortedSegmentSum(TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: UnsortedSegmentSum(TFOutput, TFOutput, TFOutput, String)
  nameWithType: TFGraph.UnsortedSegmentSum(TFOutput, TFOutput, TFOutput, String)
  fullName: TFGraph.UnsortedSegmentSum(TFOutput, TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.Unstage(TensorFlow.TFDataType[],System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Unstage(TFDataType[], String, String, String)
  nameWithType: TFGraph.Unstage(TFDataType[], String, String, String)
  fullName: TFGraph.Unstage(TFDataType[], String, String, String)
- uid: TensorFlow.TFGraph.Unstage(TensorFlow.TFDataType[],System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Unstage(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: TFGraph.Unstage(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: TFGraph.Unstage(TFDataType[], Nullable<Int64>, Nullable<Int64>, String, String, String)
- uid: TensorFlow.TFGraph.VarHandleOp(TensorFlow.TFDataType,TensorFlow.TFShape,System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: VarHandleOp(TFDataType, TFShape, String, String, String)
  nameWithType: TFGraph.VarHandleOp(TFDataType, TFShape, String, String, String)
  fullName: TFGraph.VarHandleOp(TFDataType, TFShape, String, String, String)
- uid: TensorFlow.TFGraph.Variable(TensorFlow.TFOutput,TensorFlow.TFOutput@,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Variable(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Variable(TFOutput, TFOutput, String)
  fullName: TFGraph.Variable(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.Variable(TensorFlow.TFOutput,TensorFlow.TFOperation@,TensorFlow.TFOutput@,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Variable(TFOutput, TFOperation, TFOutput, String)
  nameWithType: TFGraph.Variable(TFOutput, TFOperation, TFOutput, String)
  fullName: TFGraph.Variable(TFOutput, TFOperation, TFOutput, String)
- uid: TensorFlow.TFGraph.Variable(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Variable(TFOutput, String)
  nameWithType: TFGraph.Variable(TFOutput, String)
  fullName: TFGraph.Variable(TFOutput, String)
- uid: TensorFlow.TFGraph.VarIsInitializedOp(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: VarIsInitializedOp(TFOutput, String)
  nameWithType: TFGraph.VarIsInitializedOp(TFOutput, String)
  fullName: TFGraph.VarIsInitializedOp(TFOutput, String)
- uid: TensorFlow.TFGraph.Where(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Where(TFOutput, String)
  nameWithType: TFGraph.Where(TFOutput, String)
  fullName: TFGraph.Where(TFOutput, String)
- uid: TensorFlow.TFGraph.While(TensorFlow.TFOutput[],TensorFlow.TFGraph.WhileConstructor,TensorFlow.TFStatus)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: While(TFOutput[], TFGraph+WhileConstructor, TFStatus)
  nameWithType: TFGraph.While(TFOutput[], TFGraph+WhileConstructor, TFStatus)
  fullName: TFGraph.While(TFOutput[], TFGraph+WhileConstructor, TFStatus)
- uid: TensorFlow.TFGraph
  parent: TensorFlow
  isExternal: false
  name: TFGraph
  nameWithType: TFGraph
  fullName: TensorFlow.TFGraph+WhileConstructor
- uid: TensorFlow.TFGraph.WholeFileReaderV2(System.String,System.String,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: WholeFileReaderV2(String, String, String)
  nameWithType: TFGraph.WholeFileReaderV2(String, String, String)
  fullName: TFGraph.WholeFileReaderV2(String, String, String)
- uid: TensorFlow.TFGraph.WithScope(System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: WithScope(String)
  nameWithType: TFGraph.WithScope(String)
  fullName: TFGraph.WithScope(String)
- uid: TensorFlow.TFScope
  parent: TensorFlow
  isExternal: false
  name: TFScope
  nameWithType: TFScope
  fullName: TensorFlow.TFScope
- uid: TensorFlow.TFGraph.WriteFile(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: WriteFile(TFOutput, TFOutput, String)
  nameWithType: TFGraph.WriteFile(TFOutput, TFOutput, String)
  fullName: TFGraph.WriteFile(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.ZerosLike(TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ZerosLike(TFOutput, String)
  nameWithType: TFGraph.ZerosLike(TFOutput, String)
  fullName: TFGraph.ZerosLike(TFOutput, String)
- uid: TensorFlow.TFGraph.Zeta(TensorFlow.TFOutput,TensorFlow.TFOutput,System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Zeta(TFOutput, TFOutput, String)
  nameWithType: TFGraph.Zeta(TFOutput, TFOutput, String)
  fullName: TFGraph.Zeta(TFOutput, TFOutput, String)
- uid: TensorFlow.TFGraph.ZipDataset(TensorFlow.TFOutput[],TensorFlow.TFDataType[],TensorFlow.TFShape[],System.String)
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ZipDataset(TFOutput[], TFDataType[], TFShape[], String)
  nameWithType: TFGraph.ZipDataset(TFOutput[], TFDataType[], TFShape[], String)
  fullName: TFGraph.ZipDataset(TFOutput[], TFDataType[], TFShape[], String)
- uid: TensorFlow.TFGraph.#ctor*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TFGraph
  nameWithType: TFGraph.TFGraph
  fullName: TFGraph.TFGraph
- uid: TensorFlow.TFGraph.Abort*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Abort
  nameWithType: TFGraph.Abort
  fullName: TFGraph.Abort
- uid: TensorFlow.TFGraph.Abs*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Abs
  nameWithType: TFGraph.Abs
  fullName: TFGraph.Abs
- uid: TensorFlow.TFGraph.Acos*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Acos
  nameWithType: TFGraph.Acos
  fullName: TFGraph.Acos
- uid: TensorFlow.TFGraph.Add*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Add
  nameWithType: TFGraph.Add
  fullName: TFGraph.Add
- uid: TensorFlow.TFGraph.AddGradients*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AddGradients
  nameWithType: TFGraph.AddGradients
  fullName: TFGraph.AddGradients
- uid: TensorFlow.TFGraph.AddInitVariable*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AddInitVariable
  nameWithType: TFGraph.AddInitVariable
  fullName: TFGraph.AddInitVariable
- uid: TensorFlow.TFGraph.AddManySparseToTensorsMap*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AddManySparseToTensorsMap
  nameWithType: TFGraph.AddManySparseToTensorsMap
  fullName: TFGraph.AddManySparseToTensorsMap
- uid: TensorFlow.TFGraph.AddN*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AddN
  nameWithType: TFGraph.AddN
  fullName: TFGraph.AddN
- uid: TensorFlow.TFGraph.AddSparseToTensorsMap*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AddSparseToTensorsMap
  nameWithType: TFGraph.AddSparseToTensorsMap
  fullName: TFGraph.AddSparseToTensorsMap
- uid: TensorFlow.TFGraph.AdjustContrast*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AdjustContrast
  nameWithType: TFGraph.AdjustContrast
  fullName: TFGraph.AdjustContrast
- uid: TensorFlow.TFGraph.AdjustContrastv2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AdjustContrastv2
  nameWithType: TFGraph.AdjustContrastv2
  fullName: TFGraph.AdjustContrastv2
- uid: TensorFlow.TFGraph.AdjustHue*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AdjustHue
  nameWithType: TFGraph.AdjustHue
  fullName: TFGraph.AdjustHue
- uid: TensorFlow.TFGraph.AdjustSaturation*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AdjustSaturation
  nameWithType: TFGraph.AdjustSaturation
  fullName: TFGraph.AdjustSaturation
- uid: TensorFlow.TFGraph.All*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: All
  nameWithType: TFGraph.All
  fullName: TFGraph.All
- uid: TensorFlow.TFGraph.AllCandidateSampler*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AllCandidateSampler
  nameWithType: TFGraph.AllCandidateSampler
  fullName: TFGraph.AllCandidateSampler
- uid: TensorFlow.TFGraph.Any*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Any
  nameWithType: TFGraph.Any
  fullName: TFGraph.Any
- uid: TensorFlow.TFGraph.ApplyDelayCompensatedGradientDescent*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ApplyDelayCompensatedGradientDescent
  nameWithType: TFGraph.ApplyDelayCompensatedGradientDescent
  fullName: TFGraph.ApplyDelayCompensatedGradientDescent
- uid: TensorFlow.TFGraph.ApproximateEqual*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ApproximateEqual
  nameWithType: TFGraph.ApproximateEqual
  fullName: TFGraph.ApproximateEqual
- uid: TensorFlow.TFGraph.ArgMax*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ArgMax
  nameWithType: TFGraph.ArgMax
  fullName: TFGraph.ArgMax
- uid: TensorFlow.TFGraph.ArgMin*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ArgMin
  nameWithType: TFGraph.ArgMin
  fullName: TFGraph.ArgMin
- uid: TensorFlow.TFGraph.Asin*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Asin
  nameWithType: TFGraph.Asin
  fullName: TFGraph.Asin
- uid: TensorFlow.TFGraph.Assert*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Assert
  nameWithType: TFGraph.Assert
  fullName: TFGraph.Assert
- uid: TensorFlow.TFGraph.AssignAddVariableOp*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AssignAddVariableOp
  nameWithType: TFGraph.AssignAddVariableOp
  fullName: TFGraph.AssignAddVariableOp
- uid: TensorFlow.TFGraph.AssignSubVariableOp*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AssignSubVariableOp
  nameWithType: TFGraph.AssignSubVariableOp
  fullName: TFGraph.AssignSubVariableOp
- uid: TensorFlow.TFGraph.AssignVariableOp*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AssignVariableOp
  nameWithType: TFGraph.AssignVariableOp
  fullName: TFGraph.AssignVariableOp
- uid: TensorFlow.TFGraph.AsString*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AsString
  nameWithType: TFGraph.AsString
  fullName: TFGraph.AsString
- uid: TensorFlow.TFGraph.Atan*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Atan
  nameWithType: TFGraph.Atan
  fullName: TFGraph.Atan
- uid: TensorFlow.TFGraph.Atan2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Atan2
  nameWithType: TFGraph.Atan2
  fullName: TFGraph.Atan2
- uid: TensorFlow.TFGraph.AudioSpectrogram*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AudioSpectrogram
  nameWithType: TFGraph.AudioSpectrogram
  fullName: TFGraph.AudioSpectrogram
- uid: TensorFlow.TFGraph.AudioSummary*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AudioSummary
  nameWithType: TFGraph.AudioSummary
  fullName: TFGraph.AudioSummary
- uid: TensorFlow.TFGraph.AudioSummaryV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AudioSummaryV2
  nameWithType: TFGraph.AudioSummaryV2
  fullName: TFGraph.AudioSummaryV2
- uid: TensorFlow.TFGraph.AvgPool*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AvgPool
  nameWithType: TFGraph.AvgPool
  fullName: TFGraph.AvgPool
- uid: TensorFlow.TFGraph.AvgPool3D*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AvgPool3D
  nameWithType: TFGraph.AvgPool3D
  fullName: TFGraph.AvgPool3D
- uid: TensorFlow.TFGraph.AvgPool3DGrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AvgPool3DGrad
  nameWithType: TFGraph.AvgPool3DGrad
  fullName: TFGraph.AvgPool3DGrad
- uid: TensorFlow.TFGraph.AvgPoolGrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: AvgPoolGrad
  nameWithType: TFGraph.AvgPoolGrad
  fullName: TFGraph.AvgPoolGrad
- uid: TensorFlow.TFGraph.BatchDataset*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: BatchDataset
  nameWithType: TFGraph.BatchDataset
  fullName: TFGraph.BatchDataset
- uid: TensorFlow.TFGraph.BatchMatMul*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: BatchMatMul
  nameWithType: TFGraph.BatchMatMul
  fullName: TFGraph.BatchMatMul
- uid: TensorFlow.TFGraph.BatchNormWithGlobalNormalization*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: BatchNormWithGlobalNormalization
  nameWithType: TFGraph.BatchNormWithGlobalNormalization
  fullName: TFGraph.BatchNormWithGlobalNormalization
- uid: TensorFlow.TFGraph.BatchNormWithGlobalNormalizationGrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: BatchNormWithGlobalNormalizationGrad
  nameWithType: TFGraph.BatchNormWithGlobalNormalizationGrad
  fullName: TFGraph.BatchNormWithGlobalNormalizationGrad
- uid: TensorFlow.TFGraph.BatchToSpace*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: BatchToSpace
  nameWithType: TFGraph.BatchToSpace
  fullName: TFGraph.BatchToSpace
- uid: TensorFlow.TFGraph.BatchToSpaceND*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: BatchToSpaceND
  nameWithType: TFGraph.BatchToSpaceND
  fullName: TFGraph.BatchToSpaceND
- uid: TensorFlow.TFGraph.Betainc*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Betainc
  nameWithType: TFGraph.Betainc
  fullName: TFGraph.Betainc
- uid: TensorFlow.TFGraph.BiasAdd*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: BiasAdd
  nameWithType: TFGraph.BiasAdd
  fullName: TFGraph.BiasAdd
- uid: TensorFlow.TFGraph.BiasAddGrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: BiasAddGrad
  nameWithType: TFGraph.BiasAddGrad
  fullName: TFGraph.BiasAddGrad
- uid: TensorFlow.TFGraph.BiasAddV1*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: BiasAddV1
  nameWithType: TFGraph.BiasAddV1
  fullName: TFGraph.BiasAddV1
- uid: TensorFlow.TFGraph.Bincount*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Bincount
  nameWithType: TFGraph.Bincount
  fullName: TFGraph.Bincount
- uid: TensorFlow.TFGraph.Bitcast*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Bitcast
  nameWithType: TFGraph.Bitcast
  fullName: TFGraph.Bitcast
- uid: TensorFlow.TFGraph.BitwiseAnd*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: BitwiseAnd
  nameWithType: TFGraph.BitwiseAnd
  fullName: TFGraph.BitwiseAnd
- uid: TensorFlow.TFGraph.BitwiseOr*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: BitwiseOr
  nameWithType: TFGraph.BitwiseOr
  fullName: TFGraph.BitwiseOr
- uid: TensorFlow.TFGraph.BitwiseXor*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: BitwiseXor
  nameWithType: TFGraph.BitwiseXor
  fullName: TFGraph.BitwiseXor
- uid: TensorFlow.TFGraph.BroadcastArgs*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: BroadcastArgs
  nameWithType: TFGraph.BroadcastArgs
  fullName: TFGraph.BroadcastArgs
- uid: TensorFlow.TFGraph.BroadcastGradientArgs*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: BroadcastGradientArgs
  nameWithType: TFGraph.BroadcastGradientArgs
  fullName: TFGraph.BroadcastGradientArgs
- uid: TensorFlow.TFGraph.Bucketize*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Bucketize
  nameWithType: TFGraph.Bucketize
  fullName: TFGraph.Bucketize
- uid: TensorFlow.TFGraph.CacheDataset*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: CacheDataset
  nameWithType: TFGraph.CacheDataset
  fullName: TFGraph.CacheDataset
- uid: TensorFlow.TFGraph.Cast*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Cast
  nameWithType: TFGraph.Cast
  fullName: TFGraph.Cast
- uid: TensorFlow.TFGraph.Ceil*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Ceil
  nameWithType: TFGraph.Ceil
  fullName: TFGraph.Ceil
- uid: TensorFlow.TFGraph.CheckNumerics*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: CheckNumerics
  nameWithType: TFGraph.CheckNumerics
  fullName: TFGraph.CheckNumerics
- uid: TensorFlow.TFGraph.Cholesky*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Cholesky
  nameWithType: TFGraph.Cholesky
  fullName: TFGraph.Cholesky
- uid: TensorFlow.TFGraph.CholeskyGrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: CholeskyGrad
  nameWithType: TFGraph.CholeskyGrad
  fullName: TFGraph.CholeskyGrad
- uid: TensorFlow.TFGraph.Complex*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Complex
  nameWithType: TFGraph.Complex
  fullName: TFGraph.Complex
- uid: TensorFlow.TFGraph.ComplexAbs*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ComplexAbs
  nameWithType: TFGraph.ComplexAbs
  fullName: TFGraph.ComplexAbs
- uid: TensorFlow.TFGraph.ComputeAccidentalHits*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ComputeAccidentalHits
  nameWithType: TFGraph.ComputeAccidentalHits
  fullName: TFGraph.ComputeAccidentalHits
- uid: TensorFlow.TFGraph.Concat*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Concat
  nameWithType: TFGraph.Concat
  fullName: TFGraph.Concat
- uid: TensorFlow.TFGraph.ConcatOffset*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ConcatOffset
  nameWithType: TFGraph.ConcatOffset
  fullName: TFGraph.ConcatOffset
- uid: TensorFlow.TFGraph.ConcatV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ConcatV2
  nameWithType: TFGraph.ConcatV2
  fullName: TFGraph.ConcatV2
- uid: TensorFlow.TFGraph.Conj*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Conj
  nameWithType: TFGraph.Conj
  fullName: TFGraph.Conj
- uid: TensorFlow.TFGraph.Const*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Const
  nameWithType: TFGraph.Const
  fullName: TFGraph.Const
- uid: TensorFlow.TFGraph.ControlTrigger*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ControlTrigger
  nameWithType: TFGraph.ControlTrigger
  fullName: TFGraph.ControlTrigger
- uid: TensorFlow.TFGraph.Conv2D*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Conv2D
  nameWithType: TFGraph.Conv2D
  fullName: TFGraph.Conv2D
- uid: TensorFlow.TFGraph.Conv2DBackpropFilter*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Conv2DBackpropFilter
  nameWithType: TFGraph.Conv2DBackpropFilter
  fullName: TFGraph.Conv2DBackpropFilter
- uid: TensorFlow.TFGraph.Conv2DBackpropInput*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Conv2DBackpropInput
  nameWithType: TFGraph.Conv2DBackpropInput
  fullName: TFGraph.Conv2DBackpropInput
- uid: TensorFlow.TFGraph.Conv3D*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Conv3D
  nameWithType: TFGraph.Conv3D
  fullName: TFGraph.Conv3D
- uid: TensorFlow.TFGraph.Conv3DBackpropFilter*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Conv3DBackpropFilter
  nameWithType: TFGraph.Conv3DBackpropFilter
  fullName: TFGraph.Conv3DBackpropFilter
- uid: TensorFlow.TFGraph.Conv3DBackpropFilterV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Conv3DBackpropFilterV2
  nameWithType: TFGraph.Conv3DBackpropFilterV2
  fullName: TFGraph.Conv3DBackpropFilterV2
- uid: TensorFlow.TFGraph.Conv3DBackpropInput*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Conv3DBackpropInput
  nameWithType: TFGraph.Conv3DBackpropInput
  fullName: TFGraph.Conv3DBackpropInput
- uid: TensorFlow.TFGraph.Conv3DBackpropInputV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Conv3DBackpropInputV2
  nameWithType: TFGraph.Conv3DBackpropInputV2
  fullName: TFGraph.Conv3DBackpropInputV2
- uid: TensorFlow.TFGraph.Cos*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Cos
  nameWithType: TFGraph.Cos
  fullName: TFGraph.Cos
- uid: TensorFlow.TFGraph.Cosh*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Cosh
  nameWithType: TFGraph.Cosh
  fullName: TFGraph.Cosh
- uid: TensorFlow.TFGraph.CropAndResize*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: CropAndResize
  nameWithType: TFGraph.CropAndResize
  fullName: TFGraph.CropAndResize
- uid: TensorFlow.TFGraph.CropAndResizeGradBoxes*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: CropAndResizeGradBoxes
  nameWithType: TFGraph.CropAndResizeGradBoxes
  fullName: TFGraph.CropAndResizeGradBoxes
- uid: TensorFlow.TFGraph.CropAndResizeGradImage*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: CropAndResizeGradImage
  nameWithType: TFGraph.CropAndResizeGradImage
  fullName: TFGraph.CropAndResizeGradImage
- uid: TensorFlow.TFGraph.Cross*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Cross
  nameWithType: TFGraph.Cross
  fullName: TFGraph.Cross
- uid: TensorFlow.TFGraph.CTCBeamSearchDecoder*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: CTCBeamSearchDecoder
  nameWithType: TFGraph.CTCBeamSearchDecoder
  fullName: TFGraph.CTCBeamSearchDecoder
- uid: TensorFlow.TFGraph.CTCGreedyDecoder*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: CTCGreedyDecoder
  nameWithType: TFGraph.CTCGreedyDecoder
  fullName: TFGraph.CTCGreedyDecoder
- uid: TensorFlow.TFGraph.CTCLoss*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: CTCLoss
  nameWithType: TFGraph.CTCLoss
  fullName: TFGraph.CTCLoss
- uid: TensorFlow.TFGraph.Cumprod*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Cumprod
  nameWithType: TFGraph.Cumprod
  fullName: TFGraph.Cumprod
- uid: TensorFlow.TFGraph.Cumsum*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Cumsum
  nameWithType: TFGraph.Cumsum
  fullName: TFGraph.Cumsum
- uid: TensorFlow.TFGraph.CurrentNameScope*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: CurrentNameScope
  nameWithType: TFGraph.CurrentNameScope
  fullName: TFGraph.CurrentNameScope
- uid: TensorFlow.TFGraph.DecodeBase64*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DecodeBase64
  nameWithType: TFGraph.DecodeBase64
  fullName: TFGraph.DecodeBase64
- uid: TensorFlow.TFGraph.DecodeBmp*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DecodeBmp
  nameWithType: TFGraph.DecodeBmp
  fullName: TFGraph.DecodeBmp
- uid: TensorFlow.TFGraph.DecodeCSV*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DecodeCSV
  nameWithType: TFGraph.DecodeCSV
  fullName: TFGraph.DecodeCSV
- uid: TensorFlow.TFGraph.DecodeGif*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DecodeGif
  nameWithType: TFGraph.DecodeGif
  fullName: TFGraph.DecodeGif
- uid: TensorFlow.TFGraph.DecodeJpeg*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DecodeJpeg
  nameWithType: TFGraph.DecodeJpeg
  fullName: TFGraph.DecodeJpeg
- uid: TensorFlow.TFGraph.DecodeJSONExample*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DecodeJSONExample
  nameWithType: TFGraph.DecodeJSONExample
  fullName: TFGraph.DecodeJSONExample
- uid: TensorFlow.TFGraph.DecodePng*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DecodePng
  nameWithType: TFGraph.DecodePng
  fullName: TFGraph.DecodePng
- uid: TensorFlow.TFGraph.DecodeRaw*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DecodeRaw
  nameWithType: TFGraph.DecodeRaw
  fullName: TFGraph.DecodeRaw
- uid: TensorFlow.TFGraph.DecodeWav*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DecodeWav
  nameWithType: TFGraph.DecodeWav
  fullName: TFGraph.DecodeWav
- uid: TensorFlow.TFGraph.DeleteSessionTensor*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DeleteSessionTensor
  nameWithType: TFGraph.DeleteSessionTensor
  fullName: TFGraph.DeleteSessionTensor
- uid: TensorFlow.TFGraph.DenseToDenseSetOperation*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DenseToDenseSetOperation
  nameWithType: TFGraph.DenseToDenseSetOperation
  fullName: TFGraph.DenseToDenseSetOperation
- uid: TensorFlow.TFGraph.DenseToSparseBatchDataset*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DenseToSparseBatchDataset
  nameWithType: TFGraph.DenseToSparseBatchDataset
  fullName: TFGraph.DenseToSparseBatchDataset
- uid: TensorFlow.TFGraph.DenseToSparseSetOperation*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DenseToSparseSetOperation
  nameWithType: TFGraph.DenseToSparseSetOperation
  fullName: TFGraph.DenseToSparseSetOperation
- uid: TensorFlow.TFGraph.DepthToSpace*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DepthToSpace
  nameWithType: TFGraph.DepthToSpace
  fullName: TFGraph.DepthToSpace
- uid: TensorFlow.TFGraph.DepthwiseConv2dNative*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DepthwiseConv2dNative
  nameWithType: TFGraph.DepthwiseConv2dNative
  fullName: TFGraph.DepthwiseConv2dNative
- uid: TensorFlow.TFGraph.DepthwiseConv2dNativeBackpropFilter*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DepthwiseConv2dNativeBackpropFilter
  nameWithType: TFGraph.DepthwiseConv2dNativeBackpropFilter
  fullName: TFGraph.DepthwiseConv2dNativeBackpropFilter
- uid: TensorFlow.TFGraph.DepthwiseConv2dNativeBackpropInput*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DepthwiseConv2dNativeBackpropInput
  nameWithType: TFGraph.DepthwiseConv2dNativeBackpropInput
  fullName: TFGraph.DepthwiseConv2dNativeBackpropInput
- uid: TensorFlow.TFGraph.Dequantize*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Dequantize
  nameWithType: TFGraph.Dequantize
  fullName: TFGraph.Dequantize
- uid: TensorFlow.TFGraph.DeserializeManySparse*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DeserializeManySparse
  nameWithType: TFGraph.DeserializeManySparse
  fullName: TFGraph.DeserializeManySparse
- uid: TensorFlow.TFGraph.DestroyResourceOp*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DestroyResourceOp
  nameWithType: TFGraph.DestroyResourceOp
  fullName: TFGraph.DestroyResourceOp
- uid: TensorFlow.TFGraph.Diag*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Diag
  nameWithType: TFGraph.Diag
  fullName: TFGraph.Diag
- uid: TensorFlow.TFGraph.DiagPart*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DiagPart
  nameWithType: TFGraph.DiagPart
  fullName: TFGraph.DiagPart
- uid: TensorFlow.TFGraph.Digamma*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Digamma
  nameWithType: TFGraph.Digamma
  fullName: TFGraph.Digamma
- uid: TensorFlow.TFGraph.Dilation2D*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Dilation2D
  nameWithType: TFGraph.Dilation2D
  fullName: TFGraph.Dilation2D
- uid: TensorFlow.TFGraph.Dilation2DBackpropFilter*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Dilation2DBackpropFilter
  nameWithType: TFGraph.Dilation2DBackpropFilter
  fullName: TFGraph.Dilation2DBackpropFilter
- uid: TensorFlow.TFGraph.Dilation2DBackpropInput*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Dilation2DBackpropInput
  nameWithType: TFGraph.Dilation2DBackpropInput
  fullName: TFGraph.Dilation2DBackpropInput
- uid: TensorFlow.TFGraph.Div*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Div
  nameWithType: TFGraph.Div
  fullName: TFGraph.Div
- uid: TensorFlow.TFGraph.DrawBoundingBoxes*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DrawBoundingBoxes
  nameWithType: TFGraph.DrawBoundingBoxes
  fullName: TFGraph.DrawBoundingBoxes
- uid: TensorFlow.TFGraph.Dropout*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Dropout
  nameWithType: TFGraph.Dropout
  fullName: TFGraph.Dropout
- uid: TensorFlow.TFGraph.DynamicPartition*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DynamicPartition
  nameWithType: TFGraph.DynamicPartition
  fullName: TFGraph.DynamicPartition
- uid: TensorFlow.TFGraph.DynamicStitch*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: DynamicStitch
  nameWithType: TFGraph.DynamicStitch
  fullName: TFGraph.DynamicStitch
- uid: TensorFlow.TFGraph.EditDistance*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: EditDistance
  nameWithType: TFGraph.EditDistance
  fullName: TFGraph.EditDistance
- uid: TensorFlow.TFGraph.Elu*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Elu
  nameWithType: TFGraph.Elu
  fullName: TFGraph.Elu
- uid: TensorFlow.TFGraph.EluGrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: EluGrad
  nameWithType: TFGraph.EluGrad
  fullName: TFGraph.EluGrad
- uid: TensorFlow.TFGraph.EncodeBase64*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: EncodeBase64
  nameWithType: TFGraph.EncodeBase64
  fullName: TFGraph.EncodeBase64
- uid: TensorFlow.TFGraph.EncodeJpeg*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: EncodeJpeg
  nameWithType: TFGraph.EncodeJpeg
  fullName: TFGraph.EncodeJpeg
- uid: TensorFlow.TFGraph.EncodePng*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: EncodePng
  nameWithType: TFGraph.EncodePng
  fullName: TFGraph.EncodePng
- uid: TensorFlow.TFGraph.EncodeWav*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: EncodeWav
  nameWithType: TFGraph.EncodeWav
  fullName: TFGraph.EncodeWav
- uid: TensorFlow.TFGraph.Enter*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Enter
  nameWithType: TFGraph.Enter
  fullName: TFGraph.Enter
- uid: TensorFlow.TFGraph.Equal*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Equal
  nameWithType: TFGraph.Equal
  fullName: TFGraph.Equal
- uid: TensorFlow.TFGraph.Erf*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Erf
  nameWithType: TFGraph.Erf
  fullName: TFGraph.Erf
- uid: TensorFlow.TFGraph.Erfc*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Erfc
  nameWithType: TFGraph.Erfc
  fullName: TFGraph.Erfc
- uid: TensorFlow.TFGraph.Exit*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Exit
  nameWithType: TFGraph.Exit
  fullName: TFGraph.Exit
- uid: TensorFlow.TFGraph.Exp*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Exp
  nameWithType: TFGraph.Exp
  fullName: TFGraph.Exp
- uid: TensorFlow.TFGraph.ExpandDims*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ExpandDims
  nameWithType: TFGraph.ExpandDims
  fullName: TFGraph.ExpandDims
- uid: TensorFlow.TFGraph.Expm1*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Expm1
  nameWithType: TFGraph.Expm1
  fullName: TFGraph.Expm1
- uid: TensorFlow.TFGraph.ExtractGlimpse*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ExtractGlimpse
  nameWithType: TFGraph.ExtractGlimpse
  fullName: TFGraph.ExtractGlimpse
- uid: TensorFlow.TFGraph.ExtractImagePatches*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ExtractImagePatches
  nameWithType: TFGraph.ExtractImagePatches
  fullName: TFGraph.ExtractImagePatches
- uid: TensorFlow.TFGraph.Fact*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Fact
  nameWithType: TFGraph.Fact
  fullName: TFGraph.Fact
- uid: TensorFlow.TFGraph.FakeQuantWithMinMaxArgs*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FakeQuantWithMinMaxArgs
  nameWithType: TFGraph.FakeQuantWithMinMaxArgs
  fullName: TFGraph.FakeQuantWithMinMaxArgs
- uid: TensorFlow.TFGraph.FakeQuantWithMinMaxArgsGradient*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FakeQuantWithMinMaxArgsGradient
  nameWithType: TFGraph.FakeQuantWithMinMaxArgsGradient
  fullName: TFGraph.FakeQuantWithMinMaxArgsGradient
- uid: TensorFlow.TFGraph.FakeQuantWithMinMaxVars*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FakeQuantWithMinMaxVars
  nameWithType: TFGraph.FakeQuantWithMinMaxVars
  fullName: TFGraph.FakeQuantWithMinMaxVars
- uid: TensorFlow.TFGraph.FakeQuantWithMinMaxVarsGradient*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FakeQuantWithMinMaxVarsGradient
  nameWithType: TFGraph.FakeQuantWithMinMaxVarsGradient
  fullName: TFGraph.FakeQuantWithMinMaxVarsGradient
- uid: TensorFlow.TFGraph.FakeQuantWithMinMaxVarsPerChannel*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FakeQuantWithMinMaxVarsPerChannel
  nameWithType: TFGraph.FakeQuantWithMinMaxVarsPerChannel
  fullName: TFGraph.FakeQuantWithMinMaxVarsPerChannel
- uid: TensorFlow.TFGraph.FakeQuantWithMinMaxVarsPerChannelGradient*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FakeQuantWithMinMaxVarsPerChannelGradient
  nameWithType: TFGraph.FakeQuantWithMinMaxVarsPerChannelGradient
  fullName: TFGraph.FakeQuantWithMinMaxVarsPerChannelGradient
- uid: TensorFlow.TFGraph.FFT*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FFT
  nameWithType: TFGraph.FFT
  fullName: TFGraph.FFT
- uid: TensorFlow.TFGraph.FFT2D*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FFT2D
  nameWithType: TFGraph.FFT2D
  fullName: TFGraph.FFT2D
- uid: TensorFlow.TFGraph.FFT3D*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FFT3D
  nameWithType: TFGraph.FFT3D
  fullName: TFGraph.FFT3D
- uid: TensorFlow.TFGraph.FIFOQueueV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FIFOQueueV2
  nameWithType: TFGraph.FIFOQueueV2
  fullName: TFGraph.FIFOQueueV2
- uid: TensorFlow.TFGraph.Fill*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Fill
  nameWithType: TFGraph.Fill
  fullName: TFGraph.Fill
- uid: TensorFlow.TFGraph.FixedLengthRecordDataset*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FixedLengthRecordDataset
  nameWithType: TFGraph.FixedLengthRecordDataset
  fullName: TFGraph.FixedLengthRecordDataset
- uid: TensorFlow.TFGraph.FixedLengthRecordReaderV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FixedLengthRecordReaderV2
  nameWithType: TFGraph.FixedLengthRecordReaderV2
  fullName: TFGraph.FixedLengthRecordReaderV2
- uid: TensorFlow.TFGraph.FixedUnigramCandidateSampler*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FixedUnigramCandidateSampler
  nameWithType: TFGraph.FixedUnigramCandidateSampler
  fullName: TFGraph.FixedUnigramCandidateSampler
- uid: TensorFlow.TFGraph.Floor*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Floor
  nameWithType: TFGraph.Floor
  fullName: TFGraph.Floor
- uid: TensorFlow.TFGraph.FloorDiv*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FloorDiv
  nameWithType: TFGraph.FloorDiv
  fullName: TFGraph.FloorDiv
- uid: TensorFlow.TFGraph.FloorMod*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FloorMod
  nameWithType: TFGraph.FloorMod
  fullName: TFGraph.FloorMod
- uid: TensorFlow.TFGraph.FractionalAvgPool*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FractionalAvgPool
  nameWithType: TFGraph.FractionalAvgPool
  fullName: TFGraph.FractionalAvgPool
- uid: TensorFlow.TFGraph.FractionalAvgPoolGrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FractionalAvgPoolGrad
  nameWithType: TFGraph.FractionalAvgPoolGrad
  fullName: TFGraph.FractionalAvgPoolGrad
- uid: TensorFlow.TFGraph.FractionalMaxPool*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FractionalMaxPool
  nameWithType: TFGraph.FractionalMaxPool
  fullName: TFGraph.FractionalMaxPool
- uid: TensorFlow.TFGraph.FractionalMaxPoolGrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FractionalMaxPoolGrad
  nameWithType: TFGraph.FractionalMaxPoolGrad
  fullName: TFGraph.FractionalMaxPoolGrad
- uid: TensorFlow.TFGraph.FusedBatchNorm*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FusedBatchNorm
  nameWithType: TFGraph.FusedBatchNorm
  fullName: TFGraph.FusedBatchNorm
- uid: TensorFlow.TFGraph.FusedBatchNormGrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FusedBatchNormGrad
  nameWithType: TFGraph.FusedBatchNormGrad
  fullName: TFGraph.FusedBatchNormGrad
- uid: TensorFlow.TFGraph.FusedPadConv2D*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FusedPadConv2D
  nameWithType: TFGraph.FusedPadConv2D
  fullName: TFGraph.FusedPadConv2D
- uid: TensorFlow.TFGraph.FusedResizeAndPadConv2D*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: FusedResizeAndPadConv2D
  nameWithType: TFGraph.FusedResizeAndPadConv2D
  fullName: TFGraph.FusedResizeAndPadConv2D
- uid: TensorFlow.TFGraph.Gather*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Gather
  nameWithType: TFGraph.Gather
  fullName: TFGraph.Gather
- uid: TensorFlow.TFGraph.GatherNd*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: GatherNd
  nameWithType: TFGraph.GatherNd
  fullName: TFGraph.GatherNd
- uid: TensorFlow.TFGraph.GetEnumerator*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: GetEnumerator
  nameWithType: TFGraph.GetEnumerator
  fullName: TFGraph.GetEnumerator
- uid: TensorFlow.TFGraph.GetGlobalVariablesInitializer*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: GetGlobalVariablesInitializer
  nameWithType: TFGraph.GetGlobalVariablesInitializer
  fullName: TFGraph.GetGlobalVariablesInitializer
- uid: TensorFlow.TFGraph.GetRandomSeeds*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: GetRandomSeeds
  nameWithType: TFGraph.GetRandomSeeds
  fullName: TFGraph.GetRandomSeeds
- uid: TensorFlow.TFGraph.GetSessionHandle*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: GetSessionHandle
  nameWithType: TFGraph.GetSessionHandle
  fullName: TFGraph.GetSessionHandle
- uid: TensorFlow.TFGraph.GetSessionHandleV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: GetSessionHandleV2
  nameWithType: TFGraph.GetSessionHandleV2
  fullName: TFGraph.GetSessionHandleV2
- uid: TensorFlow.TFGraph.GetSessionTensor*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: GetSessionTensor
  nameWithType: TFGraph.GetSessionTensor
  fullName: TFGraph.GetSessionTensor
- uid: TensorFlow.TFGraph.GetShape*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: GetShape
  nameWithType: TFGraph.GetShape
  fullName: TFGraph.GetShape
- uid: TensorFlow.TFGraph.GetTensorNumDims*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: GetTensorNumDims
  nameWithType: TFGraph.GetTensorNumDims
  fullName: TFGraph.GetTensorNumDims
- uid: TensorFlow.TFGraph.GetTensorShape*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: GetTensorShape
  nameWithType: TFGraph.GetTensorShape
  fullName: TFGraph.GetTensorShape
- uid: TensorFlow.TFGraph.Greater*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Greater
  nameWithType: TFGraph.Greater
  fullName: TFGraph.Greater
- uid: TensorFlow.TFGraph.GreaterEqual*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: GreaterEqual
  nameWithType: TFGraph.GreaterEqual
  fullName: TFGraph.GreaterEqual
- uid: TensorFlow.TFGraph.HashTableV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: HashTableV2
  nameWithType: TFGraph.HashTableV2
  fullName: TFGraph.HashTableV2
- uid: TensorFlow.TFGraph.HistogramSummary*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: HistogramSummary
  nameWithType: TFGraph.HistogramSummary
  fullName: TFGraph.HistogramSummary
- uid: TensorFlow.TFGraph.HSVToRGB*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: HSVToRGB
  nameWithType: TFGraph.HSVToRGB
  fullName: TFGraph.HSVToRGB
- uid: TensorFlow.TFGraph.Identity*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Identity
  nameWithType: TFGraph.Identity
  fullName: TFGraph.Identity
- uid: TensorFlow.TFGraph.IdentityReaderV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: IdentityReaderV2
  nameWithType: TFGraph.IdentityReaderV2
  fullName: TFGraph.IdentityReaderV2
- uid: TensorFlow.TFGraph.IFFT*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: IFFT
  nameWithType: TFGraph.IFFT
  fullName: TFGraph.IFFT
- uid: TensorFlow.TFGraph.IFFT2D*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: IFFT2D
  nameWithType: TFGraph.IFFT2D
  fullName: TFGraph.IFFT2D
- uid: TensorFlow.TFGraph.IFFT3D*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: IFFT3D
  nameWithType: TFGraph.IFFT3D
  fullName: TFGraph.IFFT3D
- uid: TensorFlow.TFGraph.Igamma*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Igamma
  nameWithType: TFGraph.Igamma
  fullName: TFGraph.Igamma
- uid: TensorFlow.TFGraph.Igammac*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Igammac
  nameWithType: TFGraph.Igammac
  fullName: TFGraph.Igammac
- uid: TensorFlow.TFGraph.Imag*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Imag
  nameWithType: TFGraph.Imag
  fullName: TFGraph.Imag
- uid: TensorFlow.TFGraph.ImageSummary*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ImageSummary
  nameWithType: TFGraph.ImageSummary
  fullName: TFGraph.ImageSummary
- uid: TensorFlow.TFGraph.ImmutableConst*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ImmutableConst
  nameWithType: TFGraph.ImmutableConst
  fullName: TFGraph.ImmutableConst
- uid: TensorFlow.TFGraph.Import*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Import
  nameWithType: TFGraph.Import
  fullName: TFGraph.Import
- uid: TensorFlow.TFGraph.ImportGraphDef*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ImportGraphDef
  nameWithType: TFGraph.ImportGraphDef
  fullName: TFGraph.ImportGraphDef
- uid: TensorFlow.TFGraph.InitializeTableFromTextFileV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: InitializeTableFromTextFileV2
  nameWithType: TFGraph.InitializeTableFromTextFileV2
  fullName: TFGraph.InitializeTableFromTextFileV2
- uid: TensorFlow.TFGraph.InitializeTableV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: InitializeTableV2
  nameWithType: TFGraph.InitializeTableV2
  fullName: TFGraph.InitializeTableV2
- uid: TensorFlow.TFGraph.InTopK*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: InTopK
  nameWithType: TFGraph.InTopK
  fullName: TFGraph.InTopK
- uid: TensorFlow.TFGraph.Inv*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Inv
  nameWithType: TFGraph.Inv
  fullName: TFGraph.Inv
- uid: TensorFlow.TFGraph.Invert*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Invert
  nameWithType: TFGraph.Invert
  fullName: TFGraph.Invert
- uid: TensorFlow.TFGraph.InvertPermutation*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: InvertPermutation
  nameWithType: TFGraph.InvertPermutation
  fullName: TFGraph.InvertPermutation
- uid: TensorFlow.TFGraph.InvGrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: InvGrad
  nameWithType: TFGraph.InvGrad
  fullName: TFGraph.InvGrad
- uid: TensorFlow.TFGraph.IRFFT*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: IRFFT
  nameWithType: TFGraph.IRFFT
  fullName: TFGraph.IRFFT
- uid: TensorFlow.TFGraph.IRFFT2D*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: IRFFT2D
  nameWithType: TFGraph.IRFFT2D
  fullName: TFGraph.IRFFT2D
- uid: TensorFlow.TFGraph.IRFFT3D*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: IRFFT3D
  nameWithType: TFGraph.IRFFT3D
  fullName: TFGraph.IRFFT3D
- uid: TensorFlow.TFGraph.IsFinite*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: IsFinite
  nameWithType: TFGraph.IsFinite
  fullName: TFGraph.IsFinite
- uid: TensorFlow.TFGraph.IsInf*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: IsInf
  nameWithType: TFGraph.IsInf
  fullName: TFGraph.IsInf
- uid: TensorFlow.TFGraph.IsNan*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: IsNan
  nameWithType: TFGraph.IsNan
  fullName: TFGraph.IsNan
- uid: TensorFlow.TFGraph.Item*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Item
  nameWithType: TFGraph.Item
  fullName: TFGraph.Item
- uid: TensorFlow.TFGraph.Iterator*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Iterator
  nameWithType: TFGraph.Iterator
  fullName: TFGraph.Iterator
- uid: TensorFlow.TFGraph.IteratorDispose*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: IteratorDispose
  nameWithType: TFGraph.IteratorDispose
  fullName: TFGraph.IteratorDispose
- uid: TensorFlow.TFGraph.IteratorGetNext*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: IteratorGetNext
  nameWithType: TFGraph.IteratorGetNext
  fullName: TFGraph.IteratorGetNext
- uid: TensorFlow.TFGraph.L2Loss*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: L2Loss
  nameWithType: TFGraph.L2Loss
  fullName: TFGraph.L2Loss
- uid: TensorFlow.TFGraph.LearnedUnigramCandidateSampler*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: LearnedUnigramCandidateSampler
  nameWithType: TFGraph.LearnedUnigramCandidateSampler
  fullName: TFGraph.LearnedUnigramCandidateSampler
- uid: TensorFlow.TFGraph.Less*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Less
  nameWithType: TFGraph.Less
  fullName: TFGraph.Less
- uid: TensorFlow.TFGraph.LessEqual*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: LessEqual
  nameWithType: TFGraph.LessEqual
  fullName: TFGraph.LessEqual
- uid: TensorFlow.TFGraph.Lgamma*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Lgamma
  nameWithType: TFGraph.Lgamma
  fullName: TFGraph.Lgamma
- uid: TensorFlow.TFGraph.LinSpace*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: LinSpace
  nameWithType: TFGraph.LinSpace
  fullName: TFGraph.LinSpace
- uid: TensorFlow.TFGraph.ListDiff*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ListDiff
  nameWithType: TFGraph.ListDiff
  fullName: TFGraph.ListDiff
- uid: TensorFlow.TFGraph.Log*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Log
  nameWithType: TFGraph.Log
  fullName: TFGraph.Log
- uid: TensorFlow.TFGraph.Log1p*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Log1p
  nameWithType: TFGraph.Log1p
  fullName: TFGraph.Log1p
- uid: TensorFlow.TFGraph.LogicalAnd*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: LogicalAnd
  nameWithType: TFGraph.LogicalAnd
  fullName: TFGraph.LogicalAnd
- uid: TensorFlow.TFGraph.LogicalNot*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: LogicalNot
  nameWithType: TFGraph.LogicalNot
  fullName: TFGraph.LogicalNot
- uid: TensorFlow.TFGraph.LogicalOr*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: LogicalOr
  nameWithType: TFGraph.LogicalOr
  fullName: TFGraph.LogicalOr
- uid: TensorFlow.TFGraph.LogSoftmax*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: LogSoftmax
  nameWithType: TFGraph.LogSoftmax
  fullName: TFGraph.LogSoftmax
- uid: TensorFlow.TFGraph.LogUniformCandidateSampler*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: LogUniformCandidateSampler
  nameWithType: TFGraph.LogUniformCandidateSampler
  fullName: TFGraph.LogUniformCandidateSampler
- uid: TensorFlow.TFGraph.LookupTableExportV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: LookupTableExportV2
  nameWithType: TFGraph.LookupTableExportV2
  fullName: TFGraph.LookupTableExportV2
- uid: TensorFlow.TFGraph.LookupTableFindV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: LookupTableFindV2
  nameWithType: TFGraph.LookupTableFindV2
  fullName: TFGraph.LookupTableFindV2
- uid: TensorFlow.TFGraph.LookupTableImportV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: LookupTableImportV2
  nameWithType: TFGraph.LookupTableImportV2
  fullName: TFGraph.LookupTableImportV2
- uid: TensorFlow.TFGraph.LookupTableInsertV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: LookupTableInsertV2
  nameWithType: TFGraph.LookupTableInsertV2
  fullName: TFGraph.LookupTableInsertV2
- uid: TensorFlow.TFGraph.LookupTableSizeV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: LookupTableSizeV2
  nameWithType: TFGraph.LookupTableSizeV2
  fullName: TFGraph.LookupTableSizeV2
- uid: TensorFlow.TFGraph.LoopCond*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: LoopCond
  nameWithType: TFGraph.LoopCond
  fullName: TFGraph.LoopCond
- uid: TensorFlow.TFGraph.LRN*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: LRN
  nameWithType: TFGraph.LRN
  fullName: TFGraph.LRN
- uid: TensorFlow.TFGraph.LRNGrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: LRNGrad
  nameWithType: TFGraph.LRNGrad
  fullName: TFGraph.LRNGrad
- uid: TensorFlow.TFGraph.MakeIterator*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MakeIterator
  nameWithType: TFGraph.MakeIterator
  fullName: TFGraph.MakeIterator
- uid: TensorFlow.TFGraph.MapClear*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MapClear
  nameWithType: TFGraph.MapClear
  fullName: TFGraph.MapClear
- uid: TensorFlow.TFGraph.MapIncompleteSize*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MapIncompleteSize
  nameWithType: TFGraph.MapIncompleteSize
  fullName: TFGraph.MapIncompleteSize
- uid: TensorFlow.TFGraph.MapPeek*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MapPeek
  nameWithType: TFGraph.MapPeek
  fullName: TFGraph.MapPeek
- uid: TensorFlow.TFGraph.MapSize*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MapSize
  nameWithType: TFGraph.MapSize
  fullName: TFGraph.MapSize
- uid: TensorFlow.TFGraph.MapStage*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MapStage
  nameWithType: TFGraph.MapStage
  fullName: TFGraph.MapStage
- uid: TensorFlow.TFGraph.MapUnstage*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MapUnstage
  nameWithType: TFGraph.MapUnstage
  fullName: TFGraph.MapUnstage
- uid: TensorFlow.TFGraph.MapUnstageNoKey*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MapUnstageNoKey
  nameWithType: TFGraph.MapUnstageNoKey
  fullName: TFGraph.MapUnstageNoKey
- uid: TensorFlow.TFGraph.MatchingFiles*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MatchingFiles
  nameWithType: TFGraph.MatchingFiles
  fullName: TFGraph.MatchingFiles
- uid: TensorFlow.TFGraph.MatMul*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MatMul
  nameWithType: TFGraph.MatMul
  fullName: TFGraph.MatMul
- uid: TensorFlow.TFGraph.MatrixBandPart*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MatrixBandPart
  nameWithType: TFGraph.MatrixBandPart
  fullName: TFGraph.MatrixBandPart
- uid: TensorFlow.TFGraph.MatrixDeterminant*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MatrixDeterminant
  nameWithType: TFGraph.MatrixDeterminant
  fullName: TFGraph.MatrixDeterminant
- uid: TensorFlow.TFGraph.MatrixDiag*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MatrixDiag
  nameWithType: TFGraph.MatrixDiag
  fullName: TFGraph.MatrixDiag
- uid: TensorFlow.TFGraph.MatrixDiagPart*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MatrixDiagPart
  nameWithType: TFGraph.MatrixDiagPart
  fullName: TFGraph.MatrixDiagPart
- uid: TensorFlow.TFGraph.MatrixInverse*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MatrixInverse
  nameWithType: TFGraph.MatrixInverse
  fullName: TFGraph.MatrixInverse
- uid: TensorFlow.TFGraph.MatrixSetDiag*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MatrixSetDiag
  nameWithType: TFGraph.MatrixSetDiag
  fullName: TFGraph.MatrixSetDiag
- uid: TensorFlow.TFGraph.MatrixSolve*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MatrixSolve
  nameWithType: TFGraph.MatrixSolve
  fullName: TFGraph.MatrixSolve
- uid: TensorFlow.TFGraph.MatrixSolveLs*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MatrixSolveLs
  nameWithType: TFGraph.MatrixSolveLs
  fullName: TFGraph.MatrixSolveLs
- uid: TensorFlow.TFGraph.MatrixTriangularSolve*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MatrixTriangularSolve
  nameWithType: TFGraph.MatrixTriangularSolve
  fullName: TFGraph.MatrixTriangularSolve
- uid: TensorFlow.TFGraph.Max*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Max
  nameWithType: TFGraph.Max
  fullName: TFGraph.Max
- uid: TensorFlow.TFGraph.Maximum*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Maximum
  nameWithType: TFGraph.Maximum
  fullName: TFGraph.Maximum
- uid: TensorFlow.TFGraph.MaxPool*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MaxPool
  nameWithType: TFGraph.MaxPool
  fullName: TFGraph.MaxPool
- uid: TensorFlow.TFGraph.MaxPool3D*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MaxPool3D
  nameWithType: TFGraph.MaxPool3D
  fullName: TFGraph.MaxPool3D
- uid: TensorFlow.TFGraph.MaxPool3DGrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MaxPool3DGrad
  nameWithType: TFGraph.MaxPool3DGrad
  fullName: TFGraph.MaxPool3DGrad
- uid: TensorFlow.TFGraph.MaxPool3DGradGrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MaxPool3DGradGrad
  nameWithType: TFGraph.MaxPool3DGradGrad
  fullName: TFGraph.MaxPool3DGradGrad
- uid: TensorFlow.TFGraph.MaxPoolGrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MaxPoolGrad
  nameWithType: TFGraph.MaxPoolGrad
  fullName: TFGraph.MaxPoolGrad
- uid: TensorFlow.TFGraph.MaxPoolGradGrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MaxPoolGradGrad
  nameWithType: TFGraph.MaxPoolGradGrad
  fullName: TFGraph.MaxPoolGradGrad
- uid: TensorFlow.TFGraph.MaxPoolGradGradWithArgmax*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MaxPoolGradGradWithArgmax
  nameWithType: TFGraph.MaxPoolGradGradWithArgmax
  fullName: TFGraph.MaxPoolGradGradWithArgmax
- uid: TensorFlow.TFGraph.MaxPoolGradWithArgmax*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MaxPoolGradWithArgmax
  nameWithType: TFGraph.MaxPoolGradWithArgmax
  fullName: TFGraph.MaxPoolGradWithArgmax
- uid: TensorFlow.TFGraph.MaxPoolWithArgmax*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MaxPoolWithArgmax
  nameWithType: TFGraph.MaxPoolWithArgmax
  fullName: TFGraph.MaxPoolWithArgmax
- uid: TensorFlow.TFGraph.Mean*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Mean
  nameWithType: TFGraph.Mean
  fullName: TFGraph.Mean
- uid: TensorFlow.TFGraph.Merge*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Merge
  nameWithType: TFGraph.Merge
  fullName: TFGraph.Merge
- uid: TensorFlow.TFGraph.MergeSummary*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MergeSummary
  nameWithType: TFGraph.MergeSummary
  fullName: TFGraph.MergeSummary
- uid: TensorFlow.TFGraph.MergeV2Checkpoints*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MergeV2Checkpoints
  nameWithType: TFGraph.MergeV2Checkpoints
  fullName: TFGraph.MergeV2Checkpoints
- uid: TensorFlow.TFGraph.Mfcc*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Mfcc
  nameWithType: TFGraph.Mfcc
  fullName: TFGraph.Mfcc
- uid: TensorFlow.TFGraph.Min*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Min
  nameWithType: TFGraph.Min
  fullName: TFGraph.Min
- uid: TensorFlow.TFGraph.Minimum*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Minimum
  nameWithType: TFGraph.Minimum
  fullName: TFGraph.Minimum
- uid: TensorFlow.TFGraph.MirrorPad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MirrorPad
  nameWithType: TFGraph.MirrorPad
  fullName: TFGraph.MirrorPad
- uid: TensorFlow.TFGraph.MirrorPadGrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MirrorPadGrad
  nameWithType: TFGraph.MirrorPadGrad
  fullName: TFGraph.MirrorPadGrad
- uid: TensorFlow.TFGraph.Mod*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Mod
  nameWithType: TFGraph.Mod
  fullName: TFGraph.Mod
- uid: TensorFlow.TFGraph.Mul*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Mul
  nameWithType: TFGraph.Mul
  fullName: TFGraph.Mul
- uid: TensorFlow.TFGraph.Multinomial*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Multinomial
  nameWithType: TFGraph.Multinomial
  fullName: TFGraph.Multinomial
- uid: TensorFlow.TFGraph.MutableDenseHashTableV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MutableDenseHashTableV2
  nameWithType: TFGraph.MutableDenseHashTableV2
  fullName: TFGraph.MutableDenseHashTableV2
- uid: TensorFlow.TFGraph.MutableHashTableOfTensorsV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MutableHashTableOfTensorsV2
  nameWithType: TFGraph.MutableHashTableOfTensorsV2
  fullName: TFGraph.MutableHashTableOfTensorsV2
- uid: TensorFlow.TFGraph.MutableHashTableV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: MutableHashTableV2
  nameWithType: TFGraph.MutableHashTableV2
  fullName: TFGraph.MutableHashTableV2
- uid: TensorFlow.TFGraph.Neg*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Neg
  nameWithType: TFGraph.Neg
  fullName: TFGraph.Neg
- uid: TensorFlow.TFGraph.NextIteration*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: NextIteration
  nameWithType: TFGraph.NextIteration
  fullName: TFGraph.NextIteration
- uid: TensorFlow.TFGraph.NonMaxSuppression*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: NonMaxSuppression
  nameWithType: TFGraph.NonMaxSuppression
  fullName: TFGraph.NonMaxSuppression
- uid: TensorFlow.TFGraph.NonMaxSuppressionV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: NonMaxSuppressionV2
  nameWithType: TFGraph.NonMaxSuppressionV2
  fullName: TFGraph.NonMaxSuppressionV2
- uid: TensorFlow.TFGraph.NoOp*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: NoOp
  nameWithType: TFGraph.NoOp
  fullName: TFGraph.NoOp
- uid: TensorFlow.TFGraph.NotEqual*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: NotEqual
  nameWithType: TFGraph.NotEqual
  fullName: TFGraph.NotEqual
- uid: TensorFlow.TFGraph.OneHot*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: OneHot
  nameWithType: TFGraph.OneHot
  fullName: TFGraph.OneHot
- uid: TensorFlow.TFGraph.OnesLike*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: OnesLike
  nameWithType: TFGraph.OnesLike
  fullName: TFGraph.OnesLike
- uid: TensorFlow.TFGraph.OrderedMapClear*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: OrderedMapClear
  nameWithType: TFGraph.OrderedMapClear
  fullName: TFGraph.OrderedMapClear
- uid: TensorFlow.TFGraph.OrderedMapIncompleteSize*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: OrderedMapIncompleteSize
  nameWithType: TFGraph.OrderedMapIncompleteSize
  fullName: TFGraph.OrderedMapIncompleteSize
- uid: TensorFlow.TFGraph.OrderedMapPeek*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: OrderedMapPeek
  nameWithType: TFGraph.OrderedMapPeek
  fullName: TFGraph.OrderedMapPeek
- uid: TensorFlow.TFGraph.OrderedMapSize*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: OrderedMapSize
  nameWithType: TFGraph.OrderedMapSize
  fullName: TFGraph.OrderedMapSize
- uid: TensorFlow.TFGraph.OrderedMapStage*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: OrderedMapStage
  nameWithType: TFGraph.OrderedMapStage
  fullName: TFGraph.OrderedMapStage
- uid: TensorFlow.TFGraph.OrderedMapUnstage*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: OrderedMapUnstage
  nameWithType: TFGraph.OrderedMapUnstage
  fullName: TFGraph.OrderedMapUnstage
- uid: TensorFlow.TFGraph.OrderedMapUnstageNoKey*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: OrderedMapUnstageNoKey
  nameWithType: TFGraph.OrderedMapUnstageNoKey
  fullName: TFGraph.OrderedMapUnstageNoKey
- uid: TensorFlow.TFGraph.Pack*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Pack
  nameWithType: TFGraph.Pack
  fullName: TFGraph.Pack
- uid: TensorFlow.TFGraph.Pad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Pad
  nameWithType: TFGraph.Pad
  fullName: TFGraph.Pad
- uid: TensorFlow.TFGraph.PaddedBatchDataset*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: PaddedBatchDataset
  nameWithType: TFGraph.PaddedBatchDataset
  fullName: TFGraph.PaddedBatchDataset
- uid: TensorFlow.TFGraph.PaddingFIFOQueueV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: PaddingFIFOQueueV2
  nameWithType: TFGraph.PaddingFIFOQueueV2
  fullName: TFGraph.PaddingFIFOQueueV2
- uid: TensorFlow.TFGraph.ParallelConcat*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ParallelConcat
  nameWithType: TFGraph.ParallelConcat
  fullName: TFGraph.ParallelConcat
- uid: TensorFlow.TFGraph.ParameterizedTruncatedNormal*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ParameterizedTruncatedNormal
  nameWithType: TFGraph.ParameterizedTruncatedNormal
  fullName: TFGraph.ParameterizedTruncatedNormal
- uid: TensorFlow.TFGraph.ParseExample*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ParseExample
  nameWithType: TFGraph.ParseExample
  fullName: TFGraph.ParseExample
- uid: TensorFlow.TFGraph.ParseSingleSequenceExample*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ParseSingleSequenceExample
  nameWithType: TFGraph.ParseSingleSequenceExample
  fullName: TFGraph.ParseSingleSequenceExample
- uid: TensorFlow.TFGraph.ParseTensor*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ParseTensor
  nameWithType: TFGraph.ParseTensor
  fullName: TFGraph.ParseTensor
- uid: TensorFlow.TFGraph.Placeholder*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Placeholder
  nameWithType: TFGraph.Placeholder
  fullName: TFGraph.Placeholder
- uid: TensorFlow.TFGraph.PlaceholderV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: PlaceholderV2
  nameWithType: TFGraph.PlaceholderV2
  fullName: TFGraph.PlaceholderV2
- uid: TensorFlow.TFGraph.PlaceholderWithDefault*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: PlaceholderWithDefault
  nameWithType: TFGraph.PlaceholderWithDefault
  fullName: TFGraph.PlaceholderWithDefault
- uid: TensorFlow.TFGraph.Polygamma*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Polygamma
  nameWithType: TFGraph.Polygamma
  fullName: TFGraph.Polygamma
- uid: TensorFlow.TFGraph.Pow*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Pow
  nameWithType: TFGraph.Pow
  fullName: TFGraph.Pow
- uid: TensorFlow.TFGraph.PreventGradient*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: PreventGradient
  nameWithType: TFGraph.PreventGradient
  fullName: TFGraph.PreventGradient
- uid: TensorFlow.TFGraph.Print*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Print
  nameWithType: TFGraph.Print
  fullName: TFGraph.Print
- uid: TensorFlow.TFGraph.PriorityQueueV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: PriorityQueueV2
  nameWithType: TFGraph.PriorityQueueV2
  fullName: TFGraph.PriorityQueueV2
- uid: TensorFlow.TFGraph.Prod*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Prod
  nameWithType: TFGraph.Prod
  fullName: TFGraph.Prod
- uid: TensorFlow.TFGraph.Qr*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Qr
  nameWithType: TFGraph.Qr
  fullName: TFGraph.Qr
- uid: TensorFlow.TFGraph.QuantizeAndDequantize*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizeAndDequantize
  nameWithType: TFGraph.QuantizeAndDequantize
  fullName: TFGraph.QuantizeAndDequantize
- uid: TensorFlow.TFGraph.QuantizeAndDequantizeV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizeAndDequantizeV2
  nameWithType: TFGraph.QuantizeAndDequantizeV2
  fullName: TFGraph.QuantizeAndDequantizeV2
- uid: TensorFlow.TFGraph.QuantizedAdd*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizedAdd
  nameWithType: TFGraph.QuantizedAdd
  fullName: TFGraph.QuantizedAdd
- uid: TensorFlow.TFGraph.QuantizedAvgPool*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizedAvgPool
  nameWithType: TFGraph.QuantizedAvgPool
  fullName: TFGraph.QuantizedAvgPool
- uid: TensorFlow.TFGraph.QuantizedBatchNormWithGlobalNormalization*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizedBatchNormWithGlobalNormalization
  nameWithType: TFGraph.QuantizedBatchNormWithGlobalNormalization
  fullName: TFGraph.QuantizedBatchNormWithGlobalNormalization
- uid: TensorFlow.TFGraph.QuantizedBiasAdd*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizedBiasAdd
  nameWithType: TFGraph.QuantizedBiasAdd
  fullName: TFGraph.QuantizedBiasAdd
- uid: TensorFlow.TFGraph.QuantizedConcat*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizedConcat
  nameWithType: TFGraph.QuantizedConcat
  fullName: TFGraph.QuantizedConcat
- uid: TensorFlow.TFGraph.QuantizedConv2D*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizedConv2D
  nameWithType: TFGraph.QuantizedConv2D
  fullName: TFGraph.QuantizedConv2D
- uid: TensorFlow.TFGraph.QuantizedInstanceNorm*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizedInstanceNorm
  nameWithType: TFGraph.QuantizedInstanceNorm
  fullName: TFGraph.QuantizedInstanceNorm
- uid: TensorFlow.TFGraph.QuantizedMatMul*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizedMatMul
  nameWithType: TFGraph.QuantizedMatMul
  fullName: TFGraph.QuantizedMatMul
- uid: TensorFlow.TFGraph.QuantizedMaxPool*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizedMaxPool
  nameWithType: TFGraph.QuantizedMaxPool
  fullName: TFGraph.QuantizedMaxPool
- uid: TensorFlow.TFGraph.QuantizedMul*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizedMul
  nameWithType: TFGraph.QuantizedMul
  fullName: TFGraph.QuantizedMul
- uid: TensorFlow.TFGraph.QuantizeDownAndShrinkRange*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizeDownAndShrinkRange
  nameWithType: TFGraph.QuantizeDownAndShrinkRange
  fullName: TFGraph.QuantizeDownAndShrinkRange
- uid: TensorFlow.TFGraph.QuantizedRelu*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizedRelu
  nameWithType: TFGraph.QuantizedRelu
  fullName: TFGraph.QuantizedRelu
- uid: TensorFlow.TFGraph.QuantizedRelu6*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizedRelu6
  nameWithType: TFGraph.QuantizedRelu6
  fullName: TFGraph.QuantizedRelu6
- uid: TensorFlow.TFGraph.QuantizedReluX*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizedReluX
  nameWithType: TFGraph.QuantizedReluX
  fullName: TFGraph.QuantizedReluX
- uid: TensorFlow.TFGraph.QuantizedReshape*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizedReshape
  nameWithType: TFGraph.QuantizedReshape
  fullName: TFGraph.QuantizedReshape
- uid: TensorFlow.TFGraph.QuantizedResizeBilinear*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizedResizeBilinear
  nameWithType: TFGraph.QuantizedResizeBilinear
  fullName: TFGraph.QuantizedResizeBilinear
- uid: TensorFlow.TFGraph.QuantizeV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QuantizeV2
  nameWithType: TFGraph.QuantizeV2
  fullName: TFGraph.QuantizeV2
- uid: TensorFlow.TFGraph.QueueCloseV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QueueCloseV2
  nameWithType: TFGraph.QueueCloseV2
  fullName: TFGraph.QueueCloseV2
- uid: TensorFlow.TFGraph.QueueDequeueManyV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QueueDequeueManyV2
  nameWithType: TFGraph.QueueDequeueManyV2
  fullName: TFGraph.QueueDequeueManyV2
- uid: TensorFlow.TFGraph.QueueDequeueUpToV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QueueDequeueUpToV2
  nameWithType: TFGraph.QueueDequeueUpToV2
  fullName: TFGraph.QueueDequeueUpToV2
- uid: TensorFlow.TFGraph.QueueDequeueV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QueueDequeueV2
  nameWithType: TFGraph.QueueDequeueV2
  fullName: TFGraph.QueueDequeueV2
- uid: TensorFlow.TFGraph.QueueEnqueueManyV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QueueEnqueueManyV2
  nameWithType: TFGraph.QueueEnqueueManyV2
  fullName: TFGraph.QueueEnqueueManyV2
- uid: TensorFlow.TFGraph.QueueEnqueueV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QueueEnqueueV2
  nameWithType: TFGraph.QueueEnqueueV2
  fullName: TFGraph.QueueEnqueueV2
- uid: TensorFlow.TFGraph.QueueSizeV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: QueueSizeV2
  nameWithType: TFGraph.QueueSizeV2
  fullName: TFGraph.QueueSizeV2
- uid: TensorFlow.TFGraph.RandomCrop*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RandomCrop
  nameWithType: TFGraph.RandomCrop
  fullName: TFGraph.RandomCrop
- uid: TensorFlow.TFGraph.RandomGamma*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RandomGamma
  nameWithType: TFGraph.RandomGamma
  fullName: TFGraph.RandomGamma
- uid: TensorFlow.TFGraph.RandomNormal*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RandomNormal
  nameWithType: TFGraph.RandomNormal
  fullName: TFGraph.RandomNormal
- uid: TensorFlow.TFGraph.RandomPoisson*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RandomPoisson
  nameWithType: TFGraph.RandomPoisson
  fullName: TFGraph.RandomPoisson
- uid: TensorFlow.TFGraph.RandomShuffle*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RandomShuffle
  nameWithType: TFGraph.RandomShuffle
  fullName: TFGraph.RandomShuffle
- uid: TensorFlow.TFGraph.RandomShuffleQueueV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RandomShuffleQueueV2
  nameWithType: TFGraph.RandomShuffleQueueV2
  fullName: TFGraph.RandomShuffleQueueV2
- uid: TensorFlow.TFGraph.RandomStandardNormal*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RandomStandardNormal
  nameWithType: TFGraph.RandomStandardNormal
  fullName: TFGraph.RandomStandardNormal
- uid: TensorFlow.TFGraph.RandomUniform*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RandomUniform
  nameWithType: TFGraph.RandomUniform
  fullName: TFGraph.RandomUniform
- uid: TensorFlow.TFGraph.RandomUniformInt*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RandomUniformInt
  nameWithType: TFGraph.RandomUniformInt
  fullName: TFGraph.RandomUniformInt
- uid: TensorFlow.TFGraph.Range*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Range
  nameWithType: TFGraph.Range
  fullName: TFGraph.Range
- uid: TensorFlow.TFGraph.RangeDataset*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RangeDataset
  nameWithType: TFGraph.RangeDataset
  fullName: TFGraph.RangeDataset
- uid: TensorFlow.TFGraph.Rank*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Rank
  nameWithType: TFGraph.Rank
  fullName: TFGraph.Rank
- uid: TensorFlow.TFGraph.ReaderNumRecordsProducedV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ReaderNumRecordsProducedV2
  nameWithType: TFGraph.ReaderNumRecordsProducedV2
  fullName: TFGraph.ReaderNumRecordsProducedV2
- uid: TensorFlow.TFGraph.ReaderNumWorkUnitsCompletedV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ReaderNumWorkUnitsCompletedV2
  nameWithType: TFGraph.ReaderNumWorkUnitsCompletedV2
  fullName: TFGraph.ReaderNumWorkUnitsCompletedV2
- uid: TensorFlow.TFGraph.ReaderReadUpToV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ReaderReadUpToV2
  nameWithType: TFGraph.ReaderReadUpToV2
  fullName: TFGraph.ReaderReadUpToV2
- uid: TensorFlow.TFGraph.ReaderReadV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ReaderReadV2
  nameWithType: TFGraph.ReaderReadV2
  fullName: TFGraph.ReaderReadV2
- uid: TensorFlow.TFGraph.ReaderResetV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ReaderResetV2
  nameWithType: TFGraph.ReaderResetV2
  fullName: TFGraph.ReaderResetV2
- uid: TensorFlow.TFGraph.ReaderRestoreStateV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ReaderRestoreStateV2
  nameWithType: TFGraph.ReaderRestoreStateV2
  fullName: TFGraph.ReaderRestoreStateV2
- uid: TensorFlow.TFGraph.ReaderSerializeStateV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ReaderSerializeStateV2
  nameWithType: TFGraph.ReaderSerializeStateV2
  fullName: TFGraph.ReaderSerializeStateV2
- uid: TensorFlow.TFGraph.ReadFile*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ReadFile
  nameWithType: TFGraph.ReadFile
  fullName: TFGraph.ReadFile
- uid: TensorFlow.TFGraph.ReadVariableOp*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ReadVariableOp
  nameWithType: TFGraph.ReadVariableOp
  fullName: TFGraph.ReadVariableOp
- uid: TensorFlow.TFGraph.Real*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Real
  nameWithType: TFGraph.Real
  fullName: TFGraph.Real
- uid: TensorFlow.TFGraph.RealDiv*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RealDiv
  nameWithType: TFGraph.RealDiv
  fullName: TFGraph.RealDiv
- uid: TensorFlow.TFGraph.Reciprocal*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Reciprocal
  nameWithType: TFGraph.Reciprocal
  fullName: TFGraph.Reciprocal
- uid: TensorFlow.TFGraph.ReciprocalGrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ReciprocalGrad
  nameWithType: TFGraph.ReciprocalGrad
  fullName: TFGraph.ReciprocalGrad
- uid: TensorFlow.TFGraph.RecordInput*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RecordInput
  nameWithType: TFGraph.RecordInput
  fullName: TFGraph.RecordInput
- uid: TensorFlow.TFGraph.ReduceJoin*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ReduceJoin
  nameWithType: TFGraph.ReduceJoin
  fullName: TFGraph.ReduceJoin
- uid: TensorFlow.TFGraph.ReduceSum*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ReduceSum
  nameWithType: TFGraph.ReduceSum
  fullName: TFGraph.ReduceSum
- uid: TensorFlow.TFGraph.Relu*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Relu
  nameWithType: TFGraph.Relu
  fullName: TFGraph.Relu
- uid: TensorFlow.TFGraph.Relu6*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Relu6
  nameWithType: TFGraph.Relu6
  fullName: TFGraph.Relu6
- uid: TensorFlow.TFGraph.Relu6Grad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Relu6Grad
  nameWithType: TFGraph.Relu6Grad
  fullName: TFGraph.Relu6Grad
- uid: TensorFlow.TFGraph.ReluGrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ReluGrad
  nameWithType: TFGraph.ReluGrad
  fullName: TFGraph.ReluGrad
- uid: TensorFlow.TFGraph.RemoteFusedGraphExecute*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RemoteFusedGraphExecute
  nameWithType: TFGraph.RemoteFusedGraphExecute
  fullName: TFGraph.RemoteFusedGraphExecute
- uid: TensorFlow.TFGraph.RepeatDataset*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RepeatDataset
  nameWithType: TFGraph.RepeatDataset
  fullName: TFGraph.RepeatDataset
- uid: TensorFlow.TFGraph.RequantizationRange*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RequantizationRange
  nameWithType: TFGraph.RequantizationRange
  fullName: TFGraph.RequantizationRange
- uid: TensorFlow.TFGraph.Requantize*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Requantize
  nameWithType: TFGraph.Requantize
  fullName: TFGraph.Requantize
- uid: TensorFlow.TFGraph.Reshape*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Reshape
  nameWithType: TFGraph.Reshape
  fullName: TFGraph.Reshape
- uid: TensorFlow.TFGraph.ResizeArea*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResizeArea
  nameWithType: TFGraph.ResizeArea
  fullName: TFGraph.ResizeArea
- uid: TensorFlow.TFGraph.ResizeBicubic*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResizeBicubic
  nameWithType: TFGraph.ResizeBicubic
  fullName: TFGraph.ResizeBicubic
- uid: TensorFlow.TFGraph.ResizeBilinear*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResizeBilinear
  nameWithType: TFGraph.ResizeBilinear
  fullName: TFGraph.ResizeBilinear
- uid: TensorFlow.TFGraph.ResizeBilinearGrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResizeBilinearGrad
  nameWithType: TFGraph.ResizeBilinearGrad
  fullName: TFGraph.ResizeBilinearGrad
- uid: TensorFlow.TFGraph.ResizeNearestNeighbor*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResizeNearestNeighbor
  nameWithType: TFGraph.ResizeNearestNeighbor
  fullName: TFGraph.ResizeNearestNeighbor
- uid: TensorFlow.TFGraph.ResizeNearestNeighborGrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResizeNearestNeighborGrad
  nameWithType: TFGraph.ResizeNearestNeighborGrad
  fullName: TFGraph.ResizeNearestNeighborGrad
- uid: TensorFlow.TFGraph.ResourceApplyAdadelta*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceApplyAdadelta
  nameWithType: TFGraph.ResourceApplyAdadelta
  fullName: TFGraph.ResourceApplyAdadelta
- uid: TensorFlow.TFGraph.ResourceApplyAdagrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceApplyAdagrad
  nameWithType: TFGraph.ResourceApplyAdagrad
  fullName: TFGraph.ResourceApplyAdagrad
- uid: TensorFlow.TFGraph.ResourceApplyAdagradDA*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceApplyAdagradDA
  nameWithType: TFGraph.ResourceApplyAdagradDA
  fullName: TFGraph.ResourceApplyAdagradDA
- uid: TensorFlow.TFGraph.ResourceApplyAdam*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceApplyAdam
  nameWithType: TFGraph.ResourceApplyAdam
  fullName: TFGraph.ResourceApplyAdam
- uid: TensorFlow.TFGraph.ResourceApplyCenteredRMSProp*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceApplyCenteredRMSProp
  nameWithType: TFGraph.ResourceApplyCenteredRMSProp
  fullName: TFGraph.ResourceApplyCenteredRMSProp
- uid: TensorFlow.TFGraph.ResourceApplyFtrl*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceApplyFtrl
  nameWithType: TFGraph.ResourceApplyFtrl
  fullName: TFGraph.ResourceApplyFtrl
- uid: TensorFlow.TFGraph.ResourceApplyGradientDescent*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceApplyGradientDescent
  nameWithType: TFGraph.ResourceApplyGradientDescent
  fullName: TFGraph.ResourceApplyGradientDescent
- uid: TensorFlow.TFGraph.ResourceApplyMomentum*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceApplyMomentum
  nameWithType: TFGraph.ResourceApplyMomentum
  fullName: TFGraph.ResourceApplyMomentum
- uid: TensorFlow.TFGraph.ResourceApplyProximalAdagrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceApplyProximalAdagrad
  nameWithType: TFGraph.ResourceApplyProximalAdagrad
  fullName: TFGraph.ResourceApplyProximalAdagrad
- uid: TensorFlow.TFGraph.ResourceApplyProximalGradientDescent*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceApplyProximalGradientDescent
  nameWithType: TFGraph.ResourceApplyProximalGradientDescent
  fullName: TFGraph.ResourceApplyProximalGradientDescent
- uid: TensorFlow.TFGraph.ResourceApplyRMSProp*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceApplyRMSProp
  nameWithType: TFGraph.ResourceApplyRMSProp
  fullName: TFGraph.ResourceApplyRMSProp
- uid: TensorFlow.TFGraph.ResourceGather*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceGather
  nameWithType: TFGraph.ResourceGather
  fullName: TFGraph.ResourceGather
- uid: TensorFlow.TFGraph.ResourceScatterAdd*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceScatterAdd
  nameWithType: TFGraph.ResourceScatterAdd
  fullName: TFGraph.ResourceScatterAdd
- uid: TensorFlow.TFGraph.ResourceSparseApplyAdadelta*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceSparseApplyAdadelta
  nameWithType: TFGraph.ResourceSparseApplyAdadelta
  fullName: TFGraph.ResourceSparseApplyAdadelta
- uid: TensorFlow.TFGraph.ResourceSparseApplyAdagrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceSparseApplyAdagrad
  nameWithType: TFGraph.ResourceSparseApplyAdagrad
  fullName: TFGraph.ResourceSparseApplyAdagrad
- uid: TensorFlow.TFGraph.ResourceSparseApplyAdagradDA*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceSparseApplyAdagradDA
  nameWithType: TFGraph.ResourceSparseApplyAdagradDA
  fullName: TFGraph.ResourceSparseApplyAdagradDA
- uid: TensorFlow.TFGraph.ResourceSparseApplyCenteredRMSProp*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceSparseApplyCenteredRMSProp
  nameWithType: TFGraph.ResourceSparseApplyCenteredRMSProp
  fullName: TFGraph.ResourceSparseApplyCenteredRMSProp
- uid: TensorFlow.TFGraph.ResourceSparseApplyFtrl*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceSparseApplyFtrl
  nameWithType: TFGraph.ResourceSparseApplyFtrl
  fullName: TFGraph.ResourceSparseApplyFtrl
- uid: TensorFlow.TFGraph.ResourceSparseApplyMomentum*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceSparseApplyMomentum
  nameWithType: TFGraph.ResourceSparseApplyMomentum
  fullName: TFGraph.ResourceSparseApplyMomentum
- uid: TensorFlow.TFGraph.ResourceSparseApplyProximalAdagrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceSparseApplyProximalAdagrad
  nameWithType: TFGraph.ResourceSparseApplyProximalAdagrad
  fullName: TFGraph.ResourceSparseApplyProximalAdagrad
- uid: TensorFlow.TFGraph.ResourceSparseApplyProximalGradientDescent*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceSparseApplyProximalGradientDescent
  nameWithType: TFGraph.ResourceSparseApplyProximalGradientDescent
  fullName: TFGraph.ResourceSparseApplyProximalGradientDescent
- uid: TensorFlow.TFGraph.ResourceSparseApplyRMSProp*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceSparseApplyRMSProp
  nameWithType: TFGraph.ResourceSparseApplyRMSProp
  fullName: TFGraph.ResourceSparseApplyRMSProp
- uid: TensorFlow.TFGraph.ResourceStridedSliceAssign*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ResourceStridedSliceAssign
  nameWithType: TFGraph.ResourceStridedSliceAssign
  fullName: TFGraph.ResourceStridedSliceAssign
- uid: TensorFlow.TFGraph.Restore*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Restore
  nameWithType: TFGraph.Restore
  fullName: TFGraph.Restore
- uid: TensorFlow.TFGraph.RestoreSlice*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RestoreSlice
  nameWithType: TFGraph.RestoreSlice
  fullName: TFGraph.RestoreSlice
- uid: TensorFlow.TFGraph.RestoreV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RestoreV2
  nameWithType: TFGraph.RestoreV2
  fullName: TFGraph.RestoreV2
- uid: TensorFlow.TFGraph.Reverse*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Reverse
  nameWithType: TFGraph.Reverse
  fullName: TFGraph.Reverse
- uid: TensorFlow.TFGraph.ReverseSequence*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ReverseSequence
  nameWithType: TFGraph.ReverseSequence
  fullName: TFGraph.ReverseSequence
- uid: TensorFlow.TFGraph.ReverseV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ReverseV2
  nameWithType: TFGraph.ReverseV2
  fullName: TFGraph.ReverseV2
- uid: TensorFlow.TFGraph.RFFT*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RFFT
  nameWithType: TFGraph.RFFT
  fullName: TFGraph.RFFT
- uid: TensorFlow.TFGraph.RFFT2D*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RFFT2D
  nameWithType: TFGraph.RFFT2D
  fullName: TFGraph.RFFT2D
- uid: TensorFlow.TFGraph.RFFT3D*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RFFT3D
  nameWithType: TFGraph.RFFT3D
  fullName: TFGraph.RFFT3D
- uid: TensorFlow.TFGraph.RGBToHSV*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RGBToHSV
  nameWithType: TFGraph.RGBToHSV
  fullName: TFGraph.RGBToHSV
- uid: TensorFlow.TFGraph.Rint*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Rint
  nameWithType: TFGraph.Rint
  fullName: TFGraph.Rint
- uid: TensorFlow.TFGraph.Round*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Round
  nameWithType: TFGraph.Round
  fullName: TFGraph.Round
- uid: TensorFlow.TFGraph.Rsqrt*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Rsqrt
  nameWithType: TFGraph.Rsqrt
  fullName: TFGraph.Rsqrt
- uid: TensorFlow.TFGraph.RsqrtGrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: RsqrtGrad
  nameWithType: TFGraph.RsqrtGrad
  fullName: TFGraph.RsqrtGrad
- uid: TensorFlow.TFGraph.SampleDistortedBoundingBox*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SampleDistortedBoundingBox
  nameWithType: TFGraph.SampleDistortedBoundingBox
  fullName: TFGraph.SampleDistortedBoundingBox
- uid: TensorFlow.TFGraph.Save*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Save
  nameWithType: TFGraph.Save
  fullName: TFGraph.Save
- uid: TensorFlow.TFGraph.SaveSlices*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SaveSlices
  nameWithType: TFGraph.SaveSlices
  fullName: TFGraph.SaveSlices
- uid: TensorFlow.TFGraph.SaveV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SaveV2
  nameWithType: TFGraph.SaveV2
  fullName: TFGraph.SaveV2
- uid: TensorFlow.TFGraph.ScalarSummary*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ScalarSummary
  nameWithType: TFGraph.ScalarSummary
  fullName: TFGraph.ScalarSummary
- uid: TensorFlow.TFGraph.ScatterNd*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ScatterNd
  nameWithType: TFGraph.ScatterNd
  fullName: TFGraph.ScatterNd
- uid: TensorFlow.TFGraph.SdcaFprint*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SdcaFprint
  nameWithType: TFGraph.SdcaFprint
  fullName: TFGraph.SdcaFprint
- uid: TensorFlow.TFGraph.SdcaOptimizer*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SdcaOptimizer
  nameWithType: TFGraph.SdcaOptimizer
  fullName: TFGraph.SdcaOptimizer
- uid: TensorFlow.TFGraph.Seed*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Seed
  nameWithType: TFGraph.Seed
  fullName: TFGraph.Seed
- uid: TensorFlow.TFGraph.SegmentMax*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SegmentMax
  nameWithType: TFGraph.SegmentMax
  fullName: TFGraph.SegmentMax
- uid: TensorFlow.TFGraph.SegmentMean*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SegmentMean
  nameWithType: TFGraph.SegmentMean
  fullName: TFGraph.SegmentMean
- uid: TensorFlow.TFGraph.SegmentMin*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SegmentMin
  nameWithType: TFGraph.SegmentMin
  fullName: TFGraph.SegmentMin
- uid: TensorFlow.TFGraph.SegmentProd*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SegmentProd
  nameWithType: TFGraph.SegmentProd
  fullName: TFGraph.SegmentProd
- uid: TensorFlow.TFGraph.SegmentSum*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SegmentSum
  nameWithType: TFGraph.SegmentSum
  fullName: TFGraph.SegmentSum
- uid: TensorFlow.TFGraph.Select*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Select
  nameWithType: TFGraph.Select
  fullName: TFGraph.Select
- uid: TensorFlow.TFGraph.SelfAdjointEig*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SelfAdjointEig
  nameWithType: TFGraph.SelfAdjointEig
  fullName: TFGraph.SelfAdjointEig
- uid: TensorFlow.TFGraph.SelfAdjointEigV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SelfAdjointEigV2
  nameWithType: TFGraph.SelfAdjointEigV2
  fullName: TFGraph.SelfAdjointEigV2
- uid: TensorFlow.TFGraph.SerializeManySparse*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SerializeManySparse
  nameWithType: TFGraph.SerializeManySparse
  fullName: TFGraph.SerializeManySparse
- uid: TensorFlow.TFGraph.SerializeSparse*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SerializeSparse
  nameWithType: TFGraph.SerializeSparse
  fullName: TFGraph.SerializeSparse
- uid: TensorFlow.TFGraph.SetSize*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SetSize
  nameWithType: TFGraph.SetSize
  fullName: TFGraph.SetSize
- uid: TensorFlow.TFGraph.SetTensorShape*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SetTensorShape
  nameWithType: TFGraph.SetTensorShape
  fullName: TFGraph.SetTensorShape
- uid: TensorFlow.TFGraph.Shape*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Shape
  nameWithType: TFGraph.Shape
  fullName: TFGraph.Shape
- uid: TensorFlow.TFGraph.ShapeN*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ShapeN
  nameWithType: TFGraph.ShapeN
  fullName: TFGraph.ShapeN
- uid: TensorFlow.TFGraph.ShardedFilename*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ShardedFilename
  nameWithType: TFGraph.ShardedFilename
  fullName: TFGraph.ShardedFilename
- uid: TensorFlow.TFGraph.ShardedFilespec*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ShardedFilespec
  nameWithType: TFGraph.ShardedFilespec
  fullName: TFGraph.ShardedFilespec
- uid: TensorFlow.TFGraph.ShuffleDataset*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ShuffleDataset
  nameWithType: TFGraph.ShuffleDataset
  fullName: TFGraph.ShuffleDataset
- uid: TensorFlow.TFGraph.Sigmoid*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Sigmoid
  nameWithType: TFGraph.Sigmoid
  fullName: TFGraph.Sigmoid
- uid: TensorFlow.TFGraph.SigmoidGrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SigmoidGrad
  nameWithType: TFGraph.SigmoidGrad
  fullName: TFGraph.SigmoidGrad
- uid: TensorFlow.TFGraph.Sign*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Sign
  nameWithType: TFGraph.Sign
  fullName: TFGraph.Sign
- uid: TensorFlow.TFGraph.Sin*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Sin
  nameWithType: TFGraph.Sin
  fullName: TFGraph.Sin
- uid: TensorFlow.TFGraph.Sinh*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Sinh
  nameWithType: TFGraph.Sinh
  fullName: TFGraph.Sinh
- uid: TensorFlow.TFGraph.Size*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Size
  nameWithType: TFGraph.Size
  fullName: TFGraph.Size
- uid: TensorFlow.TFGraph.SkipDataset*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SkipDataset
  nameWithType: TFGraph.SkipDataset
  fullName: TFGraph.SkipDataset
- uid: TensorFlow.TFGraph.Skipgram*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Skipgram
  nameWithType: TFGraph.Skipgram
  fullName: TFGraph.Skipgram
- uid: TensorFlow.TFGraph.Slice*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Slice
  nameWithType: TFGraph.Slice
  fullName: TFGraph.Slice
- uid: TensorFlow.TFGraph.Softmax*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Softmax
  nameWithType: TFGraph.Softmax
  fullName: TFGraph.Softmax
- uid: TensorFlow.TFGraph.SoftmaxCrossEntropyWithLogits*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SoftmaxCrossEntropyWithLogits
  nameWithType: TFGraph.SoftmaxCrossEntropyWithLogits
  fullName: TFGraph.SoftmaxCrossEntropyWithLogits
- uid: TensorFlow.TFGraph.Softplus*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Softplus
  nameWithType: TFGraph.Softplus
  fullName: TFGraph.Softplus
- uid: TensorFlow.TFGraph.SoftplusGrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SoftplusGrad
  nameWithType: TFGraph.SoftplusGrad
  fullName: TFGraph.SoftplusGrad
- uid: TensorFlow.TFGraph.Softsign*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Softsign
  nameWithType: TFGraph.Softsign
  fullName: TFGraph.Softsign
- uid: TensorFlow.TFGraph.SoftsignGrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SoftsignGrad
  nameWithType: TFGraph.SoftsignGrad
  fullName: TFGraph.SoftsignGrad
- uid: TensorFlow.TFGraph.SpaceToBatch*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SpaceToBatch
  nameWithType: TFGraph.SpaceToBatch
  fullName: TFGraph.SpaceToBatch
- uid: TensorFlow.TFGraph.SpaceToBatchND*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SpaceToBatchND
  nameWithType: TFGraph.SpaceToBatchND
  fullName: TFGraph.SpaceToBatchND
- uid: TensorFlow.TFGraph.SpaceToDepth*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SpaceToDepth
  nameWithType: TFGraph.SpaceToDepth
  fullName: TFGraph.SpaceToDepth
- uid: TensorFlow.TFGraph.SparseAdd*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseAdd
  nameWithType: TFGraph.SparseAdd
  fullName: TFGraph.SparseAdd
- uid: TensorFlow.TFGraph.SparseAddGrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseAddGrad
  nameWithType: TFGraph.SparseAddGrad
  fullName: TFGraph.SparseAddGrad
- uid: TensorFlow.TFGraph.SparseConcat*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseConcat
  nameWithType: TFGraph.SparseConcat
  fullName: TFGraph.SparseConcat
- uid: TensorFlow.TFGraph.SparseCross*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseCross
  nameWithType: TFGraph.SparseCross
  fullName: TFGraph.SparseCross
- uid: TensorFlow.TFGraph.SparseDenseCwiseAdd*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseDenseCwiseAdd
  nameWithType: TFGraph.SparseDenseCwiseAdd
  fullName: TFGraph.SparseDenseCwiseAdd
- uid: TensorFlow.TFGraph.SparseDenseCwiseDiv*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseDenseCwiseDiv
  nameWithType: TFGraph.SparseDenseCwiseDiv
  fullName: TFGraph.SparseDenseCwiseDiv
- uid: TensorFlow.TFGraph.SparseDenseCwiseMul*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseDenseCwiseMul
  nameWithType: TFGraph.SparseDenseCwiseMul
  fullName: TFGraph.SparseDenseCwiseMul
- uid: TensorFlow.TFGraph.SparseFillEmptyRows*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseFillEmptyRows
  nameWithType: TFGraph.SparseFillEmptyRows
  fullName: TFGraph.SparseFillEmptyRows
- uid: TensorFlow.TFGraph.SparseFillEmptyRowsGrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseFillEmptyRowsGrad
  nameWithType: TFGraph.SparseFillEmptyRowsGrad
  fullName: TFGraph.SparseFillEmptyRowsGrad
- uid: TensorFlow.TFGraph.SparseMatMul*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseMatMul
  nameWithType: TFGraph.SparseMatMul
  fullName: TFGraph.SparseMatMul
- uid: TensorFlow.TFGraph.SparseReduceMax*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseReduceMax
  nameWithType: TFGraph.SparseReduceMax
  fullName: TFGraph.SparseReduceMax
- uid: TensorFlow.TFGraph.SparseReduceMaxSparse*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseReduceMaxSparse
  nameWithType: TFGraph.SparseReduceMaxSparse
  fullName: TFGraph.SparseReduceMaxSparse
- uid: TensorFlow.TFGraph.SparseReduceSum*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseReduceSum
  nameWithType: TFGraph.SparseReduceSum
  fullName: TFGraph.SparseReduceSum
- uid: TensorFlow.TFGraph.SparseReduceSumSparse*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseReduceSumSparse
  nameWithType: TFGraph.SparseReduceSumSparse
  fullName: TFGraph.SparseReduceSumSparse
- uid: TensorFlow.TFGraph.SparseReorder*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseReorder
  nameWithType: TFGraph.SparseReorder
  fullName: TFGraph.SparseReorder
- uid: TensorFlow.TFGraph.SparseReshape*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseReshape
  nameWithType: TFGraph.SparseReshape
  fullName: TFGraph.SparseReshape
- uid: TensorFlow.TFGraph.SparseSegmentMean*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseSegmentMean
  nameWithType: TFGraph.SparseSegmentMean
  fullName: TFGraph.SparseSegmentMean
- uid: TensorFlow.TFGraph.SparseSegmentMeanGrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseSegmentMeanGrad
  nameWithType: TFGraph.SparseSegmentMeanGrad
  fullName: TFGraph.SparseSegmentMeanGrad
- uid: TensorFlow.TFGraph.SparseSegmentSqrtN*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseSegmentSqrtN
  nameWithType: TFGraph.SparseSegmentSqrtN
  fullName: TFGraph.SparseSegmentSqrtN
- uid: TensorFlow.TFGraph.SparseSegmentSqrtNGrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseSegmentSqrtNGrad
  nameWithType: TFGraph.SparseSegmentSqrtNGrad
  fullName: TFGraph.SparseSegmentSqrtNGrad
- uid: TensorFlow.TFGraph.SparseSegmentSum*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseSegmentSum
  nameWithType: TFGraph.SparseSegmentSum
  fullName: TFGraph.SparseSegmentSum
- uid: TensorFlow.TFGraph.SparseSoftmax*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseSoftmax
  nameWithType: TFGraph.SparseSoftmax
  fullName: TFGraph.SparseSoftmax
- uid: TensorFlow.TFGraph.SparseSoftmaxCrossEntropyWithLogits*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseSoftmaxCrossEntropyWithLogits
  nameWithType: TFGraph.SparseSoftmaxCrossEntropyWithLogits
  fullName: TFGraph.SparseSoftmaxCrossEntropyWithLogits
- uid: TensorFlow.TFGraph.SparseSparseMaximum*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseSparseMaximum
  nameWithType: TFGraph.SparseSparseMaximum
  fullName: TFGraph.SparseSparseMaximum
- uid: TensorFlow.TFGraph.SparseSparseMinimum*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseSparseMinimum
  nameWithType: TFGraph.SparseSparseMinimum
  fullName: TFGraph.SparseSparseMinimum
- uid: TensorFlow.TFGraph.SparseSplit*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseSplit
  nameWithType: TFGraph.SparseSplit
  fullName: TFGraph.SparseSplit
- uid: TensorFlow.TFGraph.SparseTensorDenseAdd*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseTensorDenseAdd
  nameWithType: TFGraph.SparseTensorDenseAdd
  fullName: TFGraph.SparseTensorDenseAdd
- uid: TensorFlow.TFGraph.SparseTensorDenseMatMul*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseTensorDenseMatMul
  nameWithType: TFGraph.SparseTensorDenseMatMul
  fullName: TFGraph.SparseTensorDenseMatMul
- uid: TensorFlow.TFGraph.SparseTensorSliceDataset*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseTensorSliceDataset
  nameWithType: TFGraph.SparseTensorSliceDataset
  fullName: TFGraph.SparseTensorSliceDataset
- uid: TensorFlow.TFGraph.SparseToDense*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseToDense
  nameWithType: TFGraph.SparseToDense
  fullName: TFGraph.SparseToDense
- uid: TensorFlow.TFGraph.SparseToSparseSetOperation*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SparseToSparseSetOperation
  nameWithType: TFGraph.SparseToSparseSetOperation
  fullName: TFGraph.SparseToSparseSetOperation
- uid: TensorFlow.TFGraph.Split*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Split
  nameWithType: TFGraph.Split
  fullName: TFGraph.Split
- uid: TensorFlow.TFGraph.SplitV*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SplitV
  nameWithType: TFGraph.SplitV
  fullName: TFGraph.SplitV
- uid: TensorFlow.TFGraph.Sqrt*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Sqrt
  nameWithType: TFGraph.Sqrt
  fullName: TFGraph.Sqrt
- uid: TensorFlow.TFGraph.SqrtGrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SqrtGrad
  nameWithType: TFGraph.SqrtGrad
  fullName: TFGraph.SqrtGrad
- uid: TensorFlow.TFGraph.Square*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Square
  nameWithType: TFGraph.Square
  fullName: TFGraph.Square
- uid: TensorFlow.TFGraph.SquaredDifference*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: SquaredDifference
  nameWithType: TFGraph.SquaredDifference
  fullName: TFGraph.SquaredDifference
- uid: TensorFlow.TFGraph.Squeeze*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Squeeze
  nameWithType: TFGraph.Squeeze
  fullName: TFGraph.Squeeze
- uid: TensorFlow.TFGraph.Stage*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Stage
  nameWithType: TFGraph.Stage
  fullName: TFGraph.Stage
- uid: TensorFlow.TFGraph.StageClear*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: StageClear
  nameWithType: TFGraph.StageClear
  fullName: TFGraph.StageClear
- uid: TensorFlow.TFGraph.StagePeek*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: StagePeek
  nameWithType: TFGraph.StagePeek
  fullName: TFGraph.StagePeek
- uid: TensorFlow.TFGraph.StageSize*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: StageSize
  nameWithType: TFGraph.StageSize
  fullName: TFGraph.StageSize
- uid: TensorFlow.TFGraph.StatelessRandomNormal*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: StatelessRandomNormal
  nameWithType: TFGraph.StatelessRandomNormal
  fullName: TFGraph.StatelessRandomNormal
- uid: TensorFlow.TFGraph.StatelessRandomUniform*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: StatelessRandomUniform
  nameWithType: TFGraph.StatelessRandomUniform
  fullName: TFGraph.StatelessRandomUniform
- uid: TensorFlow.TFGraph.StatelessTruncatedNormal*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: StatelessTruncatedNormal
  nameWithType: TFGraph.StatelessTruncatedNormal
  fullName: TFGraph.StatelessTruncatedNormal
- uid: TensorFlow.TFGraph.StopGradient*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: StopGradient
  nameWithType: TFGraph.StopGradient
  fullName: TFGraph.StopGradient
- uid: TensorFlow.TFGraph.StridedSlice*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: StridedSlice
  nameWithType: TFGraph.StridedSlice
  fullName: TFGraph.StridedSlice
- uid: TensorFlow.TFGraph.StridedSliceGrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: StridedSliceGrad
  nameWithType: TFGraph.StridedSliceGrad
  fullName: TFGraph.StridedSliceGrad
- uid: TensorFlow.TFGraph.StringJoin*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: StringJoin
  nameWithType: TFGraph.StringJoin
  fullName: TFGraph.StringJoin
- uid: TensorFlow.TFGraph.StringSplit*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: StringSplit
  nameWithType: TFGraph.StringSplit
  fullName: TFGraph.StringSplit
- uid: TensorFlow.TFGraph.StringToHashBucket*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: StringToHashBucket
  nameWithType: TFGraph.StringToHashBucket
  fullName: TFGraph.StringToHashBucket
- uid: TensorFlow.TFGraph.StringToHashBucketFast*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: StringToHashBucketFast
  nameWithType: TFGraph.StringToHashBucketFast
  fullName: TFGraph.StringToHashBucketFast
- uid: TensorFlow.TFGraph.StringToHashBucketStrong*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: StringToHashBucketStrong
  nameWithType: TFGraph.StringToHashBucketStrong
  fullName: TFGraph.StringToHashBucketStrong
- uid: TensorFlow.TFGraph.StringToNumber*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: StringToNumber
  nameWithType: TFGraph.StringToNumber
  fullName: TFGraph.StringToNumber
- uid: TensorFlow.TFGraph.Sub*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Sub
  nameWithType: TFGraph.Sub
  fullName: TFGraph.Sub
- uid: TensorFlow.TFGraph.Substr*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Substr
  nameWithType: TFGraph.Substr
  fullName: TFGraph.Substr
- uid: TensorFlow.TFGraph.Sum*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Sum
  nameWithType: TFGraph.Sum
  fullName: TFGraph.Sum
- uid: TensorFlow.TFGraph.Svd*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Svd
  nameWithType: TFGraph.Svd
  fullName: TFGraph.Svd
- uid: TensorFlow.TFGraph.Switch*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Switch
  nameWithType: TFGraph.Switch
  fullName: TFGraph.Switch
- uid: TensorFlow.TFGraph.TakeDataset*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TakeDataset
  nameWithType: TFGraph.TakeDataset
  fullName: TFGraph.TakeDataset
- uid: TensorFlow.TFGraph.TakeManySparseFromTensorsMap*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TakeManySparseFromTensorsMap
  nameWithType: TFGraph.TakeManySparseFromTensorsMap
  fullName: TFGraph.TakeManySparseFromTensorsMap
- uid: TensorFlow.TFGraph.Tan*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Tan
  nameWithType: TFGraph.Tan
  fullName: TFGraph.Tan
- uid: TensorFlow.TFGraph.Tanh*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Tanh
  nameWithType: TFGraph.Tanh
  fullName: TFGraph.Tanh
- uid: TensorFlow.TFGraph.TanhGrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TanhGrad
  nameWithType: TFGraph.TanhGrad
  fullName: TFGraph.TanhGrad
- uid: TensorFlow.TFGraph.TensorArrayCloseV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArrayCloseV2
  nameWithType: TFGraph.TensorArrayCloseV2
  fullName: TFGraph.TensorArrayCloseV2
- uid: TensorFlow.TFGraph.TensorArrayCloseV3*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArrayCloseV3
  nameWithType: TFGraph.TensorArrayCloseV3
  fullName: TFGraph.TensorArrayCloseV3
- uid: TensorFlow.TFGraph.TensorArrayConcatV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArrayConcatV2
  nameWithType: TFGraph.TensorArrayConcatV2
  fullName: TFGraph.TensorArrayConcatV2
- uid: TensorFlow.TFGraph.TensorArrayConcatV3*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArrayConcatV3
  nameWithType: TFGraph.TensorArrayConcatV3
  fullName: TFGraph.TensorArrayConcatV3
- uid: TensorFlow.TFGraph.TensorArrayGatherV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArrayGatherV2
  nameWithType: TFGraph.TensorArrayGatherV2
  fullName: TFGraph.TensorArrayGatherV2
- uid: TensorFlow.TFGraph.TensorArrayGatherV3*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArrayGatherV3
  nameWithType: TFGraph.TensorArrayGatherV3
  fullName: TFGraph.TensorArrayGatherV3
- uid: TensorFlow.TFGraph.TensorArrayGradV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArrayGradV2
  nameWithType: TFGraph.TensorArrayGradV2
  fullName: TFGraph.TensorArrayGradV2
- uid: TensorFlow.TFGraph.TensorArrayGradV3*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArrayGradV3
  nameWithType: TFGraph.TensorArrayGradV3
  fullName: TFGraph.TensorArrayGradV3
- uid: TensorFlow.TFGraph.TensorArrayReadV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArrayReadV2
  nameWithType: TFGraph.TensorArrayReadV2
  fullName: TFGraph.TensorArrayReadV2
- uid: TensorFlow.TFGraph.TensorArrayReadV3*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArrayReadV3
  nameWithType: TFGraph.TensorArrayReadV3
  fullName: TFGraph.TensorArrayReadV3
- uid: TensorFlow.TFGraph.TensorArrayScatterV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArrayScatterV2
  nameWithType: TFGraph.TensorArrayScatterV2
  fullName: TFGraph.TensorArrayScatterV2
- uid: TensorFlow.TFGraph.TensorArrayScatterV3*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArrayScatterV3
  nameWithType: TFGraph.TensorArrayScatterV3
  fullName: TFGraph.TensorArrayScatterV3
- uid: TensorFlow.TFGraph.TensorArraySizeV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArraySizeV2
  nameWithType: TFGraph.TensorArraySizeV2
  fullName: TFGraph.TensorArraySizeV2
- uid: TensorFlow.TFGraph.TensorArraySizeV3*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArraySizeV3
  nameWithType: TFGraph.TensorArraySizeV3
  fullName: TFGraph.TensorArraySizeV3
- uid: TensorFlow.TFGraph.TensorArraySplitV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArraySplitV2
  nameWithType: TFGraph.TensorArraySplitV2
  fullName: TFGraph.TensorArraySplitV2
- uid: TensorFlow.TFGraph.TensorArraySplitV3*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArraySplitV3
  nameWithType: TFGraph.TensorArraySplitV3
  fullName: TFGraph.TensorArraySplitV3
- uid: TensorFlow.TFGraph.TensorArrayV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArrayV2
  nameWithType: TFGraph.TensorArrayV2
  fullName: TFGraph.TensorArrayV2
- uid: TensorFlow.TFGraph.TensorArrayV3*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArrayV3
  nameWithType: TFGraph.TensorArrayV3
  fullName: TFGraph.TensorArrayV3
- uid: TensorFlow.TFGraph.TensorArrayWriteV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArrayWriteV2
  nameWithType: TFGraph.TensorArrayWriteV2
  fullName: TFGraph.TensorArrayWriteV2
- uid: TensorFlow.TFGraph.TensorArrayWriteV3*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorArrayWriteV3
  nameWithType: TFGraph.TensorArrayWriteV3
  fullName: TFGraph.TensorArrayWriteV3
- uid: TensorFlow.TFGraph.TensorDataset*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorDataset
  nameWithType: TFGraph.TensorDataset
  fullName: TFGraph.TensorDataset
- uid: TensorFlow.TFGraph.TensorSliceDataset*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorSliceDataset
  nameWithType: TFGraph.TensorSliceDataset
  fullName: TFGraph.TensorSliceDataset
- uid: TensorFlow.TFGraph.TensorSummary*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorSummary
  nameWithType: TFGraph.TensorSummary
  fullName: TFGraph.TensorSummary
- uid: TensorFlow.TFGraph.TensorSummaryV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TensorSummaryV2
  nameWithType: TFGraph.TensorSummaryV2
  fullName: TFGraph.TensorSummaryV2
- uid: TensorFlow.TFGraph.TextLineDataset*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TextLineDataset
  nameWithType: TFGraph.TextLineDataset
  fullName: TFGraph.TextLineDataset
- uid: TensorFlow.TFGraph.TextLineReaderV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TextLineReaderV2
  nameWithType: TFGraph.TextLineReaderV2
  fullName: TFGraph.TextLineReaderV2
- uid: TensorFlow.TFGraph.TFRecordDataset*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TFRecordDataset
  nameWithType: TFGraph.TFRecordDataset
  fullName: TFGraph.TFRecordDataset
- uid: TensorFlow.TFGraph.TFRecordReaderV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TFRecordReaderV2
  nameWithType: TFGraph.TFRecordReaderV2
  fullName: TFGraph.TFRecordReaderV2
- uid: TensorFlow.TFGraph.ThreadUnsafeUnigramCandidateSampler*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ThreadUnsafeUnigramCandidateSampler
  nameWithType: TFGraph.ThreadUnsafeUnigramCandidateSampler
  fullName: TFGraph.ThreadUnsafeUnigramCandidateSampler
- uid: TensorFlow.TFGraph.Tile*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Tile
  nameWithType: TFGraph.Tile
  fullName: TFGraph.Tile
- uid: TensorFlow.TFGraph.TileGrad*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TileGrad
  nameWithType: TFGraph.TileGrad
  fullName: TFGraph.TileGrad
- uid: TensorFlow.TFGraph.ToGraphDef*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ToGraphDef
  nameWithType: TFGraph.ToGraphDef
  fullName: TFGraph.ToGraphDef
- uid: TensorFlow.TFGraph.TopK*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TopK
  nameWithType: TFGraph.TopK
  fullName: TFGraph.TopK
- uid: TensorFlow.TFGraph.TopKV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TopKV2
  nameWithType: TFGraph.TopKV2
  fullName: TFGraph.TopKV2
- uid: TensorFlow.TFGraph.Transpose*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Transpose
  nameWithType: TFGraph.Transpose
  fullName: TFGraph.Transpose
- uid: TensorFlow.TFGraph.TruncateDiv*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TruncateDiv
  nameWithType: TFGraph.TruncateDiv
  fullName: TFGraph.TruncateDiv
- uid: TensorFlow.TFGraph.TruncatedNormal*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TruncatedNormal
  nameWithType: TFGraph.TruncatedNormal
  fullName: TFGraph.TruncatedNormal
- uid: TensorFlow.TFGraph.TruncateMod*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: TruncateMod
  nameWithType: TFGraph.TruncateMod
  fullName: TFGraph.TruncateMod
- uid: TensorFlow.TFGraph.UniformCandidateSampler*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: UniformCandidateSampler
  nameWithType: TFGraph.UniformCandidateSampler
  fullName: TFGraph.UniformCandidateSampler
- uid: TensorFlow.TFGraph.Unique*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Unique
  nameWithType: TFGraph.Unique
  fullName: TFGraph.Unique
- uid: TensorFlow.TFGraph.UniqueWithCounts*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: UniqueWithCounts
  nameWithType: TFGraph.UniqueWithCounts
  fullName: TFGraph.UniqueWithCounts
- uid: TensorFlow.TFGraph.Unpack*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Unpack
  nameWithType: TFGraph.Unpack
  fullName: TFGraph.Unpack
- uid: TensorFlow.TFGraph.UnsortedSegmentMax*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: UnsortedSegmentMax
  nameWithType: TFGraph.UnsortedSegmentMax
  fullName: TFGraph.UnsortedSegmentMax
- uid: TensorFlow.TFGraph.UnsortedSegmentSum*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: UnsortedSegmentSum
  nameWithType: TFGraph.UnsortedSegmentSum
  fullName: TFGraph.UnsortedSegmentSum
- uid: TensorFlow.TFGraph.Unstage*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Unstage
  nameWithType: TFGraph.Unstage
  fullName: TFGraph.Unstage
- uid: TensorFlow.TFGraph.VarHandleOp*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: VarHandleOp
  nameWithType: TFGraph.VarHandleOp
  fullName: TFGraph.VarHandleOp
- uid: TensorFlow.TFGraph.Variable*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Variable
  nameWithType: TFGraph.Variable
  fullName: TFGraph.Variable
- uid: TensorFlow.TFGraph.VarIsInitializedOp*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: VarIsInitializedOp
  nameWithType: TFGraph.VarIsInitializedOp
  fullName: TFGraph.VarIsInitializedOp
- uid: TensorFlow.TFGraph.Where*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Where
  nameWithType: TFGraph.Where
  fullName: TFGraph.Where
- uid: TensorFlow.TFGraph.While*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: While
  nameWithType: TFGraph.While
  fullName: TFGraph.While
- uid: TensorFlow.TFGraph.WholeFileReaderV2*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: WholeFileReaderV2
  nameWithType: TFGraph.WholeFileReaderV2
  fullName: TFGraph.WholeFileReaderV2
- uid: TensorFlow.TFGraph.WithScope*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: WithScope
  nameWithType: TFGraph.WithScope
  fullName: TFGraph.WithScope
- uid: TensorFlow.TFGraph.WriteFile*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: WriteFile
  nameWithType: TFGraph.WriteFile
  fullName: TFGraph.WriteFile
- uid: TensorFlow.TFGraph.ZerosLike*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ZerosLike
  nameWithType: TFGraph.ZerosLike
  fullName: TFGraph.ZerosLike
- uid: TensorFlow.TFGraph.Zeta*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: Zeta
  nameWithType: TFGraph.Zeta
  fullName: TFGraph.Zeta
- uid: TensorFlow.TFGraph.ZipDataset*
  parent: TensorFlow.TFGraph
  isExternal: false
  name: ZipDataset
  nameWithType: TFGraph.ZipDataset
  fullName: TFGraph.ZipDataset
- uid: TensorFlow.TFDisposable.Dispose
  parent: TensorFlow.TFDisposable
  isExternal: false
  name: Dispose()
  nameWithType: TFDisposable.Dispose()
  fullName: TFDisposable.Dispose()
- uid: TensorFlow.TFDisposable.Dispose(System.Boolean)
  parent: TensorFlow.TFDisposable
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: TFDisposable.Dispose(Boolean)
  fullName: TFDisposable.Dispose(Boolean)
- uid: TensorFlow.TFDisposable.Handle
  parent: TensorFlow.TFDisposable
  isExternal: false
  name: Handle
  nameWithType: TFDisposable.Handle
  fullName: TFDisposable.Handle
