<Type Name="TFGraph" FullName="TensorFlow.TFGraph">
  <TypeSignature Language="C#" Value="public class TFGraph : TensorFlow.TFDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TFGraph extends TensorFlow.TFDisposable" />
  <AssemblyInfo>
    <AssemblyName>TensorFlowSharp</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>TensorFlow.TFDisposable</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Represents a computation graph.  Graphs may be shared between sessions and are thread safe.
            </summary>
    <remarks>
      <para>
            Graphs consist of operations (represented by TFOperation objects), these can be named, or 
            the runtime will automatically assign a name.
            </para>
      <para>
            For debugging purposes, you might want to group operations together, for this, call the
            WithScope method with your new scope, which will create a new namespace for your object names.
            </para>
      <para>
            For example, if you call WithScope ("demo"), and add an operation named "add" inside the
            scope, the full name of the operation will be "demo/add", if you create a new scope inside, say
            "hot", and add a "sub" operation there the result will be "demo/hot/sub".
            </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TFGraph ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:TensorFlow.TFGraph" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation Abort (string error_msg = null, Nullable&lt;bool&gt; exit_without_error = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation Abort(string error_msg, valuetype System.Nullable`1&lt;bool&gt; exit_without_error, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error_msg" Type="System.String" />
        <Parameter Name="exit_without_error" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="error_msg">
              Optional argument
              A string which is the message associated with the exception.
            </param>
        <param name="exit_without_error">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Abort'.
            </param>
        <summary>
              Raise a exception to abort the process when called.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              If exit_without_error is true, the process will exit normally,
              otherwise it will exit with a SIGABORT signal.
              
              Returns nothing but an exception.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Abs (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Abs(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Abs'.
            </param>
        <summary>
              Computes the absolute value of a tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given a tensor `x`, this operation returns a tensor containing the absolute
              value of each element in `x`. For example, if x is an input element and y is
              an output element, this operation computes \\(y = |x|\\).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Acos">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Acos (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Acos(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Acos'.
            </param>
        <summary>
              Computes acos of x element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Add (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Add(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Add'.
            </param>
        <summary>
              Returns x + y element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *NOTE*: `Add` supports broadcasting. `AddN` does not. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddGradients">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] AddGradients (TensorFlow.TFOutput[] y, TensorFlow.TFOutput[] x, TensorFlow.TFOutput[] dx = null, TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] AddGradients(valuetype TensorFlow.TFOutput[] y, valuetype TensorFlow.TFOutput[] x, valuetype TensorFlow.TFOutput[] dx, class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="y" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="x" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="dx" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="y">The y elements.</param>
        <param name="x">The x elements.</param>
        <param name="dx">Initial gradients, which represent the symbolic partial derivatives of some loss function `L` w.r.t. <paramref name="y" /> ).   
            If the parameter is null, the implementation will use dx for 'OnesLike' for all shapes in <paramref name="y" /></param>
        <param name="status">Status buffer, if specified a status code will be left here, if not specified, a <see cref="T:TensorFlow.TFException" /> exception is raised if there is an error.</param>
        <summary>
            Adds a gradient: the operations needed to compute the partial derivatives of sum of <paramref name="y" />` wrt to <paramref name="x" />.
            </summary>
        <returns>The partial derivatives, the size of the array is the same as the length of the <paramref name="y" /> array.</returns>
        <remarks>
            d(y[0] + y[1]+ ...)/dx[0], d(y[0] + y[1] + ...)/dx[1]z...
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddInitVariable">
      <MemberSignature Language="C#" Value="public void AddInitVariable (TensorFlow.TFOperation variable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddInitVariable(class TensorFlow.TFOperation variable) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="TensorFlow.TFOperation" />
      </Parameters>
      <Docs>
        <param name="variable">Variable to register.</param>
        <summary>
            Registers a specified variable as an initialization variable.
            </summary>
        <remarks>
          <para>
            This is a convenience method to track the variables that need to be initialized in the graph,
            you can retrieve the list of all those variables by calling the <see cref="M:TensorFlow.TFGraph.GetGlobalVariablesInitializer" />
            which will return this list and clear the state at that point.
            </para>
          <para>
            You typically use this method from helper methods to register all the variables that you want
            initialized, and a higher level method will retrieve all these variables and initialize them
            at their convenience.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddManySparseToTensorsMap">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AddManySparseToTensorsMap (TensorFlow.TFOutput sparse_indices, TensorFlow.TFOutput sparse_values, TensorFlow.TFOutput sparse_shape, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AddManySparseToTensorsMap(valuetype TensorFlow.TFOutput sparse_indices, valuetype TensorFlow.TFOutput sparse_values, valuetype TensorFlow.TFOutput sparse_shape, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sparse_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="sparse_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="sparse_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sparse_indices">
              2-D.  The `indices` of the minibatch `SparseTensor`.
              `sparse_indices[:, 0]` must be ordered values in `[0, N)`.
            </param>
        <param name="sparse_values">
              1-D.  The `values` of the minibatch `SparseTensor`.
            </param>
        <param name="sparse_shape">
              1-D.  The `shape` of the minibatch `SparseTensor`.
              The minibatch size `N == sparse_shape[0]`.
            </param>
        <param name="container">
              Optional argument
              The container name for the `SparseTensorsMap` created by this op.
            </param>
        <param name="shared_name">
              Optional argument
              The shared name for the `SparseTensorsMap` created by this op.
              If blank, the new Operation's unique name is used.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AddManySparseToTensorsMap'.
            </param>
        <summary>
              Add an `N`-minibatch `SparseTensor` to a `SparseTensorsMap`, return `N` handles.
            </summary>
        <returns>
              1-D.  The handles of the `SparseTensor` now stored in the
              `SparseTensorsMap`.  Shape: `[N]`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              A `SparseTensor` of rank `R` is represented by three tensors: `sparse_indices`,
              `sparse_values`, and `sparse_shape`, where
              
              ```sparse_indices.shape[1] == sparse_shape.shape[0] == R```
              
              An `N`-minibatch of `SparseTensor` objects is represented as a `SparseTensor`
              having a first `sparse_indices` column taking values between `[0, N)`, where
              the minibatch size `N == sparse_shape[0]`.
              
              The input `SparseTensor` must have rank `R` greater than 1, and the first
              dimension is treated as the minibatch dimension.  Elements of the `SparseTensor`
              must be sorted in increasing order of this first dimension.  The stored
              `SparseTensor` objects pointed to by each row of the output `sparse_handles`
              will have rank `R-1`.
              
              The `SparseTensor` values can then be read out as part of a minibatch by passing
              the given keys as vector elements to `TakeManySparseFromTensorsMap`.  To ensure
              the correct `SparseTensorsMap` is accessed, ensure that the same
              `container` and `shared_name` are passed to that Op.  If no `shared_name`
              is provided here, instead use the *name* of the Operation created by calling
              `AddManySparseToTensorsMap` as the `shared_name` passed to
              `TakeManySparseFromTensorsMap`.  Ensure the Operations are colocated.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddN">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AddN (TensorFlow.TFOutput[] inputs, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AddN(valuetype TensorFlow.TFOutput[] inputs, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputs">
              Must all be the same size and shape.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AddN'.
            </param>
        <summary>
              Add all input tensors element wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddSparseToTensorsMap">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AddSparseToTensorsMap (TensorFlow.TFOutput sparse_indices, TensorFlow.TFOutput sparse_values, TensorFlow.TFOutput sparse_shape, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AddSparseToTensorsMap(valuetype TensorFlow.TFOutput sparse_indices, valuetype TensorFlow.TFOutput sparse_values, valuetype TensorFlow.TFOutput sparse_shape, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sparse_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="sparse_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="sparse_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sparse_indices">
              2-D.  The `indices` of the `SparseTensor`.
            </param>
        <param name="sparse_values">
              1-D.  The `values` of the `SparseTensor`.
            </param>
        <param name="sparse_shape">
              1-D.  The `shape` of the `SparseTensor`.
            </param>
        <param name="container">
              Optional argument
              The container name for the `SparseTensorsMap` created by this op.
            </param>
        <param name="shared_name">
              Optional argument
              The shared name for the `SparseTensorsMap` created by this op.
              If blank, the new Operation's unique name is used.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AddSparseToTensorsMap'.
            </param>
        <summary>
              Add a `SparseTensor` to a `SparseTensorsMap` return its handle.
            </summary>
        <returns>
              0-D.  The handle of the `SparseTensor` now stored in the
              `SparseTensorsMap`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              A `SparseTensor` is represented by three tensors: `sparse_indices`,
              `sparse_values`, and `sparse_shape`.
              
              This operator takes the given `SparseTensor` and adds it to a container
              object (a `SparseTensorsMap`).  A unique key within this container is generated
              in the form of an `int64`, and this is the value that is returned.
              
              The `SparseTensor` can then be read out as part of a minibatch by passing
              the key as a vector element to `TakeManySparseFromTensorsMap`.  To ensure
              the correct `SparseTensorsMap` is accessed, ensure that the same
              `container` and `shared_name` are passed to that Op.  If no `shared_name`
              is provided here, instead use the *name* of the Operation created by calling
              `AddSparseToTensorsMap` as the `shared_name` passed to
              `TakeManySparseFromTensorsMap`.  Ensure the Operations are colocated.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AdjustContrast">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AdjustContrast (TensorFlow.TFOutput images, TensorFlow.TFOutput contrast_factor, TensorFlow.TFOutput min_value, TensorFlow.TFOutput max_value, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AdjustContrast(valuetype TensorFlow.TFOutput images, valuetype TensorFlow.TFOutput contrast_factor, valuetype TensorFlow.TFOutput min_value, valuetype TensorFlow.TFOutput max_value, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="images" Type="TensorFlow.TFOutput" />
        <Parameter Name="contrast_factor" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_value" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_value" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="images">
        </param>
        <param name="contrast_factor">
        </param>
        <param name="min_value">
        </param>
        <param name="max_value">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AdjustContrast'.
            </param>
        <summary>
              Deprecated. Disallowed in GraphDef version &amp;gt;= 2.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdjustContrastv2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AdjustContrastv2 (TensorFlow.TFOutput images, TensorFlow.TFOutput contrast_factor, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AdjustContrastv2(valuetype TensorFlow.TFOutput images, valuetype TensorFlow.TFOutput contrast_factor, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="images" Type="TensorFlow.TFOutput" />
        <Parameter Name="contrast_factor" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="images">
              Images to adjust.  At least 3-D.
            </param>
        <param name="contrast_factor">
              A float multiplier for adjusting contrast.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AdjustContrastv2'.
            </param>
        <summary>
              Adjust the contrast of one or more images.
            </summary>
        <returns>
              The contrast-adjusted image or images.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              `images` is a tensor of at least 3 dimensions.  The last 3 dimensions are
              interpreted as `[height, width, channels]`.  The other dimensions only
              represent a collection of images, such as `[batch, height, width, channels].`
              
              Contrast is adjusted independently for each channel of each image.
              
              For each channel, the Op first computes the mean of the image pixels in the
              channel and then adjusts each component of each pixel to
              `(x - mean) * contrast_factor + mean`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AdjustHue">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AdjustHue (TensorFlow.TFOutput images, TensorFlow.TFOutput delta, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AdjustHue(valuetype TensorFlow.TFOutput images, valuetype TensorFlow.TFOutput delta, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="images" Type="TensorFlow.TFOutput" />
        <Parameter Name="delta" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="images">
              Images to adjust.  At least 3-D.
            </param>
        <param name="delta">
              A float delta to add to the hue.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AdjustHue'.
            </param>
        <summary>
              Adjust the hue of one or more images.
            </summary>
        <returns>
              The hue-adjusted image or images.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              `images` is a tensor of at least 3 dimensions.  The last dimension is
              interpretted as channels, and must be three.
              
              The input image is considered in the RGB colorspace. Conceptually, the RGB
              colors are first mapped into HSV. A delta is then applied all the hue values,
              and then remapped back to RGB colorspace.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AdjustSaturation">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AdjustSaturation (TensorFlow.TFOutput images, TensorFlow.TFOutput scale, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AdjustSaturation(valuetype TensorFlow.TFOutput images, valuetype TensorFlow.TFOutput scale, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="images" Type="TensorFlow.TFOutput" />
        <Parameter Name="scale" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="images">
              Images to adjust.  At least 3-D.
            </param>
        <param name="scale">
              A float scale to add to the saturation.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AdjustSaturation'.
            </param>
        <summary>
              Adjust the saturation of one or more images.
            </summary>
        <returns>
              The hue-adjusted image or images.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              `images` is a tensor of at least 3 dimensions.  The last dimension is
              interpretted as channels, and must be three.
              
              The input image is considered in the RGB colorspace. Conceptually, the RGB
              colors are first mapped into HSV. A scale is then applied all the saturation
              values, and then remapped back to RGB colorspace.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="All">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput All (TensorFlow.TFOutput input, TensorFlow.TFOutput reduction_indices, Nullable&lt;bool&gt; keep_dims = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput All(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput reduction_indices, valuetype System.Nullable`1&lt;bool&gt; keep_dims, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="reduction_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="keep_dims" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The tensor to reduce.
            </param>
        <param name="reduction_indices">
              The dimensions to reduce.
            </param>
        <param name="keep_dims">
              Optional argument
              If true, retain reduced dimensions with length 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'All'.
            </param>
        <summary>
              Computes the "logical and" of elements across dimensions of a tensor.
            </summary>
        <returns>
              The reduced tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Reduces `input` along the dimensions given in `reduction_indices`. Unless
              `keep_dims` is true, the rank of the tensor is reduced by 1 for each entry in
              `reduction_indices`. If `keep_dims` is true, the reduced dimensions are
              retained with length 1.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllCandidateSampler">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; AllCandidateSampler (TensorFlow.TFOutput true_classes, long num_true, long num_sampled, bool unique, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; AllCandidateSampler(valuetype TensorFlow.TFOutput true_classes, int64 num_true, int64 num_sampled, bool unique, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="true_classes" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_true" Type="System.Int64" />
        <Parameter Name="num_sampled" Type="System.Int64" />
        <Parameter Name="unique" Type="System.Boolean" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="true_classes">
              A batch_size * num_true matrix, in which each row contains the
              IDs of the num_true target_classes in the corresponding original label.
            </param>
        <param name="num_true">
              Number of true labels per context.
            </param>
        <param name="num_sampled">
              Number of candidates to produce.
            </param>
        <param name="unique">
              If unique is true, we sample with rejection, so that all sampled
              candidates in a batch are unique. This requires some approximation to
              estimate the post-rejection sampling probabilities.
            </param>
        <param name="seed">
              Optional argument
              If either seed or seed2 are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              An second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AllCandidateSampler'.
            </param>
        <summary>
              Generates labels for candidate sampling with a learned unigram distribution.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              sampled_candidates: A vector of length num_sampled, in which each element is
              the ID of a sampled candidate.
              true_expected_count: A batch_size * num_true matrix, representing
              the number of times each candidate is expected to occur in a batch
              of sampled candidates. If unique=true, then this is a probability.
              sampled_expected_count: A vector of length num_sampled, for each sampled
              candidate representing the number of times the candidate is expected
              to occur in a batch of sampled candidates.  If unique=true, then this is a
              probability.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              See explanations of candidate sampling and the data formats at
              go/candidate-sampling.
              
              For each batch, this op picks a single set of sampled candidate labels.
              
              The advantages of sampling candidates per-batch are simplicity and the
              possibility of efficient dense matrix multiplication. The disadvantage is that
              the sampled candidates must be chosen independently of the context and of the
              true labels.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Any">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Any (TensorFlow.TFOutput input, TensorFlow.TFOutput reduction_indices, Nullable&lt;bool&gt; keep_dims = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Any(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput reduction_indices, valuetype System.Nullable`1&lt;bool&gt; keep_dims, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="reduction_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="keep_dims" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The tensor to reduce.
            </param>
        <param name="reduction_indices">
              The dimensions to reduce.
            </param>
        <param name="keep_dims">
              Optional argument
              If true, retain reduced dimensions with length 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Any'.
            </param>
        <summary>
              Computes the "logical or" of elements across dimensions of a tensor.
            </summary>
        <returns>
              The reduced tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Reduces `input` along the dimensions given in `reduction_indices`. Unless
              `keep_dims` is true, the rank of the tensor is reduced by 1 for each entry in
              `reduction_indices`. If `keep_dims` is true, the reduced dimensions are
              retained with length 1.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDelayCompensatedGradientDescent">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ApplyDelayCompensatedGradientDescent (TensorFlow.TFOutput var, TensorFlow.TFOutput alpha, TensorFlow.TFOutput delta, TensorFlow.TFOutput lambda, TensorFlow.TFOutput shadow, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ApplyDelayCompensatedGradientDescent(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput alpha, valuetype TensorFlow.TFOutput delta, valuetype TensorFlow.TFOutput lambda, valuetype TensorFlow.TFOutput shadow, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="alpha" Type="TensorFlow.TFOutput" />
        <Parameter Name="delta" Type="TensorFlow.TFOutput" />
        <Parameter Name="lambda" Type="TensorFlow.TFOutput" />
        <Parameter Name="shadow" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="alpha">
              Scaling factor. Must be a scalar.
            </param>
        <param name="delta">
              The change.
            </param>
        <param name="lambda">
              The variance parameter.
            </param>
        <param name="shadow">
              Same as "var".
            </param>
        <param name="use_locking">
              Optional argument
              If `True`, the subtraction will be protected by a lock;
              otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ApplyDelayCompensatedGradientDescent'.
            </param>
        <summary>
              var -= alpha * (delta + lambda * delta * (var - shadow))
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              Update '*shadow' by changing it to the new value of 'var'
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApproximateEqual">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ApproximateEqual (TensorFlow.TFOutput x, TensorFlow.TFOutput y, Nullable&lt;float&gt; tolerance = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ApproximateEqual(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, valuetype System.Nullable`1&lt;float32&gt; tolerance, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="tolerance" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="tolerance">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ApproximateEqual'.
            </param>
        <summary>
              Returns the truth value of abs(x-y) &amp;lt; tolerance element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArgMax">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ArgMax (TensorFlow.TFOutput input, TensorFlow.TFOutput dimension, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ArgMax(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput dimension, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="dimension" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="dimension">
              int32, 0 &amp;lt;= dimension &amp;lt; rank(input).  Describes which dimension
              of the input Tensor to reduce across. For vectors, use dimension = 0.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ArgMax'.
            </param>
        <summary>
              Returns the index with the largest value across dimensions of a tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Note that in case of ties the identity of the return value is not guaranteed.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArgMin">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ArgMin (TensorFlow.TFOutput input, TensorFlow.TFOutput dimension, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ArgMin(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput dimension, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="dimension" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="dimension">
              int32, 0 &amp;lt;= dimension &amp;lt; rank(input).  Describes which dimension
              of the input Tensor to reduce across. For vectors, use dimension = 0.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ArgMin'.
            </param>
        <summary>
              Returns the index with the smallest value across dimensions of a tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Note that in case of ties the identity of the return value is not guaranteed.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Asin">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Asin (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Asin(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Asin'.
            </param>
        <summary>
              Computes asin of x element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation Assert (TensorFlow.TFOutput condition, TensorFlow.TFOutput[] data, Nullable&lt;long&gt; summarize = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation Assert(valuetype TensorFlow.TFOutput condition, valuetype TensorFlow.TFOutput[] data, valuetype System.Nullable`1&lt;int64&gt; summarize, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="TensorFlow.TFOutput" />
        <Parameter Name="data" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="summarize" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
              The condition to evaluate.
            </param>
        <param name="data">
              The tensors to print out when condition is false.
            </param>
        <param name="summarize">
              Optional argument
              Print this many entries of each tensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Assert'.
            </param>
        <summary>
              Asserts that the given condition is true.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              If `condition` evaluates to false, print the list of tensors in `data`.
              `summarize` determines how many entries of the tensors to print.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssignAddVariableOp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation AssignAddVariableOp (TensorFlow.TFOutput resource, TensorFlow.TFOutput value, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation AssignAddVariableOp(valuetype TensorFlow.TFOutput resource, valuetype TensorFlow.TFOutput value, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="TensorFlow.TFOutput" />
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">
              handle to the resource in which to store the variable.
            </param>
        <param name="value">
              the value by which the variable will be incremented.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AssignAddVariableOp'.
            </param>
        <summary>
              Adds a value to the current value of a variable.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              Any ReadVariableOp which depends directly or indirectly on this assign is
              guaranteed to see the incremented value or a subsequent newer one.
              
              Outputs the incremented value, which can be used to totally order the
              increments to this variable.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssignSubVariableOp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation AssignSubVariableOp (TensorFlow.TFOutput resource, TensorFlow.TFOutput value, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation AssignSubVariableOp(valuetype TensorFlow.TFOutput resource, valuetype TensorFlow.TFOutput value, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="TensorFlow.TFOutput" />
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">
              handle to the resource in which to store the variable.
            </param>
        <param name="value">
              the value by which the variable will be incremented.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AssignSubVariableOp'.
            </param>
        <summary>
              Subtracts a value from the current value of a variable.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              Any ReadVariableOp which depends directly or indirectly on this assign is
              guaranteed to see the incremented value or a subsequent newer one.
              
              Outputs the incremented value, which can be used to totally order the
              increments to this variable.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssignVariableOp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation AssignVariableOp (TensorFlow.TFOutput resource, TensorFlow.TFOutput value, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation AssignVariableOp(valuetype TensorFlow.TFOutput resource, valuetype TensorFlow.TFOutput value, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="TensorFlow.TFOutput" />
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">
              handle to the resource in which to store the variable.
            </param>
        <param name="value">
              the value to set the new tensor to use.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AssignVariableOp'.
            </param>
        <summary>
              Assigns a new value to a variable.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              Any ReadVariableOp with a control dependency on this op is guaranteed to return
              this value or a subsequent newer value of the variable.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsString">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AsString (TensorFlow.TFOutput input, Nullable&lt;long&gt; precision = null, Nullable&lt;bool&gt; scientific = null, Nullable&lt;bool&gt; shortest = null, Nullable&lt;long&gt; width = null, string fill = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AsString(valuetype TensorFlow.TFOutput input, valuetype System.Nullable`1&lt;int64&gt; precision, valuetype System.Nullable`1&lt;bool&gt; scientific, valuetype System.Nullable`1&lt;bool&gt; shortest, valuetype System.Nullable`1&lt;int64&gt; width, string fill, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="precision" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="scientific" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="shortest" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="width" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="fill" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="precision">
              Optional argument
              The post-decimal precision to use for floating point numbers.
              Only used if precision &amp;gt; -1.
            </param>
        <param name="scientific">
              Optional argument
              Use scientific notation for floating point numbers.
            </param>
        <param name="shortest">
              Optional argument
              Use shortest representation (either scientific or standard) for
              floating point numbers.
            </param>
        <param name="width">
              Optional argument
              Pad pre-decimal numbers to this width.
              Applies to both floating point and integer numbers.
              Only used if width &amp;gt; -1.
            </param>
        <param name="fill">
              Optional argument
              The value to pad if width &amp;gt; -1.  If empty, pads with spaces.
              Another typical value is '0'.  String cannot be longer than 1 character.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AsString'.
            </param>
        <summary>
              Converts each entry in the given tensor to strings.  Supports many numeric
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              types and boolean.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Atan (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Atan(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Atan'.
            </param>
        <summary>
              Computes atan of x element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Atan2 (TensorFlow.TFOutput y, TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Atan2(valuetype TensorFlow.TFOutput y, valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="y">
        </param>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Atan2'.
            </param>
        <summary>
              Computes arctangent of `y/x` element-wise, respecting signs of the arguments.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This is the angle \( \theta \in [-\pi, \pi] \) such that
              \[ x = r \cos(\theta) \]
              and
              \[ y = r \sin(\theta) \]
              where \(r = \sqrt(x^2 + y^2) \).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AudioSpectrogram">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AudioSpectrogram (TensorFlow.TFOutput input, long window_size, long stride, Nullable&lt;bool&gt; magnitude_squared = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AudioSpectrogram(valuetype TensorFlow.TFOutput input, int64 window_size, int64 stride, valuetype System.Nullable`1&lt;bool&gt; magnitude_squared, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="window_size" Type="System.Int64" />
        <Parameter Name="stride" Type="System.Int64" />
        <Parameter Name="magnitude_squared" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Float representation of audio data.
            </param>
        <param name="window_size">
              How wide the input window is in samples. For the highest efficiency
              this should be a power of two, but other values are accepted.
            </param>
        <param name="stride">
              How widely apart the center of adjacent sample windows should be.
            </param>
        <param name="magnitude_squared">
              Optional argument
              Whether to return the squared magnitude or just the
              magnitude. Using squared magnitude can avoid extra calculations.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AudioSpectrogram'.
            </param>
        <summary>
              Produces a visualization of audio data over time.
            </summary>
        <returns>
              3D representation of the audio frequencies as an image.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Spectrograms are a standard way of representing audio information as a series of
              slices of frequency information, one slice for each window of time. By joining
              these together into a sequence, they form a distinctive fingerprint of the sound
              over time.
              
              This op expects to receive audio data as an input, stored as floats in the range
              -1 to 1, together with a window width in samples, and a stride specifying how
              far to move the window between slices. From this it generates a three
              dimensional output. The lowest dimension has an amplitude value for each
              frequency during that time slice. The next dimension is time, with successive
              frequency slices. The final dimension is for the channels in the input, so a
              stereo audio input would have two here for example.
              
              This means the layout when converted and saved as an image is rotated 90 degrees
              clockwise from a typical spectrogram. Time is descending down the Y axis, and
              the frequency decreases from left to right.
              
              Each value in the result represents the square root of the sum of the real and
              imaginary parts of an FFT on the current window of samples. In this way, the
              lowest dimension represents the power of each frequency in the current window,
              and adjacent windows are concatenated in the next dimension.
              
              To get a more intuitive and visual look at what this operation does, you can run
              tensorflow/examples/wav_to_spectrogram to read in an audio file and save out the
              resulting spectrogram as a PNG image.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AudioSummary">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AudioSummary (TensorFlow.TFOutput tag, TensorFlow.TFOutput tensor, float sample_rate, Nullable&lt;long&gt; max_outputs = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AudioSummary(valuetype TensorFlow.TFOutput tag, valuetype TensorFlow.TFOutput tensor, float32 sample_rate, valuetype System.Nullable`1&lt;int64&gt; max_outputs, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="TensorFlow.TFOutput" />
        <Parameter Name="tensor" Type="TensorFlow.TFOutput" />
        <Parameter Name="sample_rate" Type="System.Single" />
        <Parameter Name="max_outputs" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tag">
              Scalar. Used to build the `tag` attribute of the summary values.
            </param>
        <param name="tensor">
              2-D of shape `[batch_size, frames]`.
            </param>
        <param name="sample_rate">
              The sample rate of the signal in hertz.
            </param>
        <param name="max_outputs">
              Optional argument
              Max number of batch elements to generate audio for.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AudioSummary'.
            </param>
        <summary>
              Outputs a `Summary` protocol buffer with audio.
            </summary>
        <returns>
              Scalar. Serialized `Summary` protocol buffer.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The summary has up to `max_outputs` summary values containing audio. The
              audio is built from `tensor` which must be 3-D with shape `[batch_size,
              frames, channels]` or 2-D with shape `[batch_size, frames]`. The values are
              assumed to be in the range of `[-1.0, 1.0]` with a sample rate of `sample_rate`.
              
              The `tag` argument is a scalar `Tensor` of type `string`.  It is used to
              build the `tag` of the summary values:
              
              *  If `max_outputs` is 1, the summary value tag is '*tag*/audio'.
              *  If `max_outputs` is greater than 1, the summary value tags are
                 generated sequentially as '*tag*/audio/0', '*tag*/audio/1', etc.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AudioSummaryV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AudioSummaryV2 (TensorFlow.TFOutput tag, TensorFlow.TFOutput tensor, TensorFlow.TFOutput sample_rate, Nullable&lt;long&gt; max_outputs = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AudioSummaryV2(valuetype TensorFlow.TFOutput tag, valuetype TensorFlow.TFOutput tensor, valuetype TensorFlow.TFOutput sample_rate, valuetype System.Nullable`1&lt;int64&gt; max_outputs, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="TensorFlow.TFOutput" />
        <Parameter Name="tensor" Type="TensorFlow.TFOutput" />
        <Parameter Name="sample_rate" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_outputs" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tag">
              Scalar. Used to build the `tag` attribute of the summary values.
            </param>
        <param name="tensor">
              2-D of shape `[batch_size, frames]`.
            </param>
        <param name="sample_rate">
              The sample rate of the signal in hertz.
            </param>
        <param name="max_outputs">
              Optional argument
              Max number of batch elements to generate audio for.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AudioSummaryV2'.
            </param>
        <summary>
              Outputs a `Summary` protocol buffer with audio.
            </summary>
        <returns>
              Scalar. Serialized `Summary` protocol buffer.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The summary has up to `max_outputs` summary values containing audio. The
              audio is built from `tensor` which must be 3-D with shape `[batch_size,
              frames, channels]` or 2-D with shape `[batch_size, frames]`. The values are
              assumed to be in the range of `[-1.0, 1.0]` with a sample rate of `sample_rate`.
              
              The `tag` argument is a scalar `Tensor` of type `string`.  It is used to
              build the `tag` of the summary values:
              
              *  If `max_outputs` is 1, the summary value tag is '*tag*/audio'.
              *  If `max_outputs` is greater than 1, the summary value tags are
                 generated sequentially as '*tag*/audio/0', '*tag*/audio/1', etc.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AvgPool">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AvgPool (TensorFlow.TFOutput value, long[] ksize, long[] strides, string padding, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AvgPool(valuetype TensorFlow.TFOutput value, int64[] ksize, int64[] strides, string padding, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksize" Type="System.Int64[]" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
              4-D with shape `[batch, height, width, channels]`.
            </param>
        <param name="ksize">
              The size of the sliding window for each dimension of `value`.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of `value`.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              Specify the data format of the input and output data. With the
              default format "NHWC", the data is stored in the order of:
                  [batch, in_height, in_width, in_channels].
              Alternatively, the format could be "NCHW", the data storage order of:
                  [batch, in_channels, in_height, in_width].
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AvgPool'.
            </param>
        <summary>
              Performs average pooling on the input.
            </summary>
        <returns>
              The average pooled output tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Each entry in `output` is the mean of the corresponding size `ksize`
              window in `value`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AvgPool3D">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AvgPool3D (TensorFlow.TFOutput input, long[] ksize, long[] strides, string padding, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AvgPool3D(valuetype TensorFlow.TFOutput input, int64[] ksize, int64[] strides, string padding, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksize" Type="System.Int64[]" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Shape `[batch, depth, rows, cols, channels]` tensor to pool over.
            </param>
        <param name="ksize">
              1-D tensor of length 5. The size of the window for each dimension of
              the input tensor. Must have `ksize[0] = ksize[4] = 1`.
            </param>
        <param name="strides">
              1-D tensor of length 5. The stride of the sliding window for each
              dimension of `input`. Must have `strides[0] = strides[4] = 1`.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              The data format of the input and output data. With the
              default format "NDHWC", the data is stored in the order of:
                  [batch, in_depth, in_height, in_width, in_channels].
              Alternatively, the format could be "NCDHW", the data storage order is:
                  [batch, in_channels, in_depth, in_height, in_width].
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AvgPool3D'.
            </param>
        <summary>
              Performs 3D average pooling on the input.
            </summary>
        <returns>
              The average pooled output tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AvgPool3DGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AvgPool3DGrad (TensorFlow.TFOutput orig_input_shape, TensorFlow.TFOutput grad, long[] ksize, long[] strides, string padding, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AvgPool3DGrad(valuetype TensorFlow.TFOutput orig_input_shape, valuetype TensorFlow.TFOutput grad, int64[] ksize, int64[] strides, string padding, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orig_input_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksize" Type="System.Int64[]" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="orig_input_shape">
              The original input dimensions.
            </param>
        <param name="grad">
              Output backprop of shape `[batch, depth, rows, cols, channels]`.
            </param>
        <param name="ksize">
              1-D tensor of length 5. The size of the window for each dimension of
              the input tensor. Must have `ksize[0] = ksize[4] = 1`.
            </param>
        <param name="strides">
              1-D tensor of length 5. The stride of the sliding window for each
              dimension of `input`. Must have `strides[0] = strides[4] = 1`.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              The data format of the input and output data. With the
              default format "NDHWC", the data is stored in the order of:
                  [batch, in_depth, in_height, in_width, in_channels].
              Alternatively, the format could be "NCDHW", the data storage order is:
                  [batch, in_channels, in_depth, in_height, in_width].
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AvgPool3DGrad'.
            </param>
        <summary>
              Computes gradients of average pooling function.
            </summary>
        <returns>
              The backprop for input.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AvgPoolGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput AvgPoolGrad (TensorFlow.TFOutput orig_input_shape, TensorFlow.TFOutput grad, long[] ksize, long[] strides, string padding, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput AvgPoolGrad(valuetype TensorFlow.TFOutput orig_input_shape, valuetype TensorFlow.TFOutput grad, int64[] ksize, int64[] strides, string padding, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orig_input_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksize" Type="System.Int64[]" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="orig_input_shape">
              1-D.  Shape of the original input to `avg_pool`.
            </param>
        <param name="grad">
              4-D with shape `[batch, height, width, channels]`.  Gradients w.r.t.
              the output of `avg_pool`.
            </param>
        <param name="ksize">
              The size of the sliding window for each dimension of the input.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of the input.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              Specify the data format of the input and output data. With the
              default format "NHWC", the data is stored in the order of:
                  [batch, in_height, in_width, in_channels].
              Alternatively, the format could be "NCHW", the data storage order of:
                  [batch, in_channels, in_height, in_width].
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'AvgPoolGrad'.
            </param>
        <summary>
              Computes gradients of the average pooling function.
            </summary>
        <returns>
              4-D.  Gradients w.r.t. the input of `avg_pool`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BatchDataset (TensorFlow.TFOutput input_dataset, TensorFlow.TFOutput batch_size, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BatchDataset(valuetype TensorFlow.TFOutput input_dataset, valuetype TensorFlow.TFOutput batch_size, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_dataset" Type="TensorFlow.TFOutput" />
        <Parameter Name="batch_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_dataset">
        </param>
        <param name="batch_size">
              A scalar representing the number of elements to accumulate in a
              batch.
            </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BatchDataset'.
            </param>
        <summary>
              Creates a dataset that batches `batch_size` elements from `input_dataset`.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchMatMul">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BatchMatMul (TensorFlow.TFOutput x, TensorFlow.TFOutput y, Nullable&lt;bool&gt; adj_x = null, Nullable&lt;bool&gt; adj_y = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BatchMatMul(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, valuetype System.Nullable`1&lt;bool&gt; adj_x, valuetype System.Nullable`1&lt;bool&gt; adj_y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="adj_x" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="adj_y" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
              2-D or higher with shape `[..., r_x, c_x]`.
            </param>
        <param name="y">
              2-D or higher with shape `[..., r_y, c_y]`.
            </param>
        <param name="adj_x">
              Optional argument
              If `True`, adjoint the slices of `x`. Defaults to `False`.
            </param>
        <param name="adj_y">
              Optional argument
              If `True`, adjoint the slices of `y`. Defaults to `False`.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BatchMatMul'.
            </param>
        <summary>
              Multiplies slices of two tensors in batches.
            </summary>
        <returns>
              3-D or higher with shape `[..., r_o, c_o]`
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Multiplies all slices of `Tensor` `x` and `y` (each slice can be
              viewed as an element of a batch), and arranges the individual results
              in a single output tensor of the same batch size. Each of the
              individual slices can optionally be adjointed (to adjoint a matrix
              means to transpose and conjugate it) before multiplication by setting
              the `adj_x` or `adj_y` flag to `True`, which are by default `False`.
              
              The input tensors `x` and `y` are 2-D or higher with shape `[..., r_x, c_x]`
              and `[..., r_y, c_y]`.
              
              The output tensor is 2-D or higher with shape `[..., r_o, c_o]`, where:
              
                  r_o = c_x if adj_x else r_x
                  c_o = r_y if adj_y else c_y
              
              It is computed as:
              
                  output[..., :, :] = matrix(x[..., :, :]) * matrix(y[..., :, :])
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchNormWithGlobalNormalization">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BatchNormWithGlobalNormalization (TensorFlow.TFOutput t, TensorFlow.TFOutput m, TensorFlow.TFOutput v, TensorFlow.TFOutput beta, TensorFlow.TFOutput gamma, float variance_epsilon, bool scale_after_normalization, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BatchNormWithGlobalNormalization(valuetype TensorFlow.TFOutput t, valuetype TensorFlow.TFOutput m, valuetype TensorFlow.TFOutput v, valuetype TensorFlow.TFOutput beta, valuetype TensorFlow.TFOutput gamma, float32 variance_epsilon, bool scale_after_normalization, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="TensorFlow.TFOutput" />
        <Parameter Name="m" Type="TensorFlow.TFOutput" />
        <Parameter Name="v" Type="TensorFlow.TFOutput" />
        <Parameter Name="beta" Type="TensorFlow.TFOutput" />
        <Parameter Name="gamma" Type="TensorFlow.TFOutput" />
        <Parameter Name="variance_epsilon" Type="System.Single" />
        <Parameter Name="scale_after_normalization" Type="System.Boolean" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="t">
              A 4D input Tensor.
            </param>
        <param name="m">
              A 1D mean Tensor with size matching the last dimension of t.
              This is the first output from tf.nn.moments,
              or a saved moving average thereof.
            </param>
        <param name="v">
              A 1D variance Tensor with size matching the last dimension of t.
              This is the second output from tf.nn.moments,
              or a saved moving average thereof.
            </param>
        <param name="beta">
              A 1D beta Tensor with size matching the last dimension of t.
              An offset to be added to the normalized tensor.
            </param>
        <param name="gamma">
              A 1D gamma Tensor with size matching the last dimension of t.
              If "scale_after_normalization" is true, this tensor will be multiplied
              with the normalized tensor.
            </param>
        <param name="variance_epsilon">
              A small float number to avoid dividing by 0.
            </param>
        <param name="scale_after_normalization">
              A bool indicating whether the resulted tensor
              needs to be multiplied with gamma.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BatchNormWithGlobalNormalization'.
            </param>
        <summary>
              Batch normalization.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op is deprecated. Prefer `tf.nn.batch_normalization`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchNormWithGlobalNormalizationGrad">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; BatchNormWithGlobalNormalizationGrad (TensorFlow.TFOutput t, TensorFlow.TFOutput m, TensorFlow.TFOutput v, TensorFlow.TFOutput gamma, TensorFlow.TFOutput backprop, float variance_epsilon, bool scale_after_normalization, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`5&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; BatchNormWithGlobalNormalizationGrad(valuetype TensorFlow.TFOutput t, valuetype TensorFlow.TFOutput m, valuetype TensorFlow.TFOutput v, valuetype TensorFlow.TFOutput gamma, valuetype TensorFlow.TFOutput backprop, float32 variance_epsilon, bool scale_after_normalization, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="TensorFlow.TFOutput" />
        <Parameter Name="m" Type="TensorFlow.TFOutput" />
        <Parameter Name="v" Type="TensorFlow.TFOutput" />
        <Parameter Name="gamma" Type="TensorFlow.TFOutput" />
        <Parameter Name="backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="variance_epsilon" Type="System.Single" />
        <Parameter Name="scale_after_normalization" Type="System.Boolean" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="t">
              A 4D input Tensor.
            </param>
        <param name="m">
              A 1D mean Tensor with size matching the last dimension of t.
              This is the first output from tf.nn.moments,
              or a saved moving average thereof.
            </param>
        <param name="v">
              A 1D variance Tensor with size matching the last dimension of t.
              This is the second output from tf.nn.moments,
              or a saved moving average thereof.
            </param>
        <param name="gamma">
              A 1D gamma Tensor with size matching the last dimension of t.
              If "scale_after_normalization" is true, this Tensor will be multiplied
              with the normalized Tensor.
            </param>
        <param name="backprop">
              4D backprop Tensor.
            </param>
        <param name="variance_epsilon">
              A small float number to avoid dividing by 0.
            </param>
        <param name="scale_after_normalization">
              A bool indicating whether the resulted tensor
              needs to be multiplied with gamma.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BatchNormWithGlobalNormalizationGrad'.
            </param>
        <summary>
              Gradients for batch normalization.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              dx: 4D backprop tensor for input.
              dm: 1D backprop tensor for mean.
              dv: 1D backprop tensor for variance.
              db: 1D backprop tensor for beta.
              dg: 1D backprop tensor for gamma.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              This op is deprecated. See `tf.nn.batch_normalization`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchToSpace">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BatchToSpace (TensorFlow.TFOutput input, TensorFlow.TFOutput crops, long block_size, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BatchToSpace(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput crops, int64 block_size, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="crops" Type="TensorFlow.TFOutput" />
        <Parameter Name="block_size" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              4-D tensor with shape
              `[batch*block_size*block_size, height_pad/block_size, width_pad/block_size,
                depth]`. Note that the batch size of the input tensor must be divisible by
              `block_size * block_size`.
            </param>
        <param name="crops">
              2-D tensor of non-negative integers with shape `[2, 2]`. It specifies
              how many elements to crop from the intermediate result across the spatial
              dimensions as follows:
              
                  crops = [[crop_top, crop_bottom], [crop_left, crop_right]]
            </param>
        <param name="block_size">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BatchToSpace'.
            </param>
        <summary>
              BatchToSpace for 4-D tensors of type T.
            </summary>
        <returns>
              4-D with shape `[batch, height, width, depth]`, where:
              
                    height = height_pad - crop_top - crop_bottom
                    width = width_pad - crop_left - crop_right
              
              The attr `block_size` must be greater than one. It indicates the block size.
              
              Some examples:
              
              (1) For the following input of shape `[4, 1, 1, 1]` and block_size of 2:
              
              ```
              [[[[1]]], [[[2]]], [[[3]]], [[[4]]]]
              ```
              
              The output tensor has shape `[1, 2, 2, 1]` and value:
              
              ```
              x = [[[[1], [2]], [[3], [4]]]]
              ```
              
              (2) For the following input of shape `[4, 1, 1, 3]` and block_size of 2:
              
              ```
              [[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]
              ```
              
              The output tensor has shape `[1, 2, 2, 3]` and value:
              
              ```
              x = [[[[1, 2, 3], [4, 5, 6]],
                    [[7, 8, 9], [10, 11, 12]]]]
              ```
              
              (3) For the following input of shape `[4, 2, 2, 1]` and block_size of 2:
              
              ```
              x = [[[[1], [3]], [[9], [11]]],
                   [[[2], [4]], [[10], [12]]],
                   [[[5], [7]], [[13], [15]]],
                   [[[6], [8]], [[14], [16]]]]
              ```
              
              The output tensor has shape `[1, 4, 4, 1]` and value:
              
              ```
              x = [[[1],   [2],  [3],  [4]],
                   [[5],   [6],  [7],  [8]],
                   [[9],  [10], [11],  [12]],
                   [[13], [14], [15],  [16]]]
              ```
              
              (4) For the following input of shape `[8, 1, 2, 1]` and block_size of 2:
              
              ```
              x = [[[[1], [3]]], [[[9], [11]]], [[[2], [4]]], [[[10], [12]]],
                   [[[5], [7]]], [[[13], [15]]], [[[6], [8]]], [[[14], [16]]]]
              ```
              
              The output tensor has shape `[2, 2, 4, 1]` and value:
              
              ```
              x = [[[[1], [3]], [[5], [7]]],
                   [[[2], [4]], [[10], [12]]],
                   [[[5], [7]], [[13], [15]]],
                   [[[6], [8]], [[14], [16]]]]
              ```
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This is a legacy version of the more general BatchToSpaceND.
              
              Rearranges (permutes) data from batch into blocks of spatial data, followed by
              cropping. This is the reverse transformation of SpaceToBatch. More specifically,
              this op outputs a copy of the input tensor where values from the `batch`
              dimension are moved in spatial blocks to the `height` and `width` dimensions,
              followed by cropping along the `height` and `width` dimensions.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchToSpaceND">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BatchToSpaceND (TensorFlow.TFOutput input, TensorFlow.TFOutput block_shape, TensorFlow.TFOutput crops, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BatchToSpaceND(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput block_shape, valuetype TensorFlow.TFOutput crops, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="block_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="crops" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`,
              where spatial_shape has M dimensions.
            </param>
        <param name="block_shape">
              1-D with shape `[M]`, all values must be &amp;gt;= 1.
            </param>
        <param name="crops">
              2-D with shape `[M, 2]`, all values must be &amp;gt;= 0.
                `crops[i] = [crop_start, crop_end]` specifies the amount to crop from input
                dimension `i + 1`, which corresponds to spatial dimension `i`.  It is
                required that
                `crop_start[i] + crop_end[i] &amp;lt;= block_shape[i] * input_shape[i + 1]`.
              
              This operation is equivalent to the following steps:
              
              1. Reshape `input` to `reshaped` of shape:
                   [block_shape[0], ..., block_shape[M-1],
                    batch / prod(block_shape),
                    input_shape[1], ..., input_shape[N-1]]
              
              2. Permute dimensions of `reshaped` to produce `permuted` of shape
                   [batch / prod(block_shape),
              
                    input_shape[1], block_shape[0],
                    ...,
                    input_shape[M], block_shape[M-1],
              
                    input_shape[M+1], ..., input_shape[N-1]]
              
              3. Reshape `permuted` to produce `reshaped_permuted` of shape
                   [batch / prod(block_shape),
              
                    input_shape[1] * block_shape[0],
                    ...,
                    input_shape[M] * block_shape[M-1],
              
                    input_shape[M+1],
                    ...,
                    input_shape[N-1]]
              
              4. Crop the start and end of dimensions `[1, ..., M]` of
                 `reshaped_permuted` according to `crops` to produce the output of shape:
                   [batch / prod(block_shape),
              
                    input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1],
                    ...,
                    input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1],
              
                    input_shape[M+1], ..., input_shape[N-1]]
              
              Some examples:
              
              (1) For the following input of shape `[4, 1, 1, 1]`, `block_shape = [2, 2]`, and
                  `crops = [[0, 0], [0, 0]]`:
              
              ```
              [[[[1]]], [[[2]]], [[[3]]], [[[4]]]]
              ```
              
              The output tensor has shape `[1, 2, 2, 1]` and value:
              
              ```
              x = [[[[1], [2]], [[3], [4]]]]
              ```
              
              (2) For the following input of shape `[4, 1, 1, 3]`, `block_shape = [2, 2]`, and
                  `crops = [[0, 0], [0, 0]]`:
              
              ```
              [[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]
              ```
              
              The output tensor has shape `[1, 2, 2, 3]` and value:
              
              ```
              x = [[[[1, 2, 3], [4, 5, 6]],
                    [[7, 8, 9], [10, 11, 12]]]]
              ```
              
              (3) For the following input of shape `[4, 2, 2, 1]`, `block_shape = [2, 2]`, and
                  `crops = [[0, 0], [0, 0]]`:
              
              ```
              x = [[[[1], [3]], [[9], [11]]],
                   [[[2], [4]], [[10], [12]]],
                   [[[5], [7]], [[13], [15]]],
                   [[[6], [8]], [[14], [16]]]]
              ```
              
              The output tensor has shape `[1, 4, 4, 1]` and value:
              
              ```
              x = [[[1],   [2],  [3],  [4]],
                   [[5],   [6],  [7],  [8]],
                   [[9],  [10], [11],  [12]],
                   [[13], [14], [15],  [16]]]
              ```
              
              (4) For the following input of shape `[8, 1, 3, 1]`, `block_shape = [2, 2]`, and
                  `crops = [[0, 0], [2, 0]]`:
              
              ```
              x = [[[[0], [1], [3]]], [[[0], [9], [11]]],
                   [[[0], [2], [4]]], [[[0], [10], [12]]],
                   [[[0], [5], [7]]], [[[0], [13], [15]]],
                   [[[0], [6], [8]]], [[[0], [14], [16]]]]
              ```
              
              The output tensor has shape `[2, 2, 4, 1]` and value:
              
              ```
              x = [[[[1],   [2],  [3],  [4]],
                    [[5],   [6],  [7],  [8]]],
                   [[[9],  [10], [11],  [12]],
                    [[13], [14], [15],  [16]]]]
              ```
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BatchToSpaceND'.
            </param>
        <summary>
              BatchToSpace for N-D tensors of type T.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation reshapes the "batch" dimension 0 into `M + 1` dimensions of shape
              `block_shape + [batch]`, interleaves these blocks back into the grid defined by
              the spatial dimensions `[1, ..., M]`, to obtain a result with the same rank as
              the input.  The spatial dimensions of this intermediate result are then
              optionally cropped according to `crops` to produce the output.  This is the
              reverse of SpaceToBatch.  See below for a precise description.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Betainc">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Betainc (TensorFlow.TFOutput a, TensorFlow.TFOutput b, TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Betainc(valuetype TensorFlow.TFOutput a, valuetype TensorFlow.TFOutput b, valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="TensorFlow.TFOutput" />
        <Parameter Name="b" Type="TensorFlow.TFOutput" />
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a">
        </param>
        <param name="b">
        </param>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Betainc'.
            </param>
        <summary>
              Compute the regularized incomplete beta integral \\(I_x(a, b)\\).
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The regularized incomplete beta integral is defined as:
              
              
              \\(I_x(a, b) = \frac{B(x; a, b)}{B(a, b)}\\)
              
              where
              
              
              \\(B(x; a, b) = \int_0^x t^{a-1} (1 - t)^{b-1} dt\\)
              
              
              is the incomplete beta function and \\(B(a, b)\\) is the *complete*
              beta function.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BiasAdd">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BiasAdd (TensorFlow.TFOutput value, TensorFlow.TFOutput bias, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BiasAdd(valuetype TensorFlow.TFOutput value, valuetype TensorFlow.TFOutput bias, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="bias" Type="TensorFlow.TFOutput" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
              Any number of dimensions.
            </param>
        <param name="bias">
              1-D with size the last dimension of `value`.
            </param>
        <param name="data_format">
              Optional argument
              Specify the data format of the input and output data. With the
              default format "NHWC", the bias tensor will be added to the last dimension
              of the value tensor.
              Alternatively, the format could be "NCHW", the data storage order of:
                  [batch, in_channels, in_height, in_width].
              The tensor will be added to "in_channels", the third-to-the-last
                  dimension.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BiasAdd'.
            </param>
        <summary>
              Adds `bias` to `value`.
            </summary>
        <returns>
              Broadcasted sum of `value` and `bias`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This is a special case of `tf.add` where `bias` is restricted to be 1-D.
              Broadcasting is supported, so `value` may have any number of dimensions.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BiasAddGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BiasAddGrad (TensorFlow.TFOutput out_backprop, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BiasAddGrad(valuetype TensorFlow.TFOutput out_backprop, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="out_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="out_backprop">
              Any number of dimensions.
            </param>
        <param name="data_format">
              Optional argument
              Specify the data format of the input and output data. With the
              default format "NHWC", the bias tensor will be added to the last dimension
              of the value tensor.
              Alternatively, the format could be "NCHW", the data storage order of:
                  [batch, in_channels, in_height, in_width].
              The tensor will be added to "in_channels", the third-to-the-last
                  dimension.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BiasAddGrad'.
            </param>
        <summary>
              The backward operation for "BiasAdd" on the "bias" tensor.
            </summary>
        <returns>
              1-D with size the feature dimension of `out_backprop`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              It accumulates all the values from out_backprop into the feature dimension.
              For NHWC data format, the feature dimension is the last. For NCHW data format,
              the feature dimension is the third-to-last.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BiasAddV1">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BiasAddV1 (TensorFlow.TFOutput value, TensorFlow.TFOutput bias, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BiasAddV1(valuetype TensorFlow.TFOutput value, valuetype TensorFlow.TFOutput bias, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="bias" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
              Any number of dimensions.
            </param>
        <param name="bias">
              1-D with size the last dimension of `value`.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BiasAddV1'.
            </param>
        <summary>
              Adds `bias` to `value`.
            </summary>
        <returns>
              Broadcasted sum of `value` and `bias`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This is a deprecated version of BiasAdd and will be soon removed.
              
              This is a special case of `tf.add` where `bias` is restricted to be 1-D.
              Broadcasting is supported, so `value` may have any number of dimensions.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bincount">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Bincount (TensorFlow.TFOutput arr, TensorFlow.TFOutput size, TensorFlow.TFOutput weights, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Bincount(valuetype TensorFlow.TFOutput arr, valuetype TensorFlow.TFOutput size, valuetype TensorFlow.TFOutput weights, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arr" Type="TensorFlow.TFOutput" />
        <Parameter Name="size" Type="TensorFlow.TFOutput" />
        <Parameter Name="weights" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="arr">
              int32 `Tensor`.
            </param>
        <param name="size">
              non-negative int32 scalar `Tensor`.
            </param>
        <param name="weights">
              is an int32, int64, float32, or float64 `Tensor` with the same
              shape as `arr`, or a length-0 `Tensor`, in which case it acts as all weights
              equal to 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Bincount'.
            </param>
        <summary>
              Counts the number of occurrences of each value in an integer array.
            </summary>
        <returns>
              1D `Tensor` with length equal to `size`. The counts or summed weights for
              each value in the range [0, size).
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Outputs a vector with length `size` and the same dtype as `weights`. If
              `weights` are empty, then index `i` stores the number of times the value `i` is
              counted in `arr`. If `weights` are non-empty, then index `i` stores the sum of
              the value in `weights` at each index where the corresponding value in `arr` is
              `i`.
              
              Values in `arr` outside of the range [0, size) are ignored.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitcast">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Bitcast (TensorFlow.TFOutput input, TensorFlow.TFDataType type, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Bitcast(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFDataType type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="type" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="type">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Bitcast'.
            </param>
        <summary>
              Bitcasts a tensor from one type to another without copying data.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given a tensor `input`, this operation returns a tensor that has the same buffer
              data as `input` with datatype `type`.
              
              If the input datatype `T` is larger than the output datatype `type` then the
              shape changes from [...] to [..., sizeof(`T`)/sizeof(`type`)].
              
              If `T` is smaller than `type`, the operator requires that the rightmost
              dimension be equal to sizeof(`type`)/sizeof(`T`). The shape then goes from
              [..., sizeof(`type`)/sizeof(`T`)] to [...].
              
              *NOTE*: Bitcast is implemented as a low-level cast, so machines with different
              endian orderings will give different results.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitwiseAnd">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BitwiseAnd (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BitwiseAnd(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BitwiseAnd'.
            </param>
        <summary>
              Elementwise computes the bitwise AND of `x` and `y`.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The result will have those bits set, that are set in both `x` and `y`. The
              computation is performed on the underlying representations of `x` and `y`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitwiseOr">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BitwiseOr (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BitwiseOr(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BitwiseOr'.
            </param>
        <summary>
              Elementwise computes the bitwise OR of `x` and `y`.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The result will have those bits set, that are set in `x`, `y` or both. The
              computation is performed on the underlying representations of `x` and `y`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitwiseXor">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BitwiseXor (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BitwiseXor(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BitwiseXor'.
            </param>
        <summary>
              Elementwise computes the bitwise XOR of `x` and `y`.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The result will have those bits set, that are different in `x` and `y`. The
              computation is performed on the underlying representations of `x` and `y`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BroadcastArgs">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput BroadcastArgs (TensorFlow.TFOutput s0, TensorFlow.TFOutput s1, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput BroadcastArgs(valuetype TensorFlow.TFOutput s0, valuetype TensorFlow.TFOutput s1, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s0" Type="TensorFlow.TFOutput" />
        <Parameter Name="s1" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s0">
        </param>
        <param name="s1">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BroadcastArgs'.
            </param>
        <summary>
              Return the shape of s0 op s1 with broadcast.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given `s0` and `s1`, tensors that represent shapes, compute `r0`, the
              broadcasted shape. `s0`, `s1` and `r0` are all integer vectors.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BroadcastGradientArgs">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; BroadcastGradientArgs (TensorFlow.TFOutput s0, TensorFlow.TFOutput s1, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; BroadcastGradientArgs(valuetype TensorFlow.TFOutput s0, valuetype TensorFlow.TFOutput s1, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s0" Type="TensorFlow.TFOutput" />
        <Parameter Name="s1" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s0">
        </param>
        <param name="s1">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'BroadcastGradientArgs'.
            </param>
        <summary>
              Return the reduction indices for computing gradients of s0 op s1 with broadcast.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              r0: 
              r1: 
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              This is typically used by gradient computations for a broadcasting operation.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bucketize">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Bucketize (TensorFlow.TFOutput input, float[] boundaries, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Bucketize(valuetype TensorFlow.TFOutput input, float32[] boundaries, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="boundaries" Type="System.Single[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Any shape of Tensor contains with int or float type.
            </param>
        <param name="boundaries">
              A sorted list of floats gives the boundary of the buckets.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Bucketize'.
            </param>
        <summary>
              Bucketizes 'input' based on 'boundaries'.
            </summary>
        <returns>
              Same shape with 'input', each value of input replaced with bucket index.
              
              @compatibility(numpy)
              Equivalent to np.digitize.
              @end_compatibility
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              For example, if the inputs are
                  boundaries = [0, 10, 100]
                  input = [[-5, 10000]
                           [150,   10]
                           [5,    100]]
              
              then the output will be
                  output = [[0, 3]
                            [3, 2]
                            [1, 3]]
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput CacheDataset (TensorFlow.TFOutput input_dataset, TensorFlow.TFOutput filename, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput CacheDataset(valuetype TensorFlow.TFOutput input_dataset, valuetype TensorFlow.TFOutput filename, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_dataset" Type="TensorFlow.TFOutput" />
        <Parameter Name="filename" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_dataset">
        </param>
        <param name="filename">
              A path on the filesystem where we should cache the dataset. Note: this
              will be a directory.
            </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'CacheDataset'.
            </param>
        <summary>
              Creates a dataset that caches elements from `input_dataset`.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              A CacheDataset will iterate over the input_dataset, and store tensors. If the
              cache already exists, the cache will be used. If the cache is inappropriate
              (e.g. cannot be opened, contains tensors of the wrong shape / size), an error
              will the returned when used.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cast">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Cast (TensorFlow.TFOutput x, TensorFlow.TFDataType DstT, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Cast(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFDataType DstT, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="DstT" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="DstT">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Cast'.
            </param>
        <summary>
              Cast x of type SrcT to y of DstT.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceil">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Ceil (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Ceil(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Ceil'.
            </param>
        <summary>
              Returns element-wise smallest integer in not less than x.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckNumerics">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput CheckNumerics (TensorFlow.TFOutput tensor, string message, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput CheckNumerics(valuetype TensorFlow.TFOutput tensor, string message, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tensor" Type="TensorFlow.TFOutput" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tensor">
        </param>
        <param name="message">
              Prefix of the error message.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'CheckNumerics'.
            </param>
        <summary>
              Checks a tensor for NaN and Inf values.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              When run, reports an `InvalidArgument` error if `tensor` has any values
              that are not a number (NaN) or infinity (Inf). Otherwise, passes `tensor` as-is.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cholesky">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Cholesky (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Cholesky(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Shape is `[..., M, M]`.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Cholesky'.
            </param>
        <summary>
              Computes the Cholesky decomposition of one or more square matrices.
            </summary>
        <returns>
              Shape is `[..., M, M]`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The input is a tensor of shape `[..., M, M]` whose inner-most 2 dimensions
              form square matrices.
              
              The input has to be symmetric and positive definite. Only the lower-triangular
              part of the input will be used for this operation. The upper-triangular part
              will not be read.
              
              The output is a tensor of the same shape as the input
              containing the Cholesky decompositions for all input submatrices `[..., :, :]`.
              
              **Note**: The gradient computation on GPU is faster for large matrices but
              not for large batch dimensions when the submatrices are small. In this
              case it might be faster to use the CPU.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CholeskyGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput CholeskyGrad (TensorFlow.TFOutput l, TensorFlow.TFOutput grad, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput CholeskyGrad(valuetype TensorFlow.TFOutput l, valuetype TensorFlow.TFOutput grad, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="l" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="l">
              Output of batch Cholesky algorithm l = cholesky(A). Shape is `[..., M, M]`.
              Algorithm depends only on lower triangular part of the innermost matrices of
              this tensor.
            </param>
        <param name="grad">
              df/dl where f is some scalar function. Shape is `[..., M, M]`.
              Algorithm depends only on lower triangular part of the innermost matrices of
              this tensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'CholeskyGrad'.
            </param>
        <summary>
              Computes the reverse mode backpropagated gradient of the Cholesky algorithm.
            </summary>
        <returns>
              Symmetrized version of df/dA . Shape is `[..., M, M]`
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              For an explanation see "Differentiation of the Cholesky algorithm" by
              Iain Murray http://arxiv.org/abs/1602.07527.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Complex">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Complex (TensorFlow.TFOutput real, TensorFlow.TFOutput imag, Nullable&lt;TensorFlow.TFDataType&gt; Tout = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Complex(valuetype TensorFlow.TFOutput real, valuetype TensorFlow.TFOutput imag, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; Tout, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="real" Type="TensorFlow.TFOutput" />
        <Parameter Name="imag" Type="TensorFlow.TFOutput" />
        <Parameter Name="Tout" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="real">
        </param>
        <param name="imag">
        </param>
        <param name="Tout">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Complex'.
            </param>
        <summary>
              Converts two real numbers to a complex number.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given a tensor `real` representing the real part of a complex number, and a
              tensor `imag` representing the imaginary part of a complex number, this
              operation returns complex numbers elementwise of the form \\(a + bj\\), where
              *a* represents the `real` part and *b* represents the `imag` part.
              
              The input tensors `real` and `imag` must have the same shape.
              
              For example:
              
              ```
              # tensor 'real' is [2.25, 3.25]
              # tensor `imag` is [4.75, 5.75]
              tf.complex(real, imag) ==&amp;gt; [[2.25 + 4.75j], [3.25 + 5.75j]]
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexAbs">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ComplexAbs (TensorFlow.TFOutput x, Nullable&lt;TensorFlow.TFDataType&gt; Tout = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ComplexAbs(valuetype TensorFlow.TFOutput x, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; Tout, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="Tout" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="Tout">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ComplexAbs'.
            </param>
        <summary>
              Computes the complex absolute value of a tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given a tensor `x` of complex numbers, this operation returns a tensor of type
              `float` or `double` that is the absolute value of each element in `x`. All
              elements in `x` must be complex numbers of the form \\(a + bj\\). The absolute
              value is computed as \\( \sqrt{a^2 + b^2}\\).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComputeAccidentalHits">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; ComputeAccidentalHits (TensorFlow.TFOutput true_classes, TensorFlow.TFOutput sampled_candidates, long num_true, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; ComputeAccidentalHits(valuetype TensorFlow.TFOutput true_classes, valuetype TensorFlow.TFOutput sampled_candidates, int64 num_true, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="true_classes" Type="TensorFlow.TFOutput" />
        <Parameter Name="sampled_candidates" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_true" Type="System.Int64" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="true_classes">
              The true_classes output of UnpackSparseLabels.
            </param>
        <param name="sampled_candidates">
              The sampled_candidates output of CandidateSampler.
            </param>
        <param name="num_true">
              Number of true labels per context.
            </param>
        <param name="seed">
              Optional argument
              If either seed or seed2 are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              An second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ComputeAccidentalHits'.
            </param>
        <summary>
              Computes the ids of the positions in sampled_candidates that match true_labels.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              indices: A vector of indices corresponding to rows of true_candidates.
              ids: A vector of IDs of positions in sampled_candidates that match a true_label
              for the row with the corresponding index in indices.
              weights: A vector of the same length as indices and ids, in which each element
              is -FLOAT_MAX.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              When doing log-odds NCE, the result of this op should be passed through a
              SparseToDense op, then added to the logits of the sampled candidates. This has
              the effect of 'removing' the sampled labels that match the true labels by
              making the classifier sure that they are sampled labels.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Concat (TensorFlow.TFOutput concat_dim, TensorFlow.TFOutput[] values, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Concat(valuetype TensorFlow.TFOutput concat_dim, valuetype TensorFlow.TFOutput[] values, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="concat_dim" Type="TensorFlow.TFOutput" />
        <Parameter Name="values" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="concat_dim">
              0-D.  The dimension along which to concatenate.  Must be in the
              range [0, rank(values)).
            </param>
        <param name="values">
              The `N` Tensors to concatenate. Their ranks and types must match,
              and their sizes must match in all dimensions except `concat_dim`.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Concat'.
            </param>
        <summary>
              Concatenates tensors along one dimension.
            </summary>
        <returns>
              A `Tensor` with the concatenation of values stacked along the
              `concat_dim` dimension.  This tensor's shape matches that of `values` except
              in `concat_dim` where it has the sum of the sizes.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConcatOffset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] ConcatOffset (TensorFlow.TFOutput concat_dim, TensorFlow.TFOutput[] shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] ConcatOffset(valuetype TensorFlow.TFOutput concat_dim, valuetype TensorFlow.TFOutput[] shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="concat_dim" Type="TensorFlow.TFOutput" />
        <Parameter Name="shape" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="concat_dim">
              The dimension along which to concatenate.
            </param>
        <param name="shape">
              The `N` int32 vectors representing shape of tensors being concatenated.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ConcatOffset'.
            </param>
        <summary>
              Computes offsets of concat inputs within its output.
            </summary>
        <returns>
              The `N` int32 vectors representing the starting offset
              of input tensors within the concatenated output.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              For example:
              
              ```
              # 'x' is [2, 2, 7]
              # 'y' is [2, 3, 7]
              # 'z' is [2, 5, 7]
              concat_offset(2, [x, y, z]) =&amp;gt; [0, 0, 0], [0, 2, 0], [0, 5, 0]
              ```
              
              This is typically used by gradient computations for a concat operation.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConcatV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ConcatV2 (TensorFlow.TFOutput[] values, TensorFlow.TFOutput axis, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ConcatV2(valuetype TensorFlow.TFOutput[] values, valuetype TensorFlow.TFOutput axis, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="axis" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="values">
              List of `N` Tensors to concatenate. Their ranks and types must match,
              and their sizes must match in all dimensions except `concat_dim`.
            </param>
        <param name="axis">
              0-D.  The dimension along which to concatenate.  Must be in the
              range [-rank(values), rank(values)).
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ConcatV2'.
            </param>
        <summary>
              Concatenates tensors along one dimension.
            </summary>
        <returns>
              A `Tensor` with the concatenation of values stacked along the
              `concat_dim` dimension.  This tensor's shape matches that of `values` except
              in `concat_dim` where it has the sum of the sizes.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Conj">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Conj (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Conj(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Conj'.
            </param>
        <summary>
              Returns the complex conjugate of a complex number.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given a tensor `input` of complex numbers, this operation returns a tensor of
              complex numbers that are the complex conjugate of each element in `input`. The
              complex numbers in `input` must be of the form \\(a + bj\\), where *a* is the
              real part and *b* is the imaginary part.
              
              The complex conjugate returned by this operation is of the form \\(a - bj\\).
              
              For example:
              
              ```
              # tensor 'input' is [-2.25 + 4.75j, 3.25 + 5.75j]
              tf.conj(input) ==&amp;gt; [-2.25 - 4.75j, 3.25 - 5.75j]
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Const">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Const (TensorFlow.TFTensor value, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Const(class TensorFlow.TFTensor value, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TensorFlow.TFTensor" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Value.</param>
        <param name="operName">Oper name.</param>
        <summary>
            Creates a constant operation from a TFTensor or constant
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Since TFTensor have implicit conversion operators, you can call this method with
            a constant like this: graph.Const (23)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Const">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Const (TensorFlow.TFTensor value, TensorFlow.TFDataType dtype, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Const(class TensorFlow.TFTensor value, valuetype TensorFlow.TFDataType dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TensorFlow.TFTensor" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
              Attr `value` is the tensor to return.
            </param>
        <param name="dtype">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Const'.
            </param>
        <summary>
              Returns a constant tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlTrigger">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ControlTrigger (string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ControlTrigger(string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ControlTrigger'.
            </param>
        <summary>
              Does nothing. Serves as a control trigger for scheduling.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              Only useful as a placeholder for control edges.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv2D">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Conv2D (TensorFlow.TFOutput input, TensorFlow.TFOutput filter, long[] strides, string padding, Nullable&lt;bool&gt; use_cudnn_on_gpu = null, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Conv2D(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput filter, int64[] strides, string padding, valuetype System.Nullable`1&lt;bool&gt; use_cudnn_on_gpu, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="filter" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="use_cudnn_on_gpu" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A 4-D tensor. The dimension order is interpreted according to the value
              of `data_format`, see below for details.
            </param>
        <param name="filter">
              A 4-D tensor of shape
              `[filter_height, filter_width, in_channels, out_channels]`
            </param>
        <param name="strides">
              1-D tensor of length 4.  The stride of the sliding window for each
              dimension of `input`. The dimension order is determined by the value of
                `data_format`, see below for details.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="use_cudnn_on_gpu">
              Optional argument
            </param>
        <param name="data_format">
              Optional argument
              Specify the data format of the input and output data. With the
              default format "NHWC", the data is stored in the order of:
                  [batch, height, width, channels].
              Alternatively, the format could be "NCHW", the data storage order of:
                  [batch, channels, height, width].
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Conv2D'.
            </param>
        <summary>
              Computes a 2-D convolution given 4-D `input` and `filter` tensors.
            </summary>
        <returns>
              A 4-D tensor. The dimension order is determined by the value of
              `data_format`, see below for details.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given an input tensor of shape `[batch, in_height, in_width, in_channels]`
              and a filter / kernel tensor of shape
              `[filter_height, filter_width, in_channels, out_channels]`, this op
              performs the following:
              
              1. Flattens the filter to a 2-D matrix with shape
                 `[filter_height * filter_width * in_channels, output_channels]`.
              2. Extracts image patches from the input tensor to form a *virtual*
                 tensor of shape `[batch, out_height, out_width,
                 filter_height * filter_width * in_channels]`.
              3. For each patch, right-multiplies the filter matrix and the image patch
                 vector.
              
              In detail, with the default NHWC format,
              
                  output[b, i, j, k] =
                      sum_{di, dj, q} input[b, strides[1] * i + di, strides[2] * j + dj, q] *
                                      filter[di, dj, q, k]
              
              Must have `strides[0] = strides[3] = 1`.  For the most common case of the same
              horizontal and vertices strides, `strides = [1, stride, stride, 1]`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv2DBackpropFilter">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Conv2DBackpropFilter (TensorFlow.TFOutput input, TensorFlow.TFOutput filter_sizes, TensorFlow.TFOutput out_backprop, long[] strides, string padding, Nullable&lt;bool&gt; use_cudnn_on_gpu = null, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Conv2DBackpropFilter(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput filter_sizes, valuetype TensorFlow.TFOutput out_backprop, int64[] strides, string padding, valuetype System.Nullable`1&lt;bool&gt; use_cudnn_on_gpu, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="filter_sizes" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="use_cudnn_on_gpu" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              4-D with shape `[batch, in_height, in_width, in_channels]`.
            </param>
        <param name="filter_sizes">
              An integer vector representing the tensor shape of `filter`,
              where `filter` is a 4-D
              `[filter_height, filter_width, in_channels, out_channels]` tensor.
            </param>
        <param name="out_backprop">
              4-D with shape `[batch, out_height, out_width, out_channels]`.
              Gradients w.r.t. the output of the convolution.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of the input
              of the convolution. Must be in the same order as the dimension specified with
              format.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="use_cudnn_on_gpu">
              Optional argument
            </param>
        <param name="data_format">
              Optional argument
              Specify the data format of the input and output data. With the
              default format "NHWC", the data is stored in the order of:
                  [batch, in_height, in_width, in_channels].
              Alternatively, the format could be "NCHW", the data storage order of:
                  [batch, in_channels, in_height, in_width].
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Conv2DBackpropFilter'.
            </param>
        <summary>
              Computes the gradients of convolution with respect to the filter.
            </summary>
        <returns>
              4-D with shape
              `[filter_height, filter_width, in_channels, out_channels]`.  Gradient w.r.t.
              the `filter` input of the convolution.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv2DBackpropInput">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Conv2DBackpropInput (TensorFlow.TFOutput input_sizes, TensorFlow.TFOutput filter, TensorFlow.TFOutput out_backprop, long[] strides, string padding, Nullable&lt;bool&gt; use_cudnn_on_gpu = null, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Conv2DBackpropInput(valuetype TensorFlow.TFOutput input_sizes, valuetype TensorFlow.TFOutput filter, valuetype TensorFlow.TFOutput out_backprop, int64[] strides, string padding, valuetype System.Nullable`1&lt;bool&gt; use_cudnn_on_gpu, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_sizes" Type="TensorFlow.TFOutput" />
        <Parameter Name="filter" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="use_cudnn_on_gpu" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_sizes">
              An integer vector representing the shape of `input`,
              where `input` is a 4-D `[batch, height, width, channels]` tensor.
            </param>
        <param name="filter">
              4-D with shape
              `[filter_height, filter_width, in_channels, out_channels]`.
            </param>
        <param name="out_backprop">
              4-D with shape `[batch, out_height, out_width, out_channels]`.
              Gradients w.r.t. the output of the convolution.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of the input
              of the convolution. Must be in the same order as the dimension specified with
              format.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="use_cudnn_on_gpu">
              Optional argument
            </param>
        <param name="data_format">
              Optional argument
              Specify the data format of the input and output data. With the
              default format "NHWC", the data is stored in the order of:
                  [batch, in_height, in_width, in_channels].
              Alternatively, the format could be "NCHW", the data storage order of:
                  [batch, in_channels, in_height, in_width].
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Conv2DBackpropInput'.
            </param>
        <summary>
              Computes the gradients of convolution with respect to the input.
            </summary>
        <returns>
              4-D with shape `[batch, in_height, in_width, in_channels]`.  Gradient
              w.r.t. the input of the convolution.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv3D">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Conv3D (TensorFlow.TFOutput input, TensorFlow.TFOutput filter, long[] strides, string padding, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Conv3D(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput filter, int64[] strides, string padding, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="filter" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Shape `[batch, in_depth, in_height, in_width, in_channels]`.
            </param>
        <param name="filter">
              Shape `[filter_depth, filter_height, filter_width, in_channels,
              out_channels]`. `in_channels` must match between `input` and `filter`.
            </param>
        <param name="strides">
              1-D tensor of length 5. The stride of the sliding window for each
              dimension of `input`. Must have `strides[0] = strides[4] = 1`.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              The data format of the input and output data. With the
              default format "NDHWC", the data is stored in the order of:
                  [batch, in_depth, in_height, in_width, in_channels].
              Alternatively, the format could be "NCDHW", the data storage order is:
                  [batch, in_channels, in_depth, in_height, in_width].
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Conv3D'.
            </param>
        <summary>
              Computes a 3-D convolution given 5-D `input` and `filter` tensors.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              In signal processing, cross-correlation is a measure of similarity of
              two waveforms as a function of a time-lag applied to one of them. This
              is also known as a sliding dot product or sliding inner-product.
              
              Our Conv3D implements a form of cross-correlation.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv3DBackpropFilter">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Conv3DBackpropFilter (TensorFlow.TFOutput input, TensorFlow.TFOutput filter, TensorFlow.TFOutput out_backprop, long[] strides, string padding, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Conv3DBackpropFilter(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput filter, valuetype TensorFlow.TFOutput out_backprop, int64[] strides, string padding, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="filter" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Shape `[batch, depth, rows, cols, in_channels]`.
            </param>
        <param name="filter">
              Shape `[depth, rows, cols, in_channels, out_channels]`.
              `in_channels` must match between `input` and `filter`.
            </param>
        <param name="out_backprop">
              Backprop signal of shape `[batch, out_depth, out_rows, out_cols,
              out_channels]`.
            </param>
        <param name="strides">
              1-D tensor of length 5. The stride of the sliding window for each
              dimension of `input`. Must have `strides[0] = strides[4] = 1`.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Conv3DBackpropFilter'.
            </param>
        <summary>
              Computes the gradients of 3-D convolution with respect to the filter.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv3DBackpropFilterV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Conv3DBackpropFilterV2 (TensorFlow.TFOutput input, TensorFlow.TFOutput filter_sizes, TensorFlow.TFOutput out_backprop, long[] strides, string padding, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Conv3DBackpropFilterV2(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput filter_sizes, valuetype TensorFlow.TFOutput out_backprop, int64[] strides, string padding, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="filter_sizes" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Shape `[batch, depth, rows, cols, in_channels]`.
            </param>
        <param name="filter_sizes">
              An integer vector representing the tensor shape of `filter`,
              where `filter` is a 5-D
              `[filter_depth, filter_height, filter_width, in_channels, out_channels]`
              tensor.
            </param>
        <param name="out_backprop">
              Backprop signal of shape `[batch, out_depth, out_rows, out_cols,
              out_channels]`.
            </param>
        <param name="strides">
              1-D tensor of length 5. The stride of the sliding window for each
              dimension of `input`. Must have `strides[0] = strides[4] = 1`.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              The data format of the input and output data. With the
              default format "NDHWC", the data is stored in the order of:
                  [batch, in_depth, in_height, in_width, in_channels].
              Alternatively, the format could be "NCDHW", the data storage order is:
                  [batch, in_channels, in_depth, in_height, in_width].
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Conv3DBackpropFilterV2'.
            </param>
        <summary>
              Computes the gradients of 3-D convolution with respect to the filter.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv3DBackpropInput">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Conv3DBackpropInput (TensorFlow.TFOutput input, TensorFlow.TFOutput filter, TensorFlow.TFOutput out_backprop, long[] strides, string padding, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Conv3DBackpropInput(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput filter, valuetype TensorFlow.TFOutput out_backprop, int64[] strides, string padding, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="filter" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Shape `[batch, depth, rows, cols, in_channels]`.
            </param>
        <param name="filter">
              Shape `[depth, rows, cols, in_channels, out_channels]`.
              `in_channels` must match between `input` and `filter`.
            </param>
        <param name="out_backprop">
              Backprop signal of shape `[batch, out_depth, out_rows, out_cols,
              out_channels]`.
            </param>
        <param name="strides">
              1-D tensor of length 5. The stride of the sliding window for each
              dimension of `input`. Must have `strides[0] = strides[4] = 1`.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Conv3DBackpropInput'.
            </param>
        <summary>
              Computes the gradients of 3-D convolution with respect to the input.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv3DBackpropInputV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Conv3DBackpropInputV2 (TensorFlow.TFOutput input_sizes, TensorFlow.TFOutput filter, TensorFlow.TFOutput out_backprop, long[] strides, string padding, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Conv3DBackpropInputV2(valuetype TensorFlow.TFOutput input_sizes, valuetype TensorFlow.TFOutput filter, valuetype TensorFlow.TFOutput out_backprop, int64[] strides, string padding, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_sizes" Type="TensorFlow.TFOutput" />
        <Parameter Name="filter" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_sizes">
              An integer vector representing the tensor shape of `input`,
              where `input` is a 5-D
              `[batch, depth, rows, cols, in_channels]` tensor.
            </param>
        <param name="filter">
              Shape `[depth, rows, cols, in_channels, out_channels]`.
              `in_channels` must match between `input` and `filter`.
            </param>
        <param name="out_backprop">
              Backprop signal of shape `[batch, out_depth, out_rows, out_cols,
              out_channels]`.
            </param>
        <param name="strides">
              1-D tensor of length 5. The stride of the sliding window for each
              dimension of `input`. Must have `strides[0] = strides[4] = 1`.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              The data format of the input and output data. With the
              default format "NDHWC", the data is stored in the order of:
                  [batch, in_depth, in_height, in_width, in_channels].
              Alternatively, the format could be "NCDHW", the data storage order is:
                  [batch, in_channels, in_depth, in_height, in_width].
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Conv3DBackpropInputV2'.
            </param>
        <summary>
              Computes the gradients of 3-D convolution with respect to the input.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cos">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Cos (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Cos(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Cos'.
            </param>
        <summary>
              Computes cos of x element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cosh">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Cosh (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Cosh(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Cosh'.
            </param>
        <summary>
              Computes hyperbolic cosine of x element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CropAndResize">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput CropAndResize (TensorFlow.TFOutput image, TensorFlow.TFOutput boxes, TensorFlow.TFOutput box_ind, TensorFlow.TFOutput crop_size, string method = null, Nullable&lt;float&gt; extrapolation_value = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput CropAndResize(valuetype TensorFlow.TFOutput image, valuetype TensorFlow.TFOutput boxes, valuetype TensorFlow.TFOutput box_ind, valuetype TensorFlow.TFOutput crop_size, string method, valuetype System.Nullable`1&lt;float32&gt; extrapolation_value, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="TensorFlow.TFOutput" />
        <Parameter Name="boxes" Type="TensorFlow.TFOutput" />
        <Parameter Name="box_ind" Type="TensorFlow.TFOutput" />
        <Parameter Name="crop_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="extrapolation_value" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="image">
              A 4-D tensor of shape `[batch, image_height, image_width, depth]`.
              Both `image_height` and `image_width` need to be positive.
            </param>
        <param name="boxes">
              A 2-D tensor of shape `[num_boxes, 4]`. The `i`-th row of the tensor
              specifies the coordinates of a box in the `box_ind[i]` image and is specified
              in normalized coordinates `[y1, x1, y2, x2]`. A normalized coordinate value of
              `y` is mapped to the image coordinate at `y * (image_height - 1)`, so as the
              `[0, 1]` interval of normalized image height is mapped to
              `[0, image_height - 1]` in image height coordinates. We do allow `y1` &amp;gt; `y2`, in
              which case the sampled crop is an up-down flipped version of the original
              image. The width dimension is treated similarly. Normalized coordinates
              outside the `[0, 1]` range are allowed, in which case we use
              `extrapolation_value` to extrapolate the input image values.
            </param>
        <param name="box_ind">
              A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.
              The value of `box_ind[i]` specifies the image that the `i`-th box refers to.
            </param>
        <param name="crop_size">
              A 1-D tensor of 2 elements, `size = [crop_height, crop_width]`. All
              cropped image patches are resized to this size. The aspect ratio of the image
              content is not preserved. Both `crop_height` and `crop_width` need to be
              positive.
            </param>
        <param name="method">
              Optional argument
              A string specifying the interpolation method. Only 'bilinear' is
              supported for now.
            </param>
        <param name="extrapolation_value">
              Optional argument
              Value used for extrapolation, when applicable.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'CropAndResize'.
            </param>
        <summary>
              Extracts crops from the input image tensor and bilinearly resizes them (possibly
            </summary>
        <returns>
              A 4-D tensor of shape `[num_boxes, crop_height, crop_width, depth]`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              with aspect ratio change) to a common output size specified by `crop_size`. This
              is more general than the `crop_to_bounding_box` op which extracts a fixed size
              slice from the input image and does not allow resizing or aspect ratio change.
              
              Returns a tensor with `crops` from the input `image` at positions defined at the
              bounding box locations in `boxes`. The cropped boxes are all resized (with
              bilinear interpolation) to a fixed `size = [crop_height, crop_width]`. The
              result is a 4-D tensor `[num_boxes, crop_height, crop_width, depth]`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CropAndResizeGradBoxes">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput CropAndResizeGradBoxes (TensorFlow.TFOutput grads, TensorFlow.TFOutput image, TensorFlow.TFOutput boxes, TensorFlow.TFOutput box_ind, string method = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput CropAndResizeGradBoxes(valuetype TensorFlow.TFOutput grads, valuetype TensorFlow.TFOutput image, valuetype TensorFlow.TFOutput boxes, valuetype TensorFlow.TFOutput box_ind, string method, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grads" Type="TensorFlow.TFOutput" />
        <Parameter Name="image" Type="TensorFlow.TFOutput" />
        <Parameter Name="boxes" Type="TensorFlow.TFOutput" />
        <Parameter Name="box_ind" Type="TensorFlow.TFOutput" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="grads">
              A 4-D tensor of shape `[num_boxes, crop_height, crop_width, depth]`.
            </param>
        <param name="image">
              A 4-D tensor of shape `[batch, image_height, image_width, depth]`.
              Both `image_height` and `image_width` need to be positive.
            </param>
        <param name="boxes">
              A 2-D tensor of shape `[num_boxes, 4]`. The `i`-th row of the tensor
              specifies the coordinates of a box in the `box_ind[i]` image and is specified
              in normalized coordinates `[y1, x1, y2, x2]`. A normalized coordinate value of
              `y` is mapped to the image coordinate at `y * (image_height - 1)`, so as the
              `[0, 1]` interval of normalized image height is mapped to
              `[0, image_height - 1] in image height coordinates. We do allow y1 &amp;gt; y2, in
              which case the sampled crop is an up-down flipped version of the original
              image. The width dimension is treated similarly. Normalized coordinates
              outside the `[0, 1]` range are allowed, in which case we use
              `extrapolation_value` to extrapolate the input image values.
            </param>
        <param name="box_ind">
              A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.
              The value of `box_ind[i]` specifies the image that the `i`-th box refers to.
            </param>
        <param name="method">
              Optional argument
              A string specifying the interpolation method. Only 'bilinear' is
              supported for now.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'CropAndResizeGradBoxes'.
            </param>
        <summary>
              Computes the gradient of the crop_and_resize op wrt the input boxes tensor.
            </summary>
        <returns>
              A 2-D tensor of shape `[num_boxes, 4]`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CropAndResizeGradImage">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput CropAndResizeGradImage (TensorFlow.TFOutput grads, TensorFlow.TFOutput boxes, TensorFlow.TFOutput box_ind, TensorFlow.TFOutput image_size, TensorFlow.TFDataType T, string method = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput CropAndResizeGradImage(valuetype TensorFlow.TFOutput grads, valuetype TensorFlow.TFOutput boxes, valuetype TensorFlow.TFOutput box_ind, valuetype TensorFlow.TFOutput image_size, valuetype TensorFlow.TFDataType T, string method, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grads" Type="TensorFlow.TFOutput" />
        <Parameter Name="boxes" Type="TensorFlow.TFOutput" />
        <Parameter Name="box_ind" Type="TensorFlow.TFOutput" />
        <Parameter Name="image_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="T" Type="TensorFlow.TFDataType" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="grads">
              A 4-D tensor of shape `[num_boxes, crop_height, crop_width, depth]`.
            </param>
        <param name="boxes">
              A 2-D tensor of shape `[num_boxes, 4]`. The `i`-th row of the tensor
              specifies the coordinates of a box in the `box_ind[i]` image and is specified
              in normalized coordinates `[y1, x1, y2, x2]`. A normalized coordinate value of
              `y` is mapped to the image coordinate at `y * (image_height - 1)`, so as the
              `[0, 1]` interval of normalized image height is mapped to
              `[0, image_height - 1] in image height coordinates. We do allow y1 &amp;gt; y2, in
              which case the sampled crop is an up-down flipped version of the original
              image. The width dimension is treated similarly. Normalized coordinates
              outside the `[0, 1]` range are allowed, in which case we use
              `extrapolation_value` to extrapolate the input image values.
            </param>
        <param name="box_ind">
              A 1-D tensor of shape `[num_boxes]` with int32 values in `[0, batch)`.
              The value of `box_ind[i]` specifies the image that the `i`-th box refers to.
            </param>
        <param name="image_size">
              A 1-D tensor with value `[batch, image_height, image_width, depth]`
              containing the original image size. Both `image_height` and `image_width` need
              to be positive.
            </param>
        <param name="T">
        </param>
        <param name="method">
              Optional argument
              A string specifying the interpolation method. Only 'bilinear' is
              supported for now.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'CropAndResizeGradImage'.
            </param>
        <summary>
              Computes the gradient of the crop_and_resize op wrt the input image tensor.
            </summary>
        <returns>
              A 4-D tensor of shape `[batch, image_height, image_width, depth]`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cross">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Cross (TensorFlow.TFOutput a, TensorFlow.TFOutput b, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Cross(valuetype TensorFlow.TFOutput a, valuetype TensorFlow.TFOutput b, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="TensorFlow.TFOutput" />
        <Parameter Name="b" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a">
              A tensor containing 3-element vectors.
            </param>
        <param name="b">
              Another tensor, of same type and shape as `a`.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Cross'.
            </param>
        <summary>
              Compute the pairwise cross product.
            </summary>
        <returns>
              Pairwise cross product of the vectors in `a` and `b`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              `a` and `b` must be the same shape; they can either be simple 3-element vectors,
              or any shape where the innermost dimension is 3. In the latter case, each pair
              of corresponding 3-element vectors is cross-multiplied independently.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CTCBeamSearchDecoder">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput&gt; CTCBeamSearchDecoder (TensorFlow.TFOutput inputs, TensorFlow.TFOutput sequence_length, long beam_width, long top_paths, Nullable&lt;bool&gt; merge_repeated = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`4&lt;valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput&gt; CTCBeamSearchDecoder(valuetype TensorFlow.TFOutput inputs, valuetype TensorFlow.TFOutput sequence_length, int64 beam_width, int64 top_paths, valuetype System.Nullable`1&lt;bool&gt; merge_repeated, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput" />
        <Parameter Name="sequence_length" Type="TensorFlow.TFOutput" />
        <Parameter Name="beam_width" Type="System.Int64" />
        <Parameter Name="top_paths" Type="System.Int64" />
        <Parameter Name="merge_repeated" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputs">
              3-D, shape: `(max_time x batch_size x num_classes)`, the logits.
            </param>
        <param name="sequence_length">
              A vector containing sequence lengths, size `(batch)`.
            </param>
        <param name="beam_width">
              A scalar &amp;gt;= 0 (beam search beam width).
            </param>
        <param name="top_paths">
              A scalar &amp;gt;= 0, &amp;lt;= beam_width (controls output size).
            </param>
        <param name="merge_repeated">
              Optional argument
              If true, merge repeated classes in output.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'CTCBeamSearchDecoder'.
            </param>
        <summary>
              Performs beam search decoding on the logits given in input.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              decoded_indices: A list (length: top_paths) of indices matrices.  Matrix j,
              size `(total_decoded_outputs[j] x 2)`, has indices of a
              `SparseTensor&amp;lt;int64, 2&amp;gt;`.  The rows store: [batch, time].
              decoded_values: A list (length: top_paths) of values vectors.  Vector j,
              size `(length total_decoded_outputs[j])`, has the values of a
              `SparseTensor&amp;lt;int64, 2&amp;gt;`.  The vector stores the decoded classes for beam j.
              decoded_shape: A list (length: top_paths) of shape vector.  Vector j,
              size `(2)`, stores the shape of the decoded `SparseTensor[j]`.
              Its values are: `[batch_size, max_decoded_length[j]]`.
              log_probability: A matrix, shaped: `(batch_size x top_paths)`.  The
              sequence log-probabilities.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              A note about the attribute merge_repeated: For the beam search decoder,
              this means that if consecutive entries in a beam are the same, only
              the first of these is emitted.  That is, when the top path is "A B B B B",
              "A B" is returned if merge_repeated = True but "A B B B B" is
              returned if merge_repeated = False.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CTCGreedyDecoder">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; CTCGreedyDecoder (TensorFlow.TFOutput inputs, TensorFlow.TFOutput sequence_length, Nullable&lt;bool&gt; merge_repeated = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`4&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; CTCGreedyDecoder(valuetype TensorFlow.TFOutput inputs, valuetype TensorFlow.TFOutput sequence_length, valuetype System.Nullable`1&lt;bool&gt; merge_repeated, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput" />
        <Parameter Name="sequence_length" Type="TensorFlow.TFOutput" />
        <Parameter Name="merge_repeated" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputs">
              3-D, shape: `(max_time x batch_size x num_classes)`, the logits.
            </param>
        <param name="sequence_length">
              A vector containing sequence lengths, size `(batch_size)`.
            </param>
        <param name="merge_repeated">
              Optional argument
              If True, merge repeated classes in output.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'CTCGreedyDecoder'.
            </param>
        <summary>
              Performs greedy decoding on the logits given in inputs.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              decoded_indices: Indices matrix, size `(total_decoded_outputs x 2)`,
              of a `SparseTensor&amp;lt;int64, 2&amp;gt;`.  The rows store: [batch, time].
              decoded_values: Values vector, size: `(total_decoded_outputs)`,
              of a `SparseTensor&amp;lt;int64, 2&amp;gt;`.  The vector stores the decoded classes.
              decoded_shape: Shape vector, size `(2)`, of the decoded SparseTensor.
              Values are: `[batch_size, max_decoded_length]`.
              log_probability: Matrix, size `(batch_size x 1)`, containing sequence
              log-probabilities.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              A note about the attribute merge_repeated: if enabled, when
              consecutive logits' maximum indices are the same, only the first of
              these is emitted.  Labeling the blank '*', the sequence "A B B * B B"
              becomes "A B B" if merge_repeated = True and "A B B B B" if
              merge_repeated = False.
              
              Regardless of the value of merge_repeated, if the maximum index of a given
              time and batch corresponds to the blank, index `(num_classes - 1)`, no new
              element is emitted.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CTCLoss">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; CTCLoss (TensorFlow.TFOutput inputs, TensorFlow.TFOutput labels_indices, TensorFlow.TFOutput labels_values, TensorFlow.TFOutput sequence_length, Nullable&lt;bool&gt; preprocess_collapse_repeated = null, Nullable&lt;bool&gt; ctc_merge_repeated = null, Nullable&lt;bool&gt; ignore_longer_outputs_than_inputs = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; CTCLoss(valuetype TensorFlow.TFOutput inputs, valuetype TensorFlow.TFOutput labels_indices, valuetype TensorFlow.TFOutput labels_values, valuetype TensorFlow.TFOutput sequence_length, valuetype System.Nullable`1&lt;bool&gt; preprocess_collapse_repeated, valuetype System.Nullable`1&lt;bool&gt; ctc_merge_repeated, valuetype System.Nullable`1&lt;bool&gt; ignore_longer_outputs_than_inputs, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput" />
        <Parameter Name="labels_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="labels_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="sequence_length" Type="TensorFlow.TFOutput" />
        <Parameter Name="preprocess_collapse_repeated" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="ctc_merge_repeated" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="ignore_longer_outputs_than_inputs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputs">
              3-D, shape: `(max_time x batch_size x num_classes)`, the logits.
            </param>
        <param name="labels_indices">
              The indices of a `SparseTensor&amp;lt;int32, 2&amp;gt;`.
              `labels_indices(i, :) == [b, t]` means `labels_values(i)` stores the id for
              `(batch b, time t)`.
            </param>
        <param name="labels_values">
              The values (labels) associated with the given batch and time.
            </param>
        <param name="sequence_length">
              A vector containing sequence lengths (batch).
            </param>
        <param name="preprocess_collapse_repeated">
              Optional argument
              Scalar, if true then repeated labels are
              collapsed prior to the CTC calculation.
            </param>
        <param name="ctc_merge_repeated">
              Optional argument
              Scalar.  If set to false, *during* CTC calculation
              repeated non-blank labels will not be merged and are interpreted as
              individual labels.  This is a simplified version of CTC.
            </param>
        <param name="ignore_longer_outputs_than_inputs">
              Optional argument
              Scalar. If set to true, during CTC
              calculation, items that have longer output sequences than input sequences
              are skipped: they don't contribute to the loss term and have zero-gradient.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'CTCLoss'.
            </param>
        <summary>
              Calculates the CTC Loss (log probability) for each batch entry.  Also calculates
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              loss: A vector (batch) containing log-probabilities.
              gradient: The gradient of `loss`.  3-D, shape:
              `(max_time x batch_size x num_classes)`.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              the gradient.  This class performs the softmax operation for you, so inputs
              should be e.g. linear projections of outputs by an LSTM.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cumprod">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Cumprod (TensorFlow.TFOutput x, TensorFlow.TFOutput axis, Nullable&lt;bool&gt; exclusive = null, Nullable&lt;bool&gt; reverse = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Cumprod(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput axis, valuetype System.Nullable`1&lt;bool&gt; exclusive, valuetype System.Nullable`1&lt;bool&gt; reverse, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="axis" Type="TensorFlow.TFOutput" />
        <Parameter Name="exclusive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="reverse" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="axis">
        </param>
        <param name="exclusive">
              Optional argument
            </param>
        <param name="reverse">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Cumprod'.
            </param>
        <summary>
              Compute the cumulative product of the tensor `x` along `axis`.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              By default, this op performs an inclusive cumprod, which means that the first
              element of the input is identical to the first element of the output:
              
              ```python
              tf.cumprod([a, b, c])  # =&amp;gt; [a, a * b, a * b * c]
              ```
              
              By setting the `exclusive` kwarg to `True`, an exclusive cumprod is
              performed instead:
              
              ```python
              tf.cumprod([a, b, c], exclusive=True)  # =&amp;gt; [1, a, a * b]
              ```
              
              By setting the `reverse` kwarg to `True`, the cumprod is performed in the
              opposite direction:
              
              ```python
              tf.cumprod([a, b, c], reverse=True)  # =&amp;gt; [a * b * c, b * c, c]
              ```
              
              This is more efficient than using separate `tf.reverse` ops.
              
              The `reverse` and `exclusive` kwargs can also be combined:
              
              ```python
              tf.cumprod([a, b, c], exclusive=True, reverse=True)  # =&amp;gt; [b * c, c, 1]
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cumsum">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Cumsum (TensorFlow.TFOutput x, TensorFlow.TFOutput axis, Nullable&lt;bool&gt; exclusive = null, Nullable&lt;bool&gt; reverse = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Cumsum(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput axis, valuetype System.Nullable`1&lt;bool&gt; exclusive, valuetype System.Nullable`1&lt;bool&gt; reverse, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="axis" Type="TensorFlow.TFOutput" />
        <Parameter Name="exclusive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="reverse" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="axis">
        </param>
        <param name="exclusive">
              Optional argument
            </param>
        <param name="reverse">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Cumsum'.
            </param>
        <summary>
              Compute the cumulative sum of the tensor `x` along `axis`.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              By default, this op performs an inclusive cumsum, which means that the first
              element of the input is identical to the first element of the output:
              
              ```python
              tf.cumsum([a, b, c])  # =&amp;gt; [a, a + b, a + b + c]
              ```
              
              By setting the `exclusive` kwarg to `True`, an exclusive cumsum is
              performed instead:
              
              ```python
              tf.cumsum([a, b, c], exclusive=True)  # =&amp;gt; [0, a, a + b]
              ```
              
              By setting the `reverse` kwarg to `True`, the cumsum is performed in the
              opposite direction:
              
              ```python
              tf.cumsum([a, b, c], reverse=True)  # =&amp;gt; [a + b + c, b + c, c]
              ```
              
              This is more efficient than using separate `tf.reverse` ops.
              
              The `reverse` and `exclusive` kwargs can also be combined:
              
              ```python
              tf.cumsum([a, b, c], exclusive=True, reverse=True)  # =&amp;gt; [b + c, c, 0]
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentNameScope">
      <MemberSignature Language="C#" Value="public string CurrentNameScope { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrentNameScope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns the current name scope in use, to change this, use the WithScope method.
            </summary>
        <value>The current name scope.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DecodeBase64">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DecodeBase64 (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DecodeBase64(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Base64 strings to decode.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DecodeBase64'.
            </param>
        <summary>
              Decode web-safe base64-encoded strings.
            </summary>
        <returns>
              Decoded strings.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Input may or may not have padding at the end. See EncodeBase64 for padding.
              Web-safe means that input must use - and _ instead of + and /.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecodeBmp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DecodeBmp (TensorFlow.TFOutput contents, Nullable&lt;long&gt; channels = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DecodeBmp(valuetype TensorFlow.TFOutput contents, valuetype System.Nullable`1&lt;int64&gt; channels, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contents" Type="TensorFlow.TFOutput" />
        <Parameter Name="channels" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="contents">
              0-D.  The BMP-encoded image.
            </param>
        <param name="channels">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DecodeBmp'.
            </param>
        <summary>
              Decode the first frame of a BMP-encoded image to a uint8 tensor.
            </summary>
        <returns>
              3-D with shape `[height, width, channels]`. RGB order
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The attr `channels` indicates the desired number of color channels for the
              decoded image.
              
              Accepted values are:
              
              *   0: Use the number of channels in the BMP-encoded image.
              *   3: output an RGB image.
              *   4: output an RGBA image.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecodeCSV">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] DecodeCSV (TensorFlow.TFOutput records, TensorFlow.TFOutput[] record_defaults, string field_delim = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] DecodeCSV(valuetype TensorFlow.TFOutput records, valuetype TensorFlow.TFOutput[] record_defaults, string field_delim, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="records" Type="TensorFlow.TFOutput" />
        <Parameter Name="record_defaults" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="field_delim" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="records">
              Each string is a record/row in the csv and all records should have
              the same format.
            </param>
        <param name="record_defaults">
              One tensor per column of the input record, with either a
              scalar default value for that column or empty if the column is required.
            </param>
        <param name="field_delim">
              Optional argument
              delimiter to separate fields in a record.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DecodeCSV'.
            </param>
        <summary>
              Convert CSV records to tensors. Each column maps to one tensor.
            </summary>
        <returns>
              Each tensor will have the same shape as records.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              RFC 4180 format is expected for the CSV records.
              (https://tools.ietf.org/html/rfc4180)
              Note that we allow leading and trailing spaces with int or float field.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecodeCSV">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] DecodeCSV (TensorFlow.TFOutput records, TensorFlow.TFOutput[] record_defaults, string field_delim = null, Nullable&lt;bool&gt; use_quote_delim = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] DecodeCSV(valuetype TensorFlow.TFOutput records, valuetype TensorFlow.TFOutput[] record_defaults, string field_delim, valuetype System.Nullable`1&lt;bool&gt; use_quote_delim, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="records" Type="TensorFlow.TFOutput" />
        <Parameter Name="record_defaults" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="field_delim" Type="System.String" />
        <Parameter Name="use_quote_delim" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="records">
              Each string is a record/row in the csv and all records should have
              the same format.
            </param>
        <param name="record_defaults">
              One tensor per column of the input record, with either a
              scalar default value for that column or empty if the column is required.
            </param>
        <param name="field_delim">
              Optional argument
              char delimiter to separate fields in a record.
            </param>
        <param name="use_quote_delim">
              Optional argument
              If false, treats double quotation marks as regular
              characters inside of the string fields (ignoring RFC 4180, Section 2,
              Bullet 5).
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DecodeCSV'.
            </param>
        <summary>
              Convert CSV records to tensors. Each column maps to one tensor.
            </summary>
        <returns>
              Each tensor will have the same shape as records.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              RFC 4180 format is expected for the CSV records.
              (https://tools.ietf.org/html/rfc4180)
              Note that we allow leading and trailing spaces with int or float field.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecodeGif">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DecodeGif (TensorFlow.TFOutput contents, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DecodeGif(valuetype TensorFlow.TFOutput contents, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contents" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="contents">
              0-D.  The GIF-encoded image.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DecodeGif'.
            </param>
        <summary>
              Decode the first frame of a GIF-encoded image to a uint8 tensor.
            </summary>
        <returns>
              4-D with shape `[num_frames, height, width, 3]`. RGB order
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              GIF with frame or transparency compression are not supported
              convert animated GIF from compressed to uncompressed by:
              
                  convert $src.gif -coalesce $dst.gif
              
              This op also supports decoding JPEGs and PNGs, though it is cleaner to use
              `tf.image.decode_image`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecodeJpeg">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DecodeJpeg (TensorFlow.TFOutput contents, Nullable&lt;long&gt; channels = null, Nullable&lt;long&gt; ratio = null, Nullable&lt;bool&gt; fancy_upscaling = null, Nullable&lt;bool&gt; try_recover_truncated = null, Nullable&lt;float&gt; acceptable_fraction = null, string dct_method = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DecodeJpeg(valuetype TensorFlow.TFOutput contents, valuetype System.Nullable`1&lt;int64&gt; channels, valuetype System.Nullable`1&lt;int64&gt; ratio, valuetype System.Nullable`1&lt;bool&gt; fancy_upscaling, valuetype System.Nullable`1&lt;bool&gt; try_recover_truncated, valuetype System.Nullable`1&lt;float32&gt; acceptable_fraction, string dct_method, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contents" Type="TensorFlow.TFOutput" />
        <Parameter Name="channels" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="ratio" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="fancy_upscaling" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="try_recover_truncated" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="acceptable_fraction" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="dct_method" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="contents">
              0-D.  The JPEG-encoded image.
            </param>
        <param name="channels">
              Optional argument
              Number of color channels for the decoded image.
            </param>
        <param name="ratio">
              Optional argument
              Downscaling ratio.
            </param>
        <param name="fancy_upscaling">
              Optional argument
              If true use a slower but nicer upscaling of the
              chroma planes (yuv420/422 only).
            </param>
        <param name="try_recover_truncated">
              Optional argument
              If true try to recover an image from truncated input.
            </param>
        <param name="acceptable_fraction">
              Optional argument
              The minimum required fraction of lines before a truncated
              input is accepted.
            </param>
        <param name="dct_method">
              Optional argument
              string specifying a hint about the algorithm used for
              decompression.  Defaults to "" which maps to a system-specific
              default.  Currently valid values are ["INTEGER_FAST",
              "INTEGER_ACCURATE"].  The hint may be ignored (e.g., the internal
              jpeg library changes to a version that does not have that specific
              option.)
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DecodeJpeg'.
            </param>
        <summary>
              Decode a JPEG-encoded image to a uint8 tensor.
            </summary>
        <returns>
              3-D with shape `[height, width, channels]`..
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The attr `channels` indicates the desired number of color channels for the
              decoded image.
              
              Accepted values are:
              
              *   0: Use the number of channels in the JPEG-encoded image.
              *   1: output a grayscale image.
              *   3: output an RGB image.
              
              If needed, the JPEG-encoded image is transformed to match the requested number
              of color channels.
              
              The attr `ratio` allows downscaling the image by an integer factor during
              decoding.  Allowed values are: 1, 2, 4, and 8.  This is much faster than
              downscaling the image later.
              
              This op also supports decoding PNGs and non-animated GIFs since the interface is
              the same, though it is cleaner to use `tf.image.decode_image`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecodeJSONExample">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DecodeJSONExample (TensorFlow.TFOutput json_examples, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DecodeJSONExample(valuetype TensorFlow.TFOutput json_examples, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="json_examples" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="json_examples">
              Each string is a JSON object serialized according to the JSON
              mapping of the Example proto.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DecodeJSONExample'.
            </param>
        <summary>
              Convert JSON-encoded Example records to binary protocol buffer strings.
            </summary>
        <returns>
              Each string is a binary Example protocol buffer corresponding
              to the respective element of `json_examples`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op translates a tensor containing Example records, encoded using
              the [standard JSON
              mapping](https://developers.google.com/protocol-buffers/docs/proto3#json),
              into a tensor containing the same records encoded as binary protocol
              buffers. The resulting tensor can then be fed to any of the other
              Example-parsing ops.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecodePng">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DecodePng (TensorFlow.TFOutput contents, Nullable&lt;long&gt; channels = null, Nullable&lt;TensorFlow.TFDataType&gt; dtype = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DecodePng(valuetype TensorFlow.TFOutput contents, valuetype System.Nullable`1&lt;int64&gt; channels, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contents" Type="TensorFlow.TFOutput" />
        <Parameter Name="channels" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="dtype" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="contents">
              0-D.  The PNG-encoded image.
            </param>
        <param name="channels">
              Optional argument
              Number of color channels for the decoded image.
            </param>
        <param name="dtype">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DecodePng'.
            </param>
        <summary>
              Decode a PNG-encoded image to a uint8 or uint16 tensor.
            </summary>
        <returns>
              3-D with shape `[height, width, channels]`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The attr `channels` indicates the desired number of color channels for the
              decoded image.
              
              Accepted values are:
              
              *   0: Use the number of channels in the PNG-encoded image.
              *   1: output a grayscale image.
              *   3: output an RGB image.
              *   4: output an RGBA image.
              
              If needed, the PNG-encoded image is transformed to match the requested number
              of color channels.
              
              This op also supports decoding JPEGs and non-animated GIFs since the interface
              is the same, though it is cleaner to use `tf.image.decode_image`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecodeRaw">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DecodeRaw (TensorFlow.TFOutput bytes, TensorFlow.TFDataType out_type, Nullable&lt;bool&gt; little_endian = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DecodeRaw(valuetype TensorFlow.TFOutput bytes, valuetype TensorFlow.TFDataType out_type, valuetype System.Nullable`1&lt;bool&gt; little_endian, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_type" Type="TensorFlow.TFDataType" />
        <Parameter Name="little_endian" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="bytes">
              All the elements must have the same length.
            </param>
        <param name="out_type">
        </param>
        <param name="little_endian">
              Optional argument
              Whether the input `bytes` are in little-endian order.
              Ignored for `out_type` values that are stored in a single byte like
              `uint8`.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DecodeRaw'.
            </param>
        <summary>
              Reinterpret the bytes of a string as a vector of numbers.
            </summary>
        <returns>
              A Tensor with one more dimension than the input `bytes`.  The
              added dimension will have size equal to the length of the elements
              of `bytes` divided by the number of bytes to represent `out_type`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DecodeWav">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; DecodeWav (TensorFlow.TFOutput contents, Nullable&lt;long&gt; desired_channels = null, Nullable&lt;long&gt; desired_samples = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; DecodeWav(valuetype TensorFlow.TFOutput contents, valuetype System.Nullable`1&lt;int64&gt; desired_channels, valuetype System.Nullable`1&lt;int64&gt; desired_samples, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contents" Type="TensorFlow.TFOutput" />
        <Parameter Name="desired_channels" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="desired_samples" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="contents">
              The WAV-encoded audio, usually from a file.
            </param>
        <param name="desired_channels">
              Optional argument
              Number of sample channels wanted.
            </param>
        <param name="desired_samples">
              Optional argument
              Length of audio requested.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DecodeWav'.
            </param>
        <summary>
              Decode a 16-bit PCM WAV file to a float tensor.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              audio: 2-D with shape `[length, channels]`.
              sample_rate: Scalar holding the sample rate found in the WAV header.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              The -32768 to 32767 signed 16-bit values will be scaled to -1.0 to 1.0 in float.
              
              When desired_channels is set, if the input contains fewer channels than this
              then the last channel will be duplicated to give the requested number, else if
              the input has more channels than requested then the additional channels will be
              ignored.
              
              If desired_samples is set, then the audio will be cropped or padded with zeroes
              to the requested length.
              
              The first output contains a Tensor with the content of the audio samples. The
              lowest dimension will be the number of channels, and the second will be the
              number of samples. For example, a ten-sample-long stereo WAV file should give an
              output shape of [10, 2].
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteSessionTensor">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation DeleteSessionTensor (TensorFlow.TFOutput handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation DeleteSessionTensor(valuetype TensorFlow.TFOutput handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle for a tensor stored in the session state.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DeleteSessionTensor'.
            </param>
        <summary>
              Delete the tensor specified by its handle in the session.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DenseToDenseSetOperation">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; DenseToDenseSetOperation (TensorFlow.TFOutput set1, TensorFlow.TFOutput set2, string set_operation, Nullable&lt;bool&gt; validate_indices = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; DenseToDenseSetOperation(valuetype TensorFlow.TFOutput set1, valuetype TensorFlow.TFOutput set2, string set_operation, valuetype System.Nullable`1&lt;bool&gt; validate_indices, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="set1" Type="TensorFlow.TFOutput" />
        <Parameter Name="set2" Type="TensorFlow.TFOutput" />
        <Parameter Name="set_operation" Type="System.String" />
        <Parameter Name="validate_indices" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="set1">
              `Tensor` with rank `n`. 1st `n-1` dimensions must be the same as `set2`.
              Dimension `n` contains values in a set, duplicates are allowed but ignored.
            </param>
        <param name="set2">
              `Tensor` with rank `n`. 1st `n-1` dimensions must be the same as `set1`.
              Dimension `n` contains values in a set, duplicates are allowed but ignored.
            </param>
        <param name="set_operation">
        </param>
        <param name="validate_indices">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DenseToDenseSetOperation'.
            </param>
        <summary>
              Applies set operation along last dimension of 2 `Tensor` inputs.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              result_indices: 2D indices of a `SparseTensor`.
              result_values: 1D values of a `SparseTensor`.
              result_shape: 1D `Tensor` shape of a `SparseTensor`. `result_shape[0...n-1]` is
              the same as the 1st `n-1` dimensions of `set1` and `set2`, `result_shape[n]`
              is the max result set size across all `0...n-1` dimensions.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              See SetOperationOp::SetOperationFromContext for values of `set_operation`.
              
              Output `result` is a `SparseTensor` represented by `result_indices`,
              `result_values`, and `result_shape`. For `set1` and `set2` ranked `n`, this
              has rank `n` and the same 1st `n-1` dimensions as `set1` and `set2`. The `nth`
              dimension contains the result of `set_operation` applied to the corresponding
              `[0...n-1]` dimension of `set`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DenseToSparseBatchDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DenseToSparseBatchDataset (TensorFlow.TFOutput input_dataset, TensorFlow.TFOutput batch_size, TensorFlow.TFOutput row_shape, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DenseToSparseBatchDataset(valuetype TensorFlow.TFOutput input_dataset, valuetype TensorFlow.TFOutput batch_size, valuetype TensorFlow.TFOutput row_shape, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_dataset" Type="TensorFlow.TFOutput" />
        <Parameter Name="batch_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="row_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_dataset">
              A handle to an input dataset. Must have a single component.
            </param>
        <param name="batch_size">
              A scalar representing the number of elements to accumulate in a
              batch.
            </param>
        <param name="row_shape">
              A vector representing the dense shape of each row in the produced
              SparseTensor.
            </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DenseToSparseBatchDataset'.
            </param>
        <summary>
              Creates a dataset that yields a SparseTensor for each element of the input.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DenseToSparseSetOperation">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; DenseToSparseSetOperation (TensorFlow.TFOutput set1, TensorFlow.TFOutput set2_indices, TensorFlow.TFOutput set2_values, TensorFlow.TFOutput set2_shape, string set_operation, Nullable&lt;bool&gt; validate_indices = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; DenseToSparseSetOperation(valuetype TensorFlow.TFOutput set1, valuetype TensorFlow.TFOutput set2_indices, valuetype TensorFlow.TFOutput set2_values, valuetype TensorFlow.TFOutput set2_shape, string set_operation, valuetype System.Nullable`1&lt;bool&gt; validate_indices, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="set1" Type="TensorFlow.TFOutput" />
        <Parameter Name="set2_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="set2_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="set2_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="set_operation" Type="System.String" />
        <Parameter Name="validate_indices" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="set1">
              `Tensor` with rank `n`. 1st `n-1` dimensions must be the same as `set2`.
              Dimension `n` contains values in a set, duplicates are allowed but ignored.
            </param>
        <param name="set2_indices">
              2D `Tensor`, indices of a `SparseTensor`. Must be in row-major
              order.
            </param>
        <param name="set2_values">
              1D `Tensor`, values of a `SparseTensor`. Must be in row-major
              order.
            </param>
        <param name="set2_shape">
              1D `Tensor`, shape of a `SparseTensor`. `set2_shape[0...n-1]` must
              be the same as the 1st `n-1` dimensions of `set1`, `result_shape[n]` is the
              max set size across `n-1` dimensions.
            </param>
        <param name="set_operation">
        </param>
        <param name="validate_indices">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DenseToSparseSetOperation'.
            </param>
        <summary>
              Applies set operation along last dimension of `Tensor` and `SparseTensor`.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              result_indices: 2D indices of a `SparseTensor`.
              result_values: 1D values of a `SparseTensor`.
              result_shape: 1D `Tensor` shape of a `SparseTensor`. `result_shape[0...n-1]` is
              the same as the 1st `n-1` dimensions of `set1` and `set2`, `result_shape[n]`
              is the max result set size across all `0...n-1` dimensions.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              See SetOperationOp::SetOperationFromContext for values of `set_operation`.
              
              Input `set2` is a `SparseTensor` represented by `set2_indices`, `set2_values`,
              and `set2_shape`. For `set2` ranked `n`, 1st `n-1` dimensions must be the same
              as `set1`. Dimension `n` contains values in a set, duplicates are allowed but
              ignored.
              
              If `validate_indices` is `True`, this op validates the order and range of `set2`
              indices.
              
              Output `result` is a `SparseTensor` represented by `result_indices`,
              `result_values`, and `result_shape`. For `set1` and `set2` ranked `n`, this
              has rank `n` and the same 1st `n-1` dimensions as `set1` and `set2`. The `nth`
              dimension contains the result of `set_operation` applied to the corresponding
              `[0...n-1]` dimension of `set`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DepthToSpace">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DepthToSpace (TensorFlow.TFOutput input, long block_size, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DepthToSpace(valuetype TensorFlow.TFOutput input, int64 block_size, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="block_size" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="block_size">
              The size of the spatial block, same as in Space2Depth.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DepthToSpace'.
            </param>
        <summary>
              DepthToSpace for tensors of type T.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Rearranges data from depth into blocks of spatial data.
              This is the reverse transformation of SpaceToDepth. More specifically,
              this op outputs a copy of the input tensor where values from the `depth`
              dimension are moved in spatial blocks to the `height` and `width` dimensions.
              The attr `block_size` indicates the input block size and how the data is moved.
              
                * Chunks of data of size `block_size * block_size` from depth are rearranged
                  into non-overlapping blocks of size `block_size x block_size`
                * The width the output tensor is `input_depth * block_size`, whereas the
                  height is `input_height * block_size`.
                * The depth of the input tensor must be divisible by
                  `block_size * block_size`.
              
              That is, assuming the input is in the shape:
              `[batch, height, width, depth]`,
              the shape of the output will be:
              `[batch, height*block_size, width*block_size, depth/(block_size*block_size)]`
              
              This operation requires that the input tensor be of rank 4, and that
              `block_size` be &amp;gt;=1 and that `block_size * block_size` be a divisor of the
              input depth.
              
              This operation is useful for resizing the activations between convolutions
              (but keeping all data), e.g. instead of pooling. It is also useful for training
              purely convolutional models.
              
              For example, given this input of shape `[1, 1, 1, 4]`, and a block size of 2:
              
              ```
              x = [[[[1, 2, 3, 4]]]]
              
              ```
              
              This operation will output a tensor of shape `[1, 2, 2, 1]`:
              
              ```
                 [[[[1], [2]],
                   [[3], [4]]]]
              ```
              
              Here, the input has a batch of 1 and each batch element has shape `[1, 1, 4]`,
              the corresponding output will have 2x2 elements and will have a depth of
              1 channel (1 = `4 / (block_size * block_size)`).
              The output element shape is `[2, 2, 1]`.
              
              For an input tensor with larger depth, here of shape `[1, 1, 1, 12]`, e.g.
              
              ```
              x = [[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]]]]
              ```
              
              This operation, for block size of 2, will return the following tensor of shape
              `[1, 2, 2, 3]`
              
              ```
                 [[[[1, 2, 3], [4, 5, 6]],
                   [[7, 8, 9], [10, 11, 12]]]]
              
              ```
              
              Similarly, for the following input of shape `[1 2 2 4]`, and a block size of 2:
              
              ```
              x =  [[[[1, 2, 3, 4],
                     [5, 6, 7, 8]],
                    [[9, 10, 11, 12],
                     [13, 14, 15, 16]]]]
              ```
              
              the operator will return the following tensor of shape `[1 4 4 1]`:
              
              ```
              x = [[ [1],   [2],  [5],  [6]],
                   [ [3],   [4],  [7],  [8]],
                   [ [9],  [10], [13],  [14]],
                   [ [11], [12], [15],  [16]]]
              
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DepthwiseConv2dNative">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DepthwiseConv2dNative (TensorFlow.TFOutput input, TensorFlow.TFOutput filter, long[] strides, string padding, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DepthwiseConv2dNative(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput filter, int64[] strides, string padding, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="filter" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="filter">
        </param>
        <param name="strides">
              1-D of length 4.  The stride of the sliding window for each dimension
              of `input`.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              Specify the data format of the input and output data. With the
              default format "NHWC", the data is stored in the order of:
                  [batch, height, width, channels].
              Alternatively, the format could be "NCHW", the data storage order of:
                  [batch, channels, height, width].
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DepthwiseConv2dNative'.
            </param>
        <summary>
              Computes a 2-D depthwise convolution given 4-D `input` and `filter` tensors.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given an input tensor of shape `[batch, in_height, in_width, in_channels]`
              and a filter / kernel tensor of shape
              `[filter_height, filter_width, in_channels, channel_multiplier]`, containing
              `in_channels` convolutional filters of depth 1, `depthwise_conv2d` applies
              a different filter to each input channel (expanding from 1 channel to
              `channel_multiplier` channels for each), then concatenates the results
              together. Thus, the output has `in_channels * channel_multiplier` channels.
              
              ```
              for k in 0..in_channels-1
                for q in 0..channel_multiplier-1
                  output[b, i, j, k * channel_multiplier + q] =
                    sum_{di, dj} input[b, strides[1] * i + di, strides[2] * j + dj, k] *
                                      filter[di, dj, k, q]
              ```
              
              Must have `strides[0] = strides[3] = 1`.  For the most common case of the same
              horizontal and vertices strides, `strides = [1, stride, stride, 1]`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DepthwiseConv2dNativeBackpropFilter">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DepthwiseConv2dNativeBackpropFilter (TensorFlow.TFOutput input, TensorFlow.TFOutput filter_sizes, TensorFlow.TFOutput out_backprop, long[] strides, string padding, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DepthwiseConv2dNativeBackpropFilter(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput filter_sizes, valuetype TensorFlow.TFOutput out_backprop, int64[] strides, string padding, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="filter_sizes" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              4-D with shape based on `data_format`.  For example, if
              `data_format` is 'NHWC' then `input` is a 4-D `[batch, in_height,
              in_width, in_channels]` tensor.
            </param>
        <param name="filter_sizes">
              An integer vector representing the tensor shape of `filter`,
              where `filter` is a 4-D
              `[filter_height, filter_width, in_channels, depthwise_multiplier]` tensor.
            </param>
        <param name="out_backprop">
              4-D with shape  based on `data_format`.
              For example, if `data_format` is 'NHWC' then
              out_backprop shape is `[batch, out_height, out_width, out_channels]`.
              Gradients w.r.t. the output of the convolution.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of the input
              of the convolution.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              Specify the data format of the input and output data. With the
              default format "NHWC", the data is stored in the order of:
                  [batch, height, width, channels].
              Alternatively, the format could be "NCHW", the data storage order of:
                  [batch, channels, height, width].
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DepthwiseConv2dNativeBackpropFilter'.
            </param>
        <summary>
              Computes the gradients of depthwise convolution with respect to the filter.
            </summary>
        <returns>
              4-D with shape
              `[filter_height, filter_width, in_channels, out_channels]`.  Gradient w.r.t.
              the `filter` input of the convolution.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DepthwiseConv2dNativeBackpropInput">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DepthwiseConv2dNativeBackpropInput (TensorFlow.TFOutput input_sizes, TensorFlow.TFOutput filter, TensorFlow.TFOutput out_backprop, long[] strides, string padding, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DepthwiseConv2dNativeBackpropInput(valuetype TensorFlow.TFOutput input_sizes, valuetype TensorFlow.TFOutput filter, valuetype TensorFlow.TFOutput out_backprop, int64[] strides, string padding, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_sizes" Type="TensorFlow.TFOutput" />
        <Parameter Name="filter" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_sizes">
              An integer vector representing the shape of `input`, based
              on `data_format`.  For example, if `data_format` is 'NHWC' then
               `input` is a 4-D `[batch, height, width, channels]` tensor.
            </param>
        <param name="filter">
              4-D with shape
              `[filter_height, filter_width, in_channels, depthwise_multiplier]`.
            </param>
        <param name="out_backprop">
              4-D with shape  based on `data_format`.
              For example, if `data_format` is 'NHWC' then
              out_backprop shape is `[batch, out_height, out_width, out_channels]`.
              Gradients w.r.t. the output of the convolution.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of the input
              of the convolution.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              Specify the data format of the input and output data. With the
              default format "NHWC", the data is stored in the order of:
                  [batch, height, width, channels].
              Alternatively, the format could be "NCHW", the data storage order of:
                  [batch, channels, height, width].
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DepthwiseConv2dNativeBackpropInput'.
            </param>
        <summary>
              Computes the gradients of depthwise convolution with respect to the input.
            </summary>
        <returns>
              4-D with shape according to `data_format`.  For example, if
              `data_format` is 'NHWC', output shape is `[batch, in_height,
              in_width, in_channels]`.  Gradient w.r.t. the input of the
              convolution.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dequantize">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Dequantize (TensorFlow.TFOutput input, TensorFlow.TFOutput min_range, TensorFlow.TFOutput max_range, string mode = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Dequantize(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput min_range, valuetype TensorFlow.TFOutput max_range, string mode, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_range" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_range" Type="TensorFlow.TFOutput" />
        <Parameter Name="mode" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="min_range">
              The minimum scalar value possibly produced for the input.
            </param>
        <param name="max_range">
              The maximum scalar value possibly produced for the input.
            </param>
        <param name="mode">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Dequantize'.
            </param>
        <summary>
              Dequantize the 'input' tensor into a float Tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              [min_range, max_range] are scalar floats that specify the range for
              the 'input' data. The 'mode' attribute controls exactly which calculations are
              used to convert the float values to their quantized equivalents.
              
              In 'MIN_COMBINED' mode, each value of the tensor will undergo the following:
              
              ```
              if T == qint8, in[i] += (range(T) + 1)/ 2.0
              out[i] = min_range + (in[i]* (max_range - min_range) / range(T))
              ```
              here `range(T) = numeric_limits&amp;lt;T&amp;gt;::max() - numeric_limits&amp;lt;T&amp;gt;::min()`
              
              *MIN_COMBINED Mode Example*
              
              If the input comes from a QuantizedRelu6, the output type is
              quint8 (range of 0-255) but the possible range of QuantizedRelu6 is
              0-6.  The min_range and max_range values are therefore 0.0 and 6.0.
              Dequantize on quint8 will take each value, cast to float, and multiply
              by 6 / 255.
              Note that if quantizedtype is qint8, the operation will additionally add
              each value by 128 prior to casting.
              
              If the mode is 'MIN_FIRST', then this approach is used:
              
              ```c++
              number_of_steps = 1 &amp;lt;&amp;lt; (# of bits in T)
              range_adjust = number_of_steps / (number_of_steps - 1)
              range = (range_max - range_min) * range_adjust
              range_scale = range / number_of_steps
              const double offset_input = static_cast&amp;lt;double&amp;gt;(input) - lowest_quantized;
              result = range_min + ((input - numeric_limits&amp;lt;T&amp;gt;::min()) * range_scale)
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeserializeManySparse">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; DeserializeManySparse (TensorFlow.TFOutput serialized_sparse, TensorFlow.TFDataType dtype, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; DeserializeManySparse(valuetype TensorFlow.TFOutput serialized_sparse, valuetype TensorFlow.TFDataType dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serialized_sparse" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="serialized_sparse">
              2-D, The `N` serialized `SparseTensor` objects.
              Must have 3 columns.
            </param>
        <param name="dtype">
              The `dtype` of the serialized `SparseTensor` objects.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DeserializeManySparse'.
            </param>
        <summary>
              Deserialize and concatenate `SparseTensors` from a serialized minibatch.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              sparse_indices: 
              sparse_values: 
              sparse_shape: 
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              The input `serialized_sparse` must be a string matrix of shape `[N x 3]` where
              `N` is the minibatch size and the rows correspond to packed outputs of
              `SerializeSparse`.  The ranks of the original `SparseTensor` objects
              must all match.  When the final `SparseTensor` is created, it has rank one
              higher than the ranks of the incoming `SparseTensor` objects
              (they have been concatenated along a new row dimension).
              
              The output `SparseTensor` object's shape values for all dimensions but the
              first are the max across the input `SparseTensor` objects' shape values
              for the corresponding dimensions.  Its first shape value is `N`, the minibatch
              size.
              
              The input `SparseTensor` objects' indices are assumed ordered in
              standard lexicographic order.  If this is not the case, after this
              step run `SparseReorder` to restore index ordering.
              
              For example, if the serialized input is a `[2 x 3]` matrix representing two
              original `SparseTensor` objects:
              
                  index = [ 0]
                          [10]
                          [20]
                  values = [1, 2, 3]
                  shape = [50]
              
              and
              
                  index = [ 2]
                          [10]
                  values = [4, 5]
                  shape = [30]
              
              then the final deserialized `SparseTensor` will be:
              
                  index = [0  0]
                          [0 10]
                          [0 20]
                          [1  2]
                          [1 10]
                  values = [1, 2, 3, 4, 5]
                  shape = [2 50]
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DestroyResourceOp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation DestroyResourceOp (TensorFlow.TFOutput resource, Nullable&lt;bool&gt; ignore_lookup_error = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation DestroyResourceOp(valuetype TensorFlow.TFOutput resource, valuetype System.Nullable`1&lt;bool&gt; ignore_lookup_error, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="TensorFlow.TFOutput" />
        <Parameter Name="ignore_lookup_error" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">
              handle to the resource to delete.
            </param>
        <param name="ignore_lookup_error">
              Optional argument
              whether to ignore the error when the resource
              doesn't exist.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DestroyResourceOp'.
            </param>
        <summary>
              Deletes the resource specified by the handle.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              All subsequent operations using the resource will result in a NotFound
              error status.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Diag">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Diag (TensorFlow.TFOutput diagonal, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Diag(valuetype TensorFlow.TFOutput diagonal, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="diagonal" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="diagonal">
              Rank k tensor where k is at most 3.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Diag'.
            </param>
        <summary>
              Returns a diagonal tensor with a given diagonal values.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given a `diagonal`, this operation returns a tensor with the `diagonal` and
              everything else padded with zeros. The diagonal is computed as follows:
              
              Assume `diagonal` has dimensions [D1,..., Dk], then the output is a tensor of
              rank 2k with dimensions [D1,..., Dk, D1,..., Dk] where:
              
              `output[i1,..., ik, i1,..., ik] = diagonal[i1, ..., ik]` and 0 everywhere else.
              
              For example:
              
              ```
              # 'diagonal' is [1, 2, 3, 4]
              tf.diag(diagonal) ==&amp;gt; [[1, 0, 0, 0]
                                     [0, 2, 0, 0]
                                     [0, 0, 3, 0]
                                     [0, 0, 0, 4]]
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DiagPart">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DiagPart (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DiagPart(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Rank k tensor where k is 2, 4, or 6.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DiagPart'.
            </param>
        <summary>
              Returns the diagonal part of the tensor.
            </summary>
        <returns>
              The extracted diagonal.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation returns a tensor with the `diagonal` part
              of the `input`. The `diagonal` part is computed as follows:
              
              Assume `input` has dimensions `[D1,..., Dk, D1,..., Dk]`, then the output is a
              tensor of rank `k` with dimensions `[D1,..., Dk]` where:
              
              `diagonal[i1,..., ik] = input[i1, ..., ik, i1,..., ik]`.
              
              For example:
              
              ```
              # 'input' is [[1, 0, 0, 0]
                            [0, 2, 0, 0]
                            [0, 0, 3, 0]
                            [0, 0, 0, 4]]
              
              tf.diag_part(input) ==&amp;gt; [1, 2, 3, 4]
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Digamma">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Digamma (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Digamma(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Digamma'.
            </param>
        <summary>
              Computes Psi, the derivative of Lgamma (the log of the absolute value of
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              `Gamma(x)`), element-wise.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dilation2D">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Dilation2D (TensorFlow.TFOutput input, TensorFlow.TFOutput filter, long[] strides, long[] rates, string padding, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Dilation2D(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput filter, int64[] strides, int64[] rates, string padding, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="filter" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="rates" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              4-D with shape `[batch, in_height, in_width, depth]`.
            </param>
        <param name="filter">
              3-D with shape `[filter_height, filter_width, depth]`.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of the input
              tensor. Must be: `[1, stride_height, stride_width, 1]`.
            </param>
        <param name="rates">
              The input stride for atrous morphological dilation. Must be:
              `[1, rate_height, rate_width, 1]`.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Dilation2D'.
            </param>
        <summary>
              Computes the grayscale dilation of 4-D `input` and 3-D `filter` tensors.
            </summary>
        <returns>
              4-D with shape `[batch, out_height, out_width, depth]`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The `input` tensor has shape `[batch, in_height, in_width, depth]` and the
              `filter` tensor has shape `[filter_height, filter_width, depth]`, i.e., each
              input channel is processed independently of the others with its own structuring
              function. The `output` tensor has shape
              `[batch, out_height, out_width, depth]`. The spatial dimensions of the output
              tensor depend on the `padding` algorithm. We currently only support the default
              "NHWC" `data_format`.
              
              In detail, the grayscale morphological 2-D dilation is the max-sum correlation
              (for consistency with `conv2d`, we use unmirrored filters):
              
                  output[b, y, x, c] =
                     max_{dy, dx} input[b,
                                        strides[1] * y + rates[1] * dy,
                                        strides[2] * x + rates[2] * dx,
                                        c] +
                                  filter[dy, dx, c]
              
              Max-pooling is a special case when the filter has size equal to the pooling
              kernel size and contains all zeros.
              
              Note on duality: The dilation of `input` by the `filter` is equal to the
              negation of the erosion of `-input` by the reflected `filter`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dilation2DBackpropFilter">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Dilation2DBackpropFilter (TensorFlow.TFOutput input, TensorFlow.TFOutput filter, TensorFlow.TFOutput out_backprop, long[] strides, long[] rates, string padding, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Dilation2DBackpropFilter(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput filter, valuetype TensorFlow.TFOutput out_backprop, int64[] strides, int64[] rates, string padding, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="filter" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="rates" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              4-D with shape `[batch, in_height, in_width, depth]`.
            </param>
        <param name="filter">
              3-D with shape `[filter_height, filter_width, depth]`.
            </param>
        <param name="out_backprop">
              4-D with shape `[batch, out_height, out_width, depth]`.
            </param>
        <param name="strides">
              1-D of length 4. The stride of the sliding window for each dimension of
              the input tensor. Must be: `[1, stride_height, stride_width, 1]`.
            </param>
        <param name="rates">
              1-D of length 4. The input stride for atrous morphological dilation.
              Must be: `[1, rate_height, rate_width, 1]`.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Dilation2DBackpropFilter'.
            </param>
        <summary>
              Computes the gradient of morphological 2-D dilation with respect to the filter.
            </summary>
        <returns>
              3-D with shape `[filter_height, filter_width, depth]`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dilation2DBackpropInput">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Dilation2DBackpropInput (TensorFlow.TFOutput input, TensorFlow.TFOutput filter, TensorFlow.TFOutput out_backprop, long[] strides, long[] rates, string padding, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Dilation2DBackpropInput(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput filter, valuetype TensorFlow.TFOutput out_backprop, int64[] strides, int64[] rates, string padding, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="filter" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="rates" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              4-D with shape `[batch, in_height, in_width, depth]`.
            </param>
        <param name="filter">
              3-D with shape `[filter_height, filter_width, depth]`.
            </param>
        <param name="out_backprop">
              4-D with shape `[batch, out_height, out_width, depth]`.
            </param>
        <param name="strides">
              1-D of length 4. The stride of the sliding window for each dimension of
              the input tensor. Must be: `[1, stride_height, stride_width, 1]`.
            </param>
        <param name="rates">
              1-D of length 4. The input stride for atrous morphological dilation.
              Must be: `[1, rate_height, rate_width, 1]`.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Dilation2DBackpropInput'.
            </param>
        <summary>
              Computes the gradient of morphological 2-D dilation with respect to the input.
            </summary>
        <returns>
              4-D with shape `[batch, in_height, in_width, depth]`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Div">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Div (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Div(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Div'.
            </param>
        <summary>
              Returns x / y element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *NOTE*: `Div` supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawBoundingBoxes">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DrawBoundingBoxes (TensorFlow.TFOutput images, TensorFlow.TFOutput boxes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DrawBoundingBoxes(valuetype TensorFlow.TFOutput images, valuetype TensorFlow.TFOutput boxes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="images" Type="TensorFlow.TFOutput" />
        <Parameter Name="boxes" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="images">
              4-D with shape `[batch, height, width, depth]`. A batch of images.
            </param>
        <param name="boxes">
              3-D with shape `[batch, num_bounding_boxes, 4]` containing bounding
              boxes.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DrawBoundingBoxes'.
            </param>
        <summary>
              Draw bounding boxes on a batch of images.
            </summary>
        <returns>
              4-D with the same shape as `images`. The batch of input images with
              bounding boxes drawn on the images.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Outputs a copy of `images` but draws on top of the pixels zero or more bounding
              boxes specified by the locations in `boxes`. The coordinates of the each
              bounding box in `boxes` are encoded as `[y_min, x_min, y_max, x_max]`. The
              bounding box coordinates are floats in `[0.0, 1.0]` relative to the width and
              height of the underlying image.
              
              For example, if an image is 100 x 200 pixels and the bounding box is
              `[0.1, 0.2, 0.5, 0.9]`, the bottom-left and upper-right coordinates of the
              bounding box will be `(10, 40)` to `(50, 180)`.
              
              Parts of the bounding box may fall outside the image.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dropout">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Dropout (TensorFlow.TFOutput x, double keep_prob, TensorFlow.TFShape noise_shape = null, Nullable&lt;int&gt; seed = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Dropout(valuetype TensorFlow.TFOutput x, float64 keep_prob, class TensorFlow.TFShape noise_shape, valuetype System.Nullable`1&lt;int32&gt; seed, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="keep_prob" Type="System.Double" />
        <Parameter Name="noise_shape" Type="TensorFlow.TFShape" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">A tensor.</param>
        <param name="keep_prob">A scalar Tensor with the same type as x. The probability that each element is kept.</param>
        <param name="noise_shape">A 1-D Tensor of type int32, representing the shape for randomly generated keep/drop flags.</param>
        <param name="seed">Integer seed used for the random distribution, using the TensorFlow SetRandomSeed .</param>
        <param name="operName">Operation name, optional.</param>
        <summary>
            Computes dropout. 
            </summary>
        <returns>To be added.</returns>
        <remarks>
            With probability keep_prob, outputs the input element scaled up by 1 / keep_prob, 
            otherwise outputs 0. The scaling is so that the expected sum is unchanged.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dropout">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Dropout (TensorFlow.TFOutput x, TensorFlow.TFOutput keep_prob, TensorFlow.TFShape noise_shape = null, Nullable&lt;int&gt; seed = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Dropout(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput keep_prob, class TensorFlow.TFShape noise_shape, valuetype System.Nullable`1&lt;int32&gt; seed, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="keep_prob" Type="TensorFlow.TFOutput" />
        <Parameter Name="noise_shape" Type="TensorFlow.TFShape" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">A tensor.</param>
        <param name="keep_prob">A scalar Tensor with the same type as x. The probability that each element is kept.</param>
        <param name="noise_shape">A 1-D Tensor of type int32, representing the shape for randomly generated keep/drop flags.</param>
        <param name="seed">Integer seed used for the random distribution, using the TensorFlow SetRandomSeed .</param>
        <param name="operName">Operation name, optional.</param>
        <summary>
            Computes dropout. 
            </summary>
        <returns>To be added.</returns>
        <remarks>
            With probability keep_prob, outputs the input element scaled up by 1 / keep_prob, 
            otherwise outputs 0. The scaling is so that the expected sum is unchanged.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DynamicPartition">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] DynamicPartition (TensorFlow.TFOutput data, TensorFlow.TFOutput partitions, long num_partitions, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] DynamicPartition(valuetype TensorFlow.TFOutput data, valuetype TensorFlow.TFOutput partitions, int64 num_partitions, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="partitions" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_partitions" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
        </param>
        <param name="partitions">
              Any shape.  Indices in the range `[0, num_partitions)`.
            </param>
        <param name="num_partitions">
              The number of partitions to output.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DynamicPartition'.
            </param>
        <summary>
              Partitions `data` into `num_partitions` tensors using indices from `partitions`.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              For each index tuple `js` of size `partitions.ndim`, the slice `data[js, ...]`
              becomes part of `outputs[partitions[js]]`.  The slices with `partitions[js] = i`
              are placed in `outputs[i]` in lexicographic order of `js`, and the first
              dimension of `outputs[i]` is the number of entries in `partitions` equal to `i`.
              In detail,
              
              ```python
                  outputs[i].shape = [sum(partitions == i)] + data.shape[partitions.ndim:]
              
                  outputs[i] = pack([data[js, ...] for js if partitions[js] == i])
              ```
              
              `data.shape` must start with `partitions.shape`.
              
              For example:
              
              ```python
                  # Scalar partitions.
                  partitions = 1
                  num_partitions = 2
                  data = [10, 20]
                  outputs[0] = []  # Empty with shape [0, 2]
                  outputs[1] = [[10, 20]]
              
                  # Vector partitions.
                  partitions = [0, 0, 1, 1, 0]
                  num_partitions = 2
                  data = [10, 20, 30, 40, 50]
                  outputs[0] = [10, 20, 50]
                  outputs[1] = [30, 40]
              ```
              
              See `dynamic_stitch` for an example on how to merge partitions back.
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src="https://www.tensorflow.org/images/DynamicPartition.png" alt&amp;gt;
              &amp;lt;/div&amp;gt;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DynamicStitch">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput DynamicStitch (TensorFlow.TFOutput[] indices, TensorFlow.TFOutput[] data, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput DynamicStitch(valuetype TensorFlow.TFOutput[] indices, valuetype TensorFlow.TFOutput[] data, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indices" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="data" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="indices">
        </param>
        <param name="data">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'DynamicStitch'.
            </param>
        <summary>
              Interleave the values from the `data` tensors into a single tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Builds a merged tensor such that
              
              ```python
                  merged[indices[m][i, ..., j], ...] = data[m][i, ..., j, ...]
              ```
              
              For example, if each `indices[m]` is scalar or vector, we have
              
              ```python
                  # Scalar indices:
                  merged[indices[m], ...] = data[m][...]
              
                  # Vector indices:
                  merged[indices[m][i], ...] = data[m][i, ...]
              ```
              
              Each `data[i].shape` must start with the corresponding `indices[i].shape`,
              and the rest of `data[i].shape` must be constant w.r.t. `i`.  That is, we
              must have `data[i].shape = indices[i].shape + constant`.  In terms of this
              `constant`, the output shape is
              
                  merged.shape = [max(indices)] + constant
              
              Values are merged in order, so if an index appears in both `indices[m][i]` and
              `indices[n][j]` for `(m,i) &amp;lt; (n,j)` the slice `data[n][j]` will appear in the
              merged result.
              
              For example:
              
              ```python
                  indices[0] = 6
                  indices[1] = [4, 1]
                  indices[2] = [[5, 2], [0, 3]]
                  data[0] = [61, 62]
                  data[1] = [[41, 42], [11, 12]]
                  data[2] = [[[51, 52], [21, 22]], [[1, 2], [31, 32]]]
                  merged = [[1, 2], [11, 12], [21, 22], [31, 32], [41, 42],
                            [51, 52], [61, 62]]
              ```
              
              This method can be used to merge partitions created by `dynamic_partition`
              as illustrated on the following example:
              
              ```python
                  # Apply function (increments x_i) on elements for which a certain condition
                  # apply (x_i != -1 in this example).
                  x=tf.constant([0.1, -1., 5.2, 4.3, -1., 7.4])
                  condition_mask=tf.not_equal(x,tf.constant(-1.))
                  partitioned_data = tf.dynamic_partition(
                      x, tf.cast(condition_mask, tf.int32) , 2)
                  partitioned_data[1] = partitioned_data[1] + 1.0
                  condition_indices = tf.dynamic_partition(
                      tf.range(tf.shape(x)[0]), tf.cast(condition_mask, tf.int32) , 2)
                  x = tf.dynamic_stitch(condition_indices, partitioned_data)
                  # Here x=[1.1, -1., 6.2, 5.3, -1, 8.4], the -1. values remain
                  # unchanged.
              ```
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src="https://www.tensorflow.org/images/DynamicStitch.png" alt&amp;gt;
              &amp;lt;/div&amp;gt;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EditDistance">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput EditDistance (TensorFlow.TFOutput hypothesis_indices, TensorFlow.TFOutput hypothesis_values, TensorFlow.TFOutput hypothesis_shape, TensorFlow.TFOutput truth_indices, TensorFlow.TFOutput truth_values, TensorFlow.TFOutput truth_shape, Nullable&lt;bool&gt; normalize = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput EditDistance(valuetype TensorFlow.TFOutput hypothesis_indices, valuetype TensorFlow.TFOutput hypothesis_values, valuetype TensorFlow.TFOutput hypothesis_shape, valuetype TensorFlow.TFOutput truth_indices, valuetype TensorFlow.TFOutput truth_values, valuetype TensorFlow.TFOutput truth_shape, valuetype System.Nullable`1&lt;bool&gt; normalize, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hypothesis_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="hypothesis_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="hypothesis_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="truth_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="truth_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="truth_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="normalize" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hypothesis_indices">
              The indices of the hypothesis list SparseTensor.
              This is an N x R int64 matrix.
            </param>
        <param name="hypothesis_values">
              The values of the hypothesis list SparseTensor.
              This is an N-length vector.
            </param>
        <param name="hypothesis_shape">
              The shape of the hypothesis list SparseTensor.
              This is an R-length vector.
            </param>
        <param name="truth_indices">
              The indices of the truth list SparseTensor.
              This is an M x R int64 matrix.
            </param>
        <param name="truth_values">
              The values of the truth list SparseTensor.
              This is an M-length vector.
            </param>
        <param name="truth_shape">
              truth indices, vector.
            </param>
        <param name="normalize">
              Optional argument
              boolean (if true, edit distances are normalized by length of truth).
              
              The output is:
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'EditDistance'.
            </param>
        <summary>
              Computes the (possibly normalized) Levenshtein Edit Distance.
            </summary>
        <returns>
              A dense float tensor with rank R - 1.
              
              For the example input:
              
                  // hypothesis represents a 2x1 matrix with variable-length values:
                  //   (0,0) = ["a"]
                  //   (1,0) = ["b"]
                  hypothesis_indices = [[0, 0, 0],
                                        [1, 0, 0]]
                  hypothesis_values = ["a", "b"]
                  hypothesis_shape = [2, 1, 1]
              
                  // truth represents a 2x2 matrix with variable-length values:
                  //   (0,0) = []
                  //   (0,1) = ["a"]
                  //   (1,0) = ["b", "c"]
                  //   (1,1) = ["a"]
                  truth_indices = [[0, 1, 0],
                                   [1, 0, 0],
                                   [1, 0, 1],
                                   [1, 1, 0]]
                  truth_values = ["a", "b", "c", "a"]
                  truth_shape = [2, 2, 2]
                  normalize = true
              
              The output will be:
              
                  // output is a 2x2 matrix with edit distances normalized by truth lengths.
                  output = [[inf, 1.0],  // (0,0): no truth, (0,1): no hypothesis
                            [0.5, 1.0]]  // (1,0): addition, (1,1): no hypothesis
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The inputs are variable-length sequences provided by SparseTensors
                (hypothesis_indices, hypothesis_values, hypothesis_shape)
              and
                (truth_indices, truth_values, truth_shape).
              
              The inputs are:
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Elu">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Elu (TensorFlow.TFOutput features, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Elu(valuetype TensorFlow.TFOutput features, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="features" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="features">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Elu'.
            </param>
        <summary>
              Computes exponential linear: `exp(features) - 1` if &amp;lt; 0, `features` otherwise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              See [Fast and Accurate Deep Network Learning by Exponential Linear Units (ELUs)
              ](http://arxiv.org/abs/1511.07289)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EluGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput EluGrad (TensorFlow.TFOutput gradients, TensorFlow.TFOutput outputs, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput EluGrad(valuetype TensorFlow.TFOutput gradients, valuetype TensorFlow.TFOutput outputs, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gradients" Type="TensorFlow.TFOutput" />
        <Parameter Name="outputs" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="gradients">
              The backpropagated gradients to the corresponding Elu operation.
            </param>
        <param name="outputs">
              The outputs of the corresponding Elu operation.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'EluGrad'.
            </param>
        <summary>
              Computes gradients for the exponential linear (Elu) operation.
            </summary>
        <returns>
              The gradients: `gradients * (outputs + 1)` if outputs &amp;lt; 0,
              `gradients` otherwise.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeBase64">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput EncodeBase64 (TensorFlow.TFOutput input, Nullable&lt;bool&gt; pad = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput EncodeBase64(valuetype TensorFlow.TFOutput input, valuetype System.Nullable`1&lt;bool&gt; pad, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="pad" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Strings to be encoded.
            </param>
        <param name="pad">
              Optional argument
              Bool whether padding is applied at the ends.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'EncodeBase64'.
            </param>
        <summary>
              Encode strings into web-safe base64 format.
            </summary>
        <returns>
              Input strings encoded in base64.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Refer to the following article for more information on base64 format:
              en.wikipedia.org/wiki/Base64. Base64 strings may have padding with '=' at the
              end so that the encoded has length multiple of 4. See Padding section of the
              link above.
              
              Web-safe means that the encoder uses - and _ instead of + and /.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeJpeg">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput EncodeJpeg (TensorFlow.TFOutput image, string format = null, Nullable&lt;long&gt; quality = null, Nullable&lt;bool&gt; progressive = null, Nullable&lt;bool&gt; optimize_size = null, Nullable&lt;bool&gt; chroma_downsampling = null, string density_unit = null, Nullable&lt;long&gt; x_density = null, Nullable&lt;long&gt; y_density = null, string xmp_metadata = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput EncodeJpeg(valuetype TensorFlow.TFOutput image, string format, valuetype System.Nullable`1&lt;int64&gt; quality, valuetype System.Nullable`1&lt;bool&gt; progressive, valuetype System.Nullable`1&lt;bool&gt; optimize_size, valuetype System.Nullable`1&lt;bool&gt; chroma_downsampling, string density_unit, valuetype System.Nullable`1&lt;int64&gt; x_density, valuetype System.Nullable`1&lt;int64&gt; y_density, string xmp_metadata, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="TensorFlow.TFOutput" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="quality" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="progressive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="optimize_size" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="chroma_downsampling" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="density_unit" Type="System.String" />
        <Parameter Name="x_density" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="y_density" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="xmp_metadata" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="image">
              3-D with shape `[height, width, channels]`.
            </param>
        <param name="format">
              Optional argument
              Per pixel image format.
            </param>
        <param name="quality">
              Optional argument
              Quality of the compression from 0 to 100 (higher is better and slower).
            </param>
        <param name="progressive">
              Optional argument
              If True, create a JPEG that loads progressively (coarse to fine).
            </param>
        <param name="optimize_size">
              Optional argument
              If True, spend CPU/RAM to reduce size with no quality change.
            </param>
        <param name="chroma_downsampling">
              Optional argument
              See http://en.wikipedia.org/wiki/Chroma_subsampling.
            </param>
        <param name="density_unit">
              Optional argument
              Unit used to specify `x_density` and `y_density`:
              pixels per inch (`'in'`) or centimeter (`'cm'`).
            </param>
        <param name="x_density">
              Optional argument
              Horizontal pixels per density unit.
            </param>
        <param name="y_density">
              Optional argument
              Vertical pixels per density unit.
            </param>
        <param name="xmp_metadata">
              Optional argument
              If not empty, embed this XMP metadata in the image header.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'EncodeJpeg'.
            </param>
        <summary>
              JPEG-encode an image.
            </summary>
        <returns>
              0-D. JPEG-encoded image.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              `image` is a 3-D uint8 Tensor of shape `[height, width, channels]`.
              
              The attr `format` can be used to override the color format of the encoded
              output.  Values can be:
              
              *   `''`: Use a default format based on the number of channels in the image.
              *   `grayscale`: Output a grayscale JPEG image.  The `channels` dimension
                  of `image` must be 1.
              *   `rgb`: Output an RGB JPEG image. The `channels` dimension
                  of `image` must be 3.
              
              If `format` is not specified or is the empty string, a default format is picked
              in function of the number of channels in `image`:
              
              *   1: Output a grayscale image.
              *   3: Output an RGB image.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodePng">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput EncodePng (TensorFlow.TFOutput image, Nullable&lt;long&gt; compression = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput EncodePng(valuetype TensorFlow.TFOutput image, valuetype System.Nullable`1&lt;int64&gt; compression, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="TensorFlow.TFOutput" />
        <Parameter Name="compression" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="image">
              3-D with shape `[height, width, channels]`.
            </param>
        <param name="compression">
              Optional argument
              Compression level.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'EncodePng'.
            </param>
        <summary>
              PNG-encode an image.
            </summary>
        <returns>
              0-D. PNG-encoded image.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              `image` is a 3-D uint8 or uint16 Tensor of shape `[height, width, channels]`
              where `channels` is:
              
              *   1: for grayscale.
              *   2: for grayscale + alpha.
              *   3: for RGB.
              *   4: for RGBA.
              
              The ZLIB compression level, `compression`, can be -1 for the PNG-encoder
              default or a value from 0 to 9.  9 is the highest compression level, generating
              the smallest output, but is slower.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeWav">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput EncodeWav (TensorFlow.TFOutput audio, TensorFlow.TFOutput sample_rate, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput EncodeWav(valuetype TensorFlow.TFOutput audio, valuetype TensorFlow.TFOutput sample_rate, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audio" Type="TensorFlow.TFOutput" />
        <Parameter Name="sample_rate" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="audio">
              2-D with shape `[length, channels]`.
            </param>
        <param name="sample_rate">
              Scalar containing the sample frequency.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'EncodeWav'.
            </param>
        <summary>
              Encode audio data using the WAV file format.
            </summary>
        <returns>
              0-D. WAV-encoded file contents.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation will generate a string suitable to be saved out to create a .wav
              audio file. It will be encoded in the 16-bit PCM format. It takes in float
              values in the range -1.0f to 1.0f, and any outside that value will be clamped to
              that range.
              
              `audio` is a 2-D float Tensor of shape `[length, channels]`.
              `sample_rate` is a scalar Tensor holding the rate to use (e.g. 44100).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Enter (TensorFlow.TFOutput data, string frame_name, Nullable&lt;bool&gt; is_constant = null, Nullable&lt;long&gt; parallel_iterations = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Enter(valuetype TensorFlow.TFOutput data, string frame_name, valuetype System.Nullable`1&lt;bool&gt; is_constant, valuetype System.Nullable`1&lt;int64&gt; parallel_iterations, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="frame_name" Type="System.String" />
        <Parameter Name="is_constant" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="parallel_iterations" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
              The tensor to be made available to the child frame.
            </param>
        <param name="frame_name">
              The name of the child frame.
            </param>
        <param name="is_constant">
              Optional argument
              If true, the output is constant within the child frame.
            </param>
        <param name="parallel_iterations">
              Optional argument
              The number of iterations allowed to run in parallel.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Enter'.
            </param>
        <summary>
              Creates or finds a child frame, and makes `data` available to the child frame.
            </summary>
        <returns>
              The same tensor as `data`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op is used together with `Exit` to create loops in the graph.
              The unique `frame_name` is used by the `Executor` to identify frames. If
              `is_constant` is true, `output` is a constant in the child frame; otherwise
              it may be changed in the child frame. At most `parallel_iterations` iterations
              are run in parallel in the child frame.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equal">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Equal (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Equal(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Equal'.
            </param>
        <summary>
              Returns the truth value of (x == y) element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *NOTE*: `Equal` supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Erf">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Erf (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Erf(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Erf'.
            </param>
        <summary>
              Computes the Gauss error function of `x` element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Erfc">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Erfc (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Erfc(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Erfc'.
            </param>
        <summary>
              Computes the complementary error function of `x` element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Exit (TensorFlow.TFOutput data, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Exit(valuetype TensorFlow.TFOutput data, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
              The tensor to be made available to the parent frame.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Exit'.
            </param>
        <summary>
              Exits the current frame to its parent frame.
            </summary>
        <returns>
              The same tensor as `data`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Exit makes its input `data` available to the parent frame.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Exp (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Exp(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Exp'.
            </param>
        <summary>
              Computes exponential of x element-wise.  \\(y = e^x\\).
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpandDims">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ExpandDims (TensorFlow.TFOutput input, TensorFlow.TFOutput dim, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ExpandDims(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput dim, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="dim" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="dim">
              0-D (scalar). Specifies the dimension index at which to
              expand the shape of `input`.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ExpandDims'.
            </param>
        <summary>
              Inserts a dimension of 1 into a tensor's shape.
            </summary>
        <returns>
              Contains the same data as `input`, but its shape has an additional
              dimension of size 1 added.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given a tensor `input`, this operation inserts a dimension of 1 at the
              dimension index `dim` of `input`'s shape. The dimension index `dim` starts at
              zero; if you specify a negative number for `dim` it is counted backward from
              the end.
              
              This operation is useful if you want to add a batch dimension to a single
              element. For example, if you have a single image of shape `[height, width,
              channels]`, you can make it a batch of 1 image with `expand_dims(image, 0)`,
              which will make the shape `[1, height, width, channels]`.
              
              Other examples:
              
              ```
              # 't' is a tensor of shape [2]
              shape(expand_dims(t, 0)) ==&amp;gt; [1, 2]
              shape(expand_dims(t, 1)) ==&amp;gt; [2, 1]
              shape(expand_dims(t, -1)) ==&amp;gt; [2, 1]
              
              # 't2' is a tensor of shape [2, 3, 5]
              shape(expand_dims(t2, 0)) ==&amp;gt; [1, 2, 3, 5]
              shape(expand_dims(t2, 2)) ==&amp;gt; [2, 3, 1, 5]
              shape(expand_dims(t2, 3)) ==&amp;gt; [2, 3, 5, 1]
              ```
              
              This operation requires that:
              
              `-1-input.dims() &amp;lt;= dim &amp;lt;= input.dims()`
              
              This operation is related to `squeeze()`, which removes dimensions of
              size 1.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Expm1">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Expm1 (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Expm1(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Expm1'.
            </param>
        <summary>
              Computes exponential of x - 1 element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              I.e., \\(y = (\exp x) - 1\\).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractGlimpse">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ExtractGlimpse (TensorFlow.TFOutput input, TensorFlow.TFOutput size, TensorFlow.TFOutput offsets, Nullable&lt;bool&gt; centered = null, Nullable&lt;bool&gt; normalized = null, Nullable&lt;bool&gt; uniform_noise = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ExtractGlimpse(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput size, valuetype TensorFlow.TFOutput offsets, valuetype System.Nullable`1&lt;bool&gt; centered, valuetype System.Nullable`1&lt;bool&gt; normalized, valuetype System.Nullable`1&lt;bool&gt; uniform_noise, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="size" Type="TensorFlow.TFOutput" />
        <Parameter Name="offsets" Type="TensorFlow.TFOutput" />
        <Parameter Name="centered" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="normalized" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="uniform_noise" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A 4-D float tensor of shape `[batch_size, height, width, channels]`.
            </param>
        <param name="size">
              A 1-D tensor of 2 elements containing the size of the glimpses
              to extract.  The glimpse height must be specified first, following
              by the glimpse width.
            </param>
        <param name="offsets">
              A 2-D integer tensor of shape `[batch_size, 2]` containing
              the y, x locations of the center of each window.
            </param>
        <param name="centered">
              Optional argument
              indicates if the offset coordinates are centered relative to
              the image, in which case the (0, 0) offset is relative to the center
              of the input images. If false, the (0,0) offset corresponds to the
              upper left corner of the input images.
            </param>
        <param name="normalized">
              Optional argument
              indicates if the offset coordinates are normalized.
            </param>
        <param name="uniform_noise">
              Optional argument
              indicates if the noise should be generated using a
              uniform distribution or a Gaussian distribution.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ExtractGlimpse'.
            </param>
        <summary>
              Extracts a glimpse from the input tensor.
            </summary>
        <returns>
              A tensor representing the glimpses `[batch_size,
              glimpse_height, glimpse_width, channels]`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Returns a set of windows called glimpses extracted at location
              `offsets` from the input tensor. If the windows only partially
              overlaps the inputs, the non overlapping areas will be filled with
              random noise.
              
              The result is a 4-D tensor of shape `[batch_size, glimpse_height,
              glimpse_width, channels]`. The channels and batch dimensions are the
              same as that of the input tensor. The height and width of the output
              windows are specified in the `size` parameter.
              
              The argument `normalized` and `centered` controls how the windows are built:
              
              * If the coordinates are normalized but not centered, 0.0 and 1.0
                correspond to the minimum and maximum of each height and width
                dimension.
              * If the coordinates are both normalized and centered, they range from
                -1.0 to 1.0. The coordinates (-1.0, -1.0) correspond to the upper
                left corner, the lower right corner is located at (1.0, 1.0) and the
                center is at (0, 0).
              * If the coordinates are not normalized they are interpreted as
                numbers of pixels.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractImagePatches">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ExtractImagePatches (TensorFlow.TFOutput images, long[] ksizes, long[] strides, long[] rates, string padding, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ExtractImagePatches(valuetype TensorFlow.TFOutput images, int64[] ksizes, int64[] strides, int64[] rates, string padding, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="images" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksizes" Type="System.Int64[]" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="rates" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="images">
              4-D Tensor with shape `[batch, in_rows, in_cols, depth]`.
            </param>
        <param name="ksizes">
              The size of the sliding window for each dimension of `images`.
            </param>
        <param name="strides">
              1-D of length 4. How far the centers of two consecutive patches are in
              the images. Must be: `[1, stride_rows, stride_cols, 1]`.
            </param>
        <param name="rates">
              1-D of length 4. Must be: `[1, rate_rows, rate_cols, 1]`. This is the
              input stride, specifying how far two consecutive patch samples are in the
              input. Equivalent to extracting patches with
              `patch_sizes_eff = patch_sizes + (patch_sizes - 1) * (rates - 1)`, followed by
              subsampling them spatially by a factor of `rates`.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
              
              We specify the size-related attributes as:
              
              ```python
                    ksizes = [1, ksize_rows, ksize_cols, 1]
                    strides = [1, strides_rows, strides_cols, 1]
                    rates = [1, rates_rows, rates_cols, 1]
              ```
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ExtractImagePatches'.
            </param>
        <summary>
              Extract `patches` from `images` and put them in the "depth" output dimension.
            </summary>
        <returns>
              4-D Tensor with shape `[batch, out_rows, out_cols, ksize_rows *
              ksize_cols * depth]` containing image patches with size
              `ksize_rows x ksize_cols x depth` vectorized in the "depth" dimension.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fact">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Fact (string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Fact(string operName) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Fact'.
            </param>
        <summary>
              Output a fact about factorials.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FakeQuantWithMinMaxArgs">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FakeQuantWithMinMaxArgs (TensorFlow.TFOutput inputs, Nullable&lt;float&gt; min = null, Nullable&lt;float&gt; max = null, Nullable&lt;long&gt; num_bits = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FakeQuantWithMinMaxArgs(valuetype TensorFlow.TFOutput inputs, valuetype System.Nullable`1&lt;float32&gt; min, valuetype System.Nullable`1&lt;float32&gt; max, valuetype System.Nullable`1&lt;int64&gt; num_bits, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput" />
        <Parameter Name="min" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="max" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="num_bits" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputs">
        </param>
        <param name="min">
              Optional argument
            </param>
        <param name="max">
              Optional argument
            </param>
        <param name="num_bits">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FakeQuantWithMinMaxArgs'.
            </param>
        <summary>
              Fake-quantize the 'inputs' tensor, type float to 'outputs' tensor of same type.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Attributes [min; max] define the clamping range for the 'inputs' data.  Op
              divides this range into 255 steps (total of 256 values), then replaces each
              'inputs' value with the closest of the quantized step values.
              'num_bits' is the bitwidth of the quantization; between 2 and 8, inclusive.
              
              Quantization is called fake since the output is still in floating point.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FakeQuantWithMinMaxArgs">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FakeQuantWithMinMaxArgs (TensorFlow.TFOutput inputs, Nullable&lt;float&gt; min = null, Nullable&lt;float&gt; max = null, Nullable&lt;long&gt; num_bits = null, Nullable&lt;bool&gt; narrow_range = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FakeQuantWithMinMaxArgs(valuetype TensorFlow.TFOutput inputs, valuetype System.Nullable`1&lt;float32&gt; min, valuetype System.Nullable`1&lt;float32&gt; max, valuetype System.Nullable`1&lt;int64&gt; num_bits, valuetype System.Nullable`1&lt;bool&gt; narrow_range, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput" />
        <Parameter Name="min" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="max" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="num_bits" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="narrow_range" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputs">
        </param>
        <param name="min">
              Optional argument
            </param>
        <param name="max">
              Optional argument
            </param>
        <param name="num_bits">
              Optional argument
            </param>
        <param name="narrow_range">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FakeQuantWithMinMaxArgs'.
            </param>
        <summary>
              Fake-quantize the 'inputs' tensor, type float to 'outputs' tensor of same type.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Attributes `[min; max]` define the clamping range for the `inputs` data.
              `inputs` values are quantized into the quantization range (`[0; 2^num_bits - 1]`
              when `narrow_range` is false and `[1; 2^num_bits - 1]` when it is true) and
              then de-quantized and output as floats in `[min; max]` interval.
              `num_bits` is the bitwidth of the quantization; between 2 and 8, inclusive.
              
              Quantization is called fake since the output is still in floating point.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FakeQuantWithMinMaxArgsGradient">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FakeQuantWithMinMaxArgsGradient (TensorFlow.TFOutput gradients, TensorFlow.TFOutput inputs, Nullable&lt;float&gt; min = null, Nullable&lt;float&gt; max = null, Nullable&lt;long&gt; num_bits = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FakeQuantWithMinMaxArgsGradient(valuetype TensorFlow.TFOutput gradients, valuetype TensorFlow.TFOutput inputs, valuetype System.Nullable`1&lt;float32&gt; min, valuetype System.Nullable`1&lt;float32&gt; max, valuetype System.Nullable`1&lt;int64&gt; num_bits, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gradients" Type="TensorFlow.TFOutput" />
        <Parameter Name="inputs" Type="TensorFlow.TFOutput" />
        <Parameter Name="min" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="max" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="num_bits" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="gradients">
              Backpropagated gradients above the FakeQuantWithMinMaxArgs operation.
            </param>
        <param name="inputs">
              Values passed as inputs to the FakeQuantWithMinMaxArgs operation.
            </param>
        <param name="min">
              Optional argument
            </param>
        <param name="max">
              Optional argument
            </param>
        <param name="num_bits">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FakeQuantWithMinMaxArgsGradient'.
            </param>
        <summary>
              Compute gradients for a FakeQuantWithMinMaxArgs operation.
            </summary>
        <returns>
              Backpropagated gradients below the FakeQuantWithMinMaxArgs operation:
              `gradients * (inputs &amp;gt;= min &amp;&amp; inputs &amp;lt;= max)`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FakeQuantWithMinMaxArgsGradient">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FakeQuantWithMinMaxArgsGradient (TensorFlow.TFOutput gradients, TensorFlow.TFOutput inputs, Nullable&lt;float&gt; min = null, Nullable&lt;float&gt; max = null, Nullable&lt;long&gt; num_bits = null, Nullable&lt;bool&gt; narrow_range = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FakeQuantWithMinMaxArgsGradient(valuetype TensorFlow.TFOutput gradients, valuetype TensorFlow.TFOutput inputs, valuetype System.Nullable`1&lt;float32&gt; min, valuetype System.Nullable`1&lt;float32&gt; max, valuetype System.Nullable`1&lt;int64&gt; num_bits, valuetype System.Nullable`1&lt;bool&gt; narrow_range, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gradients" Type="TensorFlow.TFOutput" />
        <Parameter Name="inputs" Type="TensorFlow.TFOutput" />
        <Parameter Name="min" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="max" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="num_bits" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="narrow_range" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="gradients">
              Backpropagated gradients above the FakeQuantWithMinMaxArgs operation.
            </param>
        <param name="inputs">
              Values passed as inputs to the FakeQuantWithMinMaxArgs operation.
            </param>
        <param name="min">
              Optional argument
            </param>
        <param name="max">
              Optional argument
            </param>
        <param name="num_bits">
              Optional argument
            </param>
        <param name="narrow_range">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FakeQuantWithMinMaxArgsGradient'.
            </param>
        <summary>
              Compute gradients for a FakeQuantWithMinMaxArgs operation.
            </summary>
        <returns>
              Backpropagated gradients below the FakeQuantWithMinMaxArgs operation:
              `gradients * (inputs &amp;gt;= min &amp;&amp; inputs &amp;lt;= max)`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FakeQuantWithMinMaxVars">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FakeQuantWithMinMaxVars (TensorFlow.TFOutput inputs, TensorFlow.TFOutput min, TensorFlow.TFOutput max, Nullable&lt;long&gt; num_bits = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FakeQuantWithMinMaxVars(valuetype TensorFlow.TFOutput inputs, valuetype TensorFlow.TFOutput min, valuetype TensorFlow.TFOutput max, valuetype System.Nullable`1&lt;int64&gt; num_bits, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput" />
        <Parameter Name="min" Type="TensorFlow.TFOutput" />
        <Parameter Name="max" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_bits" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputs">
        </param>
        <param name="min">
        </param>
        <param name="max">
        </param>
        <param name="num_bits">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FakeQuantWithMinMaxVars'.
            </param>
        <summary>
              Fake-quantize the 'inputs' tensor of type float via global float scalars `min`
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              and `max` to 'outputs' tensor of same shape as `inputs`.
              
              [min; max] is the clamping range for the 'inputs' data.  Op divides this range
              into 255 steps (total of 256 values), then replaces each 'inputs' value with the
              closest of the quantized step values.
              'num_bits' is the bitwidth of the quantization; between 2 and 8, inclusive.
              
              This operation has a gradient and thus allows for training `min` and `max` values.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FakeQuantWithMinMaxVars">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FakeQuantWithMinMaxVars (TensorFlow.TFOutput inputs, TensorFlow.TFOutput min, TensorFlow.TFOutput max, Nullable&lt;long&gt; num_bits = null, Nullable&lt;bool&gt; narrow_range = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FakeQuantWithMinMaxVars(valuetype TensorFlow.TFOutput inputs, valuetype TensorFlow.TFOutput min, valuetype TensorFlow.TFOutput max, valuetype System.Nullable`1&lt;int64&gt; num_bits, valuetype System.Nullable`1&lt;bool&gt; narrow_range, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput" />
        <Parameter Name="min" Type="TensorFlow.TFOutput" />
        <Parameter Name="max" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_bits" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="narrow_range" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputs">
        </param>
        <param name="min">
        </param>
        <param name="max">
        </param>
        <param name="num_bits">
              Optional argument
            </param>
        <param name="narrow_range">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FakeQuantWithMinMaxVars'.
            </param>
        <summary>
              Fake-quantize the 'inputs' tensor of type float via global float scalars `min`
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              and `max` to 'outputs' tensor of same shape as `inputs`.
              
              `[min; max]` define the clamping range for the `inputs` data.
              `inputs` values are quantized into the quantization range (`[0; 2^num_bits - 1]`
              when `narrow_range` is false and `[1; 2^num_bits - 1]` when it is true) and
              then de-quantized and output as floats in `[min; max]` interval.
              `num_bits` is the bitwidth of the quantization; between 2 and 8, inclusive.
              
              This operation has a gradient and thus allows for training `min` and `max`
              values.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FakeQuantWithMinMaxVarsGradient">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; FakeQuantWithMinMaxVarsGradient (TensorFlow.TFOutput gradients, TensorFlow.TFOutput inputs, TensorFlow.TFOutput min, TensorFlow.TFOutput max, Nullable&lt;long&gt; num_bits = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; FakeQuantWithMinMaxVarsGradient(valuetype TensorFlow.TFOutput gradients, valuetype TensorFlow.TFOutput inputs, valuetype TensorFlow.TFOutput min, valuetype TensorFlow.TFOutput max, valuetype System.Nullable`1&lt;int64&gt; num_bits, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gradients" Type="TensorFlow.TFOutput" />
        <Parameter Name="inputs" Type="TensorFlow.TFOutput" />
        <Parameter Name="min" Type="TensorFlow.TFOutput" />
        <Parameter Name="max" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_bits" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="gradients">
              Backpropagated gradients above the FakeQuantWithMinMaxVars operation.
            </param>
        <param name="inputs">
              Values passed as inputs to the FakeQuantWithMinMaxVars operation.
              min, max: Quantization interval, scalar floats.
            </param>
        <param name="min">
        </param>
        <param name="max">
        </param>
        <param name="num_bits">
              Optional argument
              The bitwidth of the quantization; between 2 and 8, inclusive.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FakeQuantWithMinMaxVarsGradient'.
            </param>
        <summary>
              Compute gradients for a FakeQuantWithMinMaxVars operation.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              backprops_wrt_input: Backpropagated gradients w.r.t. inputs:
              `gradients * (inputs &amp;gt;= min &amp;&amp; inputs &amp;lt;= max)`.
              backprop_wrt_min: Backpropagated gradients w.r.t. min parameter:
              `sum(gradients * (inputs &amp;lt; min))`.
              backprop_wrt_max: Backpropagated gradients w.r.t. max parameter:
              `sum(gradients * (inputs &amp;gt; max))`.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FakeQuantWithMinMaxVarsGradient">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; FakeQuantWithMinMaxVarsGradient (TensorFlow.TFOutput gradients, TensorFlow.TFOutput inputs, TensorFlow.TFOutput min, TensorFlow.TFOutput max, Nullable&lt;long&gt; num_bits = null, Nullable&lt;bool&gt; narrow_range = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; FakeQuantWithMinMaxVarsGradient(valuetype TensorFlow.TFOutput gradients, valuetype TensorFlow.TFOutput inputs, valuetype TensorFlow.TFOutput min, valuetype TensorFlow.TFOutput max, valuetype System.Nullable`1&lt;int64&gt; num_bits, valuetype System.Nullable`1&lt;bool&gt; narrow_range, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gradients" Type="TensorFlow.TFOutput" />
        <Parameter Name="inputs" Type="TensorFlow.TFOutput" />
        <Parameter Name="min" Type="TensorFlow.TFOutput" />
        <Parameter Name="max" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_bits" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="narrow_range" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="gradients">
              Backpropagated gradients above the FakeQuantWithMinMaxVars operation.
            </param>
        <param name="inputs">
              Values passed as inputs to the FakeQuantWithMinMaxVars operation.
              min, max: Quantization interval, scalar floats.
            </param>
        <param name="min">
        </param>
        <param name="max">
        </param>
        <param name="num_bits">
              Optional argument
              The bitwidth of the quantization; between 2 and 8, inclusive.
            </param>
        <param name="narrow_range">
              Optional argument
              Whether to quantize into 2^num_bits - 1 distinct values.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FakeQuantWithMinMaxVarsGradient'.
            </param>
        <summary>
              Compute gradients for a FakeQuantWithMinMaxVars operation.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              backprops_wrt_input: Backpropagated gradients w.r.t. inputs:
              `gradients * (inputs &amp;gt;= min &amp;&amp; inputs &amp;lt;= max)`.
              backprop_wrt_min: Backpropagated gradients w.r.t. min parameter:
              `sum(gradients * (inputs &amp;lt; min))`.
              backprop_wrt_max: Backpropagated gradients w.r.t. max parameter:
              `sum(gradients * (inputs &amp;gt; max))`.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FakeQuantWithMinMaxVarsPerChannel">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FakeQuantWithMinMaxVarsPerChannel (TensorFlow.TFOutput inputs, TensorFlow.TFOutput min, TensorFlow.TFOutput max, Nullable&lt;long&gt; num_bits = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FakeQuantWithMinMaxVarsPerChannel(valuetype TensorFlow.TFOutput inputs, valuetype TensorFlow.TFOutput min, valuetype TensorFlow.TFOutput max, valuetype System.Nullable`1&lt;int64&gt; num_bits, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput" />
        <Parameter Name="min" Type="TensorFlow.TFOutput" />
        <Parameter Name="max" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_bits" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputs">
        </param>
        <param name="min">
        </param>
        <param name="max">
        </param>
        <param name="num_bits">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FakeQuantWithMinMaxVarsPerChannel'.
            </param>
        <summary>
              Fake-quantize the 'inputs' tensor of type float and one of the shapes: `[d]`,
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              `[b, d]` `[b, h, w, d]` via per-channel floats `min` and `max` of shape `[d]`
              to 'outputs' tensor of same shape as `inputs`.
              
              [min; max] is the clamping range for the 'inputs' data in the corresponding
              depth channel.  Op divides this range into 255 steps (total of 256 values), then
              replaces each 'inputs' value with the closest of the quantized step values.
              'num_bits' is the bitwidth of the quantization; between 2 and 8, inclusive.
              
              This operation has a gradient and thus allows for training `min` and `max` values.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FakeQuantWithMinMaxVarsPerChannel">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FakeQuantWithMinMaxVarsPerChannel (TensorFlow.TFOutput inputs, TensorFlow.TFOutput min, TensorFlow.TFOutput max, Nullable&lt;long&gt; num_bits = null, Nullable&lt;bool&gt; narrow_range = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FakeQuantWithMinMaxVarsPerChannel(valuetype TensorFlow.TFOutput inputs, valuetype TensorFlow.TFOutput min, valuetype TensorFlow.TFOutput max, valuetype System.Nullable`1&lt;int64&gt; num_bits, valuetype System.Nullable`1&lt;bool&gt; narrow_range, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput" />
        <Parameter Name="min" Type="TensorFlow.TFOutput" />
        <Parameter Name="max" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_bits" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="narrow_range" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputs">
        </param>
        <param name="min">
        </param>
        <param name="max">
        </param>
        <param name="num_bits">
              Optional argument
            </param>
        <param name="narrow_range">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FakeQuantWithMinMaxVarsPerChannel'.
            </param>
        <summary>
              Fake-quantize the 'inputs' tensor of type float and one of the shapes: `[d]`,
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              `[b, d]` `[b, h, w, d]` via per-channel floats `min` and `max` of shape `[d]`
              to 'outputs' tensor of same shape as `inputs`.
              
              `[min; max]` define the clamping range for the `inputs` data.
              `inputs` values are quantized into the quantization range (`[0; 2^num_bits - 1]`
              when `narrow_range` is false and `[1; 2^num_bits - 1]` when it is true) and
              then de-quantized and output as floats in `[min; max]` interval.
              `num_bits` is the bitwidth of the quantization; between 2 and 8, inclusive.
              
              This operation has a gradient and thus allows for training `min` and `max`
              values.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FakeQuantWithMinMaxVarsPerChannelGradient">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; FakeQuantWithMinMaxVarsPerChannelGradient (TensorFlow.TFOutput gradients, TensorFlow.TFOutput inputs, TensorFlow.TFOutput min, TensorFlow.TFOutput max, Nullable&lt;long&gt; num_bits = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; FakeQuantWithMinMaxVarsPerChannelGradient(valuetype TensorFlow.TFOutput gradients, valuetype TensorFlow.TFOutput inputs, valuetype TensorFlow.TFOutput min, valuetype TensorFlow.TFOutput max, valuetype System.Nullable`1&lt;int64&gt; num_bits, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gradients" Type="TensorFlow.TFOutput" />
        <Parameter Name="inputs" Type="TensorFlow.TFOutput" />
        <Parameter Name="min" Type="TensorFlow.TFOutput" />
        <Parameter Name="max" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_bits" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="gradients">
              Backpropagated gradients above the FakeQuantWithMinMaxVars operation,
              shape one of: `[d]`, `[b, d]`,  `[b, h, w, d]`.
            </param>
        <param name="inputs">
              Values passed as inputs to the FakeQuantWithMinMaxVars operation, shape
                same as `gradients`.
              min, max: Quantization interval, floats of shape `[d]`.
            </param>
        <param name="min">
        </param>
        <param name="max">
        </param>
        <param name="num_bits">
              Optional argument
              The bitwidth of the quantization; between 2 and 8, inclusive.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FakeQuantWithMinMaxVarsPerChannelGradient'.
            </param>
        <summary>
              Compute gradients for a FakeQuantWithMinMaxVarsPerChannel operation.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              backprops_wrt_input: Backpropagated gradients w.r.t. inputs, shape same as
              `inputs`:
                `gradients * (inputs &amp;gt;= min &amp;&amp; inputs &amp;lt;= max)`.
              backprop_wrt_min: Backpropagated gradients w.r.t. min parameter, shape `[d]`:
              `sum_per_d(gradients * (inputs &amp;lt; min))`.
              backprop_wrt_max: Backpropagated gradients w.r.t. max parameter, shape `[d]`:
              `sum_per_d(gradients * (inputs &amp;gt; max))`.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FakeQuantWithMinMaxVarsPerChannelGradient">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; FakeQuantWithMinMaxVarsPerChannelGradient (TensorFlow.TFOutput gradients, TensorFlow.TFOutput inputs, TensorFlow.TFOutput min, TensorFlow.TFOutput max, Nullable&lt;long&gt; num_bits = null, Nullable&lt;bool&gt; narrow_range = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; FakeQuantWithMinMaxVarsPerChannelGradient(valuetype TensorFlow.TFOutput gradients, valuetype TensorFlow.TFOutput inputs, valuetype TensorFlow.TFOutput min, valuetype TensorFlow.TFOutput max, valuetype System.Nullable`1&lt;int64&gt; num_bits, valuetype System.Nullable`1&lt;bool&gt; narrow_range, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gradients" Type="TensorFlow.TFOutput" />
        <Parameter Name="inputs" Type="TensorFlow.TFOutput" />
        <Parameter Name="min" Type="TensorFlow.TFOutput" />
        <Parameter Name="max" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_bits" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="narrow_range" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="gradients">
              Backpropagated gradients above the FakeQuantWithMinMaxVars operation,
              shape one of: `[d]`, `[b, d]`,  `[b, h, w, d]`.
            </param>
        <param name="inputs">
              Values passed as inputs to the FakeQuantWithMinMaxVars operation, shape
                same as `gradients`.
              min, max: Quantization interval, floats of shape `[d]`.
            </param>
        <param name="min">
        </param>
        <param name="max">
        </param>
        <param name="num_bits">
              Optional argument
              The bitwidth of the quantization; between 2 and 8, inclusive.
            </param>
        <param name="narrow_range">
              Optional argument
              Whether to quantize into 2^num_bits - 1 distinct values.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FakeQuantWithMinMaxVarsPerChannelGradient'.
            </param>
        <summary>
              Compute gradients for a FakeQuantWithMinMaxVarsPerChannel operation.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              backprops_wrt_input: Backpropagated gradients w.r.t. inputs, shape same as
              `inputs`:
                `gradients * (inputs &amp;gt;= min &amp;&amp; inputs &amp;lt;= max)`.
              backprop_wrt_min: Backpropagated gradients w.r.t. min parameter, shape `[d]`:
              `sum_per_d(gradients * (inputs &amp;lt; min))`.
              backprop_wrt_max: Backpropagated gradients w.r.t. max parameter, shape `[d]`:
              `sum_per_d(gradients * (inputs &amp;gt; max))`.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FFT">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FFT (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FFT(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A complex64 tensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FFT'.
            </param>
        <summary>
              Fast Fourier transform.
            </summary>
        <returns>
              A complex64 tensor of the same shape as `input`. The inner-most
                dimension of `input` is replaced with its 1D Fourier transform.
              
              @compatibility(numpy)
              Equivalent to np.fft.fft
              @end_compatibility
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Computes the 1-dimensional discrete Fourier transform over the inner-most
              dimension of `input`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FFT2D">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FFT2D (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FFT2D(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A complex64 tensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FFT2D'.
            </param>
        <summary>
              2D fast Fourier transform.
            </summary>
        <returns>
              A complex64 tensor of the same shape as `input`. The inner-most 2
                dimensions of `input` are replaced with their 2D Fourier transform.
              
              @compatibility(numpy)
              Equivalent to np.fft.fft2
              @end_compatibility
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Computes the 2-dimensional discrete Fourier transform over the inner-most
              2 dimensions of `input`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FFT3D">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FFT3D (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FFT3D(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A complex64 tensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FFT3D'.
            </param>
        <summary>
              3D fast Fourier transform.
            </summary>
        <returns>
              A complex64 tensor of the same shape as `input`. The inner-most 3
                dimensions of `input` are replaced with their 3D Fourier transform.
              
              @compatibility(numpy)
              Equivalent to np.fft.fftn with 3 dimensions.
              @end_compatibility
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Computes the 3-dimensional discrete Fourier transform over the inner-most 3
              dimensions of `input`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FIFOQueueV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FIFOQueueV2 (TensorFlow.TFDataType[] component_types, TensorFlow.TFShape[] shapes = null, Nullable&lt;long&gt; capacity = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FIFOQueueV2(valuetype TensorFlow.TFDataType[] component_types, class TensorFlow.TFShape[] shapes, valuetype System.Nullable`1&lt;int64&gt; capacity, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="component_types">
              The type of each component in a value.
            </param>
        <param name="shapes">
              Optional argument
              The shape of each component in a value. The length of this attr must
              be either 0 or the same as the length of component_types. If the length of
              this attr is 0, the shapes of queue elements are not constrained, and
              only one element may be dequeued at a time.
            </param>
        <param name="capacity">
              Optional argument
              The upper bound on the number of elements in this queue.
              Negative numbers mean no limit.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this queue is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this queue will be shared under the given name
              across multiple sessions.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FIFOQueueV2'.
            </param>
        <summary>
              A queue that produces elements in first-in first-out order.
            </summary>
        <returns>
              The handle to the queue.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Fill (TensorFlow.TFOutput dims, TensorFlow.TFOutput value, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Fill(valuetype TensorFlow.TFOutput dims, valuetype TensorFlow.TFOutput value, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dims" Type="TensorFlow.TFOutput" />
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dims">
              1-D. Represents the shape of the output tensor.
            </param>
        <param name="value">
              0-D (scalar). Value to fill the returned tensor.
              
              @compatibility(numpy)
              Equivalent to np.full
              @end_compatibility
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Fill'.
            </param>
        <summary>
              Creates a tensor filled with a scalar value.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation creates a tensor of shape `dims` and fills it with `value`.
              
              For example:
              
              ```
              # Output tensor has shape [2, 3].
              fill([2, 3], 9) ==&amp;gt; [[9, 9, 9]
                                   [9, 9, 9]]
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FixedLengthRecordDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FixedLengthRecordDataset (TensorFlow.TFOutput filenames, TensorFlow.TFOutput header_bytes, TensorFlow.TFOutput record_bytes, TensorFlow.TFOutput footer_bytes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FixedLengthRecordDataset(valuetype TensorFlow.TFOutput filenames, valuetype TensorFlow.TFOutput header_bytes, valuetype TensorFlow.TFOutput record_bytes, valuetype TensorFlow.TFOutput footer_bytes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filenames" Type="TensorFlow.TFOutput" />
        <Parameter Name="header_bytes" Type="TensorFlow.TFOutput" />
        <Parameter Name="record_bytes" Type="TensorFlow.TFOutput" />
        <Parameter Name="footer_bytes" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filenames">
              A scalar or a vector containing the name(s) of the file(s) to be
              read.
            </param>
        <param name="header_bytes">
              A scalar representing the number of bytes to skip at the
              beginning of a file.
            </param>
        <param name="record_bytes">
              A scalar representing the number of bytes in each record.
            </param>
        <param name="footer_bytes">
              A scalar representing the number of bytes to skip at the end
              of a file.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FixedLengthRecordDataset'.
            </param>
        <summary>
              Creates a dataset that emits the records from one or more binary files.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FixedLengthRecordReaderV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FixedLengthRecordReaderV2 (long record_bytes, Nullable&lt;long&gt; header_bytes = null, Nullable&lt;long&gt; footer_bytes = null, Nullable&lt;long&gt; hop_bytes = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FixedLengthRecordReaderV2(int64 record_bytes, valuetype System.Nullable`1&lt;int64&gt; header_bytes, valuetype System.Nullable`1&lt;int64&gt; footer_bytes, valuetype System.Nullable`1&lt;int64&gt; hop_bytes, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record_bytes" Type="System.Int64" />
        <Parameter Name="header_bytes" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="footer_bytes" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="hop_bytes" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="record_bytes">
              Number of bytes in the record.
            </param>
        <param name="header_bytes">
              Optional argument
              Number of bytes in the header, defaults to 0.
            </param>
        <param name="footer_bytes">
              Optional argument
              Number of bytes in the footer, defaults to 0.
            </param>
        <param name="hop_bytes">
              Optional argument
              Number of bytes to hop before each read. Default of 0 means using
              record_bytes.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this reader is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this reader is named in the given bucket
              with this shared_name. Otherwise, the node name is used instead.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FixedLengthRecordReaderV2'.
            </param>
        <summary>
              A Reader that outputs fixed-length records from a file.
            </summary>
        <returns>
              The handle to reference the Reader.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FixedUnigramCandidateSampler">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; FixedUnigramCandidateSampler (TensorFlow.TFOutput true_classes, long num_true, long num_sampled, bool unique, long range_max, string vocab_file = null, Nullable&lt;float&gt; distortion = null, Nullable&lt;long&gt; num_reserved_ids = null, Nullable&lt;long&gt; num_shards = null, Nullable&lt;long&gt; shard = null, float[] unigrams = null, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; FixedUnigramCandidateSampler(valuetype TensorFlow.TFOutput true_classes, int64 num_true, int64 num_sampled, bool unique, int64 range_max, string vocab_file, valuetype System.Nullable`1&lt;float32&gt; distortion, valuetype System.Nullable`1&lt;int64&gt; num_reserved_ids, valuetype System.Nullable`1&lt;int64&gt; num_shards, valuetype System.Nullable`1&lt;int64&gt; shard, float32[] unigrams, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="true_classes" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_true" Type="System.Int64" />
        <Parameter Name="num_sampled" Type="System.Int64" />
        <Parameter Name="unique" Type="System.Boolean" />
        <Parameter Name="range_max" Type="System.Int64" />
        <Parameter Name="vocab_file" Type="System.String" />
        <Parameter Name="distortion" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="num_reserved_ids" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="num_shards" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="shard" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="unigrams" Type="System.Single[]" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="true_classes">
              A batch_size * num_true matrix, in which each row contains the
              IDs of the num_true target_classes in the corresponding original label.
            </param>
        <param name="num_true">
              Number of true labels per context.
            </param>
        <param name="num_sampled">
              Number of candidates to randomly sample.
            </param>
        <param name="unique">
              If unique is true, we sample with rejection, so that all sampled
              candidates in a batch are unique. This requires some approximation to
              estimate the post-rejection sampling probabilities.
            </param>
        <param name="range_max">
              The sampler will sample integers from the interval [0, range_max).
            </param>
        <param name="vocab_file">
              Optional argument
              Each valid line in this file (which should have a CSV-like format)
              corresponds to a valid word ID. IDs are in sequential order, starting from
              num_reserved_ids. The last entry in each line is expected to be a value
              corresponding to the count or relative probability. Exactly one of vocab_file
              and unigrams needs to be passed to this op.
            </param>
        <param name="distortion">
              Optional argument
              The distortion is used to skew the unigram probability distribution.
              Each weight is first raised to the distortion's power before adding to the
              internal unigram distribution. As a result, distortion = 1.0 gives regular
              unigram sampling (as defined by the vocab file), and distortion = 0.0 gives
              a uniform distribution.
            </param>
        <param name="num_reserved_ids">
              Optional argument
              Optionally some reserved IDs can be added in the range [0,
              ..., num_reserved_ids) by the users. One use case is that a special unknown
              word token is used as ID 0. These IDs will have a sampling probability of 0.
            </param>
        <param name="num_shards">
              Optional argument
              A sampler can be used to sample from a subset of the original range
              in order to speed up the whole computation through parallelism. This parameter
              (together with 'shard') indicates the number of partitions that are being
              used in the overall computation.
            </param>
        <param name="shard">
              Optional argument
              A sampler can be used to sample from a subset of the original range
              in order to speed up the whole computation through parallelism. This parameter
              (together with 'num_shards') indicates the particular partition number of a
              sampler op, when partitioning is being used.
            </param>
        <param name="unigrams">
              Optional argument
              A list of unigram counts or probabilities, one per ID in sequential
              order. Exactly one of vocab_file and unigrams should be passed to this op.
            </param>
        <param name="seed">
              Optional argument
              If either seed or seed2 are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              An second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FixedUnigramCandidateSampler'.
            </param>
        <summary>
              Generates labels for candidate sampling with a learned unigram distribution.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              sampled_candidates: A vector of length num_sampled, in which each element is
              the ID of a sampled candidate.
              true_expected_count: A batch_size * num_true matrix, representing
              the number of times each candidate is expected to occur in a batch
              of sampled candidates. If unique=true, then this is a probability.
              sampled_expected_count: A vector of length num_sampled, for each sampled
              candidate representing the number of times the candidate is expected
              to occur in a batch of sampled candidates.  If unique=true, then this is a
              probability.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              A unigram sampler could use a fixed unigram distribution read from a
              file or passed in as an in-memory array instead of building up the distribution
              from data on the fly. There is also an option to skew the distribution by
              applying a distortion power to the weights.
              
              The vocabulary file should be in CSV-like format, with the last field
              being the weight associated with the word.
              
              For each batch, this op picks a single set of sampled candidate labels.
              
              The advantages of sampling candidates per-batch are simplicity and the
              possibility of efficient dense matrix multiplication. The disadvantage is that
              the sampled candidates must be chosen independently of the context and of the
              true labels.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Floor (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Floor(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Floor'.
            </param>
        <summary>
              Returns element-wise largest integer not greater than x.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FloorDiv">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FloorDiv (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FloorDiv(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FloorDiv'.
            </param>
        <summary>
              Returns x // y element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *NOTE*: `FloorDiv` supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FloorMod">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FloorMod (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FloorMod(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FloorMod'.
            </param>
        <summary>
              Returns element-wise remainder of division. When `x &amp;lt; 0` xor `y &amp;lt; 0` is
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              true, this follows Python semantics in that the result here is consistent
              with a flooring divide. E.g. `floor(x / y) * y + mod(x, y) = x`.
              
              *NOTE*: `FloorMod` supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FractionalAvgPool">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; FractionalAvgPool (TensorFlow.TFOutput value, float[] pooling_ratio, Nullable&lt;bool&gt; pseudo_random = null, Nullable&lt;bool&gt; overlapping = null, Nullable&lt;bool&gt; deterministic = null, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; FractionalAvgPool(valuetype TensorFlow.TFOutput value, float32[] pooling_ratio, valuetype System.Nullable`1&lt;bool&gt; pseudo_random, valuetype System.Nullable`1&lt;bool&gt; overlapping, valuetype System.Nullable`1&lt;bool&gt; deterministic, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="pooling_ratio" Type="System.Single[]" />
        <Parameter Name="pseudo_random" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="overlapping" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="deterministic" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
              4-D with shape `[batch, height, width, channels]`.
            </param>
        <param name="pooling_ratio">
              Pooling ratio for each dimension of `value`, currently only
              supports row and col dimension and should be &amp;gt;= 1.0. For example, a valid
              pooling ratio looks like [1.0, 1.44, 1.73, 1.0]. The first and last elements
              must be 1.0 because we don't allow pooling on batch and channels
              dimensions. 1.44 and 1.73 are pooling ratio on height and width dimensions
              respectively.
            </param>
        <param name="pseudo_random">
              Optional argument
              When set to True, generates the pooling sequence in a
              pseudorandom fashion, otherwise, in a random fashion. Check paper [Benjamin
              Graham, Fractional Max-Pooling](http://arxiv.org/abs/1412.6071) for
              difference between pseudorandom and random.
            </param>
        <param name="overlapping">
              Optional argument
              When set to True, it means when pooling, the values at the boundary
              of adjacent pooling cells are used by both cells. For example:
              
              `index  0  1  2  3  4`
              
              `value  20 5  16 3  7`
              
              If the pooling sequence is [0, 2, 4], then 16, at index 2 will be used twice.
              The result would be [41/3, 26/3] for fractional avg pooling.
            </param>
        <param name="deterministic">
              Optional argument
              When set to True, a fixed pooling region will be used when
              iterating over a FractionalAvgPool node in the computation graph. Mainly used
              in unit test to make FractionalAvgPool deterministic.
            </param>
        <param name="seed">
              Optional argument
              If either seed or seed2 are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              An second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FractionalAvgPool'.
            </param>
        <summary>
              Performs fractional average pooling on the input.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output: output tensor after fractional avg pooling.
              row_pooling_sequence: row pooling sequence, needed to calculate gradient.
              col_pooling_sequence: column pooling sequence, needed to calculate gradient.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Fractional average pooling is similar to Fractional max pooling in the pooling
              region generation step. The only difference is that after pooling regions are
              generated, a mean operation is performed instead of a max operation in each
              pooling region.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FractionalAvgPoolGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FractionalAvgPoolGrad (TensorFlow.TFOutput orig_input_tensor_shape, TensorFlow.TFOutput out_backprop, TensorFlow.TFOutput row_pooling_sequence, TensorFlow.TFOutput col_pooling_sequence, Nullable&lt;bool&gt; overlapping = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FractionalAvgPoolGrad(valuetype TensorFlow.TFOutput orig_input_tensor_shape, valuetype TensorFlow.TFOutput out_backprop, valuetype TensorFlow.TFOutput row_pooling_sequence, valuetype TensorFlow.TFOutput col_pooling_sequence, valuetype System.Nullable`1&lt;bool&gt; overlapping, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orig_input_tensor_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="row_pooling_sequence" Type="TensorFlow.TFOutput" />
        <Parameter Name="col_pooling_sequence" Type="TensorFlow.TFOutput" />
        <Parameter Name="overlapping" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="orig_input_tensor_shape">
              Original input tensor shape for `fractional_avg_pool`
            </param>
        <param name="out_backprop">
              4-D with shape `[batch, height, width, channels]`.  Gradients
              w.r.t. the output of `fractional_avg_pool`.
            </param>
        <param name="row_pooling_sequence">
              row pooling sequence, form pooling region with
              col_pooling_sequence.
            </param>
        <param name="col_pooling_sequence">
              column pooling sequence, form pooling region with
              row_pooling sequence.
            </param>
        <param name="overlapping">
              Optional argument
              When set to True, it means when pooling, the values at the boundary
              of adjacent pooling cells are used by both cells. For example:
              
              `index  0  1  2  3  4`
              
              `value  20 5  16 3  7`
              
              If the pooling sequence is [0, 2, 4], then 16, at index 2 will be used twice.
              The result would be [41/3, 26/3] for fractional avg pooling.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FractionalAvgPoolGrad'.
            </param>
        <summary>
              Computes gradient of the FractionalAvgPool function.
            </summary>
        <returns>
              4-D.  Gradients w.r.t. the input of `fractional_avg_pool`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Unlike FractionalMaxPoolGrad, we don't need to find arg_max for
              FractionalAvgPoolGrad, we just need to evenly back-propagate each element of
              out_backprop to those indices that form the same pooling cell. Therefore, we
              just need to know the shape of original input tensor, instead of the whole
              tensor.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FractionalMaxPool">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; FractionalMaxPool (TensorFlow.TFOutput value, float[] pooling_ratio, Nullable&lt;bool&gt; pseudo_random = null, Nullable&lt;bool&gt; overlapping = null, Nullable&lt;bool&gt; deterministic = null, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; FractionalMaxPool(valuetype TensorFlow.TFOutput value, float32[] pooling_ratio, valuetype System.Nullable`1&lt;bool&gt; pseudo_random, valuetype System.Nullable`1&lt;bool&gt; overlapping, valuetype System.Nullable`1&lt;bool&gt; deterministic, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="pooling_ratio" Type="System.Single[]" />
        <Parameter Name="pseudo_random" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="overlapping" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="deterministic" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
              4-D with shape `[batch, height, width, channels]`.
            </param>
        <param name="pooling_ratio">
              Pooling ratio for each dimension of `value`, currently only
              supports row and col dimension and should be &amp;gt;= 1.0. For example, a valid
              pooling ratio looks like [1.0, 1.44, 1.73, 1.0]. The first and last elements
              must be 1.0 because we don't allow pooling on batch and channels
              dimensions. 1.44 and 1.73 are pooling ratio on height and width dimensions
              respectively.
            </param>
        <param name="pseudo_random">
              Optional argument
              When set to True, generates the pooling sequence in a
              pseudorandom fashion, otherwise, in a random fashion. Check paper [Benjamin
              Graham, Fractional Max-Pooling](http://arxiv.org/abs/1412.6071) for
              difference between pseudorandom and random.
            </param>
        <param name="overlapping">
              Optional argument
              When set to True, it means when pooling, the values at the boundary
              of adjacent pooling cells are used by both cells. For example:
              
              `index  0  1  2  3  4`
              
              `value  20 5  16 3  7`
              
              If the pooling sequence is [0, 2, 4], then 16, at index 2 will be used twice.
              The result would be [20, 16] for fractional max pooling.
            </param>
        <param name="deterministic">
              Optional argument
              When set to True, a fixed pooling region will be used when
              iterating over a FractionalMaxPool node in the computation graph. Mainly used
              in unit test to make FractionalMaxPool deterministic.
            </param>
        <param name="seed">
              Optional argument
              If either seed or seed2 are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              An second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FractionalMaxPool'.
            </param>
        <summary>
              Performs fractional max pooling on the input.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output: output tensor after fractional max pooling.
              row_pooling_sequence: row pooling sequence, needed to calculate gradient.
              col_pooling_sequence: column pooling sequence, needed to calculate gradient.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Fractional max pooling is slightly different than regular max pooling.  In
              regular max pooling, you downsize an input set by taking the maximum value of
              smaller N x N subsections of the set (often 2x2), and try to reduce the set by
              a factor of N, where N is an integer.  Fractional max pooling, as you might
              expect from the word "fractional", means that the overall reduction ratio N
              does not have to be an integer.
              
              The sizes of the pooling regions are generated randomly but are fairly uniform.
              For example, let's look at the height dimension, and the constraints on the
              list of rows that will be pool boundaries.
              
              First we define the following:
              
              1.  input_row_length : the number of rows from the input set
              2.  output_row_length : which will be smaller than the input
              3.  alpha = input_row_length / output_row_length : our reduction ratio
              4.  K = floor(alpha)
              5.  row_pooling_sequence : this is the result list of pool boundary rows
              
              Then, row_pooling_sequence should satisfy:
              
              1.  a[0] = 0 : the first value of the sequence is 0
              2.  a[end] = input_row_length : the last value of the sequence is the size
              3.  K &amp;lt;= (a[i+1] - a[i]) &amp;lt;= K+1 : all intervals are K or K+1 size
              4.  length(row_pooling_sequence) = output_row_length+1
              
              For more details on fractional max pooling, see this paper:
              [Benjamin Graham, Fractional Max-Pooling](http://arxiv.org/abs/1412.6071)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FractionalMaxPoolGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FractionalMaxPoolGrad (TensorFlow.TFOutput orig_input, TensorFlow.TFOutput orig_output, TensorFlow.TFOutput out_backprop, TensorFlow.TFOutput row_pooling_sequence, TensorFlow.TFOutput col_pooling_sequence, Nullable&lt;bool&gt; overlapping = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FractionalMaxPoolGrad(valuetype TensorFlow.TFOutput orig_input, valuetype TensorFlow.TFOutput orig_output, valuetype TensorFlow.TFOutput out_backprop, valuetype TensorFlow.TFOutput row_pooling_sequence, valuetype TensorFlow.TFOutput col_pooling_sequence, valuetype System.Nullable`1&lt;bool&gt; overlapping, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orig_input" Type="TensorFlow.TFOutput" />
        <Parameter Name="orig_output" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="row_pooling_sequence" Type="TensorFlow.TFOutput" />
        <Parameter Name="col_pooling_sequence" Type="TensorFlow.TFOutput" />
        <Parameter Name="overlapping" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="orig_input">
              Original input for `fractional_max_pool`
            </param>
        <param name="orig_output">
              Original output for `fractional_max_pool`
            </param>
        <param name="out_backprop">
              4-D with shape `[batch, height, width, channels]`.  Gradients
              w.r.t. the output of `fractional_max_pool`.
            </param>
        <param name="row_pooling_sequence">
              row pooling sequence, form pooling region with
              col_pooling_sequence.
            </param>
        <param name="col_pooling_sequence">
              column pooling sequence, form pooling region with
              row_pooling sequence.
            </param>
        <param name="overlapping">
              Optional argument
              When set to True, it means when pooling, the values at the boundary
              of adjacent pooling cells are used by both cells. For example:
              
              `index  0  1  2  3  4`
              
              `value  20 5  16 3  7`
              
              If the pooling sequence is [0, 2, 4], then 16, at index 2 will be used twice.
              The result would be [20, 16] for fractional max pooling.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FractionalMaxPoolGrad'.
            </param>
        <summary>
              Computes gradient of the FractionalMaxPool function.
            </summary>
        <returns>
              4-D.  Gradients w.r.t. the input of `fractional_max_pool`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FusedBatchNorm">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; FusedBatchNorm (TensorFlow.TFOutput x, TensorFlow.TFOutput scale, TensorFlow.TFOutput offset, TensorFlow.TFOutput mean, TensorFlow.TFOutput variance, Nullable&lt;float&gt; epsilon = null, string data_format = null, Nullable&lt;bool&gt; is_training = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`5&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; FusedBatchNorm(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput scale, valuetype TensorFlow.TFOutput offset, valuetype TensorFlow.TFOutput mean, valuetype TensorFlow.TFOutput variance, valuetype System.Nullable`1&lt;float32&gt; epsilon, string data_format, valuetype System.Nullable`1&lt;bool&gt; is_training, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="scale" Type="TensorFlow.TFOutput" />
        <Parameter Name="offset" Type="TensorFlow.TFOutput" />
        <Parameter Name="mean" Type="TensorFlow.TFOutput" />
        <Parameter Name="variance" Type="TensorFlow.TFOutput" />
        <Parameter Name="epsilon" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="is_training" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
              A 4D Tensor for input data.
            </param>
        <param name="scale">
              A 1D Tensor for scaling factor, to scale the normalized x.
            </param>
        <param name="offset">
              A 1D Tensor for offset, to shift to the normalized x.
            </param>
        <param name="mean">
              A 1D Tensor for population mean. Used for inference only;
              must be empty for training.
            </param>
        <param name="variance">
              A 1D Tensor for population variance. Used for inference only;
              must be empty for training.
            </param>
        <param name="epsilon">
              Optional argument
              A small float number added to the variance of x.
            </param>
        <param name="data_format">
              Optional argument
              The data format for x and y. Either "NHWC" (default) or "NCHW".
            </param>
        <param name="is_training">
              Optional argument
              A bool value to indicate the operation is for training (default)
              or inference.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FusedBatchNorm'.
            </param>
        <summary>
              Batch normalization.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              y: A 4D Tensor for output data.
              batch_mean: A 1D Tensor for the computed batch mean, to be used by TensorFlow
              to compute the running mean.
              batch_variance: A 1D Tensor for the computed batch variance, to be used by
              TensorFlow to compute the running variance.
              reserve_space_1: A 1D Tensor for the computed batch mean, to be reused
              in the gradient computation.
              reserve_space_2: A 1D Tensor for the computed batch variance (inverted variance
              in the cuDNN case), to be used in the gradient computation.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Note that the size of 4D Tensors are defined by either "NHWC" or "NCHW".
              The size of 1D Tensors matches the dimension C of the 4D Tensors.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FusedBatchNormGrad">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; FusedBatchNormGrad (TensorFlow.TFOutput y_backprop, TensorFlow.TFOutput x, TensorFlow.TFOutput scale, TensorFlow.TFOutput reserve_space_1, TensorFlow.TFOutput reserve_space_2, Nullable&lt;float&gt; epsilon = null, string data_format = null, Nullable&lt;bool&gt; is_training = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`5&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; FusedBatchNormGrad(valuetype TensorFlow.TFOutput y_backprop, valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput scale, valuetype TensorFlow.TFOutput reserve_space_1, valuetype TensorFlow.TFOutput reserve_space_2, valuetype System.Nullable`1&lt;float32&gt; epsilon, string data_format, valuetype System.Nullable`1&lt;bool&gt; is_training, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="y_backprop" Type="TensorFlow.TFOutput" />
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="scale" Type="TensorFlow.TFOutput" />
        <Parameter Name="reserve_space_1" Type="TensorFlow.TFOutput" />
        <Parameter Name="reserve_space_2" Type="TensorFlow.TFOutput" />
        <Parameter Name="epsilon" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="is_training" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="y_backprop">
              A 4D Tensor for the gradient with respect to y.
            </param>
        <param name="x">
              A 4D Tensor for input data.
            </param>
        <param name="scale">
              A 1D Tensor for scaling factor, to scale the normalized x.
            </param>
        <param name="reserve_space_1">
              A 1D Tensor for the computed batch mean, to be reused
              in the gradient computation.
            </param>
        <param name="reserve_space_2">
              A 1D Tensor for the computed batch variance (inverted variance
              in the cuDNN case), to be used in the gradient computation.
            </param>
        <param name="epsilon">
              Optional argument
              A small float number added to the variance of x.
            </param>
        <param name="data_format">
              Optional argument
              The data format for y_backprop, x, x_backprop.
              Either "NHWC" (default) or "NCHW".
            </param>
        <param name="is_training">
              Optional argument
              A bool value to indicate the operation is for training (default)
              or inference.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FusedBatchNormGrad'.
            </param>
        <summary>
              Gradient for batch normalization.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              x_backprop: A 4D Tensor for the gradient with respect to x.
              scale_backprop: A 1D Tensor for the gradient with respect to scale.
              offset_backprop: A 1D Tensor for the gradient with respect to offset.
              reserve_space_3: Unused placeholder to match the mean input in FusedBatchNorm.
              reserve_space_4: Unused placeholder to match the variance input
              in FusedBatchNorm.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Note that the size of 4D Tensors are defined by either "NHWC" or "NCHW".
              The size of 1D Tensors matches the dimension C of the 4D Tensors.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FusedPadConv2D">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FusedPadConv2D (TensorFlow.TFOutput input, TensorFlow.TFOutput paddings, TensorFlow.TFOutput filter, string mode, long[] strides, string padding, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FusedPadConv2D(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput paddings, valuetype TensorFlow.TFOutput filter, string mode, int64[] strides, string padding, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="paddings" Type="TensorFlow.TFOutput" />
        <Parameter Name="filter" Type="TensorFlow.TFOutput" />
        <Parameter Name="mode" Type="System.String" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              4-D with shape `[batch, in_height, in_width, in_channels]`.
            </param>
        <param name="paddings">
              A two-column matrix specifying the padding sizes. The number of
              rows must be the same as the rank of `input`.
            </param>
        <param name="filter">
              4-D with shape
              `[filter_height, filter_width, in_channels, out_channels]`.
            </param>
        <param name="mode">
        </param>
        <param name="strides">
              1-D of length 4.  The stride of the sliding window for each dimension
              of `input`. Must be in the same order as the dimension specified with format.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FusedPadConv2D'.
            </param>
        <summary>
              Performs a padding as a preprocess during a convolution.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Similar to FusedResizeAndPadConv2d, this op allows for an optimized
              implementation where the spatial padding transformation stage is fused with the
              im2col lookup, but in this case without the bilinear filtering required for
              resizing. Fusing the padding prevents the need to write out the intermediate
              results as whole tensors, reducing memory pressure, and we can get some latency
              gains by merging the transformation calculations.
              The data_format attribute for Conv2D isn't supported by this op, and 'NHWC'
              order is used instead.
              Internally this op uses a single per-graph scratch buffer, which means that it
              will block if multiple versions are being run in parallel. This is because this
              operator is primarily an optimization to minimize memory usage.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FusedResizeAndPadConv2D">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput FusedResizeAndPadConv2D (TensorFlow.TFOutput input, TensorFlow.TFOutput size, TensorFlow.TFOutput paddings, TensorFlow.TFOutput filter, string mode, long[] strides, string padding, Nullable&lt;bool&gt; resize_align_corners = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput FusedResizeAndPadConv2D(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput size, valuetype TensorFlow.TFOutput paddings, valuetype TensorFlow.TFOutput filter, string mode, int64[] strides, string padding, valuetype System.Nullable`1&lt;bool&gt; resize_align_corners, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="size" Type="TensorFlow.TFOutput" />
        <Parameter Name="paddings" Type="TensorFlow.TFOutput" />
        <Parameter Name="filter" Type="TensorFlow.TFOutput" />
        <Parameter Name="mode" Type="System.String" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="resize_align_corners" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              4-D with shape `[batch, in_height, in_width, in_channels]`.
            </param>
        <param name="size">
              A 1-D int32 Tensor of 2 elements: `new_height, new_width`.  The
              new size for the images.
            </param>
        <param name="paddings">
              A two-column matrix specifying the padding sizes. The number of
              rows must be the same as the rank of `input`.
            </param>
        <param name="filter">
              4-D with shape
              `[filter_height, filter_width, in_channels, out_channels]`.
            </param>
        <param name="mode">
        </param>
        <param name="strides">
              1-D of length 4.  The stride of the sliding window for each dimension
              of `input`. Must be in the same order as the dimension specified with format.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="resize_align_corners">
              Optional argument
              If true, rescale input by (new_height - 1) / (height - 1),
              which exactly aligns the 4 corners of images and resized images. If false, rescale
              by new_height / height. Treat similarly the width dimension.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'FusedResizeAndPadConv2D'.
            </param>
        <summary>
              Performs a resize and padding as a preprocess during a convolution.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              It's often possible to do spatial transformations more efficiently as part of
              the packing stage of a convolution, so this op allows for an optimized
              implementation where these stages are fused together. This prevents the need to
              write out the intermediate results as whole tensors, reducing memory pressure,
              and we can get some latency gains by merging the transformation calculations.
              The data_format attribute for Conv2D isn't supported by this op, and defaults to
              'NHWC' order.
              Internally this op uses a single per-graph scratch buffer, which means that it
              will block if multiple versions are being run in parallel. This is because this
              operator is primarily an optimization to minimize memory usage.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Gather">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Gather (TensorFlow.TFOutput parameters, TensorFlow.TFOutput indices, Nullable&lt;bool&gt; validate_indices = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Gather(valuetype TensorFlow.TFOutput parameters, valuetype TensorFlow.TFOutput indices, valuetype System.Nullable`1&lt;bool&gt; validate_indices, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="validate_indices" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parameters">
        </param>
        <param name="indices">
        </param>
        <param name="validate_indices">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Gather'.
            </param>
        <summary>
              Gather slices from `params` according to `indices`.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              `indices` must be an integer tensor of any dimension (usually 0-D or 1-D).
              Produces an output tensor with shape `indices.shape + params.shape[1:]` where:
              
              ```python
                  # Scalar indices
                  output[:, ..., :] = params[indices, :, ... :]
              
                  # Vector indices
                  output[i, :, ..., :] = params[indices[i], :, ... :]
              
                  # Higher rank indices
                  output[i, ..., j, :, ... :] = params[indices[i, ..., j], :, ..., :]
              ```
              
              If `indices` is a permutation and `len(indices) == params.shape[0]` then
              this operation will permute `params` accordingly.
              
              `validate_indices`: DEPRECATED. If this operation is assigned to CPU, values in
              `indices` are always validated to be within range. If assigned to GPU,
              out-of-bound indices result in safe but unspecified behavior, which may include
              raising an error.
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src="https://www.tensorflow.org/images/Gather.png" alt&amp;gt;
              &amp;lt;/div&amp;gt;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GatherNd">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput GatherNd (TensorFlow.TFOutput parameters, TensorFlow.TFOutput indices, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput GatherNd(valuetype TensorFlow.TFOutput parameters, valuetype TensorFlow.TFOutput indices, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parameters">
              The tensor from which to gather values.
            </param>
        <param name="indices">
              Index tensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'GatherNd'.
            </param>
        <summary>
              Gather values or slices from `params` according to `indices`.
            </summary>
        <returns>
              Values from `params` gathered from indices given by `indices`, with
              shape `indices.shape[:-1] + params.shape[indices.shape[-1]:]`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              `indices` is an integer tensor containing indices into `params`.  The last
              dimension of `indices` can be at most the rank of `params`:
              
                  indices.shape[-1] &amp;lt;= params.rank
              
              The last dimension of `indices` corresponds to elements
              (if `indices.shape[-1] = params.rank`) or slices
              (if `indices.shape[-1] &amp;lt; params.rank`) along dimension `indices.shape[-1]`
              of `params`.  The output tensor has shape
              
                  indices.shape[:-1] + params.shape[indices.shape[-1]:]
              
              Some examples below.
              
              Simple indexing into a matrix:
              
              ```python
                  indices = [[0, 0], [1, 1]]
                  params = [['a', 'b'], ['c', 'd']]
                  output = ['a', 'd']
              ```
              
              Slice indexing into a matrix:
              
              ```python
                  indices = [[1], [0]]
                  params = [['a', 'b'], ['c', 'd']]
                  output = [['c', 'd'], ['a', 'b']]
              ```
              
              Indexing into a 3-tensor:
              
              ```python
                  indices = [[1]]
                  params = [[['a0', 'b0'], ['c0', 'd0']],
                            [['a1', 'b1'], ['c1', 'd1']]]
                  output = [[['a1', 'b1'], ['c1', 'd1']]]
              
              
                  indices = [[0, 1], [1, 0]]
                  params = [[['a0', 'b0'], ['c0', 'd0']],
                            [['a1', 'b1'], ['c1', 'd1']]]
                  output = [['c0', 'd0'], ['a1', 'b1']]
              
              
                  indices = [[0, 0, 1], [1, 0, 1]]
                  params = [[['a0', 'b0'], ['c0', 'd0']],
                            [['a1', 'b1'], ['c1', 'd1']]]
                  output = ['b0', 'b1']
              ```
              
              Batched indexing into a matrix:
              
              ```python
                  indices = [[[0, 0]], [[0, 1]]]
                  params = [['a', 'b'], ['c', 'd']]
                  output = [['a'], ['b']]
              ```
              
              Batched slice indexing into a matrix:
              
              ```python
                  indices = [[[1]], [[0]]]
                  params = [['a', 'b'], ['c', 'd']]
                  output = [[['c', 'd']], [['a', 'b']]]
              ```
              
              Batched indexing into a 3-tensor:
              
              ```python
                  indices = [[[1]], [[0]]]
                  params = [[['a0', 'b0'], ['c0', 'd0']],
                            [['a1', 'b1'], ['c1', 'd1']]]
                  output = [[[['a1', 'b1'], ['c1', 'd1']]],
                            [[['a0', 'b0'], ['c0', 'd0']]]]
              
                  indices = [[[0, 1], [1, 0]], [[0, 0], [1, 1]]]
                  params = [[['a0', 'b0'], ['c0', 'd0']],
                            [['a1', 'b1'], ['c1', 'd1']]]
                  output = [[['c0', 'd0'], ['a1', 'b1']],
                            [['a0', 'b0'], ['c1', 'd1']]]
              
              
                  indices = [[[0, 0, 1], [1, 0, 1]], [[0, 1, 1], [1, 1, 0]]]
                  params = [[['a0', 'b0'], ['c0', 'd0']],
                            [['a1', 'b1'], ['c1', 'd1']]]
                  output = [['b0', 'b1'], ['d0', 'c1']]
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;TensorFlow.TFOperation&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class TensorFlow.TFOperation&gt; GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(TensorFlow.TFGraph/&lt;GetEnumerator&gt;d__23))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TensorFlow.TFOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns the enumerator that returns all the TFOperations in a graph.
            </summary>
        <returns>The enumerator.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGlobalVariablesInitializer">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation[] GetGlobalVariablesInitializer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation[] GetGlobalVariablesInitializer() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the list of all registered global variables.
            </summary>
        <returns>The array of variables that should be initialized.</returns>
        <remarks>
            After this method is invoked the list of pending initialization variables
            is cleared.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRandomSeeds">
      <MemberSignature Language="C#" Value="public void GetRandomSeeds (Nullable&lt;int&gt; operationSeed, out int graphSeed, out int localSeed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetRandomSeeds(valuetype System.Nullable`1&lt;int32&gt; operationSeed, int32 graphSeed, int32 localSeed) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationSeed" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="graphSeed" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="localSeed" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="operationSeed">The seed value that might be set.</param>
        <param name="graphSeed">Returned graph seed.</param>
        <param name="localSeed">Returned local seed.</param>
        <summary>
            Returns the graph and local seeds based on an optionally set incoming seed value.
            </summary>
        <remarks>
            This helper function returns two seeds derived from graph-level and op-level seeds.
            Many random operations internally use the two seeds to allow user to change 
            the seed globally for a graph, or for only specific operations.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSessionHandle">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput GetSessionHandle (TensorFlow.TFOutput value, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput GetSessionHandle(valuetype TensorFlow.TFOutput value, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
              The tensor to be stored.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'GetSessionHandle'.
            </param>
        <summary>
              Store the input tensor in the state of the current session.
            </summary>
        <returns>
              The handle for the tensor stored in the session state, represented
              as a string.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSessionHandleV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput GetSessionHandleV2 (TensorFlow.TFOutput value, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput GetSessionHandleV2(valuetype TensorFlow.TFOutput value, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
              The tensor to be stored.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'GetSessionHandleV2'.
            </param>
        <summary>
              Store the input tensor in the state of the current session.
            </summary>
        <returns>
              The handle for the tensor stored in the session state, represented
              as a ResourceHandle object.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSessionTensor">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput GetSessionTensor (TensorFlow.TFOutput handle, TensorFlow.TFDataType dtype, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput GetSessionTensor(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFDataType dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle for a tensor stored in the session state.
            </param>
        <param name="dtype">
              The type of the output value.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'GetSessionTensor'.
            </param>
        <summary>
              Get the value of the tensor specified by its handle.
            </summary>
        <returns>
              The tensor for the given handle.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetShape">
      <MemberSignature Language="C#" Value="public long[] GetShape (TensorFlow.TFOutput output, TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64[] GetShape(valuetype TensorFlow.TFOutput output, class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="TensorFlow.TFOutput" />
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="output">The output operation to probe.</param>
        <param name="status">Status buffer, if specified a status code will be left here, if not specified, a <see cref="T:TensorFlow.TFException" /> exception is raised if there is an error.</param>
        <summary>
             Returns the tensor shape for the specific output pparameters as an array of longs.
            </summary>
        <returns>null for single dimension, .</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTensorNumDims">
      <MemberSignature Language="C#" Value="public int GetTensorNumDims (TensorFlow.TFOutput output, TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTensorNumDims(valuetype TensorFlow.TFOutput output, class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="TensorFlow.TFOutput" />
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="output">To be added.</param>
        <param name="status">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTensorShape">
      <MemberSignature Language="C#" Value="public long[] GetTensorShape (TensorFlow.TFOutput output, TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64[] GetTensorShape(valuetype TensorFlow.TFOutput output, class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="TensorFlow.TFOutput" />
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="output">The tensor that you want to look up.  </param>
        <param name="status">Status buffer, if specified a status code will be left here, if not specified, a <see cref="T:TensorFlow.TFException" /> exception is raised if there is an error.</param>
        <summary>
             Returns the shape of a tensor specified in <paramref name="output" />.
             </summary>
        <returns>The tensor shape.    If the number of dimensions in the shape is unknown or the shape is, a scalar, the values in the array will be zero. Otherwise, each element of will be set corresponding to the size of the dimension. An  unknown dimension is represented by -1.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Greater">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Greater (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Greater(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Greater'.
            </param>
        <summary>
              Returns the truth value of (x &amp;gt; y) element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *NOTE*: `Greater` supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterEqual">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput GreaterEqual (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput GreaterEqual(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'GreaterEqual'.
            </param>
        <summary>
              Returns the truth value of (x &amp;gt;= y) element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *NOTE*: `GreaterEqual` supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HashTableV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput HashTableV2 (TensorFlow.TFDataType key_dtype, TensorFlow.TFDataType value_dtype, string container = null, string shared_name = null, Nullable&lt;bool&gt; use_node_name_sharing = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput HashTableV2(valuetype TensorFlow.TFDataType key_dtype, valuetype TensorFlow.TFDataType value_dtype, string container, string shared_name, valuetype System.Nullable`1&lt;bool&gt; use_node_name_sharing, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key_dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="value_dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="use_node_name_sharing" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key_dtype">
              Type of the table keys.
            </param>
        <param name="value_dtype">
              Type of the table values.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this table is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this table is shared under the given name across
              multiple sessions.
            </param>
        <param name="use_node_name_sharing">
              Optional argument
              If true and shared_name is empty, the table is shared
              using the node name.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'HashTableV2'.
            </param>
        <summary>
              Creates a non-initialized hash table.
            </summary>
        <returns>
              Handle to a table.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op creates a hash table, specifying the type of its keys and values.
              Before using the table you will have to initialize it.  After initialization the
              table will be immutable.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HistogramSummary">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput HistogramSummary (TensorFlow.TFOutput tag, TensorFlow.TFOutput values, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput HistogramSummary(valuetype TensorFlow.TFOutput tag, valuetype TensorFlow.TFOutput values, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="TensorFlow.TFOutput" />
        <Parameter Name="values" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tag">
              Scalar.  Tag to use for the `Summary.Value`.
            </param>
        <param name="values">
              Any shape. Values to use to build the histogram.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'HistogramSummary'.
            </param>
        <summary>
              Outputs a `Summary` protocol buffer with a histogram.
            </summary>
        <returns>
              Scalar. Serialized `Summary` protocol buffer.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The generated
              [`Summary`](https://www.tensorflow.org/code/tensorflow/core/framework/summary.proto)
              has one summary value containing a histogram for `values`.
              
              This op reports an `InvalidArgument` error if any value is not finite.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HSVToRGB">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput HSVToRGB (TensorFlow.TFOutput images, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput HSVToRGB(valuetype TensorFlow.TFOutput images, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="images" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="images">
              1-D or higher rank. HSV data to convert. Last dimension must be size 3.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'HSVToRGB'.
            </param>
        <summary>
              Convert one or more images from HSV to RGB.
            </summary>
        <returns>
              `images` converted to RGB.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Outputs a tensor of the same shape as the `images` tensor, containing the RGB
              value of the pixels. The output is only well defined if the value in `images`
              are in `[0,1]`.
              
              See `rgb_to_hsv` for a description of the HSV encoding.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Identity">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Identity (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Identity(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Identity'.
            </param>
        <summary>
              Return a tensor with the same shape and contents as the input tensor or value.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IdentityReaderV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput IdentityReaderV2 (string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput IdentityReaderV2(string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="container">
              Optional argument
              If non-empty, this reader is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this reader is named in the given bucket
              with this shared_name. Otherwise, the node name is used instead.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'IdentityReaderV2'.
            </param>
        <summary>
              A Reader that outputs the queued work as both the key and value.
            </summary>
        <returns>
              The handle to reference the Reader.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              To use, enqueue strings in a Queue.  ReaderRead will take the front
              work string and output (work, work).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IFFT">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput IFFT (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput IFFT(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A complex64 tensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'IFFT'.
            </param>
        <summary>
              Inverse fast Fourier transform.
            </summary>
        <returns>
              A complex64 tensor of the same shape as `input`. The inner-most
                dimension of `input` is replaced with its inverse 1D Fourier transform.
              
              @compatibility(numpy)
              Equivalent to np.fft.ifft
              @end_compatibility
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Computes the inverse 1-dimensional discrete Fourier transform over the
              inner-most dimension of `input`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IFFT2D">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput IFFT2D (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput IFFT2D(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A complex64 tensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'IFFT2D'.
            </param>
        <summary>
              Inverse 2D fast Fourier transform.
            </summary>
        <returns>
              A complex64 tensor of the same shape as `input`. The inner-most 2
                dimensions of `input` are replaced with their inverse 2D Fourier transform.
              
              @compatibility(numpy)
              Equivalent to np.fft.ifft2
              @end_compatibility
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Computes the inverse 2-dimensional discrete Fourier transform over the
              inner-most 2 dimensions of `input`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IFFT3D">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput IFFT3D (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput IFFT3D(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A complex64 tensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'IFFT3D'.
            </param>
        <summary>
              Inverse 3D fast Fourier transform.
            </summary>
        <returns>
              A complex64 tensor of the same shape as `input`. The inner-most 3
                dimensions of `input` are replaced with their inverse 3D Fourier transform.
              
              @compatibility(numpy)
              Equivalent to np.fft.ifftn with 3 dimensions.
              @end_compatibility
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Computes the inverse 3-dimensional discrete Fourier transform over the
              inner-most 3 dimensions of `input`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Igamma">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Igamma (TensorFlow.TFOutput a, TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Igamma(valuetype TensorFlow.TFOutput a, valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="TensorFlow.TFOutput" />
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a">
        </param>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Igamma'.
            </param>
        <summary>
              Compute the lower regularized incomplete Gamma function `Q(a, x)`.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The lower regularized incomplete Gamma function is defined as:
              
              
              \\(P(a, x) = gamma(a, x) / Gamma(a) = 1 - Q(a, x)\\)
              
              where
              
              \\(gamma(a, x) = int_{0}^{x} t^{a-1} exp(-t) dt\\)
              
              is the lower incomplete Gamma function.
              
              Note, above `Q(a, x)` (`Igammac`) is the upper regularized complete
              Gamma function.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Igammac">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Igammac (TensorFlow.TFOutput a, TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Igammac(valuetype TensorFlow.TFOutput a, valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="TensorFlow.TFOutput" />
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a">
        </param>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Igammac'.
            </param>
        <summary>
              Compute the upper regularized incomplete Gamma function `Q(a, x)`.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The upper regularized incomplete Gamma function is defined as:
              
              \\(Q(a, x) = Gamma(a, x) / Gamma(a) = 1 - P(a, x)\\)
              
              where
              
              \\(Gamma(a, x) = int_{x}^{\infty} t^{a-1} exp(-t) dt\\)
              
              is the upper incomplete Gama function.
              
              Note, above `P(a, x)` (`Igamma`) is the lower regularized complete
              Gamma function.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Imag">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Imag (TensorFlow.TFOutput input, Nullable&lt;TensorFlow.TFDataType&gt; Tout = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Imag(valuetype TensorFlow.TFOutput input, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; Tout, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="Tout" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="Tout">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Imag'.
            </param>
        <summary>
              Returns the imaginary part of a complex number.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given a tensor `input` of complex numbers, this operation returns a tensor of
              type `float` that is the imaginary part of each element in `input`. All
              elements in `input` must be complex numbers of the form \\(a + bj\\), where *a*
              is the real part and *b* is the imaginary part returned by this operation.
              
              For example:
              
              ```
              # tensor 'input' is [-2.25 + 4.75j, 3.25 + 5.75j]
              tf.imag(input) ==&amp;gt; [4.75, 5.75]
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageSummary">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ImageSummary (TensorFlow.TFOutput tag, TensorFlow.TFOutput tensor, Nullable&lt;long&gt; max_images = null, TensorFlow.TFTensor bad_color = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ImageSummary(valuetype TensorFlow.TFOutput tag, valuetype TensorFlow.TFOutput tensor, valuetype System.Nullable`1&lt;int64&gt; max_images, class TensorFlow.TFTensor bad_color, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="TensorFlow.TFOutput" />
        <Parameter Name="tensor" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_images" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="bad_color" Type="TensorFlow.TFTensor" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tag">
              Scalar. Used to build the `tag` attribute of the summary values.
            </param>
        <param name="tensor">
              4-D of shape `[batch_size, height, width, channels]` where
              `channels` is 1, 3, or 4.
            </param>
        <param name="max_images">
              Optional argument
              Max number of batch elements to generate images for.
            </param>
        <param name="bad_color">
              Optional argument
              Color to use for pixels with non-finite values.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ImageSummary'.
            </param>
        <summary>
              Outputs a `Summary` protocol buffer with images.
            </summary>
        <returns>
              Scalar. Serialized `Summary` protocol buffer.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The summary has up to `max_images` summary values containing images. The
              images are built from `tensor` which must be 4-D with shape `[batch_size,
              height, width, channels]` and where `channels` can be:
              
              *  1: `tensor` is interpreted as Grayscale.
              *  3: `tensor` is interpreted as RGB.
              *  4: `tensor` is interpreted as RGBA.
              
              The images have the same number of channels as the input tensor. For float
              input, the values are normalized one image at a time to fit in the range
              `[0, 255]`.  `uint8` values are unchanged.  The op uses two different
              normalization algorithms:
              
              *  If the input values are all positive, they are rescaled so the largest one
                 is 255.
              
              *  If any input value is negative, the values are shifted so input value 0.0
                 is at 127.  They are then rescaled so that either the smallest value is 0,
                 or the largest one is 255.
              
              The `tag` argument is a scalar `Tensor` of type `string`.  It is used to
              build the `tag` of the summary values:
              
              *  If `max_images` is 1, the summary value tag is '*tag*/image'.
              *  If `max_images` is greater than 1, the summary value tags are
                 generated sequentially as '*tag*/image/0', '*tag*/image/1', etc.
              
              The `bad_color` argument is the color to use in the generated images for
              non-finite input values.  It is a `unit8` 1-D tensor of length `channels`.
              Each element must be in the range `[0, 255]` (It represents the value of a
              pixel in the output image).  Non-finite values in the input tensor are
              replaced by this tensor in the output image.  The default value is the color
              red.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImmutableConst">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ImmutableConst (TensorFlow.TFDataType dtype, TensorFlow.TFShape shape, string memory_region_name, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ImmutableConst(valuetype TensorFlow.TFDataType dtype, class TensorFlow.TFShape shape, string memory_region_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="shape" Type="TensorFlow.TFShape" />
        <Parameter Name="memory_region_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dtype">
              Type of the returned tensor.
            </param>
        <param name="shape">
              Shape of the returned tensor.
            </param>
        <param name="memory_region_name">
              Name of readonly memory region used by the tensor, see
              NewReadOnlyMemoryRegionFromFile in tensorflow::Env.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ImmutableConst'.
            </param>
        <summary>
              Returns immutable tensor from memory region.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The current implementation memmaps the tensor from a file.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (byte[] buffer, string prefix = &quot;&quot;, TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(unsigned int8[] buffer, string prefix, class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="buffer">A byte array containing the serialized graph.</param>
        <param name="prefix">A prefix that will be prepended to names of nodes in the graph when they are imported into the graph.</param>
        <param name="status">Status buffer, if specified a status code will be left here, if not specified, a <see cref="T:TensorFlow.TFException" /> exception is raised if there is an error.</param>
        <summary>
            Import a serialized graph held in a byte array into this graph, using the specified prefix.
            </summary>
        <returns>The import.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (byte[] buffer, TensorFlow.TFImportGraphDefOptions options, TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(unsigned int8[] buffer, class TensorFlow.TFImportGraphDefOptions options, class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="TensorFlow.TFImportGraphDefOptions" />
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="buffer">A byte array containing the serialized graph.</param>
        <param name="options">Importing graph options.</param>
        <param name="status">Status buffer, if specified a status code will be left here, if not specified, a <see cref="T:TensorFlow.TFException" /> exception is raised if there is an error.</param>
        <summary>
            Import a serialized graph held in a byte array into this graph, using the specified import options.
            </summary>
        <returns>The import.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (TensorFlow.TFBuffer graphDef, string prefix = &quot;&quot;, TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class TensorFlow.TFBuffer graphDef, string prefix, class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphDef" Type="TensorFlow.TFBuffer" />
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="graphDef">A buffer containing the serialized graph.</param>
        <param name="prefix">A prefix that will be prepended to names of nodes in the <paramref name="graphDef" /> when they are imported into the graph.</param>
        <param name="status">Status buffer, if specified a status code will be left here, if not specified, a <see cref="T:TensorFlow.TFException" /> exception is raised if there is an error.</param>
        <summary>
            Import a serialized graph into this graph, using the specified prefix.
            </summary>
        <returns>The import.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (TensorFlow.TFBuffer graphDef, TensorFlow.TFImportGraphDefOptions options, TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class TensorFlow.TFBuffer graphDef, class TensorFlow.TFImportGraphDefOptions options, class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphDef" Type="TensorFlow.TFBuffer" />
        <Parameter Name="options" Type="TensorFlow.TFImportGraphDefOptions" />
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="graphDef">A buffer containing the serialized graph.</param>
        <param name="options">Importing graph options.</param>
        <param name="status">Status buffer, if specified a status code will be left here, if not specified, a <see cref="T:TensorFlow.TFException" /> exception is raised if there is an error.</param>
        <summary>
            Import a serialized graph into this graph, using the specified importing options.
            </summary>
        <returns>The import.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportGraphDef">
      <MemberSignature Language="C#" Value="public void ImportGraphDef (TensorFlow.TFBuffer graphDef, TensorFlow.TFImportGraphDefOptions options, TensorFlow.TFOutput[] returnOutputs, TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ImportGraphDef(class TensorFlow.TFBuffer graphDef, class TensorFlow.TFImportGraphDefOptions options, valuetype TensorFlow.TFOutput[] returnOutputs, class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphDef" Type="TensorFlow.TFBuffer" />
        <Parameter Name="options" Type="TensorFlow.TFImportGraphDefOptions" />
        <Parameter Name="returnOutputs" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="graphDef">Serialized graph definition (in protocol buffer format).</param>
        <param name="options">Import options.</param>
        <param name="returnOutputs">Array large enough to contain all the return options.</param>
        <param name="status">Status buffer, if specified a status code will be left here, if not specified, a <see cref="T:TensorFlow.TFException" /> exception is raised if there is an error.</param>
        <summary>
            Imports a graph serialized into the graph
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeTableFromTextFileV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation InitializeTableFromTextFileV2 (TensorFlow.TFOutput table_handle, TensorFlow.TFOutput filename, long key_index, long value_index, Nullable&lt;long&gt; vocab_size = null, string delimiter = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation InitializeTableFromTextFileV2(valuetype TensorFlow.TFOutput table_handle, valuetype TensorFlow.TFOutput filename, int64 key_index, int64 value_index, valuetype System.Nullable`1&lt;int64&gt; vocab_size, string delimiter, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="filename" Type="TensorFlow.TFOutput" />
        <Parameter Name="key_index" Type="System.Int64" />
        <Parameter Name="value_index" Type="System.Int64" />
        <Parameter Name="vocab_size" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="delimiter" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="table_handle">
              Handle to a table which will be initialized.
            </param>
        <param name="filename">
              Filename of a vocabulary text file.
            </param>
        <param name="key_index">
              Column index in a line to get the table `key` values from.
            </param>
        <param name="value_index">
              Column index that represents information of a line to get the table
              `value` values from.
            </param>
        <param name="vocab_size">
              Optional argument
              Number of elements of the file, use -1 if unknown.
            </param>
        <param name="delimiter">
              Optional argument
              Delimiter to separate fields in a line.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'InitializeTableFromTextFileV2'.
            </param>
        <summary>
              Initializes a table from a text file.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              It inserts one key-value pair into the table for each line of the file.
              The key and value is extracted from the whole line content, elements from the
              split line based on `delimiter` or the line number (starting from zero).
              Where to extract the key and value from a line is specified by `key_index` and
              `value_index`.
              
              - A value of -1 means use the line number(starting from zero), expects `int64`.
              - A value of -2 means use the whole line content, expects `string`.
              - A value &amp;gt;= 0 means use the index (starting at zero) of the split line based
                on `delimiter`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeTableV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation InitializeTableV2 (TensorFlow.TFOutput table_handle, TensorFlow.TFOutput keys, TensorFlow.TFOutput values, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation InitializeTableV2(valuetype TensorFlow.TFOutput table_handle, valuetype TensorFlow.TFOutput keys, valuetype TensorFlow.TFOutput values, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="keys" Type="TensorFlow.TFOutput" />
        <Parameter Name="values" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="table_handle">
              Handle to a table which will be initialized.
            </param>
        <param name="keys">
              Keys of type Tkey.
            </param>
        <param name="values">
              Values of type Tval.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'InitializeTableV2'.
            </param>
        <summary>
              Table initializer that takes two tensors for keys and values respectively.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InTopK">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput InTopK (TensorFlow.TFOutput predictions, TensorFlow.TFOutput targets, long k, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput InTopK(valuetype TensorFlow.TFOutput predictions, valuetype TensorFlow.TFOutput targets, int64 k, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predictions" Type="TensorFlow.TFOutput" />
        <Parameter Name="targets" Type="TensorFlow.TFOutput" />
        <Parameter Name="k" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="predictions">
              A `batch_size` x `classes` tensor.
            </param>
        <param name="targets">
              A `batch_size` vector of class ids.
            </param>
        <param name="k">
              Number of top elements to look at for computing precision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'InTopK'.
            </param>
        <summary>
              Says whether the targets are in the top `K` predictions.
            </summary>
        <returns>
              Computed Precision at `k` as a `bool Tensor`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This outputs a `batch_size` bool array, an entry `out[i]` is `true` if the
              prediction for the target class is among the top `k` predictions among
              all predictions for example `i`. Note that the behavior of `InTopK` differs
              from the `TopK` op in its handling of ties; if multiple classes have the
              same prediction value and straddle the top-`k` boundary, all of those
              classes are considered to be in the top `k`.
              
              More formally, let
              
                \\(predictions_i\\) be the predictions for all classes for example `i`,
                \\(targets_i\\) be the target class for example `i`,
                \\(out_i\\) be the output for example `i`,
              
              $$out_i = predictions_{i, targets_i} \in TopKIncludingTies(predictions_i)$$
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inv">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Inv (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Inv(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Inv'.
            </param>
        <summary>
              Computes the reciprocal of x element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              I.e., \\(y = 1 / x\\).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invert">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Invert (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Invert(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Invert'.
            </param>
        <summary>
              Flips all bits elementwise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The result will have exactly those bits set, that are not set in `x`. The
              computation is performed on the underlying representation of x.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvertPermutation">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput InvertPermutation (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput InvertPermutation(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
              1-D.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'InvertPermutation'.
            </param>
        <summary>
              Computes the inverse permutation of a tensor.
            </summary>
        <returns>
              1-D.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation computes the inverse of an index permutation. It takes a 1-D
              integer tensor `x`, which represents the indices of a zero-based array, and
              swaps each value with its index position. In other words, for an output tensor
              `y` and an input tensor `x`, this operation computes the following:
              
              `y[x[i]] = i for i in [0, 1, ..., len(x) - 1]`
              
              The values must include 0. There can be no duplicate values or negative values.
              
              For example:
              
              ```
              # tensor `x` is [3, 4, 0, 2, 1]
              invert_permutation(x) ==&amp;gt; [2, 4, 3, 0, 1]
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput InvGrad (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput InvGrad(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'InvGrad'.
            </param>
        <summary>
              Computes the gradient for the inverse of `x` wrt its input.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Specifically, `grad = -dy * y*y`, where `y = 1/x`, and `dy`
              is the corresponding input gradient.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IRFFT">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput IRFFT (TensorFlow.TFOutput input, TensorFlow.TFOutput fft_length, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput IRFFT(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput fft_length, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="fft_length" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A complex64 tensor.
            </param>
        <param name="fft_length">
              An int32 tensor of shape [1]. The FFT length.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'IRFFT'.
            </param>
        <summary>
              Inverse real-valued fast Fourier transform.
            </summary>
        <returns>
              A float32 tensor of the same rank as `input`. The inner-most
                dimension of `input` is replaced with the `fft_length` samples of its inverse
                1D Fourier transform.
              
              @compatibility(numpy)
              Equivalent to np.fft.irfft
              @end_compatibility
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Computes the inverse 1-dimensional discrete Fourier transform of a real-valued
              signal over the inner-most dimension of `input`.
              
              The inner-most dimension of `input` is assumed to be the result of `RFFT`: the
              `fft_length / 2 + 1` unique components of the DFT of a real-valued signal. If
              `fft_length` is not provided, it is computed from the size of the inner-most
              dimension of `input` (`fft_length = 2 * (inner - 1)`). If the FFT length used to
              compute `input` is odd, it should be provided since it cannot be inferred
              properly.
              
              Along the axis `IRFFT` is computed on, if `fft_length / 2 + 1` is smaller
              than the corresponding dimension of `input`, the dimension is cropped. If it is
              larger, the dimension is padded with zeros.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IRFFT2D">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput IRFFT2D (TensorFlow.TFOutput input, TensorFlow.TFOutput fft_length, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput IRFFT2D(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput fft_length, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="fft_length" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A complex64 tensor.
            </param>
        <param name="fft_length">
              An int32 tensor of shape [2]. The FFT length for each dimension.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'IRFFT2D'.
            </param>
        <summary>
              Inverse 2D real-valued fast Fourier transform.
            </summary>
        <returns>
              A float32 tensor of the same rank as `input`. The inner-most 2
                dimensions of `input` are replaced with the `fft_length` samples of their
                inverse 2D Fourier transform.
              
              @compatibility(numpy)
              Equivalent to np.fft.irfft2
              @end_compatibility
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Computes the inverse 2-dimensional discrete Fourier transform of a real-valued
              signal over the inner-most 2 dimensions of `input`.
              
              The inner-most 2 dimensions of `input` are assumed to be the result of `RFFT2D`:
              The inner-most dimension contains the `fft_length / 2 + 1` unique components of
              the DFT of a real-valued signal. If `fft_length` is not provided, it is computed
              from the size of the inner-most 2 dimensions of `input`. If the FFT length used
              to compute `input` is odd, it should be provided since it cannot be inferred
              properly.
              
              Along each axis `IRFFT2D` is computed on, if `fft_length` (or
              `fft_length / 2 + 1` for the inner-most dimension) is smaller than the
              corresponding dimension of `input`, the dimension is cropped. If it is larger,
              the dimension is padded with zeros.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IRFFT3D">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput IRFFT3D (TensorFlow.TFOutput input, TensorFlow.TFOutput fft_length, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput IRFFT3D(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput fft_length, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="fft_length" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A complex64 tensor.
            </param>
        <param name="fft_length">
              An int32 tensor of shape [3]. The FFT length for each dimension.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'IRFFT3D'.
            </param>
        <summary>
              Inverse 3D real-valued fast Fourier transform.
            </summary>
        <returns>
              A float32 tensor of the same rank as `input`. The inner-most 3
                dimensions of `input` are replaced with the `fft_length` samples of their
                inverse 3D real Fourier transform.
              
              @compatibility(numpy)
              Equivalent to np.irfftn with 3 dimensions.
              @end_compatibility
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Computes the inverse 3-dimensional discrete Fourier transform of a real-valued
              signal over the inner-most 3 dimensions of `input`.
              
              The inner-most 3 dimensions of `input` are assumed to be the result of `RFFT3D`:
              The inner-most dimension contains the `fft_length / 2 + 1` unique components of
              the DFT of a real-valued signal. If `fft_length` is not provided, it is computed
              from the size of the inner-most 3 dimensions of `input`. If the FFT length used
              to compute `input` is odd, it should be provided since it cannot be inferred
              properly.
              
              Along each axis `IRFFT3D` is computed on, if `fft_length` (or
              `fft_length / 2 + 1` for the inner-most dimension) is smaller than the
              corresponding dimension of `input`, the dimension is cropped. If it is larger,
              the dimension is padded with zeros.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFinite">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput IsFinite (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput IsFinite(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'IsFinite'.
            </param>
        <summary>
              Returns which elements of x are finite.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              @compatibility(numpy)
              Equivalent to np.isfinite
              @end_compatibility
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInf">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput IsInf (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput IsInf(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'IsInf'.
            </param>
        <summary>
              Returns which elements of x are Inf.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              @compatibility(numpy)
              Equivalent to np.isinf
              @end_compatibility
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNan">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput IsNan (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput IsNan(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'IsNan'.
            </param>
        <summary>
              Returns which elements of x are NaN.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              @compatibility(numpy)
              Equivalent to np.isnan
              @end_compatibility
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation this[string name] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class TensorFlow.TFOperation Item(string)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Name to lookup.</param>
        <summary>
            Gets the <see cref="T:TensorFlow.TFGraph" /> with the specified name, or null if the named operation does not exist in the graph.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Iterator">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Iterator (string shared_name, string container, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Iterator(string shared_name, string container, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shared_name">
        </param>
        <param name="container">
        </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Iterator'.
            </param>
        <summary>
              A container for an iterator resource.
            </summary>
        <returns>
              A handle to the iterator that can be passed to a "MakeIterator"
              or "IteratorGetNext" op.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IteratorDispose">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation IteratorDispose (TensorFlow.TFOutput iterator, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation IteratorDispose(valuetype TensorFlow.TFOutput iterator, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iterator" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="iterator">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'IteratorDispose'.
            </param>
        <summary>
              Releases any resources used by the given iterator.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IteratorGetNext">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] IteratorGetNext (TensorFlow.TFOutput iterator, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] IteratorGetNext(valuetype TensorFlow.TFOutput iterator, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iterator" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="iterator">
        </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'IteratorGetNext'.
            </param>
        <summary>
              Gets the next output from the given iterator.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="L2Loss">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput L2Loss (TensorFlow.TFOutput t, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput L2Loss(valuetype TensorFlow.TFOutput t, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="t">
              Typically 2-D, but may have any dimensions.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'L2Loss'.
            </param>
        <summary>
              L2 Loss.
            </summary>
        <returns>
              0-D.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Computes half the L2 norm of a tensor without the `sqrt`:
              
                  output = sum(t ** 2) / 2
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LearnedUnigramCandidateSampler">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; LearnedUnigramCandidateSampler (TensorFlow.TFOutput true_classes, long num_true, long num_sampled, bool unique, long range_max, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; LearnedUnigramCandidateSampler(valuetype TensorFlow.TFOutput true_classes, int64 num_true, int64 num_sampled, bool unique, int64 range_max, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="true_classes" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_true" Type="System.Int64" />
        <Parameter Name="num_sampled" Type="System.Int64" />
        <Parameter Name="unique" Type="System.Boolean" />
        <Parameter Name="range_max" Type="System.Int64" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="true_classes">
              A batch_size * num_true matrix, in which each row contains the
              IDs of the num_true target_classes in the corresponding original label.
            </param>
        <param name="num_true">
              Number of true labels per context.
            </param>
        <param name="num_sampled">
              Number of candidates to randomly sample.
            </param>
        <param name="unique">
              If unique is true, we sample with rejection, so that all sampled
              candidates in a batch are unique. This requires some approximation to
              estimate the post-rejection sampling probabilities.
            </param>
        <param name="range_max">
              The sampler will sample integers from the interval [0, range_max).
            </param>
        <param name="seed">
              Optional argument
              If either seed or seed2 are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              An second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LearnedUnigramCandidateSampler'.
            </param>
        <summary>
              Generates labels for candidate sampling with a learned unigram distribution.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              sampled_candidates: A vector of length num_sampled, in which each element is
              the ID of a sampled candidate.
              true_expected_count: A batch_size * num_true matrix, representing
              the number of times each candidate is expected to occur in a batch
              of sampled candidates. If unique=true, then this is a probability.
              sampled_expected_count: A vector of length num_sampled, for each sampled
              candidate representing the number of times the candidate is expected
              to occur in a batch of sampled candidates.  If unique=true, then this is a
              probability.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              See explanations of candidate sampling and the data formats at
              go/candidate-sampling.
              
              For each batch, this op picks a single set of sampled candidate labels.
              
              The advantages of sampling candidates per-batch are simplicity and the
              possibility of efficient dense matrix multiplication. The disadvantage is that
              the sampled candidates must be chosen independently of the context and of the
              true labels.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Less">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Less (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Less(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Less'.
            </param>
        <summary>
              Returns the truth value of (x &amp;lt; y) element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *NOTE*: `Less` supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LessEqual">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput LessEqual (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput LessEqual(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LessEqual'.
            </param>
        <summary>
              Returns the truth value of (x &amp;lt;= y) element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *NOTE*: `LessEqual` supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lgamma">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Lgamma (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Lgamma(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Lgamma'.
            </param>
        <summary>
              Computes the log of the absolute value of `Gamma(x)` element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LinSpace">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput LinSpace (TensorFlow.TFOutput start, TensorFlow.TFOutput stop, TensorFlow.TFOutput num, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput LinSpace(valuetype TensorFlow.TFOutput start, valuetype TensorFlow.TFOutput stop, valuetype TensorFlow.TFOutput num, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="TensorFlow.TFOutput" />
        <Parameter Name="stop" Type="TensorFlow.TFOutput" />
        <Parameter Name="num" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="start">
              First entry in the range.
            </param>
        <param name="stop">
              Last entry in the range.
            </param>
        <param name="num">
              Number of values to generate.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LinSpace'.
            </param>
        <summary>
              Generates values in an interval.
            </summary>
        <returns>
              1-D. The generated values.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              A sequence of `num` evenly-spaced values are generated beginning at `start`.
              If `num &amp;gt; 1`, the values in the sequence increase by `stop - start / num - 1`,
              so that the last one is exactly `stop`.
              
              For example:
              
              ```
              tf.linspace(10.0, 12.0, 3, name="linspace") =&amp;gt; [ 10.0  11.0  12.0]
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListDiff">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; ListDiff (TensorFlow.TFOutput x, TensorFlow.TFOutput y, Nullable&lt;TensorFlow.TFDataType&gt; out_idx = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; ListDiff(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; out_idx, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_idx" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
              1-D. Values to keep.
            </param>
        <param name="y">
              1-D. Values to remove.
            </param>
        <param name="out_idx">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ListDiff'.
            </param>
        <summary>
              Computes the difference between two lists of numbers or strings.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output: 1-D. Values present in `x` but not in `y`.
              idx: 1-D. Positions of `x` values preserved in `out`.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Given a list `x` and a list `y`, this operation returns a list `out` that
              represents all values that are in `x` but not in `y`. The returned list `out`
              is sorted in the same order that the numbers appear in `x` (duplicates are
              preserved). This operation also returns a list `idx` that represents the
              position of each `out` element in `x`. In other words:
              
              `out[i] = x[idx[i]] for i in [0, 1, ..., len(out) - 1]`
              
              For example, given this input:
              
              ```
              x = [1, 2, 3, 4, 5, 6]
              y = [1, 3, 5]
              ```
              
              This operation would return:
              
              ```
              out ==&amp;gt; [2, 4, 6]
              idx ==&amp;gt; [1, 3, 5]
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Log (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Log(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Log'.
            </param>
        <summary>
              Computes natural logarithm of x element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              I.e., \\(y = \log_e x\\).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Log1p">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Log1p (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Log1p(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Log1p'.
            </param>
        <summary>
              Computes natural logarithm of (1 + x) element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              I.e., \\(y = \log_e (1 + x)\\).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalAnd">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput LogicalAnd (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput LogicalAnd(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LogicalAnd'.
            </param>
        <summary>
              Returns the truth value of x AND y element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *NOTE*: `LogicalAnd` supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalNot">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput LogicalNot (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput LogicalNot(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LogicalNot'.
            </param>
        <summary>
              Returns the truth value of NOT x element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalOr">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput LogicalOr (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput LogicalOr(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LogicalOr'.
            </param>
        <summary>
              Returns the truth value of x OR y element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *NOTE*: `LogicalOr` supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogSoftmax">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput LogSoftmax (TensorFlow.TFOutput logits, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput LogSoftmax(valuetype TensorFlow.TFOutput logits, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logits" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logits">
              2-D with shape `[batch_size, num_classes]`.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LogSoftmax'.
            </param>
        <summary>
              Computes log softmax activations.
            </summary>
        <returns>
              Same shape as `logits`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              For each batch `i` and class `j` we have
              
                  logsoftmax[i, j] = logits[i, j] - log(sum(exp(logits[i])))
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogUniformCandidateSampler">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; LogUniformCandidateSampler (TensorFlow.TFOutput true_classes, long num_true, long num_sampled, bool unique, long range_max, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; LogUniformCandidateSampler(valuetype TensorFlow.TFOutput true_classes, int64 num_true, int64 num_sampled, bool unique, int64 range_max, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="true_classes" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_true" Type="System.Int64" />
        <Parameter Name="num_sampled" Type="System.Int64" />
        <Parameter Name="unique" Type="System.Boolean" />
        <Parameter Name="range_max" Type="System.Int64" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="true_classes">
              A batch_size * num_true matrix, in which each row contains the
              IDs of the num_true target_classes in the corresponding original label.
            </param>
        <param name="num_true">
              Number of true labels per context.
            </param>
        <param name="num_sampled">
              Number of candidates to randomly sample.
            </param>
        <param name="unique">
              If unique is true, we sample with rejection, so that all sampled
              candidates in a batch are unique. This requires some approximation to
              estimate the post-rejection sampling probabilities.
            </param>
        <param name="range_max">
              The sampler will sample integers from the interval [0, range_max).
            </param>
        <param name="seed">
              Optional argument
              If either seed or seed2 are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              An second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LogUniformCandidateSampler'.
            </param>
        <summary>
              Generates labels for candidate sampling with a log-uniform distribution.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              sampled_candidates: A vector of length num_sampled, in which each element is
              the ID of a sampled candidate.
              true_expected_count: A batch_size * num_true matrix, representing
              the number of times each candidate is expected to occur in a batch
              of sampled candidates. If unique=true, then this is a probability.
              sampled_expected_count: A vector of length num_sampled, for each sampled
              candidate representing the number of times the candidate is expected
              to occur in a batch of sampled candidates.  If unique=true, then this is a
              probability.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              See explanations of candidate sampling and the data formats at
              go/candidate-sampling.
              
              For each batch, this op picks a single set of sampled candidate labels.
              
              The advantages of sampling candidates per-batch are simplicity and the
              possibility of efficient dense matrix multiplication. The disadvantage is that
              the sampled candidates must be chosen independently of the context and of the
              true labels.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupTableExportV2">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; LookupTableExportV2 (TensorFlow.TFOutput table_handle, TensorFlow.TFDataType Tkeys, TensorFlow.TFDataType Tvalues, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; LookupTableExportV2(valuetype TensorFlow.TFOutput table_handle, valuetype TensorFlow.TFDataType Tkeys, valuetype TensorFlow.TFDataType Tvalues, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="Tkeys" Type="TensorFlow.TFDataType" />
        <Parameter Name="Tvalues" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="table_handle">
              Handle to the table.
            </param>
        <param name="Tkeys">
        </param>
        <param name="Tvalues">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LookupTableExportV2'.
            </param>
        <summary>
              Outputs all keys and values in the table.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              keys: Vector of all keys present in the table.
              values: Tensor of all values in the table. Indexed in parallel with `keys`.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupTableFindV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput LookupTableFindV2 (TensorFlow.TFOutput table_handle, TensorFlow.TFOutput keys, TensorFlow.TFOutput default_value, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput LookupTableFindV2(valuetype TensorFlow.TFOutput table_handle, valuetype TensorFlow.TFOutput keys, valuetype TensorFlow.TFOutput default_value, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="keys" Type="TensorFlow.TFOutput" />
        <Parameter Name="default_value" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="table_handle">
              Handle to the table.
            </param>
        <param name="keys">
              Any shape.  Keys to look up.
            </param>
        <param name="default_value">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LookupTableFindV2'.
            </param>
        <summary>
              Looks up keys in a table, outputs the corresponding values.
            </summary>
        <returns>
              Same shape as `keys`.  Values found in the table, or `default_values`
              for missing keys.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The tensor `keys` must of the same type as the keys of the table.
              The output `values` is of the type of the table values.
              
              The scalar `default_value` is the value output for keys not present in the
              table. It must also be of the same type as the table values.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupTableImportV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation LookupTableImportV2 (TensorFlow.TFOutput table_handle, TensorFlow.TFOutput keys, TensorFlow.TFOutput values, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation LookupTableImportV2(valuetype TensorFlow.TFOutput table_handle, valuetype TensorFlow.TFOutput keys, valuetype TensorFlow.TFOutput values, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="keys" Type="TensorFlow.TFOutput" />
        <Parameter Name="values" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="table_handle">
              Handle to the table.
            </param>
        <param name="keys">
              Any shape.  Keys to look up.
            </param>
        <param name="values">
              Values to associate with keys.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LookupTableImportV2'.
            </param>
        <summary>
              Replaces the contents of the table with the specified keys and values.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              The tensor `keys` must be of the same type as the keys of the table.
              The tensor `values` must be of the type of the table values.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupTableInsertV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation LookupTableInsertV2 (TensorFlow.TFOutput table_handle, TensorFlow.TFOutput keys, TensorFlow.TFOutput values, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation LookupTableInsertV2(valuetype TensorFlow.TFOutput table_handle, valuetype TensorFlow.TFOutput keys, valuetype TensorFlow.TFOutput values, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="keys" Type="TensorFlow.TFOutput" />
        <Parameter Name="values" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="table_handle">
              Handle to the table.
            </param>
        <param name="keys">
              Any shape.  Keys to look up.
            </param>
        <param name="values">
              Values to associate with keys.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LookupTableInsertV2'.
            </param>
        <summary>
              Updates the table to associates keys with values.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              The tensor `keys` must be of the same type as the keys of the table.
              The tensor `values` must be of the type of the table values.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupTableSizeV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput LookupTableSizeV2 (TensorFlow.TFOutput table_handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput LookupTableSizeV2(valuetype TensorFlow.TFOutput table_handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="table_handle">
              Handle to the table.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LookupTableSizeV2'.
            </param>
        <summary>
              Computes the number of elements in the given table.
            </summary>
        <returns>
              Scalar that contains number of elements in the table.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoopCond">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput LoopCond (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput LoopCond(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A boolean scalar, representing the branch predicate of the Switch op.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LoopCond'.
            </param>
        <summary>
              Forwards the input to the output.
            </summary>
        <returns>
              The same tensor as `input`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operator represents the loop termination condition used by the
              "pivot" switches of a loop.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LRN">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput LRN (TensorFlow.TFOutput input, Nullable&lt;long&gt; depth_radius = null, Nullable&lt;float&gt; bias = null, Nullable&lt;float&gt; alpha = null, Nullable&lt;float&gt; beta = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput LRN(valuetype TensorFlow.TFOutput input, valuetype System.Nullable`1&lt;int64&gt; depth_radius, valuetype System.Nullable`1&lt;float32&gt; bias, valuetype System.Nullable`1&lt;float32&gt; alpha, valuetype System.Nullable`1&lt;float32&gt; beta, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="depth_radius" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="bias" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="alpha" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="beta" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              4-D.
            </param>
        <param name="depth_radius">
              Optional argument
              0-D.  Half-width of the 1-D normalization window.
            </param>
        <param name="bias">
              Optional argument
              An offset (usually positive to avoid dividing by 0).
            </param>
        <param name="alpha">
              Optional argument
              A scale factor, usually positive.
            </param>
        <param name="beta">
              Optional argument
              An exponent.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LRN'.
            </param>
        <summary>
              Local Response Normalization.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The 4-D `input` tensor is treated as a 3-D array of 1-D vectors (along the last
              dimension), and each vector is normalized independently.  Within a given vector,
              each component is divided by the weighted, squared sum of inputs within
              `depth_radius`.  In detail,
              
                  sqr_sum[a, b, c, d] =
                      sum(input[a, b, c, d - depth_radius : d + depth_radius + 1] ** 2)
                  output = input / (bias + alpha * sqr_sum) ** beta
              
              For details, see [Krizhevsky et al., ImageNet classification with deep
              convolutional neural networks (NIPS 2012)](http://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LRNGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput LRNGrad (TensorFlow.TFOutput input_grads, TensorFlow.TFOutput input_image, TensorFlow.TFOutput output_image, Nullable&lt;long&gt; depth_radius = null, Nullable&lt;float&gt; bias = null, Nullable&lt;float&gt; alpha = null, Nullable&lt;float&gt; beta = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput LRNGrad(valuetype TensorFlow.TFOutput input_grads, valuetype TensorFlow.TFOutput input_image, valuetype TensorFlow.TFOutput output_image, valuetype System.Nullable`1&lt;int64&gt; depth_radius, valuetype System.Nullable`1&lt;float32&gt; bias, valuetype System.Nullable`1&lt;float32&gt; alpha, valuetype System.Nullable`1&lt;float32&gt; beta, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_grads" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_image" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_image" Type="TensorFlow.TFOutput" />
        <Parameter Name="depth_radius" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="bias" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="alpha" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="beta" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_grads">
              4-D with shape `[batch, height, width, channels]`.
            </param>
        <param name="input_image">
              4-D with shape `[batch, height, width, channels]`.
            </param>
        <param name="output_image">
              4-D with shape `[batch, height, width, channels]`.
            </param>
        <param name="depth_radius">
              Optional argument
              A depth radius.
            </param>
        <param name="bias">
              Optional argument
              An offset (usually &amp;gt; 0 to avoid dividing by 0).
            </param>
        <param name="alpha">
              Optional argument
              A scale factor, usually positive.
            </param>
        <param name="beta">
              Optional argument
              An exponent.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'LRNGrad'.
            </param>
        <summary>
              Gradients for Local Response Normalization.
            </summary>
        <returns>
              The gradients for LRN.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeIterator">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation MakeIterator (TensorFlow.TFOutput dataset, TensorFlow.TFOutput iterator, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation MakeIterator(valuetype TensorFlow.TFOutput dataset, valuetype TensorFlow.TFOutput iterator, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataset" Type="TensorFlow.TFOutput" />
        <Parameter Name="iterator" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataset">
        </param>
        <param name="iterator">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MakeIterator'.
            </param>
        <summary>
              Makes a new iterator from the given `dataset` and stores it in `iterator`.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              This operation may be executed multiple times. Each execution will reset the
              iterator in `iterator` to the first element of `dataset`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MapClear">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation MapClear (TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation MapClear(valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MapClear'.
            </param>
        <summary>
              Op removes all elements in the underlying container.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MapIncompleteSize">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MapIncompleteSize (TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MapIncompleteSize(valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MapIncompleteSize'.
            </param>
        <summary>
              Op returns the number of incomplete elements in the underlying container.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MapPeek">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] MapPeek (TensorFlow.TFOutput key, TensorFlow.TFOutput indices, TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] MapPeek(valuetype TensorFlow.TFOutput key, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">
        </param>
        <param name="indices">
        </param>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MapPeek'.
            </param>
        <summary>
              Op peeks at the values at the specified key.  If the
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              underlying container does not contain this key
              this op will block until it does.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MapSize">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MapSize (TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MapSize(valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MapSize'.
            </param>
        <summary>
              Op returns the number of elements in the underlying container.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MapStage">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation MapStage (TensorFlow.TFOutput key, TensorFlow.TFOutput indices, TensorFlow.TFOutput[] values, TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation MapStage(valuetype TensorFlow.TFOutput key, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput[] values, valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="values" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">
              int64
            </param>
        <param name="indices">
        </param>
        <param name="values">
              a list of tensors
              dtypes A list of data types that inserted values should adhere to.
            </param>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
              Maximum number of elements in the Staging Area. If &amp;gt; 0, inserts
              on the container will block when the capacity is reached.
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
              If non-empty, this queue is placed in the given container. Otherwise,
              a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              It is necessary to match this name to the matching Unstage Op.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MapStage'.
            </param>
        <summary>
              Stage (key, values) in the underlying container which behaves like a hashtable.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MapUnstage">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] MapUnstage (TensorFlow.TFOutput key, TensorFlow.TFOutput indices, TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] MapUnstage(valuetype TensorFlow.TFOutput key, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">
        </param>
        <param name="indices">
        </param>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MapUnstage'.
            </param>
        <summary>
              Op removes and returns the values associated with the key
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              from the underlying container.   If the underlying container
              does not contain this key, the op will block until it does.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MapUnstageNoKey">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput[]&gt; MapUnstageNoKey (TensorFlow.TFOutput indices, TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput[]&gt; MapUnstageNoKey(valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput[]&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="indices">
        </param>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MapUnstageNoKey'.
            </param>
        <summary>
              Op removes and returns a random (key, value)
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              key: 
              values: 
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              from the underlying container.   If the underlying container
              does not contain elements, the op will block until it does.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchingFiles">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MatchingFiles (TensorFlow.TFOutput pattern, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MatchingFiles(valuetype TensorFlow.TFOutput pattern, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pattern">
              Shell wildcard pattern(s). Scalar or vector of type string.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MatchingFiles'.
            </param>
        <summary>
              Returns the set of files matching one or more glob patterns.
            </summary>
        <returns>
              A vector of matching filenames.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Note that this routine only supports wildcard characters in the
              basename portion of the pattern, not in the directory portion.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatMul">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MatMul (TensorFlow.TFOutput a, TensorFlow.TFOutput b, Nullable&lt;bool&gt; transpose_a = null, Nullable&lt;bool&gt; transpose_b = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MatMul(valuetype TensorFlow.TFOutput a, valuetype TensorFlow.TFOutput b, valuetype System.Nullable`1&lt;bool&gt; transpose_a, valuetype System.Nullable`1&lt;bool&gt; transpose_b, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="TensorFlow.TFOutput" />
        <Parameter Name="b" Type="TensorFlow.TFOutput" />
        <Parameter Name="transpose_a" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="transpose_b" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a">
        </param>
        <param name="b">
        </param>
        <param name="transpose_a">
              Optional argument
              If true, "a" is transposed before multiplication.
            </param>
        <param name="transpose_b">
              Optional argument
              If true, "b" is transposed before multiplication.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MatMul'.
            </param>
        <summary>
              Multiply the matrix "a" by the matrix "b".
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The inputs must be two-dimensional matrices and the inner dimension of
              "a" (after being transposed if transpose_a is true) must match the
              outer dimension of "b" (after being transposed if transposed_b is
              true).
              
              *Note*: The default kernel implementation for MatMul on GPUs uses
              cublas.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatrixBandPart">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MatrixBandPart (TensorFlow.TFOutput input, TensorFlow.TFOutput num_lower, TensorFlow.TFOutput num_upper, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MatrixBandPart(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput num_lower, valuetype TensorFlow.TFOutput num_upper, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_lower" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_upper" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Rank `k` tensor.
            </param>
        <param name="num_lower">
              0-D tensor. Number of subdiagonals to keep. If negative, keep entire
              lower triangle.
            </param>
        <param name="num_upper">
              0-D tensor. Number of superdiagonals to keep. If negative, keep
              entire upper triangle.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MatrixBandPart'.
            </param>
        <summary>
              Copy a tensor setting everything outside a central band in each innermost matrix
            </summary>
        <returns>
              Rank `k` tensor of the same shape as input. The extracted banded tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              to zero.
              
              The `band` part is computed as follows:
              Assume `input` has `k` dimensions `[I, J, K, ..., M, N]`, then the output is a
              tensor with the same shape where
              
              `band[i, j, k, ..., m, n] = in_band(m, n) * input[i, j, k, ..., m, n]`.
              
              The indicator function
              
              `in_band(m, n) = (num_lower &amp;lt; 0 || (m-n) &amp;lt;= num_lower)) &amp;&amp;
                               (num_upper &amp;lt; 0 || (n-m) &amp;lt;= num_upper)`.
              
              For example:
              
              ```
              # if 'input' is [[ 0,  1,  2, 3]
                               [-1,  0,  1, 2]
                               [-2, -1,  0, 1]
                               [-3, -2, -1, 0]],
              
              tf.matrix_band_part(input, 1, -1) ==&amp;gt; [[ 0,  1,  2, 3]
                                                     [-1,  0,  1, 2]
                                                     [ 0, -1,  0, 1]
                                                     [ 0,  0, -1, 0]],
              
              tf.matrix_band_part(input, 2, 1) ==&amp;gt; [[ 0,  1,  0, 0]
                                                    [-1,  0,  1, 0]
                                                    [-2, -1,  0, 1]
                                                    [ 0, -2, -1, 0]]
              ```
              
              Useful special cases:
              
              ```
               tf.matrix_band_part(input, 0, -1) ==&amp;gt; Upper triangular part.
               tf.matrix_band_part(input, -1, 0) ==&amp;gt; Lower triangular part.
               tf.matrix_band_part(input, 0, 0) ==&amp;gt; Diagonal.
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatrixDeterminant">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MatrixDeterminant (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MatrixDeterminant(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Shape is `[..., M, M]`.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MatrixDeterminant'.
            </param>
        <summary>
              Computes the determinant of one ore more square matrices.
            </summary>
        <returns>
              Shape is `[...]`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The input is a tensor of shape `[..., M, M]` whose inner-most 2 dimensions
              form square matrices. The output is a tensor containing the determinants
              for all input submatrices `[..., :, :]`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatrixDiag">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MatrixDiag (TensorFlow.TFOutput diagonal, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MatrixDiag(valuetype TensorFlow.TFOutput diagonal, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="diagonal" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="diagonal">
              Rank `k`, where `k &amp;gt;= 1`.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MatrixDiag'.
            </param>
        <summary>
              Returns a batched diagonal tensor with a given batched diagonal values.
            </summary>
        <returns>
              Rank `k+1`, with `output.shape = diagonal.shape + [diagonal.shape[-1]]`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given a `diagonal`, this operation returns a tensor with the `diagonal` and
              everything else padded with zeros. The diagonal is computed as follows:
              
              Assume `diagonal` has `k` dimensions `[I, J, K, ..., N]`, then the output is a
              tensor of rank `k+1` with dimensions [I, J, K, ..., N, N]` where:
              
              `output[i, j, k, ..., m, n] = 1{m=n} * diagonal[i, j, k, ..., n]`.
              
              For example:
              
              ```
              # 'diagonal' is [[1, 2, 3, 4], [5, 6, 7, 8]]
              
              and diagonal.shape = (2, 4)
              
              tf.matrix_diag(diagonal) ==&amp;gt; [[[1, 0, 0, 0]
                                                   [0, 2, 0, 0]
                                                   [0, 0, 3, 0]
                                                   [0, 0, 0, 4]],
                                                  [[5, 0, 0, 0]
                                                   [0, 6, 0, 0]
                                                   [0, 0, 7, 0]
                                                   [0, 0, 0, 8]]]
              
              which has shape (2, 4, 4)
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatrixDiagPart">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MatrixDiagPart (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MatrixDiagPart(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Rank `k` tensor where `k &amp;gt;= 2`.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MatrixDiagPart'.
            </param>
        <summary>
              Returns the batched diagonal part of a batched tensor.
            </summary>
        <returns>
              The extracted diagonal(s) having shape
              `diagonal.shape = input.shape[:-2] + [min(input.shape[-2:])]`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation returns a tensor with the `diagonal` part
              of the batched `input`. The `diagonal` part is computed as follows:
              
              Assume `input` has `k` dimensions `[I, J, K, ..., M, N]`, then the output is a
              tensor of rank `k - 1` with dimensions `[I, J, K, ..., min(M, N)]` where:
              
              `diagonal[i, j, k, ..., n] = input[i, j, k, ..., n, n]`.
              
              The input must be at least a matrix.
              
              For example:
              
              ```
              # 'input' is [[[1, 0, 0, 0]
                             [0, 2, 0, 0]
                             [0, 0, 3, 0]
                             [0, 0, 0, 4]],
                            [[5, 0, 0, 0]
                             [0, 6, 0, 0]
                             [0, 0, 7, 0]
                             [0, 0, 0, 8]]]
              
              and input.shape = (2, 4, 4)
              
              tf.matrix_diag_part(input) ==&amp;gt; [[1, 2, 3, 4], [5, 6, 7, 8]]
              
              which has shape (2, 4)
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatrixInverse">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MatrixInverse (TensorFlow.TFOutput input, Nullable&lt;bool&gt; adjoint = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MatrixInverse(valuetype TensorFlow.TFOutput input, valuetype System.Nullable`1&lt;bool&gt; adjoint, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="adjoint" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Shape is `[..., M, M]`.
            </param>
        <param name="adjoint">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MatrixInverse'.
            </param>
        <summary>
              Computes the inverse of one or more square invertible matrices or their
            </summary>
        <returns>
              Shape is `[..., M, M]`.
              
              @compatibility(numpy)
              Equivalent to np.linalg.inv
              @end_compatibility
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              adjoints (conjugate transposes).
              
              The input is a tensor of shape `[..., M, M]` whose inner-most 2 dimensions
              form square matrices. The output is a tensor of the same shape as the input
              containing the inverse for all input submatrices `[..., :, :]`.
              
              The op uses LU decomposition with partial pivoting to compute the inverses.
              
              If a matrix is not invertible there is no guarantee what the op does. It
              may detect the condition and raise an exception or it may simply return a
              garbage result.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatrixSetDiag">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MatrixSetDiag (TensorFlow.TFOutput input, TensorFlow.TFOutput diagonal, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MatrixSetDiag(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput diagonal, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="diagonal" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Rank `k+1`, where `k &amp;gt;= 1`.
            </param>
        <param name="diagonal">
              Rank `k`, where `k &amp;gt;= 1`.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MatrixSetDiag'.
            </param>
        <summary>
              Returns a batched matrix tensor with new batched diagonal values.
            </summary>
        <returns>
              Rank `k+1`, with `output.shape = input.shape`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given `input` and `diagonal`, this operation returns a tensor with the
              same shape and values as `input`, except for the main diagonal of the
              innermost matrices.  These will be overwritten by the values in `diagonal`.
              
              The output is computed as follows:
              
              Assume `input` has `k+1` dimensions `[I, J, K, ..., M, N]` and `diagonal` has
              `k` dimensions `[I, J, K, ..., min(M, N)]`.  Then the output is a
              tensor of rank `k+1` with dimensions `[I, J, K, ..., M, N]` where:
              
                * `output[i, j, k, ..., m, n] = diagonal[i, j, k, ..., n]` for `m == n`.
                * `output[i, j, k, ..., m, n] = input[i, j, k, ..., m, n]` for `m != n`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatrixSolve">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MatrixSolve (TensorFlow.TFOutput matrix, TensorFlow.TFOutput rhs, Nullable&lt;bool&gt; adjoint = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MatrixSolve(valuetype TensorFlow.TFOutput matrix, valuetype TensorFlow.TFOutput rhs, valuetype System.Nullable`1&lt;bool&gt; adjoint, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="TensorFlow.TFOutput" />
        <Parameter Name="rhs" Type="TensorFlow.TFOutput" />
        <Parameter Name="adjoint" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="matrix">
              Shape is `[..., M, M]`.
            </param>
        <param name="rhs">
              Shape is `[..., M, K]`.
            </param>
        <param name="adjoint">
              Optional argument
              Boolean indicating whether to solve with `matrix` or its (block-wise)
              adjoint.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MatrixSolve'.
            </param>
        <summary>
              Solves systems of linear equations.
            </summary>
        <returns>
              Shape is `[..., M, K]`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              `Matrix` is a tensor of shape `[..., M, M]` whose inner-most 2 dimensions
              form square matrices. `Rhs` is a tensor of shape `[..., M, K]`. The `output` is
              a tensor shape `[..., M, K]`.  If `adjoint` is `False` then each output matrix
              satisfies `matrix[..., :, :] * output[..., :, :] = rhs[..., :, :]`.
              If `adjoint` is `True` then each output matrix satisfies
              `adjoint(matrix[..., :, :]) * output[..., :, :] = rhs[..., :, :]`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatrixSolveLs">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MatrixSolveLs (TensorFlow.TFOutput matrix, TensorFlow.TFOutput rhs, TensorFlow.TFOutput l2_regularizer, Nullable&lt;bool&gt; fast = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MatrixSolveLs(valuetype TensorFlow.TFOutput matrix, valuetype TensorFlow.TFOutput rhs, valuetype TensorFlow.TFOutput l2_regularizer, valuetype System.Nullable`1&lt;bool&gt; fast, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="TensorFlow.TFOutput" />
        <Parameter Name="rhs" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2_regularizer" Type="TensorFlow.TFOutput" />
        <Parameter Name="fast" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="matrix">
              Shape is `[..., M, N]`.
            </param>
        <param name="rhs">
              Shape is `[..., M, K]`.
            </param>
        <param name="l2_regularizer">
              Scalar tensor.
              
              @compatibility(numpy)
              Equivalent to np.linalg.lstsq
              @end_compatibility
            </param>
        <param name="fast">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MatrixSolveLs'.
            </param>
        <summary>
              Solves one or more linear least-squares problems.
            </summary>
        <returns>
              Shape is `[..., N, K]`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              `matrix` is a tensor of shape `[..., M, N]` whose inner-most 2 dimensions
              form matrices of size `[M, N]`. Rhs is a tensor of shape `[..., M, K]`.
              The output is a tensor shape `[..., N, K]` where each output matrix solves
              each of the equations matrix[..., :, :] * output[..., :, :] = rhs[..., :, :]
              in the least squares sense.
              
              matrix and right-hand sides in the batch:
              
              `matrix`=\\(A \in \Re^{m \times n}\\),
              `rhs`=\\(B  \in \Re^{m \times k}\\),
              `output`=\\(X  \in \Re^{n \times k}\\),
              `l2_regularizer`=\\(\lambda\\).
              
              If `fast` is `True`, then the solution is computed by solving the normal
              equations using Cholesky decomposition. Specifically, if \\(m \ge n\\) then
              \\(X = (A^T A + \lambda I)^{-1} A^T B\\), which solves the least-squares
              problem \\(X = \mathrm{argmin}_{Z \in \Re^{n \times k} } ||A Z - B||_F^2 +
              \lambda ||Z||_F^2\\). If \\(m \lt n\\) then `output` is computed as
              \\(X = A^T (A A^T + \lambda I)^{-1} B\\), which (for \\(\lambda = 0\\)) is the
              minimum-norm solution to the under-determined linear system, i.e.
              \\(X = \mathrm{argmin}_{Z \in \Re^{n \times k} } ||Z||_F^2 \\), subject to
              \\(A Z = B\\). Notice that the fast path is only numerically stable when
              \\(A\\) is numerically full rank and has a condition number
              \\(\mathrm{cond}(A) \lt \frac{1}{\sqrt{\epsilon_{mach} } }\\) or\\(\lambda\\) is
              sufficiently large.
              
              If `fast` is `False` an algorithm based on the numerically robust complete
              orthogonal decomposition is used. This computes the minimum-norm
              least-squares solution, even when \\(A\\) is rank deficient. This path is
              typically 6-7 times slower than the fast path. If `fast` is `False` then
              `l2_regularizer` is ignored.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatrixTriangularSolve">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MatrixTriangularSolve (TensorFlow.TFOutput matrix, TensorFlow.TFOutput rhs, Nullable&lt;bool&gt; lower = null, Nullable&lt;bool&gt; adjoint = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MatrixTriangularSolve(valuetype TensorFlow.TFOutput matrix, valuetype TensorFlow.TFOutput rhs, valuetype System.Nullable`1&lt;bool&gt; lower, valuetype System.Nullable`1&lt;bool&gt; adjoint, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="TensorFlow.TFOutput" />
        <Parameter Name="rhs" Type="TensorFlow.TFOutput" />
        <Parameter Name="lower" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="adjoint" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="matrix">
              Shape is `[..., M, M]`.
            </param>
        <param name="rhs">
              Shape is `[..., M, K]`.
            </param>
        <param name="lower">
              Optional argument
              Boolean indicating whether the innermost matrices in `matrix` are
              lower or upper triangular.
            </param>
        <param name="adjoint">
              Optional argument
              Boolean indicating whether to solve with `matrix` or its (block-wise)
                       adjoint.
              
              @compatibility(numpy)
              Equivalent to np.linalg.triangular_solve
              @end_compatibility
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MatrixTriangularSolve'.
            </param>
        <summary>
              Solves systems of linear equations with upper or lower triangular matrices by
            </summary>
        <returns>
              Shape is `[..., M, K]`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              backsubstitution.
              
              `matrix` is a tensor of shape `[..., M, M]` whose inner-most 2 dimensions form
              square matrices. If `lower` is `True` then the strictly upper triangular part
              of each inner-most matrix is assumed to be zero and not accessed.
              If `lower` is False then the strictly lower triangular part of each inner-most
              matrix is assumed to be zero and not accessed.
              `rhs` is a tensor of shape `[..., M, K]`.
              
              The output is a tensor of shape `[..., M, K]`. If `adjoint` is
              `True` then the innermost matrices in output` satisfy matrix equations
              `matrix[..., :, :] * output[..., :, :] = rhs[..., :, :]`.
              If `adjoint` is `False` then the strictly then the  innermost matrices in
              `output` satisfy matrix equations
              `adjoint(matrix[..., i, k]) * output[..., k, j] = rhs[..., i, j]`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Max (TensorFlow.TFOutput input, TensorFlow.TFOutput reduction_indices, Nullable&lt;bool&gt; keep_dims = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Max(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput reduction_indices, valuetype System.Nullable`1&lt;bool&gt; keep_dims, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="reduction_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="keep_dims" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The tensor to reduce.
            </param>
        <param name="reduction_indices">
              The dimensions to reduce.
            </param>
        <param name="keep_dims">
              Optional argument
              If true, retain reduced dimensions with length 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Max'.
            </param>
        <summary>
              Computes the maximum of elements across dimensions of a tensor.
            </summary>
        <returns>
              The reduced tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Reduces `input` along the dimensions given in `reduction_indices`. Unless
              `keep_dims` is true, the rank of the tensor is reduced by 1 for each entry in
              `reduction_indices`. If `keep_dims` is true, the reduced dimensions are
              retained with length 1.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Maximum">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Maximum (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Maximum(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Maximum'.
            </param>
        <summary>
              Returns the max of x and y (i.e. x &amp;gt; y ? x : y) element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *NOTE*: `Maximum` supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPool">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MaxPool (TensorFlow.TFOutput input, long[] ksize, long[] strides, string padding, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MaxPool(valuetype TensorFlow.TFOutput input, int64[] ksize, int64[] strides, string padding, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksize" Type="System.Int64[]" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              4-D input to pool over.
            </param>
        <param name="ksize">
              The size of the window for each dimension of the input tensor.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of the
              input tensor.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              Specify the data format of the input and output data. With the
              default format "NHWC", the data is stored in the order of:
                  [batch, in_height, in_width, in_channels].
              Alternatively, the format could be "NCHW", the data storage order of:
                  [batch, in_channels, in_height, in_width].
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MaxPool'.
            </param>
        <summary>
              Performs max pooling on the input.
            </summary>
        <returns>
              The max pooled output tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPool3D">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MaxPool3D (TensorFlow.TFOutput input, long[] ksize, long[] strides, string padding, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MaxPool3D(valuetype TensorFlow.TFOutput input, int64[] ksize, int64[] strides, string padding, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksize" Type="System.Int64[]" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Shape `[batch, depth, rows, cols, channels]` tensor to pool over.
            </param>
        <param name="ksize">
              1-D tensor of length 5. The size of the window for each dimension of
              the input tensor. Must have `ksize[0] = ksize[4] = 1`.
            </param>
        <param name="strides">
              1-D tensor of length 5. The stride of the sliding window for each
              dimension of `input`. Must have `strides[0] = strides[4] = 1`.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              The data format of the input and output data. With the
              default format "NDHWC", the data is stored in the order of:
                  [batch, in_depth, in_height, in_width, in_channels].
              Alternatively, the format could be "NCDHW", the data storage order is:
                  [batch, in_channels, in_depth, in_height, in_width].
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MaxPool3D'.
            </param>
        <summary>
              Performs 3D max pooling on the input.
            </summary>
        <returns>
              The max pooled output tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPool3DGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MaxPool3DGrad (TensorFlow.TFOutput orig_input, TensorFlow.TFOutput orig_output, TensorFlow.TFOutput grad, long[] ksize, long[] strides, string padding, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MaxPool3DGrad(valuetype TensorFlow.TFOutput orig_input, valuetype TensorFlow.TFOutput orig_output, valuetype TensorFlow.TFOutput grad, int64[] ksize, int64[] strides, string padding, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orig_input" Type="TensorFlow.TFOutput" />
        <Parameter Name="orig_output" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksize" Type="System.Int64[]" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="orig_input">
              The original input tensor.
            </param>
        <param name="orig_output">
              The original output tensor.
            </param>
        <param name="grad">
              Output backprop of shape `[batch, depth, rows, cols, channels]`.
            </param>
        <param name="ksize">
              1-D tensor of length 5. The size of the window for each dimension of
              the input tensor. Must have `ksize[0] = ksize[4] = 1`.
            </param>
        <param name="strides">
              1-D tensor of length 5. The stride of the sliding window for each
              dimension of `input`. Must have `strides[0] = strides[4] = 1`.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              The data format of the input and output data. With the
              default format "NDHWC", the data is stored in the order of:
                  [batch, in_depth, in_height, in_width, in_channels].
              Alternatively, the format could be "NCDHW", the data storage order is:
                  [batch, in_channels, in_depth, in_height, in_width].
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MaxPool3DGrad'.
            </param>
        <summary>
              Computes gradients of max pooling function.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPool3DGradGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MaxPool3DGradGrad (TensorFlow.TFOutput orig_input, TensorFlow.TFOutput orig_output, TensorFlow.TFOutput grad, long[] ksize, long[] strides, string padding, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MaxPool3DGradGrad(valuetype TensorFlow.TFOutput orig_input, valuetype TensorFlow.TFOutput orig_output, valuetype TensorFlow.TFOutput grad, int64[] ksize, int64[] strides, string padding, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orig_input" Type="TensorFlow.TFOutput" />
        <Parameter Name="orig_output" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksize" Type="System.Int64[]" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="orig_input">
              The original input tensor.
            </param>
        <param name="orig_output">
              The original output tensor.
            </param>
        <param name="grad">
              Output backprop of shape `[batch, depth, rows, cols, channels]`.
            </param>
        <param name="ksize">
              1-D tensor of length 5. The size of the window for each dimension of
              the input tensor. Must have `ksize[0] = ksize[4] = 1`.
            </param>
        <param name="strides">
              1-D tensor of length 5. The stride of the sliding window for each
              dimension of `input`. Must have `strides[0] = strides[4] = 1`.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              The data format of the input and output data. With the
              default format "NDHWC", the data is stored in the order of:
                  [batch, in_depth, in_height, in_width, in_channels].
              Alternatively, the format could be "NCDHW", the data storage order is:
                  [batch, in_channels, in_depth, in_height, in_width].
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MaxPool3DGradGrad'.
            </param>
        <summary>
              Computes second-order gradients of the maxpooling function.
            </summary>
        <returns>
              Gradients of gradients w.r.t. the input to `max_pool`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPoolGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MaxPoolGrad (TensorFlow.TFOutput orig_input, TensorFlow.TFOutput orig_output, TensorFlow.TFOutput grad, long[] ksize, long[] strides, string padding, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MaxPoolGrad(valuetype TensorFlow.TFOutput orig_input, valuetype TensorFlow.TFOutput orig_output, valuetype TensorFlow.TFOutput grad, int64[] ksize, int64[] strides, string padding, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orig_input" Type="TensorFlow.TFOutput" />
        <Parameter Name="orig_output" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksize" Type="System.Int64[]" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="orig_input">
              The original input tensor.
            </param>
        <param name="orig_output">
              The original output tensor.
            </param>
        <param name="grad">
              4-D.  Gradients w.r.t. the output of `max_pool`.
            </param>
        <param name="ksize">
              The size of the window for each dimension of the input tensor.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of the
              input tensor.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              Specify the data format of the input and output data. With the
              default format "NHWC", the data is stored in the order of:
                  [batch, in_height, in_width, in_channels].
              Alternatively, the format could be "NCHW", the data storage order of:
                  [batch, in_channels, in_height, in_width].
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MaxPoolGrad'.
            </param>
        <summary>
              Computes gradients of the maxpooling function.
            </summary>
        <returns>
              Gradients w.r.t. the input to `max_pool`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPoolGradGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MaxPoolGradGrad (TensorFlow.TFOutput orig_input, TensorFlow.TFOutput orig_output, TensorFlow.TFOutput grad, long[] ksize, long[] strides, string padding, string data_format = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MaxPoolGradGrad(valuetype TensorFlow.TFOutput orig_input, valuetype TensorFlow.TFOutput orig_output, valuetype TensorFlow.TFOutput grad, int64[] ksize, int64[] strides, string padding, string data_format, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orig_input" Type="TensorFlow.TFOutput" />
        <Parameter Name="orig_output" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksize" Type="System.Int64[]" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="data_format" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="orig_input">
              The original input tensor.
            </param>
        <param name="orig_output">
              The original output tensor.
            </param>
        <param name="grad">
              4-D.  Gradients of gradients w.r.t. the input of `max_pool`.
            </param>
        <param name="ksize">
              The size of the window for each dimension of the input tensor.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of the
              input tensor.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="data_format">
              Optional argument
              Specify the data format of the input and output data. With the
              default format "NHWC", the data is stored in the order of:
                  [batch, in_height, in_width, in_channels].
              Alternatively, the format could be "NCHW", the data storage order of:
                  [batch, in_channels, in_height, in_width].
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MaxPoolGradGrad'.
            </param>
        <summary>
              Computes second-order gradients of the maxpooling function.
            </summary>
        <returns>
              Gradients of gradients w.r.t. the input to `max_pool`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPoolGradGradWithArgmax">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MaxPoolGradGradWithArgmax (TensorFlow.TFOutput input, TensorFlow.TFOutput grad, TensorFlow.TFOutput argmax, long[] ksize, long[] strides, string padding, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MaxPoolGradGradWithArgmax(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput argmax, int64[] ksize, int64[] strides, string padding, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="argmax" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksize" Type="System.Int64[]" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The original input.
            </param>
        <param name="grad">
              4-D with shape `[batch, height, width, channels]`.  Gradients w.r.t. the
              input of `max_pool`.
            </param>
        <param name="argmax">
              The indices of the maximum values chosen for each output of `max_pool`.
            </param>
        <param name="ksize">
              The size of the window for each dimension of the input tensor.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of the
              input tensor.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MaxPoolGradGradWithArgmax'.
            </param>
        <summary>
              Computes second-order gradients of the maxpooling function.
            </summary>
        <returns>
              Gradients of gradients w.r.t. the input of `max_pool`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPoolGradWithArgmax">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MaxPoolGradWithArgmax (TensorFlow.TFOutput input, TensorFlow.TFOutput grad, TensorFlow.TFOutput argmax, long[] ksize, long[] strides, string padding, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MaxPoolGradWithArgmax(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput argmax, int64[] ksize, int64[] strides, string padding, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="argmax" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksize" Type="System.Int64[]" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The original input.
            </param>
        <param name="grad">
              4-D with shape `[batch, height, width, channels]`.  Gradients w.r.t. the
              output of `max_pool`.
            </param>
        <param name="argmax">
              The indices of the maximum values chosen for each output of `max_pool`.
            </param>
        <param name="ksize">
              The size of the window for each dimension of the input tensor.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of the
              input tensor.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MaxPoolGradWithArgmax'.
            </param>
        <summary>
              Computes gradients of the maxpooling function.
            </summary>
        <returns>
              Gradients w.r.t. the input of `max_pool`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPoolWithArgmax">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; MaxPoolWithArgmax (TensorFlow.TFOutput input, long[] ksize, long[] strides, string padding, Nullable&lt;TensorFlow.TFDataType&gt; Targmax = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; MaxPoolWithArgmax(valuetype TensorFlow.TFOutput input, int64[] ksize, int64[] strides, string padding, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; Targmax, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksize" Type="System.Int64[]" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="Targmax" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              4-D with shape `[batch, height, width, channels]`.  Input to pool over.
            </param>
        <param name="ksize">
              The size of the window for each dimension of the input tensor.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of the
              input tensor.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="Targmax">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MaxPoolWithArgmax'.
            </param>
        <summary>
              Performs max pooling on the input and outputs both max values and indices.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output: The max pooled output tensor.
              argmax: 4-D.  The flattened indices of the max values chosen for each output.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              The indices in `argmax` are flattened, so that a maximum value at position
              `[b, y, x, c]` becomes flattened index
              `((b * height + y) * width + x) * channels + c`.
              
              The indices returned are always in `[0, height) x [0, width)` before flattening,
              even if padding is involved and the mathematically correct answer is outside
              (either negative or too large).  This is a bug, but fixing it is difficult to do
              in a safe backwards compatible way, especially due to flattening.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mean">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Mean (TensorFlow.TFOutput input, TensorFlow.TFOutput reduction_indices, Nullable&lt;bool&gt; keep_dims = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Mean(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput reduction_indices, valuetype System.Nullable`1&lt;bool&gt; keep_dims, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="reduction_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="keep_dims" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The tensor to reduce.
            </param>
        <param name="reduction_indices">
              The dimensions to reduce.
            </param>
        <param name="keep_dims">
              Optional argument
              If true, retain reduced dimensions with length 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Mean'.
            </param>
        <summary>
              Computes the mean of elements across dimensions of a tensor.
            </summary>
        <returns>
              The reduced tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Reduces `input` along the dimensions given in `reduction_indices`. Unless
              `keep_dims` is true, the rank of the tensor is reduced by 1 for each entry in
              `reduction_indices`. If `keep_dims` is true, the reduced dimensions are
              retained with length 1.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; Merge (TensorFlow.TFOutput[] inputs, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; Merge(valuetype TensorFlow.TFOutput[] inputs, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputs">
              The input tensors, exactly one of which will become available.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Merge'.
            </param>
        <summary>
              Forwards the value of an available tensor from `inputs` to `output`.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output: Will be set to the available input tensor.
              value_index: The index of the chosen input tensor in `inputs`.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              `Merge` waits for at least one of the tensors in `inputs` to become available.
              It is usually combined with `Switch` to implement branching.
              
              `Merge` forwards the first tensor to become available to `output`, and sets
              `value_index` to its index in `inputs`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MergeSummary">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MergeSummary (TensorFlow.TFOutput[] inputs, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MergeSummary(valuetype TensorFlow.TFOutput[] inputs, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputs">
              Can be of any shape.  Each must contain serialized `Summary` protocol
              buffers.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MergeSummary'.
            </param>
        <summary>
              Merges summaries.
            </summary>
        <returns>
              Scalar. Serialized `Summary` protocol buffer.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op creates a
              [`Summary`](https://www.tensorflow.org/code/tensorflow/core/framework/summary.proto)
              protocol buffer that contains the union of all the values in the input
              summaries.
              
              When the Op is run, it reports an `InvalidArgument` error if multiple values
              in the summaries to merge use the same tag.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MergeV2Checkpoints">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation MergeV2Checkpoints (TensorFlow.TFOutput checkpoint_prefixes, TensorFlow.TFOutput destination_prefix, Nullable&lt;bool&gt; delete_old_dirs = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation MergeV2Checkpoints(valuetype TensorFlow.TFOutput checkpoint_prefixes, valuetype TensorFlow.TFOutput destination_prefix, valuetype System.Nullable`1&lt;bool&gt; delete_old_dirs, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="checkpoint_prefixes" Type="TensorFlow.TFOutput" />
        <Parameter Name="destination_prefix" Type="TensorFlow.TFOutput" />
        <Parameter Name="delete_old_dirs" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="checkpoint_prefixes">
              prefixes of V2 checkpoints to merge.
            </param>
        <param name="destination_prefix">
              scalar.  The desired final prefix.  Allowed to be the same
              as one of the checkpoint_prefixes.
            </param>
        <param name="delete_old_dirs">
              Optional argument
              see above.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MergeV2Checkpoints'.
            </param>
        <summary>
              V2 format specific: merges the metadata files of sharded checkpoints.  The
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              result is one logical checkpoint, with one physical metadata file and renamed
              data files.
              
              Intended for "grouping" multiple checkpoints in a sharded checkpoint setup.
              
              If delete_old_dirs is true, attempts to delete recursively the dirname of each
              path in the input checkpoint_prefixes.  This is useful when those paths are non
              user-facing temporary locations.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mfcc">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Mfcc (TensorFlow.TFOutput spectrogram, TensorFlow.TFOutput sample_rate, Nullable&lt;float&gt; upper_frequency_limit = null, Nullable&lt;float&gt; lower_frequency_limit = null, Nullable&lt;long&gt; filterbank_channel_count = null, Nullable&lt;long&gt; dct_coefficient_count = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Mfcc(valuetype TensorFlow.TFOutput spectrogram, valuetype TensorFlow.TFOutput sample_rate, valuetype System.Nullable`1&lt;float32&gt; upper_frequency_limit, valuetype System.Nullable`1&lt;float32&gt; lower_frequency_limit, valuetype System.Nullable`1&lt;int64&gt; filterbank_channel_count, valuetype System.Nullable`1&lt;int64&gt; dct_coefficient_count, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spectrogram" Type="TensorFlow.TFOutput" />
        <Parameter Name="sample_rate" Type="TensorFlow.TFOutput" />
        <Parameter Name="upper_frequency_limit" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="lower_frequency_limit" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="filterbank_channel_count" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="dct_coefficient_count" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="spectrogram">
              Typically produced by the Spectrogram op, with magnitude_squared
              set to true.
            </param>
        <param name="sample_rate">
              How many samples per second the source audio used.
            </param>
        <param name="upper_frequency_limit">
              Optional argument
              The highest frequency to use when calculating the
              ceptstrum.
            </param>
        <param name="lower_frequency_limit">
              Optional argument
              The lowest frequency to use when calculating the
              ceptstrum.
            </param>
        <param name="filterbank_channel_count">
              Optional argument
              Resolution of the Mel bank used internally.
            </param>
        <param name="dct_coefficient_count">
              Optional argument
              How many output channels to produce per time slice.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Mfcc'.
            </param>
        <summary>
              Transforms a spectrogram into a form that's useful for speech recognition.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Mel Frequency Cepstral Coefficients are a way of representing audio data that's
              been effective as an input feature for machine learning. They are created by
              taking the spectrum of a spectrogram (a 'cepstrum'), and discarding some of the
              higher frequencies that are less significant to the human ear. They have a long
              history in the speech recognition world, and https://en.wikipedia.org/wiki/Mel-frequency_cepstrum
              is a good resource to learn more.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Min (TensorFlow.TFOutput input, TensorFlow.TFOutput reduction_indices, Nullable&lt;bool&gt; keep_dims = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Min(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput reduction_indices, valuetype System.Nullable`1&lt;bool&gt; keep_dims, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="reduction_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="keep_dims" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The tensor to reduce.
            </param>
        <param name="reduction_indices">
              The dimensions to reduce.
            </param>
        <param name="keep_dims">
              Optional argument
              If true, retain reduced dimensions with length 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Min'.
            </param>
        <summary>
              Computes the minimum of elements across dimensions of a tensor.
            </summary>
        <returns>
              The reduced tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Reduces `input` along the dimensions given in `reduction_indices`. Unless
              `keep_dims` is true, the rank of the tensor is reduced by 1 for each entry in
              `reduction_indices`. If `keep_dims` is true, the reduced dimensions are
              retained with length 1.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minimum">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Minimum (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Minimum(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Minimum'.
            </param>
        <summary>
              Returns the min of x and y (i.e. x &amp;lt; y ? x : y) element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *NOTE*: `Minimum` supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MirrorPad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MirrorPad (TensorFlow.TFOutput input, TensorFlow.TFOutput paddings, string mode, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MirrorPad(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput paddings, string mode, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="paddings" Type="TensorFlow.TFOutput" />
        <Parameter Name="mode" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The input tensor to be padded.
            </param>
        <param name="paddings">
              A two-column matrix specifying the padding sizes. The number of
              rows must be the same as the rank of `input`.
            </param>
        <param name="mode">
              Either `REFLECT` or `SYMMETRIC`. In reflect mode the padded regions
              do not include the borders, while in symmetric mode the padded regions
              do include the borders. For example, if `input` is `[1, 2, 3]` and `paddings`
              is `[0, 2]`, then the output is `[1, 2, 3, 2, 1]` in reflect mode, and
              it is `[1, 2, 3, 3, 2]` in symmetric mode.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MirrorPad'.
            </param>
        <summary>
              Pads a tensor with mirrored values.
            </summary>
        <returns>
              The padded tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation pads a `input` with mirrored values according to the `paddings`
              you specify. `paddings` is an integer tensor with shape `[n, 2]`, where n is
              the rank of `input`. For each dimension D of `input`, `paddings[D, 0]` indicates
              how many values to add before the contents of `input` in that dimension, and
              `paddings[D, 1]` indicates how many values to add after the contents of `input`
              in that dimension. Both `paddings[D, 0]` and `paddings[D, 1]` must be no greater
              than `input.dim_size(D)` (or `input.dim_size(D) - 1`) if `copy_border` is true
              (if false, respectively).
              
              The padded size of each dimension D of the output is:
              
              `paddings(D, 0) + input.dim_size(D) + paddings(D, 1)`
              
              For example:
              
              ```
              # 't' is [[1, 2, 3], [4, 5, 6]].
              # 'paddings' is [[1, 1]], [2, 2]].
              # 'mode' is SYMMETRIC.
              # rank of 't' is 2.
              pad(t, paddings) ==&amp;gt; [[2, 1, 1, 2, 3, 3, 2]
                                    [2, 1, 1, 2, 3, 3, 2]
                                    [5, 4, 4, 5, 6, 6, 5]
                                    [5, 4, 4, 5, 6, 6, 5]]
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MirrorPadGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MirrorPadGrad (TensorFlow.TFOutput input, TensorFlow.TFOutput paddings, string mode, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MirrorPadGrad(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput paddings, string mode, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="paddings" Type="TensorFlow.TFOutput" />
        <Parameter Name="mode" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The input tensor to be folded.
            </param>
        <param name="paddings">
              A two-column matrix specifying the padding sizes. The number of
              rows must be the same as the rank of `input`.
            </param>
        <param name="mode">
              The mode used in the `MirrorPad` op.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MirrorPadGrad'.
            </param>
        <summary>
              Gradient op for `MirrorPad` op. This op folds a mirror-padded tensor.
            </summary>
        <returns>
              The folded tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation folds the padded areas of `input` by `MirrorPad` according to the
              `paddings` you specify. `paddings` must be the same as `paddings` argument
              given to the corresponding `MirrorPad` op.
              
              The folded size of each dimension D of the output is:
              
              `input.dim_size(D) - paddings(D, 0) - paddings(D, 1)`
              
              For example:
              
              ```
              # 't' is [[1, 2, 3], [4, 5, 6], [7, 8, 9]].
              # 'paddings' is [[0, 1]], [0, 1]].
              # 'mode' is SYMMETRIC.
              # rank of 't' is 2.
              pad(t, paddings) ==&amp;gt; [[ 1,  5]
                                    [11, 28]]
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mod">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Mod (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Mod(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Mod'.
            </param>
        <summary>
              Returns element-wise remainder of division. This emulates C semantics in that
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              the result here is consistent with a truncating divide. E.g. `truncate(x / y) *
              y + truncate_mod(x, y) = x`.
              
              *NOTE*: `Mod` supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Mul (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Mul(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Mul'.
            </param>
        <summary>
              Returns x * y element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *NOTE*: `Mul` supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Multinomial">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Multinomial (TensorFlow.TFOutput logits, TensorFlow.TFOutput num_samples, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Multinomial(valuetype TensorFlow.TFOutput logits, valuetype TensorFlow.TFOutput num_samples, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logits" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_samples" Type="TensorFlow.TFOutput" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logits">
              2-D Tensor with shape `[batch_size, num_classes]`.  Each slice `[i, :]`
              represents the unnormalized log probabilities for all classes.
            </param>
        <param name="num_samples">
              0-D.  Number of independent samples to draw for each row slice.
            </param>
        <param name="seed">
              Optional argument
              If either seed or seed2 is set to be non-zero, the internal random number
              generator is seeded by the given seed.  Otherwise, a random seed is used.
            </param>
        <param name="seed2">
              Optional argument
              A second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Multinomial'.
            </param>
        <summary>
              Draws samples from a multinomial distribution.
            </summary>
        <returns>
              2-D Tensor with shape `[batch_size, num_samples]`.  Each slice `[i, :]`
              contains the drawn class labels with range `[0, num_classes)`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MutableDenseHashTableV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MutableDenseHashTableV2 (TensorFlow.TFOutput empty_key, TensorFlow.TFDataType value_dtype, string container = null, string shared_name = null, Nullable&lt;bool&gt; use_node_name_sharing = null, TensorFlow.TFShape value_shape = null, Nullable&lt;long&gt; initial_num_buckets = null, Nullable&lt;float&gt; max_load_factor = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MutableDenseHashTableV2(valuetype TensorFlow.TFOutput empty_key, valuetype TensorFlow.TFDataType value_dtype, string container, string shared_name, valuetype System.Nullable`1&lt;bool&gt; use_node_name_sharing, class TensorFlow.TFShape value_shape, valuetype System.Nullable`1&lt;int64&gt; initial_num_buckets, valuetype System.Nullable`1&lt;float32&gt; max_load_factor, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="empty_key" Type="TensorFlow.TFOutput" />
        <Parameter Name="value_dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="use_node_name_sharing" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="value_shape" Type="TensorFlow.TFShape" />
        <Parameter Name="initial_num_buckets" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="max_load_factor" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="empty_key">
              The key used to represent empty key buckets internally. Must not
              be used in insert or lookup operations.
            </param>
        <param name="value_dtype">
              Type of the table values.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this table is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this table is shared under the given name across
              multiple sessions.
            </param>
        <param name="use_node_name_sharing">
              Optional argument
            </param>
        <param name="value_shape">
              Optional argument
              The shape of each value.
            </param>
        <param name="initial_num_buckets">
              Optional argument
              The initial number of hash table buckets. Must be a power
              to 2.
            </param>
        <param name="max_load_factor">
              Optional argument
              The maximum ratio between number of entries and number of
              buckets before growing the table. Must be between 0 and 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MutableDenseHashTableV2'.
            </param>
        <summary>
              Creates an empty hash table that uses tensors as the backing store.
            </summary>
        <returns>
              Handle to a table.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              It uses "open addressing" with quadratic reprobing to resolve
              collisions.
              
              This op creates a mutable hash table, specifying the type of its keys and
              values. Each value must be a scalar. Data can be inserted into the table using
              the insert operations. It does not support the initialization operation.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MutableHashTableOfTensorsV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MutableHashTableOfTensorsV2 (TensorFlow.TFDataType key_dtype, TensorFlow.TFDataType value_dtype, string container = null, string shared_name = null, Nullable&lt;bool&gt; use_node_name_sharing = null, TensorFlow.TFShape value_shape = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MutableHashTableOfTensorsV2(valuetype TensorFlow.TFDataType key_dtype, valuetype TensorFlow.TFDataType value_dtype, string container, string shared_name, valuetype System.Nullable`1&lt;bool&gt; use_node_name_sharing, class TensorFlow.TFShape value_shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key_dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="value_dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="use_node_name_sharing" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="value_shape" Type="TensorFlow.TFShape" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key_dtype">
              Type of the table keys.
            </param>
        <param name="value_dtype">
              Type of the table values.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this table is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this table is shared under the given name across
              multiple sessions.
            </param>
        <param name="use_node_name_sharing">
              Optional argument
            </param>
        <param name="value_shape">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MutableHashTableOfTensorsV2'.
            </param>
        <summary>
              Creates an empty hash table.
            </summary>
        <returns>
              Handle to a table.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op creates a mutable hash table, specifying the type of its keys and
              values. Each value must be a vector. Data can be inserted into the table using
              the insert operations. It does not support the initialization operation.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MutableHashTableV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput MutableHashTableV2 (TensorFlow.TFDataType key_dtype, TensorFlow.TFDataType value_dtype, string container = null, string shared_name = null, Nullable&lt;bool&gt; use_node_name_sharing = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput MutableHashTableV2(valuetype TensorFlow.TFDataType key_dtype, valuetype TensorFlow.TFDataType value_dtype, string container, string shared_name, valuetype System.Nullable`1&lt;bool&gt; use_node_name_sharing, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key_dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="value_dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="use_node_name_sharing" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key_dtype">
              Type of the table keys.
            </param>
        <param name="value_dtype">
              Type of the table values.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this table is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this table is shared under the given name across
              multiple sessions.
            </param>
        <param name="use_node_name_sharing">
              Optional argument
              If true and shared_name is empty, the table is shared
              using the node name.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'MutableHashTableV2'.
            </param>
        <summary>
              Creates an empty hash table.
            </summary>
        <returns>
              Handle to a table.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op creates a mutable hash table, specifying the type of its keys and
              values. Each value must be a scalar. Data can be inserted into the table using
              the insert operations. It does not support the initialization operation.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Neg">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Neg (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Neg(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Neg'.
            </param>
        <summary>
              Computes numerical negative value element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              I.e., \\(y = -x\\).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextIteration">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput NextIteration (TensorFlow.TFOutput data, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput NextIteration(valuetype TensorFlow.TFOutput data, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
              The tensor to be made available to the next iteration.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'NextIteration'.
            </param>
        <summary>
              Makes its input available to the next iteration.
            </summary>
        <returns>
              The same tensor as `data`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NonMaxSuppression">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput NonMaxSuppression (TensorFlow.TFOutput boxes, TensorFlow.TFOutput scores, TensorFlow.TFOutput max_output_size, Nullable&lt;float&gt; iou_threshold = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput NonMaxSuppression(valuetype TensorFlow.TFOutput boxes, valuetype TensorFlow.TFOutput scores, valuetype TensorFlow.TFOutput max_output_size, valuetype System.Nullable`1&lt;float32&gt; iou_threshold, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="boxes" Type="TensorFlow.TFOutput" />
        <Parameter Name="scores" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_output_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="iou_threshold" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="boxes">
              A 2-D float tensor of shape `[num_boxes, 4]`.
            </param>
        <param name="scores">
              A 1-D float tensor of shape `[num_boxes]` representing a single
              score corresponding to each box (each row of boxes).
            </param>
        <param name="max_output_size">
              A scalar integer tensor representing the maximum number of
              boxes to be selected by non max suppression.
            </param>
        <param name="iou_threshold">
              Optional argument
              A float representing the threshold for deciding whether boxes
              overlap too much with respect to IOU.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'NonMaxSuppression'.
            </param>
        <summary>
              Greedily selects a subset of bounding boxes in descending order of score,
            </summary>
        <returns>
              A 1-D integer tensor of shape `[M]` representing the selected
              indices from the boxes tensor, where `M &amp;lt;= max_output_size`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              pruning away boxes that have high intersection-over-union (IOU) overlap
              with previously selected boxes.  Bounding boxes are supplied as
              [y1, x1, y2, x2], where (y1, x1) and (y2, x2) are the coordinates of any
              diagonal pair of box corners and the coordinates can be provided as normalized
              (i.e., lying in the interval [0, 1]) or absolute.  Note that this algorithm
              is agnostic to where the origin is in the coordinate system.  Note that this
              algorithm is invariant to orthogonal transformations and translations
              of the coordinate system; thus translating or reflections of the coordinate
              system result in the same boxes being selected by the algorithm.
              The output of this operation is a set of integers indexing into the input
              collection of bounding boxes representing the selected boxes.  The bounding
              box coordinates corresponding to the selected indices can then be obtained
              using the `tf.gather operation`.  For example:
                selected_indices = tf.image.non_max_suppression(
                    boxes, scores, max_output_size, iou_threshold)
                selected_boxes = tf.gather(boxes, selected_indices)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="NonMaxSuppressionV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput NonMaxSuppressionV2 (TensorFlow.TFOutput boxes, TensorFlow.TFOutput scores, TensorFlow.TFOutput max_output_size, TensorFlow.TFOutput iou_threshold, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput NonMaxSuppressionV2(valuetype TensorFlow.TFOutput boxes, valuetype TensorFlow.TFOutput scores, valuetype TensorFlow.TFOutput max_output_size, valuetype TensorFlow.TFOutput iou_threshold, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="boxes" Type="TensorFlow.TFOutput" />
        <Parameter Name="scores" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_output_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="iou_threshold" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="boxes">
              A 2-D float tensor of shape `[num_boxes, 4]`.
            </param>
        <param name="scores">
              A 1-D float tensor of shape `[num_boxes]` representing a single
              score corresponding to each box (each row of boxes).
            </param>
        <param name="max_output_size">
              A scalar integer tensor representing the maximum number of
              boxes to be selected by non max suppression.
            </param>
        <param name="iou_threshold">
              A 0-D float tensor representing the threshold for deciding whether
              boxes overlap too much with respect to IOU.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'NonMaxSuppressionV2'.
            </param>
        <summary>
              Greedily selects a subset of bounding boxes in descending order of score,
            </summary>
        <returns>
              A 1-D integer tensor of shape `[M]` representing the selected
              indices from the boxes tensor, where `M &amp;lt;= max_output_size`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              pruning away boxes that have high intersection-over-union (IOU) overlap
              with previously selected boxes.  Bounding boxes are supplied as
              [y1, x1, y2, x2], where (y1, x1) and (y2, x2) are the coordinates of any
              diagonal pair of box corners and the coordinates can be provided as normalized
              (i.e., lying in the interval [0, 1]) or absolute.  Note that this algorithm
              is agnostic to where the origin is in the coordinate system.  Note that this
              algorithm is invariant to orthogonal transformations and translations
              of the coordinate system; thus translating or reflections of the coordinate
              system result in the same boxes being selected by the algorithm.
              
              The output of this operation is a set of integers indexing into the input
              collection of bounding boxes representing the selected boxes.  The bounding
              box coordinates corresponding to the selected indices can then be obtained
              using the `tf.gather operation`.  For example:
              
                selected_indices = tf.image.non_max_suppression_v2(
                    boxes, scores, max_output_size, iou_threshold)
                selected_boxes = tf.gather(boxes, selected_indices)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="NoOp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation NoOp (string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation NoOp(string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'NoOp'.
            </param>
        <summary>
              Does nothing. Only useful as a placeholder for control edges.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NotEqual">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput NotEqual (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput NotEqual(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'NotEqual'.
            </param>
        <summary>
              Returns the truth value of (x != y) element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *NOTE*: `NotEqual` supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="OneHot">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput OneHot (TensorFlow.TFOutput indices, TensorFlow.TFOutput depth, TensorFlow.TFOutput on_value, TensorFlow.TFOutput off_value, Nullable&lt;long&gt; axis = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput OneHot(valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput depth, valuetype TensorFlow.TFOutput on_value, valuetype TensorFlow.TFOutput off_value, valuetype System.Nullable`1&lt;int64&gt; axis, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="depth" Type="TensorFlow.TFOutput" />
        <Parameter Name="on_value" Type="TensorFlow.TFOutput" />
        <Parameter Name="off_value" Type="TensorFlow.TFOutput" />
        <Parameter Name="axis" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="indices">
              A tensor of indices.
            </param>
        <param name="depth">
              A scalar defining the depth of the one hot dimension.
            </param>
        <param name="on_value">
              A scalar defining the value to fill in output when `indices[j] = i`.
            </param>
        <param name="off_value">
              A scalar defining the value to fill in output when `indices[j] != i`.
            </param>
        <param name="axis">
              Optional argument
              The axis to fill (default: -1, a new inner-most axis).
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'OneHot'.
            </param>
        <summary>
              Returns a one-hot tensor.
            </summary>
        <returns>
              The one-hot tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The locations represented by indices in `indices` take value `on_value`,
              while all other locations take value `off_value`.
              
              If the input `indices` is rank `N`, the output will have rank `N+1`,
              The new axis is created at dimension `axis` (default: the new axis is
              appended at the end).
              
              If `indices` is a scalar the output shape will be a vector of length `depth`.
              
              If `indices` is a vector of length `features`, the output shape will be:
              ```
                features x depth if axis == -1
                depth x features if axis == 0
              ```
              
              If `indices` is a matrix (batch) with shape `[batch, features]`,
              the output shape will be:
              ```
                batch x features x depth if axis == -1
                batch x depth x features if axis == 1
                depth x batch x features if axis == 0
              ```
              
              
              Examples
              =========
              
              Suppose that
              
              ```
                indices = [0, 2, -1, 1]
                depth = 3
                on_value = 5.0
                off_value = 0.0
                axis = -1
              ```
              
              Then output is `[4 x 3]`:
              
                  ```output =
                    [5.0 0.0 0.0]  // one_hot(0)
                    [0.0 0.0 5.0]  // one_hot(2)
                    [0.0 0.0 0.0]  // one_hot(-1)
                    [0.0 5.0 0.0]  // one_hot(1)
                  ```
              
              Suppose that
              
              ```
                indices = [0, 2, -1, 1]
                depth = 3
                on_value = 0.0
                off_value = 3.0
                axis = 0
              ```
              
              Then output is `[3 x 4]`:
              
                  ```output =
                    [0.0 3.0 3.0 3.0]
                    [3.0 3.0 3.0 0.0]
                    [3.0 3.0 3.0 3.0]
                    [3.0 0.0 3.0 3.0]
                  //  ^                one_hot(0)
                  //      ^            one_hot(2)
                  //          ^        one_hot(-1)
                  //              ^    one_hot(1)
                  ```
              Suppose that
              
              ```
                indices = [[0, 2], [1, -1]]
                depth = 3
                on_value = 1.0
                off_value = 0.0
                axis = -1
              ```
              
              Then output is `[2 x 2 x 3]`:
              
                  ```output =
                    [
                      [1.0, 0.0, 0.0]  // one_hot(0)
                      [0.0, 0.0, 1.0]  // one_hot(2)
                    ][
                      [0.0, 1.0, 0.0]  // one_hot(1)
                      [0.0, 0.0, 0.0]  // one_hot(-1)
                    ]```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnesLike">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput OnesLike (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput OnesLike(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
              a tensor of type T.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'OnesLike'.
            </param>
        <summary>
              Returns a tensor of ones with the same shape and type as x.
            </summary>
        <returns>
              a tensor of the same shape and type as x but filled with ones.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderedMapClear">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation OrderedMapClear (TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation OrderedMapClear(valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'OrderedMapClear'.
            </param>
        <summary>
              Op removes all elements in the underlying container.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderedMapIncompleteSize">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput OrderedMapIncompleteSize (TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput OrderedMapIncompleteSize(valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'OrderedMapIncompleteSize'.
            </param>
        <summary>
              Op returns the number of incomplete elements in the underlying container.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderedMapPeek">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] OrderedMapPeek (TensorFlow.TFOutput key, TensorFlow.TFOutput indices, TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] OrderedMapPeek(valuetype TensorFlow.TFOutput key, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">
        </param>
        <param name="indices">
        </param>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'OrderedMapPeek'.
            </param>
        <summary>
              Op peeks at the values at the specified key.  If the
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              underlying container does not contain this key
              this op will block until it does.   This Op is optimized for
              performance.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderedMapSize">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput OrderedMapSize (TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput OrderedMapSize(valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'OrderedMapSize'.
            </param>
        <summary>
              Op returns the number of elements in the underlying container.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderedMapStage">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation OrderedMapStage (TensorFlow.TFOutput key, TensorFlow.TFOutput indices, TensorFlow.TFOutput[] values, TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation OrderedMapStage(valuetype TensorFlow.TFOutput key, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput[] values, valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="values" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">
              int64
            </param>
        <param name="indices">
        </param>
        <param name="values">
              a list of tensors
              dtypes A list of data types that inserted values should adhere to.
            </param>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
              Maximum number of elements in the Staging Area. If &amp;gt; 0, inserts
              on the container will block when the capacity is reached.
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
              If non-empty, this queue is placed in the given container. Otherwise,
              a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              It is necessary to match this name to the matching Unstage Op.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'OrderedMapStage'.
            </param>
        <summary>
              Stage (key, values) in the underlying container which behaves like a ordered
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              associative container.   Elements are ordered by key.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderedMapUnstage">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] OrderedMapUnstage (TensorFlow.TFOutput key, TensorFlow.TFOutput indices, TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] OrderedMapUnstage(valuetype TensorFlow.TFOutput key, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">
        </param>
        <param name="indices">
        </param>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'OrderedMapUnstage'.
            </param>
        <summary>
              Op removes and returns the values associated with the key
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              from the underlying container.   If the underlying container
              does not contain this key, the op will block until it does.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderedMapUnstageNoKey">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput[]&gt; OrderedMapUnstageNoKey (TensorFlow.TFOutput indices, TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput[]&gt; OrderedMapUnstageNoKey(valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput[]&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="indices">
        </param>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'OrderedMapUnstageNoKey'.
            </param>
        <summary>
              Op removes and returns the (key, value) element with the smallest
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              key: 
              values: 
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              key from the underlying container.   If the underlying container
              does not contain elements, the op will block until it does.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pack">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Pack (TensorFlow.TFOutput[] values, Nullable&lt;long&gt; axis = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Pack(valuetype TensorFlow.TFOutput[] values, valuetype System.Nullable`1&lt;int64&gt; axis, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="axis" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="values">
              Must be of same shape and type.
            </param>
        <param name="axis">
              Optional argument
              Dimension along which to pack.  Negative values wrap around, so the
              valid range is `[-(R+1), R+1)`.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Pack'.
            </param>
        <summary>
              Packs a list of `N` rank-`R` tensors into one rank-`(R+1)` tensor.
            </summary>
        <returns>
              The packed tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Packs the `N` tensors in `values` into a tensor with rank one higher than each
              tensor in `values`, by packing them along the `axis` dimension.
              Given a list of tensors of shape `(A, B, C)`;
              
              if `axis == 0` then the `output` tensor will have the shape `(N, A, B, C)`.
              if `axis == 1` then the `output` tensor will have the shape `(A, N, B, C)`.
              Etc.
              
              For example:
              
              ```
              # 'x' is [1, 4]
              # 'y' is [2, 5]
              # 'z' is [3, 6]
              pack([x, y, z]) =&amp;gt; [[1, 4], [2, 5], [3, 6]]  # Pack along first dim.
              pack([x, y, z], axis=1) =&amp;gt; [[1, 2, 3], [4, 5, 6]]
              ```
              
              This is the opposite of `unpack`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Pad (TensorFlow.TFOutput input, TensorFlow.TFOutput paddings, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Pad(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput paddings, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="paddings" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="paddings">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Pad'.
            </param>
        <summary>
              Pads a tensor with zeros.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation pads a `input` with zeros according to the `paddings` you
              specify. `paddings` is an integer tensor with shape `[Dn, 2]`, where n is the
              rank of `input`. For each dimension D of `input`, `paddings[D, 0]` indicates
              how many zeros to add before the contents of `input` in that dimension, and
              `paddings[D, 1]` indicates how many zeros to add after the contents of `input`
              in that dimension.
              
              The padded size of each dimension D of the output is:
              
              `paddings(D, 0) + input.dim_size(D) + paddings(D, 1)`
              
              For example:
              
              ```
              # 't' is [[1, 1], [2, 2]]
              # 'paddings' is [[1, 1], [2, 2]]
              # rank of 't' is 2
              pad(t, paddings) ==&amp;gt; [[0, 0, 0, 0, 0, 0]
                                    [0, 0, 1, 1, 0, 0]
                                    [0, 0, 2, 2, 0, 0]
                                    [0, 0, 0, 0, 0, 0]]
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddedBatchDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput PaddedBatchDataset (TensorFlow.TFOutput input_dataset, TensorFlow.TFOutput batch_size, TensorFlow.TFOutput[] padded_shapes, TensorFlow.TFOutput[] padding_values, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput PaddedBatchDataset(valuetype TensorFlow.TFOutput input_dataset, valuetype TensorFlow.TFOutput batch_size, valuetype TensorFlow.TFOutput[] padded_shapes, valuetype TensorFlow.TFOutput[] padding_values, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_dataset" Type="TensorFlow.TFOutput" />
        <Parameter Name="batch_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="padded_shapes" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="padding_values" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_dataset">
        </param>
        <param name="batch_size">
              A scalar representing the number of elements to accumulate in a
              batch.
            </param>
        <param name="padded_shapes">
              A list of int64 tensors representing the desired padded shapes
              of the corresponding output components. These shapes may be partially
              specified, using `-1` to indicate that a particular dimension should be
              padded to the maximum size of all batch elements.
            </param>
        <param name="padding_values">
              A list of scalars containing the padding value to use for
              each of the outputs.
            </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'PaddedBatchDataset'.
            </param>
        <summary>
              Creates a dataset that batches and pads `batch_size` elements from the input.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddingFIFOQueueV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput PaddingFIFOQueueV2 (TensorFlow.TFDataType[] component_types, TensorFlow.TFShape[] shapes = null, Nullable&lt;long&gt; capacity = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput PaddingFIFOQueueV2(valuetype TensorFlow.TFDataType[] component_types, class TensorFlow.TFShape[] shapes, valuetype System.Nullable`1&lt;int64&gt; capacity, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="component_types">
              The type of each component in a value.
            </param>
        <param name="shapes">
              Optional argument
              The shape of each component in a value. The length of this attr must
              be either 0 or the same as the length of component_types.
              Shapes of fixed rank but variable size are allowed by setting
              any shape dimension to -1.  In this case, the inputs' shape may vary along
              the given dimension, and DequeueMany will pad the given dimension with
              zeros up to the maximum shape of all elements in the given batch.
              If the length of this attr is 0, different queue elements may have
              different ranks and shapes, but only one element may be dequeued at a time.
            </param>
        <param name="capacity">
              Optional argument
              The upper bound on the number of elements in this queue.
              Negative numbers mean no limit.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this queue is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this queue will be shared under the given name
              across multiple sessions.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'PaddingFIFOQueueV2'.
            </param>
        <summary>
              A queue that produces elements in first-in first-out order.
            </summary>
        <returns>
              The handle to the queue.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Variable-size shapes are allowed by setting the corresponding shape dimensions
              to 0 in the shape attr.  In this case DequeueMany will pad up to the maximum
              size of any given element in the minibatch.  See below for details.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParallelConcat">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ParallelConcat (TensorFlow.TFOutput[] values, TensorFlow.TFShape shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ParallelConcat(valuetype TensorFlow.TFOutput[] values, class TensorFlow.TFShape shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="shape" Type="TensorFlow.TFShape" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="values">
              Tensors to be concatenated. All must have size 1 in the first dimension
              and same shape.
            </param>
        <param name="shape">
              the final shape of the result; should be equal to the shapes of any input
              but with the number of input values in the first dimension.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ParallelConcat'.
            </param>
        <summary>
              Concatenates a list of `N` tensors along the first dimension.
            </summary>
        <returns>
              The concatenated tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The input tensors are all required to have size 1 in the first dimension.
              
              For example:
              
              ```
              # 'x' is [[1, 4]]
              # 'y' is [[2, 5]]
              # 'z' is [[3, 6]]
              parallel_concat([x, y, z]) =&amp;gt; [[1, 4], [2, 5], [3, 6]]  # Pack along first dim.
              ```
              
              The difference between concat and parallel_concat is that concat requires all
              of the inputs be computed before the operation will begin but doesn't require
              that the input shapes be known during graph construction.  Parallel concat
              will copy pieces of the input into the output as they become available, in
              some situations this can provide a performance benefit.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParameterizedTruncatedNormal">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ParameterizedTruncatedNormal (TensorFlow.TFOutput shape, TensorFlow.TFOutput means, TensorFlow.TFOutput stdevs, TensorFlow.TFOutput minvals, TensorFlow.TFOutput maxvals, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ParameterizedTruncatedNormal(valuetype TensorFlow.TFOutput shape, valuetype TensorFlow.TFOutput means, valuetype TensorFlow.TFOutput stdevs, valuetype TensorFlow.TFOutput minvals, valuetype TensorFlow.TFOutput maxvals, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="means" Type="TensorFlow.TFOutput" />
        <Parameter Name="stdevs" Type="TensorFlow.TFOutput" />
        <Parameter Name="minvals" Type="TensorFlow.TFOutput" />
        <Parameter Name="maxvals" Type="TensorFlow.TFOutput" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shape">
              The shape of the output tensor. Batches are indexed by the 0th dimension.
            </param>
        <param name="means">
              The mean parameter of each batch.
            </param>
        <param name="stdevs">
              The standard deviation parameter of each batch. Must be greater than 0.
            </param>
        <param name="minvals">
              The minimum cutoff. May be -infinity.
            </param>
        <param name="maxvals">
              The maximum cutoff. May be +infinity, and must be more than the minval
              for each batch.
            </param>
        <param name="seed">
              Optional argument
              If either `seed` or `seed2` are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              A second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ParameterizedTruncatedNormal'.
            </param>
        <summary>
              Outputs random values from a normal distribution. The parameters may each be a
            </summary>
        <returns>
              A matrix of shape num_batches x samples_per_batch, filled with random
              truncated normal values using the parameters for each row.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              scalar which applies to the entire output, or a vector of length shape[0] which
              stores the parameters for each batch.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExample">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[]&gt; ParseExample (TensorFlow.TFOutput serialized, TensorFlow.TFOutput names, TensorFlow.TFOutput[] sparse_keys, TensorFlow.TFOutput[] dense_keys, TensorFlow.TFOutput[] dense_defaults, TensorFlow.TFDataType[] sparse_types, TensorFlow.TFShape[] dense_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`4&lt;valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[]&gt; ParseExample(valuetype TensorFlow.TFOutput serialized, valuetype TensorFlow.TFOutput names, valuetype TensorFlow.TFOutput[] sparse_keys, valuetype TensorFlow.TFOutput[] dense_keys, valuetype TensorFlow.TFOutput[] dense_defaults, valuetype TensorFlow.TFDataType[] sparse_types, class TensorFlow.TFShape[] dense_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[]&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serialized" Type="TensorFlow.TFOutput" />
        <Parameter Name="names" Type="TensorFlow.TFOutput" />
        <Parameter Name="sparse_keys" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="dense_keys" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="dense_defaults" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="sparse_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="dense_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="serialized">
              A vector containing a batch of binary serialized Example protos.
            </param>
        <param name="names">
              A vector containing the names of the serialized protos.
              May contain, for example, table key (descriptive) names for the
              corresponding serialized protos.  These are purely useful for debugging
              purposes, and the presence of values here has no effect on the output.
              May also be an empty vector if no names are available.
              If non-empty, this vector must be the same length as "serialized".
            </param>
        <param name="sparse_keys">
              A list of Nsparse string Tensors (scalars).
              The keys expected in the Examples' features associated with sparse values.
            </param>
        <param name="dense_keys">
              A list of Ndense string Tensors (scalars).
              The keys expected in the Examples' features associated with dense values.
            </param>
        <param name="dense_defaults">
              A list of Ndense Tensors (some may be empty).
              dense_defaults[j] provides default values
              when the example's feature_map lacks dense_key[j].  If an empty Tensor is
              provided for dense_defaults[j], then the Feature dense_keys[j] is required.
              The input type is inferred from dense_defaults[j], even when it's empty.
              If dense_defaults[j] is not empty, and dense_shapes[j] is fully defined,
              then the shape of dense_defaults[j] must match that of dense_shapes[j].
              If dense_shapes[j] has an undefined major dimension (variable strides dense
              feature), dense_defaults[j] must contain a single element:
              the padding element.
            </param>
        <param name="sparse_types">
              A list of Nsparse types; the data types of data in each Feature
              given in sparse_keys.
              Currently the ParseExample supports DT_FLOAT (FloatList),
              DT_INT64 (Int64List), and DT_STRING (BytesList).
            </param>
        <param name="dense_shapes">
              A list of Ndense shapes; the shapes of data in each Feature
              given in dense_keys.
              The number of elements in the Feature corresponding to dense_key[j]
              must always equal dense_shapes[j].NumEntries().
              If dense_shapes[j] == (D0, D1, ..., DN) then the shape of output
              Tensor dense_values[j] will be (|serialized|, D0, D1, ..., DN):
              The dense outputs are just the inputs row-stacked by batch.
              This works for dense_shapes[j] = (-1, D1, ..., DN).  In this case
              the shape of the output Tensor dense_values[j] will be
              (|serialized|, M, D1, .., DN), where M is the maximum number of blocks
              of elements of length D1 * .... * DN, across all minibatch entries
              in the input.  Any minibatch entry with less than M blocks of elements of
              length D1 * ... * DN will be padded with the corresponding default_value
              scalar element along the second dimension.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ParseExample'.
            </param>
        <summary>
              Transforms a vector of brain.Example protos (as strings) into typed tensors.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              sparse_indices: 
              sparse_values: 
              sparse_shapes: 
              dense_values: 
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseSingleSequenceExample">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],ValueTuple&lt;TensorFlow.TFOutput[]&gt;&gt; ParseSingleSequenceExample (TensorFlow.TFOutput serialized, TensorFlow.TFOutput feature_list_dense_missing_assumed_empty, TensorFlow.TFOutput[] context_sparse_keys, TensorFlow.TFOutput[] context_dense_keys, TensorFlow.TFOutput[] feature_list_sparse_keys, TensorFlow.TFOutput[] feature_list_dense_keys, TensorFlow.TFOutput[] context_dense_defaults, TensorFlow.TFOutput debug_name, TensorFlow.TFDataType[] context_sparse_types = null, TensorFlow.TFDataType[] feature_list_dense_types = null, TensorFlow.TFShape[] context_dense_shapes = null, TensorFlow.TFDataType[] feature_list_sparse_types = null, TensorFlow.TFShape[] feature_list_dense_shapes = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`8&lt;valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[], valuetype System.ValueTuple`1&lt;valuetype TensorFlow.TFOutput[]&gt;&gt; ParseSingleSequenceExample(valuetype TensorFlow.TFOutput serialized, valuetype TensorFlow.TFOutput feature_list_dense_missing_assumed_empty, valuetype TensorFlow.TFOutput[] context_sparse_keys, valuetype TensorFlow.TFOutput[] context_dense_keys, valuetype TensorFlow.TFOutput[] feature_list_sparse_keys, valuetype TensorFlow.TFOutput[] feature_list_dense_keys, valuetype TensorFlow.TFOutput[] context_dense_defaults, valuetype TensorFlow.TFOutput debug_name, valuetype TensorFlow.TFDataType[] context_sparse_types, valuetype TensorFlow.TFDataType[] feature_list_dense_types, class TensorFlow.TFShape[] context_dense_shapes, valuetype TensorFlow.TFDataType[] feature_list_sparse_types, class TensorFlow.TFShape[] feature_list_dense_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[],System.ValueTuple&lt;TensorFlow.TFOutput[]&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serialized" Type="TensorFlow.TFOutput" />
        <Parameter Name="feature_list_dense_missing_assumed_empty" Type="TensorFlow.TFOutput" />
        <Parameter Name="context_sparse_keys" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="context_dense_keys" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="feature_list_sparse_keys" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="feature_list_dense_keys" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="context_dense_defaults" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="debug_name" Type="TensorFlow.TFOutput" />
        <Parameter Name="context_sparse_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="feature_list_dense_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="context_dense_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="feature_list_sparse_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="feature_list_dense_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="serialized">
              A scalar containing a binary serialized SequenceExample proto.
            </param>
        <param name="feature_list_dense_missing_assumed_empty">
              A vector listing the
              FeatureList keys which may be missing from the SequenceExample.  If the
              associated FeatureList is missing, it is treated as empty.  By default,
              any FeatureList not listed in this vector must exist in the SequenceExample.
            </param>
        <param name="context_sparse_keys">
              A list of Ncontext_sparse string Tensors (scalars).
              The keys expected in the Examples' features associated with context_sparse
              values.
            </param>
        <param name="context_dense_keys">
              A list of Ncontext_dense string Tensors (scalars).
              The keys expected in the SequenceExamples' context features associated with
              dense values.
            </param>
        <param name="feature_list_sparse_keys">
              A list of Nfeature_list_sparse string Tensors
              (scalars).  The keys expected in the FeatureLists associated with sparse
              values.
            </param>
        <param name="feature_list_dense_keys">
              A list of Nfeature_list_dense string Tensors (scalars).
              The keys expected in the SequenceExamples' feature_lists associated
              with lists of dense values.
            </param>
        <param name="context_dense_defaults">
              A list of Ncontext_dense Tensors (some may be empty).
              context_dense_defaults[j] provides default values
              when the SequenceExample's context map lacks context_dense_key[j].
              If an empty Tensor is provided for context_dense_defaults[j],
              then the Feature context_dense_keys[j] is required.
              The input type is inferred from context_dense_defaults[j], even when it's
              empty.  If context_dense_defaults[j] is not empty, its shape must match
              context_dense_shapes[j].
            </param>
        <param name="debug_name">
              A scalar containing the name of the serialized proto.
              May contain, for example, table key (descriptive) name for the
              corresponding serialized proto.  This is purely useful for debugging
              purposes, and the presence of values here has no effect on the output.
              May also be an empty scalar if no name is available.
            </param>
        <param name="context_sparse_types">
              Optional argument
              A list of Ncontext_sparse types; the data types of data in
              each context Feature given in context_sparse_keys.
              Currently the ParseSingleSequenceExample supports DT_FLOAT (FloatList),
              DT_INT64 (Int64List), and DT_STRING (BytesList).
            </param>
        <param name="feature_list_dense_types">
              Optional argument
            </param>
        <param name="context_dense_shapes">
              Optional argument
              A list of Ncontext_dense shapes; the shapes of data in
              each context Feature given in context_dense_keys.
              The number of elements in the Feature corresponding to context_dense_key[j]
              must always equal context_dense_shapes[j].NumEntries().
              The shape of context_dense_values[j] will match context_dense_shapes[j].
            </param>
        <param name="feature_list_sparse_types">
              Optional argument
              A list of Nfeature_list_sparse types; the data types
              of data in each FeatureList given in feature_list_sparse_keys.
              Currently the ParseSingleSequenceExample supports DT_FLOAT (FloatList),
              DT_INT64 (Int64List), and DT_STRING (BytesList).
            </param>
        <param name="feature_list_dense_shapes">
              Optional argument
              A list of Nfeature_list_dense shapes; the shapes of
              data in each FeatureList given in feature_list_dense_keys.
              The shape of each Feature in the FeatureList corresponding to
              feature_list_dense_key[j] must always equal
              feature_list_dense_shapes[j].NumEntries().
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ParseSingleSequenceExample'.
            </param>
        <summary>
              Transforms a scalar brain.SequenceExample proto (as strings) into typed tensors.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              context_sparse_indices: 
              context_sparse_values: 
              context_sparse_shapes: 
              context_dense_values: 
              feature_list_sparse_indices: 
              feature_list_sparse_values: 
              feature_list_sparse_shapes: 
              feature_list_dense_values: 
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseTensor">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ParseTensor (TensorFlow.TFOutput serialized, TensorFlow.TFDataType out_type, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ParseTensor(valuetype TensorFlow.TFOutput serialized, valuetype TensorFlow.TFDataType out_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serialized" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_type" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="serialized">
              A scalar string containing a serialized TensorProto proto.
            </param>
        <param name="out_type">
              The type of the serialized tensor.  The provided type must match the
              type of the serialized tensor and no implicit conversion will take place.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ParseTensor'.
            </param>
        <summary>
              Transforms a serialized tensorflow.TensorProto proto into a Tensor.
            </summary>
        <returns>
              A Tensor of type `out_type`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Placeholder">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Placeholder (TensorFlow.TFDataType dtype, TensorFlow.TFShape shape = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Placeholder(valuetype TensorFlow.TFDataType dtype, class TensorFlow.TFShape shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="shape" Type="TensorFlow.TFShape" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dtype">
              The type of elements in the tensor.
            </param>
        <param name="shape">
              Optional argument
              (Optional) The shape of the tensor. If the shape has 0 dimensions, the
              shape is unconstrained.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Placeholder'.
            </param>
        <summary>
              A placeholder op for a value that will be fed into the computation.
            </summary>
        <returns>
              A placeholder tensor that must be replaced using the feed mechanism.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              N.B. This operation will fail with an error if it is executed. It is
              intended as a way to represent a value that will always be fed, and to
              provide attrs that enable the fed value to be checked at runtime.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="PlaceholderV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput PlaceholderV2 (TensorFlow.TFDataType dtype, TensorFlow.TFShape shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput PlaceholderV2(valuetype TensorFlow.TFDataType dtype, class TensorFlow.TFShape shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="shape" Type="TensorFlow.TFShape" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dtype">
              The type of elements in the tensor.
            </param>
        <param name="shape">
              The shape of the tensor. The shape can be any partially-specified
              shape.  To be unconstrained, pass in a shape with unknown rank.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'PlaceholderV2'.
            </param>
        <summary>
              A placeholder op for a value that will be fed into the computation.
            </summary>
        <returns>
              A placeholder tensor that must be replaced using the feed mechanism.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              N.B. This operation will fail with an error if it is executed. It is
              intended as a way to represent a value that will always be fed, and to
              provide attrs that enable the fed value to be checked at runtime.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="PlaceholderWithDefault">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput PlaceholderWithDefault (TensorFlow.TFOutput input, TensorFlow.TFShape shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput PlaceholderWithDefault(valuetype TensorFlow.TFOutput input, class TensorFlow.TFShape shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="shape" Type="TensorFlow.TFShape" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The default value to produce when `output` is not fed.
            </param>
        <param name="shape">
              The (possibly partial) shape of the tensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'PlaceholderWithDefault'.
            </param>
        <summary>
              A placeholder op that passes through `input` when its output is not fed.
            </summary>
        <returns>
              A placeholder tensor that defaults to `input` if it is not fed.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Polygamma">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Polygamma (TensorFlow.TFOutput a, TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Polygamma(valuetype TensorFlow.TFOutput a, valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="TensorFlow.TFOutput" />
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a">
        </param>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Polygamma'.
            </param>
        <summary>
              Compute the polygamma function \\(\psi^{(n)}(x)\\).
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The polygamma function is defined as:
              
              
              \\(\psi^{(n)}(x) = \frac{d^n}{dx^n} \psi(x)\\)
              
              where \\(\psi(x)\\) is the digamma function.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pow">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Pow (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Pow(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Pow'.
            </param>
        <summary>
              Computes the power of one value to another.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given a tensor `x` and a tensor `y`, this operation computes \\(x^y\\) for
              corresponding elements in `x` and `y`. For example:
              
              ```
              # tensor 'x' is [[2, 2]], [3, 3]]
              # tensor 'y' is [[8, 16], [2, 3]]
              tf.pow(x, y) ==&amp;gt; [[256, 65536], [9, 27]]
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreventGradient">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput PreventGradient (TensorFlow.TFOutput input, string message = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput PreventGradient(valuetype TensorFlow.TFOutput input, string message, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              any tensor.
            </param>
        <param name="message">
              Optional argument
              Will be printed in the error when anyone tries to differentiate
              this operation.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'PreventGradient'.
            </param>
        <summary>
              An identity op that triggers an error if a gradient is requested.
            </summary>
        <returns>
              the same input tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              When executed in a graph, this op outputs its input tensor as-is.
              
              When building ops to compute gradients, the TensorFlow gradient system
              will return an error when trying to lookup the gradient of this op,
              because no gradient must ever be registered for this function.  This
              op exists to prevent subtle bugs from silently returning unimplemented
              gradients in some corner cases.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Print (TensorFlow.TFOutput input, TensorFlow.TFOutput[] data, string message = null, Nullable&lt;long&gt; first_n = null, Nullable&lt;long&gt; summarize = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Print(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput[] data, string message, valuetype System.Nullable`1&lt;int64&gt; first_n, valuetype System.Nullable`1&lt;int64&gt; summarize, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="data" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="first_n" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="summarize" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The tensor passed to `output`
            </param>
        <param name="data">
              A list of tensors to print out when op is evaluated.
            </param>
        <param name="message">
              Optional argument
              A string, prefix of the error message.
            </param>
        <param name="first_n">
              Optional argument
              Only log `first_n` number of times. -1 disables logging.
            </param>
        <param name="summarize">
              Optional argument
              Only print this many entries of each tensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Print'.
            </param>
        <summary>
              Prints a list of tensors.
            </summary>
        <returns>
              = The unmodified `input` tensor
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Passes `input` through to `output` and prints `data` when evaluating.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="PriorityQueueV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput PriorityQueueV2 (TensorFlow.TFShape[] shapes, TensorFlow.TFDataType[] component_types = null, Nullable&lt;long&gt; capacity = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput PriorityQueueV2(class TensorFlow.TFShape[] shapes, valuetype TensorFlow.TFDataType[] component_types, valuetype System.Nullable`1&lt;int64&gt; capacity, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="component_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shapes">
              The shape of each component in a value. The length of this attr must
              be either 0 or the same as the length of component_types. If the length of
              this attr is 0, the shapes of queue elements are not constrained, and
              only one element may be dequeued at a time.
            </param>
        <param name="component_types">
              Optional argument
              The type of each component in a value.
            </param>
        <param name="capacity">
              Optional argument
              The upper bound on the number of elements in this queue.
              Negative numbers mean no limit.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this queue is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this queue will be shared under the given name
              across multiple sessions.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'PriorityQueueV2'.
            </param>
        <summary>
              A queue that produces elements sorted by the first component value.
            </summary>
        <returns>
              The handle to the queue.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Note that the PriorityQueue requires the first component of any element
              to be a scalar int64, in addition to the other elements declared by
              component_types.  Therefore calls to Enqueue and EnqueueMany (resp. Dequeue
              and DequeueMany) on a PriorityQueue will all require (resp. output) one extra
              entry in their input (resp. output) lists.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prod">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Prod (TensorFlow.TFOutput input, TensorFlow.TFOutput reduction_indices, Nullable&lt;bool&gt; keep_dims = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Prod(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput reduction_indices, valuetype System.Nullable`1&lt;bool&gt; keep_dims, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="reduction_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="keep_dims" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The tensor to reduce.
            </param>
        <param name="reduction_indices">
              The dimensions to reduce.
            </param>
        <param name="keep_dims">
              Optional argument
              If true, retain reduced dimensions with length 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Prod'.
            </param>
        <summary>
              Computes the product of elements across dimensions of a tensor.
            </summary>
        <returns>
              The reduced tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Reduces `input` along the dimensions given in `reduction_indices`. Unless
              `keep_dims` is true, the rank of the tensor is reduced by 1 for each entry in
              `reduction_indices`. If `keep_dims` is true, the reduced dimensions are
              retained with length 1.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Qr">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; Qr (TensorFlow.TFOutput input, Nullable&lt;bool&gt; full_matrices = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; Qr(valuetype TensorFlow.TFOutput input, valuetype System.Nullable`1&lt;bool&gt; full_matrices, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="full_matrices" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A tensor of shape `[..., M, N]` whose inner-most 2 dimensions
              form matrices of size `[M, N]`. Let `P` be the minimum of `M` and `N`.
            </param>
        <param name="full_matrices">
              Optional argument
              If true, compute full-sized `q` and `r`. If false
              (the default), compute only the leading `P` columns of `q`.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Qr'.
            </param>
        <summary>
              Computes the QR decompositions of one or more matrices.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              q: Orthonormal basis for range of `a`. If `full_matrices` is `False` then
              shape is `[..., M, P]`; if `full_matrices` is `True` then shape is
              `[..., M, M]`.
              r: Triangular factor. If `full_matrices` is `False` then shape is
              `[..., P, N]`. If `full_matrices` is `True` then shape is `[..., M, N]`.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Computes the QR decomposition of each inner matrix in `tensor` such that
              `tensor[..., :, :] = q[..., :, :] * r[..., :,:])`
              
              ```python
              # a is a tensor.
              # q is a tensor of orthonormal matrices.
              # r is a tensor of upper triangular matrices.
              q, r = qr(a)
              q_full, r_full = qr(a, full_matrices=True)
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizeAndDequantize">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput QuantizeAndDequantize (TensorFlow.TFOutput input, Nullable&lt;bool&gt; signed_input = null, Nullable&lt;long&gt; num_bits = null, Nullable&lt;bool&gt; range_given = null, Nullable&lt;float&gt; input_min = null, Nullable&lt;float&gt; input_max = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput QuantizeAndDequantize(valuetype TensorFlow.TFOutput input, valuetype System.Nullable`1&lt;bool&gt; signed_input, valuetype System.Nullable`1&lt;int64&gt; num_bits, valuetype System.Nullable`1&lt;bool&gt; range_given, valuetype System.Nullable`1&lt;float32&gt; input_min, valuetype System.Nullable`1&lt;float32&gt; input_max, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="signed_input" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="num_bits" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="range_given" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="input_min" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="input_max" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="signed_input">
              Optional argument
            </param>
        <param name="num_bits">
              Optional argument
            </param>
        <param name="range_given">
              Optional argument
            </param>
        <param name="input_min">
              Optional argument
            </param>
        <param name="input_max">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizeAndDequantize'.
            </param>
        <summary>
              Use QuantizeAndDequantizeV2 instead.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op simulates the precision loss from the quantized forward pass by:
              1. Quantizing the tensor to fixed point numbers, which should match the target
                 quantization method when it is used in inference.
              2. Dequantizing it back to floating point numbers for the following ops, most
                 likely matmul.
              
              There are different ways to quantize. This version does not use the full range
              of the output type, choosing to elide the lowest possible value for symmetry
              (e.g., output range is -127 to 127, not -128 to 127 for signed 8 bit
              quantization), so that 0.0 maps to 0.
              
              To perform this op, we first find the range of values in our tensor. The range
              we use is always centered on 0, so we find m such that
              
              1. m = max(abs(input_min), abs(input_max)) if range_given is true,
              2. m = max(max(abs(min_elem(input)), abs(max_elem(input))) otherwise.
              
              Our input tensor range is then [-m, m].
              
              Next, we choose our fixed-point quantization buckets, [min_fixed, max_fixed].
              If signed_input is true, this is
              
                [min_fixed, max_fixed ] =
                    [-(1 &amp;lt;&amp;lt; (num_bits - 1) - 1), (1 &amp;lt;&amp;lt; (num_bits - 1)) - 1].
              
              Otherwise, if signed_input is false, the fixed-point range is
              
                [min_fixed, max_fixed] = [0, (1 &amp;lt;&amp;lt; num_bits) - 1].
              
              From this we compute our scaling factor, s:
              
                s = (max_fixed - min_fixed) / (2 * m).
              
              Now we can quantize and dequantize the elements of our tensor.  An element e
              is transformed into e':
              
                e' = (e * s).round_to_nearest() / s.
              
              Note that we have a different number of buckets in the signed vs. unsigned
              cases.  For example, if num_bits == 8, we get 254 buckets in the signed case
              vs. 255 in the unsigned case.
              
              For example, suppose num_bits = 8 and m = 1.  Then
              
                [min_fixed, max_fixed] = [-127, 127], and
                s = (127 + 127) / 2 = 127.
              
              Given the vector {-1, -0.5, 0, 0.3}, this is quantized to
              {-127, -63, 0, 38}, and dequantized to {-1, -63.0/127, 0, 38.0/127}.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizeAndDequantizeV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput QuantizeAndDequantizeV2 (TensorFlow.TFOutput input, TensorFlow.TFOutput input_min, TensorFlow.TFOutput input_max, Nullable&lt;bool&gt; signed_input = null, Nullable&lt;long&gt; num_bits = null, Nullable&lt;bool&gt; range_given = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput QuantizeAndDequantizeV2(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput input_min, valuetype TensorFlow.TFOutput input_max, valuetype System.Nullable`1&lt;bool&gt; signed_input, valuetype System.Nullable`1&lt;int64&gt; num_bits, valuetype System.Nullable`1&lt;bool&gt; range_given, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_min" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_max" Type="TensorFlow.TFOutput" />
        <Parameter Name="signed_input" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="num_bits" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="range_given" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Tensor to quantize and then dequantize.
            </param>
        <param name="input_min">
              If range_given, this is the min of the range, otherwise this input
              will be ignored.
            </param>
        <param name="input_max">
              If range_given, this is the max of the range, otherwise this input
              will be ignored.
            </param>
        <param name="signed_input">
              Optional argument
              If the quantization is signed or unsigned.
            </param>
        <param name="num_bits">
              Optional argument
              The bitwidth of the quantization.
            </param>
        <param name="range_given">
              Optional argument
              If the range is given or should be computed from the tensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizeAndDequantizeV2'.
            </param>
        <summary>
              Quantizes then dequantizes a tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op simulates the precision loss from the quantized forward pass by:
              1. Quantizing the tensor to fixed point numbers, which should match the target
                 quantization method when it is used in inference.
              2. Dequantizing it back to floating point numbers for the following ops, most
                 likely matmul.
              
              There are different ways to quantize. This version does not use the full range
              of the output type, choosing to elide the lowest possible value for symmetry
              (e.g., output range is -127 to 127, not -128 to 127 for signed 8 bit
              quantization), so that 0.0 maps to 0.
              
              To perform this op, we first find the range of values in our tensor. The range
              we use is always centered on 0, so we find m such that
              
              1. m = max(abs(input_min), abs(input_max)) if range_given is true,
              2. m = max(abs(min_elem(input)), abs(max_elem(input))) otherwise.
              
              Our input tensor range is then [-m, m].
              
              Next, we choose our fixed-point quantization buckets, [min_fixed, max_fixed].
              If signed_input is true, this is
              
                [min_fixed, max_fixed ] =
                    [-(1 &amp;lt;&amp;lt; (num_bits - 1) - 1), (1 &amp;lt;&amp;lt; (num_bits - 1)) - 1].
              
              Otherwise, if signed_input is false, the fixed-point range is
              
                [min_fixed, max_fixed] = [0, (1 &amp;lt;&amp;lt; num_bits) - 1].
              
              From this we compute our scaling factor, s:
              
                s = (max_fixed - min_fixed) / (2 * m).
              
              Now we can quantize and dequantize the elements of our tensor.  An element e
              is transformed into e':
              
                e' = (e * s).round_to_nearest() / s.
              
              Note that we have a different number of buckets in the signed vs. unsigned
              cases.  For example, if num_bits == 8, we get 254 buckets in the signed case
              vs. 255 in the unsigned case.
              
              For example, suppose num_bits = 8 and m = 1.  Then
              
                [min_fixed, max_fixed] = [-127, 127], and
                s = (127 + 127) / 2 = 127.
              
              Given the vector {-1, -0.5, 0, 0.3}, this is quantized to
              {-127, -63, 0, 38}, and dequantized to {-1, -63.0/127, 0, 38.0/127}.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizedAdd">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; QuantizedAdd (TensorFlow.TFOutput x, TensorFlow.TFOutput y, TensorFlow.TFOutput min_x, TensorFlow.TFOutput max_x, TensorFlow.TFOutput min_y, TensorFlow.TFOutput max_y, Nullable&lt;TensorFlow.TFDataType&gt; Toutput = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; QuantizedAdd(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, valuetype TensorFlow.TFOutput min_x, valuetype TensorFlow.TFOutput max_x, valuetype TensorFlow.TFOutput min_y, valuetype TensorFlow.TFOutput max_y, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; Toutput, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_x" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_x" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_y" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_y" Type="TensorFlow.TFOutput" />
        <Parameter Name="Toutput" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="min_x">
              The float value that the lowest quantized `x` value represents.
            </param>
        <param name="max_x">
              The float value that the highest quantized `x` value represents.
            </param>
        <param name="min_y">
              The float value that the lowest quantized `y` value represents.
            </param>
        <param name="max_y">
              The float value that the highest quantized `y` value represents.
            </param>
        <param name="Toutput">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedAdd'.
            </param>
        <summary>
              Returns x + y element-wise, working on quantized buffers.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              z: 
              min_z: The float value that the lowest quantized output value represents.
              max_z: The float value that the highest quantized output value represents.
              
              *NOTE*: `QuantizedAdd` supports limited forms of broadcasting. More about
              broadcasting [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizedAvgPool">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; QuantizedAvgPool (TensorFlow.TFOutput input, TensorFlow.TFOutput min_input, TensorFlow.TFOutput max_input, long[] ksize, long[] strides, string padding, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; QuantizedAvgPool(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput min_input, valuetype TensorFlow.TFOutput max_input, int64[] ksize, int64[] strides, string padding, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_input" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_input" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksize" Type="System.Int64[]" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              4-D with shape `[batch, height, width, channels]`.
            </param>
        <param name="min_input">
              The float value that the lowest quantized input value represents.
            </param>
        <param name="max_input">
              The float value that the highest quantized input value represents.
            </param>
        <param name="ksize">
              The size of the window for each dimension of the input tensor.
              The length must be 4 to match the number of dimensions of the input.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of the input
              tensor.  The length must be 4 to match the number of dimensions of the input.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedAvgPool'.
            </param>
        <summary>
              Produces the average pool of the input tensor for quantized types.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output: 
              min_output: The float value that the lowest quantized output value represents.
              max_output: The float value that the highest quantized output value represents.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizedBatchNormWithGlobalNormalization">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; QuantizedBatchNormWithGlobalNormalization (TensorFlow.TFOutput t, TensorFlow.TFOutput t_min, TensorFlow.TFOutput t_max, TensorFlow.TFOutput m, TensorFlow.TFOutput m_min, TensorFlow.TFOutput m_max, TensorFlow.TFOutput v, TensorFlow.TFOutput v_min, TensorFlow.TFOutput v_max, TensorFlow.TFOutput beta, TensorFlow.TFOutput beta_min, TensorFlow.TFOutput beta_max, TensorFlow.TFOutput gamma, TensorFlow.TFOutput gamma_min, TensorFlow.TFOutput gamma_max, TensorFlow.TFDataType out_type, float variance_epsilon, bool scale_after_normalization, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; QuantizedBatchNormWithGlobalNormalization(valuetype TensorFlow.TFOutput t, valuetype TensorFlow.TFOutput t_min, valuetype TensorFlow.TFOutput t_max, valuetype TensorFlow.TFOutput m, valuetype TensorFlow.TFOutput m_min, valuetype TensorFlow.TFOutput m_max, valuetype TensorFlow.TFOutput v, valuetype TensorFlow.TFOutput v_min, valuetype TensorFlow.TFOutput v_max, valuetype TensorFlow.TFOutput beta, valuetype TensorFlow.TFOutput beta_min, valuetype TensorFlow.TFOutput beta_max, valuetype TensorFlow.TFOutput gamma, valuetype TensorFlow.TFOutput gamma_min, valuetype TensorFlow.TFOutput gamma_max, valuetype TensorFlow.TFDataType out_type, float32 variance_epsilon, bool scale_after_normalization, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="TensorFlow.TFOutput" />
        <Parameter Name="t_min" Type="TensorFlow.TFOutput" />
        <Parameter Name="t_max" Type="TensorFlow.TFOutput" />
        <Parameter Name="m" Type="TensorFlow.TFOutput" />
        <Parameter Name="m_min" Type="TensorFlow.TFOutput" />
        <Parameter Name="m_max" Type="TensorFlow.TFOutput" />
        <Parameter Name="v" Type="TensorFlow.TFOutput" />
        <Parameter Name="v_min" Type="TensorFlow.TFOutput" />
        <Parameter Name="v_max" Type="TensorFlow.TFOutput" />
        <Parameter Name="beta" Type="TensorFlow.TFOutput" />
        <Parameter Name="beta_min" Type="TensorFlow.TFOutput" />
        <Parameter Name="beta_max" Type="TensorFlow.TFOutput" />
        <Parameter Name="gamma" Type="TensorFlow.TFOutput" />
        <Parameter Name="gamma_min" Type="TensorFlow.TFOutput" />
        <Parameter Name="gamma_max" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_type" Type="TensorFlow.TFDataType" />
        <Parameter Name="variance_epsilon" Type="System.Single" />
        <Parameter Name="scale_after_normalization" Type="System.Boolean" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="t">
              A 4D input Tensor.
            </param>
        <param name="t_min">
              The value represented by the lowest quantized input.
            </param>
        <param name="t_max">
              The value represented by the highest quantized input.
            </param>
        <param name="m">
              A 1D mean Tensor with size matching the last dimension of t.
              This is the first output from tf.nn.moments,
              or a saved moving average thereof.
            </param>
        <param name="m_min">
              The value represented by the lowest quantized mean.
            </param>
        <param name="m_max">
              The value represented by the highest quantized mean.
            </param>
        <param name="v">
              A 1D variance Tensor with size matching the last dimension of t.
              This is the second output from tf.nn.moments,
              or a saved moving average thereof.
            </param>
        <param name="v_min">
              The value represented by the lowest quantized variance.
            </param>
        <param name="v_max">
              The value represented by the highest quantized variance.
            </param>
        <param name="beta">
              A 1D beta Tensor with size matching the last dimension of t.
              An offset to be added to the normalized tensor.
            </param>
        <param name="beta_min">
              The value represented by the lowest quantized offset.
            </param>
        <param name="beta_max">
              The value represented by the highest quantized offset.
            </param>
        <param name="gamma">
              A 1D gamma Tensor with size matching the last dimension of t.
              If "scale_after_normalization" is true, this tensor will be multiplied
              with the normalized tensor.
            </param>
        <param name="gamma_min">
              The value represented by the lowest quantized gamma.
            </param>
        <param name="gamma_max">
              The value represented by the highest quantized gamma.
            </param>
        <param name="out_type">
        </param>
        <param name="variance_epsilon">
              A small float number to avoid dividing by 0.
            </param>
        <param name="scale_after_normalization">
              A bool indicating whether the resulted tensor
              needs to be multiplied with gamma.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedBatchNormWithGlobalNormalization'.
            </param>
        <summary>
              Quantized Batch normalization.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              result: 
              result_min: 
              result_max: 
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              This op is deprecated and will be removed in the future. Prefer
              `tf.nn.batch_normalization`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizedBiasAdd">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; QuantizedBiasAdd (TensorFlow.TFOutput input, TensorFlow.TFOutput bias, TensorFlow.TFOutput min_input, TensorFlow.TFOutput max_input, TensorFlow.TFOutput min_bias, TensorFlow.TFOutput max_bias, TensorFlow.TFDataType out_type, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; QuantizedBiasAdd(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput bias, valuetype TensorFlow.TFOutput min_input, valuetype TensorFlow.TFOutput max_input, valuetype TensorFlow.TFOutput min_bias, valuetype TensorFlow.TFOutput max_bias, valuetype TensorFlow.TFDataType out_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="bias" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_input" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_input" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_bias" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_bias" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_type" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="bias">
              A 1D bias Tensor with size matching the last dimension of 'input'.
            </param>
        <param name="min_input">
              The float value that the lowest quantized input value represents.
            </param>
        <param name="max_input">
              The float value that the highest quantized input value represents.
            </param>
        <param name="min_bias">
              The float value that the lowest quantized bias value represents.
            </param>
        <param name="max_bias">
              The float value that the highest quantized bias value represents.
            </param>
        <param name="out_type">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedBiasAdd'.
            </param>
        <summary>
              Adds Tensor 'bias' to Tensor 'input' for Quantized types.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output: 
              min_out: The float value that the lowest quantized output value represents.
              max_out: The float value that the highest quantized output value represents.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Broadcasts the values of bias on dimensions 0..N-2 of 'input'.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizedConcat">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; QuantizedConcat (TensorFlow.TFOutput concat_dim, TensorFlow.TFOutput[] values, TensorFlow.TFOutput[] input_mins, TensorFlow.TFOutput[] input_maxes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; QuantizedConcat(valuetype TensorFlow.TFOutput concat_dim, valuetype TensorFlow.TFOutput[] values, valuetype TensorFlow.TFOutput[] input_mins, valuetype TensorFlow.TFOutput[] input_maxes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="concat_dim" Type="TensorFlow.TFOutput" />
        <Parameter Name="values" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="input_mins" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="input_maxes" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="concat_dim">
              0-D.  The dimension along which to concatenate.  Must be in the
              range [0, rank(values)).
            </param>
        <param name="values">
              The `N` Tensors to concatenate. Their ranks and types must match,
              and their sizes must match in all dimensions except `concat_dim`.
            </param>
        <param name="input_mins">
              The minimum scalar values for each of the input tensors.
            </param>
        <param name="input_maxes">
              The maximum scalar values for each of the input tensors.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedConcat'.
            </param>
        <summary>
              Concatenates quantized tensors along one dimension.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output: A `Tensor` with the concatenation of values stacked along the
              `concat_dim` dimension.  This tensor's shape matches that of `values` except
              in `concat_dim` where it has the sum of the sizes.
              output_min: The float value that the minimum quantized output value represents.
              output_max: The float value that the maximum quantized output value represents.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizedConv2D">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; QuantizedConv2D (TensorFlow.TFOutput input, TensorFlow.TFOutput filter, TensorFlow.TFOutput min_input, TensorFlow.TFOutput max_input, TensorFlow.TFOutput min_filter, TensorFlow.TFOutput max_filter, long[] strides, string padding, Nullable&lt;TensorFlow.TFDataType&gt; out_type = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; QuantizedConv2D(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput filter, valuetype TensorFlow.TFOutput min_input, valuetype TensorFlow.TFOutput max_input, valuetype TensorFlow.TFOutput min_filter, valuetype TensorFlow.TFOutput max_filter, int64[] strides, string padding, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; out_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="filter" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_input" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_input" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_filter" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_filter" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="out_type" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="filter">
              filter's input_depth dimension must match input's depth dimensions.
            </param>
        <param name="min_input">
              The float value that the lowest quantized input value represents.
            </param>
        <param name="max_input">
              The float value that the highest quantized input value represents.
            </param>
        <param name="min_filter">
              The float value that the lowest quantized filter value represents.
            </param>
        <param name="max_filter">
              The float value that the highest quantized filter value represents.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of the input
              tensor.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="out_type">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedConv2D'.
            </param>
        <summary>
              Computes a 2D convolution given quantized 4D input and filter tensors.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output: 
              min_output: The float value that the lowest quantized output value represents.
              max_output: The float value that the highest quantized output value represents.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              The inputs are quantized tensors where the lowest value represents the real
              number of the associated minimum, and the highest represents the maximum.
              This means that you can only interpret the quantized output in the same way, by
              taking the returned minimum and maximum values into account.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizedInstanceNorm">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; QuantizedInstanceNorm (TensorFlow.TFOutput x, TensorFlow.TFOutput x_min, TensorFlow.TFOutput x_max, Nullable&lt;bool&gt; output_range_given = null, Nullable&lt;float&gt; given_y_min = null, Nullable&lt;float&gt; given_y_max = null, Nullable&lt;float&gt; variance_epsilon = null, Nullable&lt;float&gt; min_separation = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; QuantizedInstanceNorm(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput x_min, valuetype TensorFlow.TFOutput x_max, valuetype System.Nullable`1&lt;bool&gt; output_range_given, valuetype System.Nullable`1&lt;float32&gt; given_y_min, valuetype System.Nullable`1&lt;float32&gt; given_y_max, valuetype System.Nullable`1&lt;float32&gt; variance_epsilon, valuetype System.Nullable`1&lt;float32&gt; min_separation, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="x_min" Type="TensorFlow.TFOutput" />
        <Parameter Name="x_max" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_range_given" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="given_y_min" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="given_y_max" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="variance_epsilon" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="min_separation" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
              A 4D input Tensor.
            </param>
        <param name="x_min">
              The value represented by the lowest quantized input.
            </param>
        <param name="x_max">
              The value represented by the highest quantized input.
            </param>
        <param name="output_range_given">
              Optional argument
              If True, `given_y_min` and `given_y_min`
              and `given_y_max` are used as the output range. Otherwise,
              the implementation computes the output range.
            </param>
        <param name="given_y_min">
              Optional argument
              Output in `y_min` if `output_range_given` is True.
            </param>
        <param name="given_y_max">
              Optional argument
              Output in `y_max` if `output_range_given` is True.
            </param>
        <param name="variance_epsilon">
              Optional argument
              A small float number to avoid dividing by 0.
            </param>
        <param name="min_separation">
              Optional argument
              Minimum value of `y_max - y_min`
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedInstanceNorm'.
            </param>
        <summary>
              Quantized Instance normalization.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              y: A 4D Tensor.
              y_min: The value represented by the lowest quantized output.
              y_max: The value represented by the highest quantized output.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizedMatMul">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; QuantizedMatMul (TensorFlow.TFOutput a, TensorFlow.TFOutput b, TensorFlow.TFOutput min_a, TensorFlow.TFOutput max_a, TensorFlow.TFOutput min_b, TensorFlow.TFOutput max_b, Nullable&lt;TensorFlow.TFDataType&gt; Toutput = null, Nullable&lt;bool&gt; transpose_a = null, Nullable&lt;bool&gt; transpose_b = null, Nullable&lt;TensorFlow.TFDataType&gt; Tactivation = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; QuantizedMatMul(valuetype TensorFlow.TFOutput a, valuetype TensorFlow.TFOutput b, valuetype TensorFlow.TFOutput min_a, valuetype TensorFlow.TFOutput max_a, valuetype TensorFlow.TFOutput min_b, valuetype TensorFlow.TFOutput max_b, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; Toutput, valuetype System.Nullable`1&lt;bool&gt; transpose_a, valuetype System.Nullable`1&lt;bool&gt; transpose_b, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; Tactivation, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="TensorFlow.TFOutput" />
        <Parameter Name="b" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_a" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_a" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_b" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_b" Type="TensorFlow.TFOutput" />
        <Parameter Name="Toutput" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="transpose_a" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="transpose_b" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="Tactivation" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a">
              Must be a two-dimensional tensor.
            </param>
        <param name="b">
              Must be a two-dimensional tensor.
            </param>
        <param name="min_a">
              The float value that the lowest quantized `a` value represents.
            </param>
        <param name="max_a">
              The float value that the highest quantized `a` value represents.
            </param>
        <param name="min_b">
              The float value that the lowest quantized `b` value represents.
            </param>
        <param name="max_b">
              The float value that the highest quantized `b` value represents.
            </param>
        <param name="Toutput">
              Optional argument
            </param>
        <param name="transpose_a">
              Optional argument
              If true, `a` is transposed before multiplication.
            </param>
        <param name="transpose_b">
              Optional argument
              If true, `b` is transposed before multiplication.
            </param>
        <param name="Tactivation">
              Optional argument
              The type of output produced by activation function
              following this operation.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedMatMul'.
            </param>
        <summary>
              Perform a quantized matrix multiplication of  `a` by the matrix `b`.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output: 
              min_out: The float value that the lowest quantized output value represents.
              max_out: The float value that the highest quantized output value represents.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              The inputs must be two-dimensional matrices and the inner dimension of
              `a` (after being transposed if `transpose_a` is non-zero) must match the
              outer dimension of `b` (after being transposed if `transposed_b` is
              non-zero).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizedMaxPool">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; QuantizedMaxPool (TensorFlow.TFOutput input, TensorFlow.TFOutput min_input, TensorFlow.TFOutput max_input, long[] ksize, long[] strides, string padding, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; QuantizedMaxPool(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput min_input, valuetype TensorFlow.TFOutput max_input, int64[] ksize, int64[] strides, string padding, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_input" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_input" Type="TensorFlow.TFOutput" />
        <Parameter Name="ksize" Type="System.Int64[]" />
        <Parameter Name="strides" Type="System.Int64[]" />
        <Parameter Name="padding" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The 4D (batch x rows x cols x depth) Tensor to MaxReduce over.
            </param>
        <param name="min_input">
              The float value that the lowest quantized input value represents.
            </param>
        <param name="max_input">
              The float value that the highest quantized input value represents.
            </param>
        <param name="ksize">
              The size of the window for each dimension of the input tensor.
              The length must be 4 to match the number of dimensions of the input.
            </param>
        <param name="strides">
              The stride of the sliding window for each dimension of the input
              tensor. The length must be 4 to match the number of dimensions of the input.
            </param>
        <param name="padding">
              The type of padding algorithm to use.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedMaxPool'.
            </param>
        <summary>
              Produces the max pool of the input tensor for quantized types.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output: 
              min_output: The float value that the lowest quantized output value represents.
              max_output: The float value that the highest quantized output value represents.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizedMul">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; QuantizedMul (TensorFlow.TFOutput x, TensorFlow.TFOutput y, TensorFlow.TFOutput min_x, TensorFlow.TFOutput max_x, TensorFlow.TFOutput min_y, TensorFlow.TFOutput max_y, Nullable&lt;TensorFlow.TFDataType&gt; Toutput = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; QuantizedMul(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, valuetype TensorFlow.TFOutput min_x, valuetype TensorFlow.TFOutput max_x, valuetype TensorFlow.TFOutput min_y, valuetype TensorFlow.TFOutput max_y, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; Toutput, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_x" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_x" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_y" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_y" Type="TensorFlow.TFOutput" />
        <Parameter Name="Toutput" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="min_x">
              The float value that the lowest quantized `x` value represents.
            </param>
        <param name="max_x">
              The float value that the highest quantized `x` value represents.
            </param>
        <param name="min_y">
              The float value that the lowest quantized `y` value represents.
            </param>
        <param name="max_y">
              The float value that the highest quantized `y` value represents.
            </param>
        <param name="Toutput">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedMul'.
            </param>
        <summary>
              Returns x * y element-wise, working on quantized buffers.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              z: 
              min_z: The float value that the lowest quantized output value represents.
              max_z: The float value that the highest quantized output value represents.
              
              *NOTE*: `QuantizedMul` supports limited forms of broadcasting. More about
              broadcasting [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizeDownAndShrinkRange">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; QuantizeDownAndShrinkRange (TensorFlow.TFOutput input, TensorFlow.TFOutput input_min, TensorFlow.TFOutput input_max, TensorFlow.TFDataType out_type, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; QuantizeDownAndShrinkRange(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput input_min, valuetype TensorFlow.TFOutput input_max, valuetype TensorFlow.TFDataType out_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_min" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_max" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_type" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="input_min">
              The float value that the minimum quantized input value represents.
            </param>
        <param name="input_max">
              The float value that the maximum quantized input value represents.
            </param>
        <param name="out_type">
              The type of the output. Should be a lower bit depth than Tinput.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizeDownAndShrinkRange'.
            </param>
        <summary>
              Convert the quantized 'input' tensor into a lower-precision 'output', using the
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output: 
              output_min: The float value that the minimum quantized output value represents.
              output_max: The float value that the maximum quantized output value represents.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              actual distribution of the values to maximize the usage of the lower bit depth
              and adjusting the output min and max ranges accordingly.
              
              [input_min, input_max] are scalar floats that specify the range for the float
              interpretation of the 'input' data. For example, if input_min is -1.0f and
              input_max is 1.0f, and we are dealing with quint16 quantized data, then a 0
              value in the 16-bit data should be interpreted as -1.0f, and a 65535 means 1.0f.
              
              This operator tries to squeeze as much precision as possible into an output with
              a lower bit depth by calculating the actual min and max values found in the
              data. For example, maybe that quint16 input has no values lower than 16,384 and
              none higher than 49,152. That means only half the range is actually needed, all
              the float interpretations are between -0.5f and 0.5f, so if we want to compress
              the data into a quint8 output, we can use that range rather than the theoretical
              -1.0f to 1.0f that is suggested by the input min and max.
              
              In practice, this is most useful for taking output from operations like
              QuantizedMatMul that can produce higher bit-depth outputs than their inputs and
              may have large potential output ranges, but in practice have a distribution of
              input values that only uses a small fraction of the possible range. By feeding
              that output into this operator, we can reduce it from 32 bits down to 8 with
              minimal loss of accuracy.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizedRelu">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; QuantizedRelu (TensorFlow.TFOutput features, TensorFlow.TFOutput min_features, TensorFlow.TFOutput max_features, Nullable&lt;TensorFlow.TFDataType&gt; out_type = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; QuantizedRelu(valuetype TensorFlow.TFOutput features, valuetype TensorFlow.TFOutput min_features, valuetype TensorFlow.TFOutput max_features, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; out_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="features" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_features" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_features" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_type" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="features">
        </param>
        <param name="min_features">
              The float value that the lowest quantized value represents.
            </param>
        <param name="max_features">
              The float value that the highest quantized value represents.
            </param>
        <param name="out_type">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedRelu'.
            </param>
        <summary>
              Computes Quantized Rectified Linear: `max(features, 0)`
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              activations: Has the same output shape as "features".
              min_activations: The float value that the lowest quantized value represents.
              max_activations: The float value that the highest quantized value represents.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizedRelu6">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; QuantizedRelu6 (TensorFlow.TFOutput features, TensorFlow.TFOutput min_features, TensorFlow.TFOutput max_features, Nullable&lt;TensorFlow.TFDataType&gt; out_type = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; QuantizedRelu6(valuetype TensorFlow.TFOutput features, valuetype TensorFlow.TFOutput min_features, valuetype TensorFlow.TFOutput max_features, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; out_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="features" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_features" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_features" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_type" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="features">
        </param>
        <param name="min_features">
              The float value that the lowest quantized value represents.
            </param>
        <param name="max_features">
              The float value that the highest quantized value represents.
            </param>
        <param name="out_type">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedRelu6'.
            </param>
        <summary>
              Computes Quantized Rectified Linear 6: `min(max(features, 0), 6)`
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              activations: Has the same output shape as "features".
              min_activations: The float value that the lowest quantized value represents.
              max_activations: The float value that the highest quantized value represents.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizedReluX">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; QuantizedReluX (TensorFlow.TFOutput features, TensorFlow.TFOutput max_value, TensorFlow.TFOutput min_features, TensorFlow.TFOutput max_features, Nullable&lt;TensorFlow.TFDataType&gt; out_type = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; QuantizedReluX(valuetype TensorFlow.TFOutput features, valuetype TensorFlow.TFOutput max_value, valuetype TensorFlow.TFOutput min_features, valuetype TensorFlow.TFOutput max_features, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; out_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="features" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_value" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_features" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_features" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_type" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="features">
        </param>
        <param name="max_value">
        </param>
        <param name="min_features">
              The float value that the lowest quantized value represents.
            </param>
        <param name="max_features">
              The float value that the highest quantized value represents.
            </param>
        <param name="out_type">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedReluX'.
            </param>
        <summary>
              Computes Quantized Rectified Linear X: `min(max(features, 0), max_value)`
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              activations: Has the same output shape as "features".
              min_activations: The float value that the lowest quantized value represents.
              max_activations: The float value that the highest quantized value represents.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizedReshape">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; QuantizedReshape (TensorFlow.TFOutput tensor, TensorFlow.TFOutput shape, TensorFlow.TFOutput input_min, TensorFlow.TFOutput input_max, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; QuantizedReshape(valuetype TensorFlow.TFOutput tensor, valuetype TensorFlow.TFOutput shape, valuetype TensorFlow.TFOutput input_min, valuetype TensorFlow.TFOutput input_max, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tensor" Type="TensorFlow.TFOutput" />
        <Parameter Name="shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_min" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_max" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tensor">
        </param>
        <param name="shape">
              Defines the shape of the output tensor.
            </param>
        <param name="input_min">
              The minimum value of the input.
            </param>
        <param name="input_max">
              The maximum value of the input.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedReshape'.
            </param>
        <summary>
              Reshapes a quantized tensor as per the Reshape op.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output: 
              output_min: This value is copied from input_min.
              output_max: This value is copied from input_max.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizedResizeBilinear">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; QuantizedResizeBilinear (TensorFlow.TFOutput images, TensorFlow.TFOutput size, TensorFlow.TFOutput min, TensorFlow.TFOutput max, Nullable&lt;bool&gt; align_corners = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; QuantizedResizeBilinear(valuetype TensorFlow.TFOutput images, valuetype TensorFlow.TFOutput size, valuetype TensorFlow.TFOutput min, valuetype TensorFlow.TFOutput max, valuetype System.Nullable`1&lt;bool&gt; align_corners, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="images" Type="TensorFlow.TFOutput" />
        <Parameter Name="size" Type="TensorFlow.TFOutput" />
        <Parameter Name="min" Type="TensorFlow.TFOutput" />
        <Parameter Name="max" Type="TensorFlow.TFOutput" />
        <Parameter Name="align_corners" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="images">
              4-D with shape `[batch, height, width, channels]`.
            </param>
        <param name="size">
              = A 1-D int32 Tensor of 2 elements: `new_height, new_width`.  The
              new size for the images.
            </param>
        <param name="min">
        </param>
        <param name="max">
        </param>
        <param name="align_corners">
              Optional argument
              If true, rescale input by (new_height - 1) / (height - 1), which
              exactly aligns the 4 corners of images and resized images. If false, rescale
              by new_height / height. Treat similarly the width dimension.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizedResizeBilinear'.
            </param>
        <summary>
              Resize quantized `images` to `size` using quantized bilinear interpolation.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              resized_images: 4-D with shape
              `[batch, new_height, new_width, channels]`.
              out_min: 
              out_max: 
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Input images and output images must be quantized types.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantizeV2">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; QuantizeV2 (TensorFlow.TFOutput input, TensorFlow.TFOutput min_range, TensorFlow.TFOutput max_range, TensorFlow.TFDataType T, string mode = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; QuantizeV2(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput min_range, valuetype TensorFlow.TFOutput max_range, valuetype TensorFlow.TFDataType T, string mode, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="min_range" Type="TensorFlow.TFOutput" />
        <Parameter Name="max_range" Type="TensorFlow.TFOutput" />
        <Parameter Name="T" Type="TensorFlow.TFDataType" />
        <Parameter Name="mode" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="min_range">
              The minimum scalar value possibly produced for the input.
            </param>
        <param name="max_range">
              The maximum scalar value possibly produced for the input.
            </param>
        <param name="T">
        </param>
        <param name="mode">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QuantizeV2'.
            </param>
        <summary>
              Quantize the 'input' tensor of type float to 'output' tensor of type 'T'.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output: The quantized data produced from the float input.
              output_min: The actual minimum scalar value used for the output.
              output_max: The actual maximum scalar value used for the output.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              [min_range, max_range] are scalar floats that specify the range for
              the 'input' data. The 'mode' attribute controls exactly which calculations are
              used to convert the float values to their quantized equivalents.
              
              In 'MIN_COMBINED' mode, each value of the tensor will undergo the following:
              
              ```
              out[i] = (in[i] - min_range) * range(T) / (max_range - min_range)
              if T == qint8, out[i] -= (range(T) + 1) / 2.0
              ```
              here `range(T) = numeric_limits&amp;lt;T&amp;gt;::max() - numeric_limits&amp;lt;T&amp;gt;::min()`
              
              *MIN_COMBINED Mode Example*
              
              Assume the input is type float and has a possible range of [0.0, 6.0] and the
              output type is quint8 ([0, 255]). The min_range and max_range values should be
              specified as 0.0 and 6.0. Quantizing from float to quint8 will multiply each
              value of the input by 255/6 and cast to quint8.
              
              If the output type was qint8 ([-128, 127]), the operation will additionally
              subtract each value by 128 prior to casting, so that the range of values aligns
              with the range of qint8.
              
              If the mode is 'MIN_FIRST', then this approach is used:
              
              ```
              number_of_steps = 1 &amp;lt;&amp;lt; (# of bits in T)
              range_adjust = number_of_steps / (number_of_steps - 1)
              range = (range_max - range_min) * range_adjust
              range_scale = number_of_steps / range
              quantized = round(input * range_scale) - round(range_min * range_scale) +
                numeric_limits&amp;lt;T&amp;gt;::min()
              quantized = max(quantized, numeric_limits&amp;lt;T&amp;gt;::min())
              quantized = min(quantized, numeric_limits&amp;lt;T&amp;gt;::max())
              ```
              
              The biggest difference between this and MIN_COMBINED is that the minimum range
              is rounded first, before it's subtracted from the rounded value. With
              MIN_COMBINED, a small bias is introduced where repeated iterations of quantizing
              and dequantizing will introduce a larger and larger error.
              
              One thing to watch out for is that the operator may choose to adjust the
              requested minimum and maximum values slightly during the quantization process,
              so you should always use the output ports as the range for further calculations.
              For example, if the requested minimum and maximum values are close to equal,
              they will be separated by a small epsilon value to prevent ill-formed quantized
              buffers from being created. Otherwise, you can end up with buffers where all the
              quantized values map to the same float value, which causes problems for
              operations that have to perform further calculations on them.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueCloseV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation QueueCloseV2 (TensorFlow.TFOutput handle, Nullable&lt;bool&gt; cancel_pending_enqueues = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation QueueCloseV2(valuetype TensorFlow.TFOutput handle, valuetype System.Nullable`1&lt;bool&gt; cancel_pending_enqueues, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="cancel_pending_enqueues" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a queue.
            </param>
        <param name="cancel_pending_enqueues">
              Optional argument
              If true, all pending enqueue requests that are
              blocked on the given queue will be canceled.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QueueCloseV2'.
            </param>
        <summary>
              Closes the given queue.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              This operation signals that no more elements will be enqueued in the
              given queue. Subsequent Enqueue(Many) operations will fail.
              Subsequent Dequeue(Many) operations will continue to succeed if
              sufficient elements remain in the queue. Subsequent Dequeue(Many)
              operations that would block will fail immediately.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueDequeueManyV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] QueueDequeueManyV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput n, TensorFlow.TFDataType[] component_types, Nullable&lt;long&gt; timeout_ms = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] QueueDequeueManyV2(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput n, valuetype TensorFlow.TFDataType[] component_types, valuetype System.Nullable`1&lt;int64&gt; timeout_ms, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="n" Type="TensorFlow.TFOutput" />
        <Parameter Name="component_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="timeout_ms" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a queue.
            </param>
        <param name="n">
              The number of tuples to dequeue.
            </param>
        <param name="component_types">
              The type of each component in a tuple.
            </param>
        <param name="timeout_ms">
              Optional argument
              If the queue has fewer than n elements, this operation
              will block for up to timeout_ms milliseconds.
              Note: This option is not supported yet.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QueueDequeueManyV2'.
            </param>
        <summary>
              Dequeues `n` tuples of one or more tensors from the given queue.
            </summary>
        <returns>
              One or more tensors that were dequeued as a tuple.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              If the queue is closed and there are fewer than `n` elements, then an
              OutOfRange error is returned.
              
              This operation concatenates queue-element component tensors along the
              0th dimension to make a single component tensor.  All of the components
              in the dequeued tuple will have size `n` in the 0th dimension.
              
              This operation has `k` outputs, where `k` is the number of components in
              the tuples stored in the given queue, and output `i` is the ith
              component of the dequeued tuple.
              
              N.B. If the queue is empty, this operation will block until `n` elements
              have been dequeued (or 'timeout_ms' elapses, if specified).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueDequeueUpToV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] QueueDequeueUpToV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput n, TensorFlow.TFDataType[] component_types, Nullable&lt;long&gt; timeout_ms = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] QueueDequeueUpToV2(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput n, valuetype TensorFlow.TFDataType[] component_types, valuetype System.Nullable`1&lt;int64&gt; timeout_ms, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="n" Type="TensorFlow.TFOutput" />
        <Parameter Name="component_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="timeout_ms" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a queue.
            </param>
        <param name="n">
              The number of tuples to dequeue.
            </param>
        <param name="component_types">
              The type of each component in a tuple.
            </param>
        <param name="timeout_ms">
              Optional argument
              If the queue has fewer than n elements, this operation
              will block for up to timeout_ms milliseconds.
              Note: This option is not supported yet.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QueueDequeueUpToV2'.
            </param>
        <summary>
              Dequeues `n` tuples of one or more tensors from the given queue.
            </summary>
        <returns>
              One or more tensors that were dequeued as a tuple.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation is not supported by all queues.  If a queue does not support
              DequeueUpTo, then an Unimplemented error is returned.
              
              If the queue is closed and there are more than 0 but less than `n`
              elements remaining, then instead of returning an OutOfRange error like
              QueueDequeueMany, less than `n` elements are returned immediately.  If
              the queue is closed and there are 0 elements left in the queue, then
              an OutOfRange error is returned just like in QueueDequeueMany.
              Otherwise the behavior is identical to QueueDequeueMany:
              
              This operation concatenates queue-element component tensors along the
              0th dimension to make a single component tensor.  All of the components
              in the dequeued tuple will have size n in the 0th dimension.
              
              This operation has `k` outputs, where `k` is the number of components in
              the tuples stored in the given queue, and output `i` is the ith
              component of the dequeued tuple.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueDequeueV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] QueueDequeueV2 (TensorFlow.TFOutput handle, TensorFlow.TFDataType[] component_types, Nullable&lt;long&gt; timeout_ms = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] QueueDequeueV2(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFDataType[] component_types, valuetype System.Nullable`1&lt;int64&gt; timeout_ms, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="component_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="timeout_ms" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a queue.
            </param>
        <param name="component_types">
              The type of each component in a tuple.
            </param>
        <param name="timeout_ms">
              Optional argument
              If the queue is empty, this operation will block for up to
              timeout_ms milliseconds.
              Note: This option is not supported yet.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QueueDequeueV2'.
            </param>
        <summary>
              Dequeues a tuple of one or more tensors from the given queue.
            </summary>
        <returns>
              One or more tensors that were dequeued as a tuple.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation has k outputs, where k is the number of components
              in the tuples stored in the given queue, and output i is the ith
              component of the dequeued tuple.
              
              N.B. If the queue is empty, this operation will block until an element
              has been dequeued (or 'timeout_ms' elapses, if specified).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueEnqueueManyV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation QueueEnqueueManyV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput[] components, Nullable&lt;long&gt; timeout_ms = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation QueueEnqueueManyV2(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput[] components, valuetype System.Nullable`1&lt;int64&gt; timeout_ms, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="components" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="timeout_ms" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a queue.
            </param>
        <param name="components">
              One or more tensors from which the enqueued tensors should
              be taken.
            </param>
        <param name="timeout_ms">
              Optional argument
              If the queue is too full, this operation will block for up
              to timeout_ms milliseconds.
              Note: This option is not supported yet.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QueueEnqueueManyV2'.
            </param>
        <summary>
              Enqueues zero or more tuples of one or more tensors in the given queue.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              This operation slices each component tensor along the 0th dimension to
              make multiple queue elements. All of the tuple components must have the
              same size in the 0th dimension.
              
              The components input has k elements, which correspond to the components of
              tuples stored in the given queue.
              
              N.B. If the queue is full, this operation will block until the given
              elements have been enqueued (or 'timeout_ms' elapses, if specified).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueEnqueueV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation QueueEnqueueV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput[] components, Nullable&lt;long&gt; timeout_ms = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation QueueEnqueueV2(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput[] components, valuetype System.Nullable`1&lt;int64&gt; timeout_ms, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="components" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="timeout_ms" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a queue.
            </param>
        <param name="components">
              One or more tensors from which the enqueued tensors should be taken.
            </param>
        <param name="timeout_ms">
              Optional argument
              If the queue is full, this operation will block for up to
              timeout_ms milliseconds.
              Note: This option is not supported yet.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QueueEnqueueV2'.
            </param>
        <summary>
              Enqueues a tuple of one or more tensors in the given queue.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              The components input has k elements, which correspond to the components of
              tuples stored in the given queue.
              
              N.B. If the queue is full, this operation will block until the given
              element has been enqueued (or 'timeout_ms' elapses, if specified).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueSizeV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput QueueSizeV2 (TensorFlow.TFOutput handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput QueueSizeV2(valuetype TensorFlow.TFOutput handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a queue.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'QueueSizeV2'.
            </param>
        <summary>
              Computes the number of elements in the given queue.
            </summary>
        <returns>
              The number of elements in the given queue.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RandomCrop">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RandomCrop (TensorFlow.TFOutput image, TensorFlow.TFOutput size, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RandomCrop(valuetype TensorFlow.TFOutput image, valuetype TensorFlow.TFOutput size, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="TensorFlow.TFOutput" />
        <Parameter Name="size" Type="TensorFlow.TFOutput" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="image">
              3-D of shape `[height, width, channels]`.
            </param>
        <param name="size">
              1-D of length 2 containing: `crop_height`, `crop_width`..
            </param>
        <param name="seed">
              Optional argument
              If either seed or seed2 are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              An second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RandomCrop'.
            </param>
        <summary>
              Randomly crop `image`.
            </summary>
        <returns>
              3-D of shape `[crop_height, crop_width, channels].`
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              `size` is a 1-D int64 tensor with 2 elements representing the crop height and
              width.  The values must be non negative.
              
              This Op picks a random location in `image` and crops a `height` by `width`
              rectangle from that location.  The random location is picked so the cropped
              area will fit inside the original image.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RandomGamma">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RandomGamma (TensorFlow.TFOutput shape, TensorFlow.TFOutput alpha, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RandomGamma(valuetype TensorFlow.TFOutput shape, valuetype TensorFlow.TFOutput alpha, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="alpha" Type="TensorFlow.TFOutput" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shape">
              1-D integer tensor. Shape of independent samples to draw from each
              distribution described by the shape parameters given in alpha.
            </param>
        <param name="alpha">
              A tensor in which each scalar is a "shape" parameter describing the
              associated gamma distribution.
            </param>
        <param name="seed">
              Optional argument
              If either `seed` or `seed2` are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              A second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RandomGamma'.
            </param>
        <summary>
              Outputs random values from the Gamma distribution(s) described by alpha.
            </summary>
        <returns>
              A tensor with shape `shape + shape(alpha)`. Each slice
              `[:, ..., :, i0, i1, ...iN]` contains the samples drawn for
              `alpha[i0, i1, ...iN]`. The dtype of the output matches the dtype of alpha.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op uses the algorithm by Marsaglia et al. to acquire samples via
              transformation-rejection from pairs of uniform and normal random variables.
              See http://dl.acm.org/citation.cfm?id=358414
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RandomNormal">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RandomNormal (TensorFlow.TFShape shape, double mean = 0, double stddev = 1, Nullable&lt;int&gt; seed = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RandomNormal(class TensorFlow.TFShape shape, float64 mean, float64 stddev, valuetype System.Nullable`1&lt;int32&gt; seed, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape" Type="TensorFlow.TFShape" />
        <Parameter Name="mean" Type="System.Double" />
        <Parameter Name="stddev" Type="System.Double" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shape">Shape of the output tensor.</param>
        <param name="mean">The mean of the standard distribution.</param>
        <param name="stddev">The standard deviation of the normal distribution.</param>
        <param name="seed">Integer seed used for the random distribution, using the TensorFlow SetRandomSeed .</param>
        <param name="operName">Operation name, optional.</param>
        <summary>
            Outputs random values from a normal distribution
            </summary>
        <returns>A tensor of the specified shape filled with random normal values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RandomPoisson">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RandomPoisson (TensorFlow.TFOutput shape, TensorFlow.TFOutput rate, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RandomPoisson(valuetype TensorFlow.TFOutput shape, valuetype TensorFlow.TFOutput rate, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="rate" Type="TensorFlow.TFOutput" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shape">
              1-D integer tensor. Shape of independent samples to draw from each
              distribution described by the shape parameters given in rate.
            </param>
        <param name="rate">
              A tensor in which each scalar is a "rate" parameter describing the
              associated poisson distribution.
            </param>
        <param name="seed">
              Optional argument
              If either `seed` or `seed2` are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              A second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RandomPoisson'.
            </param>
        <summary>
              Outputs random values from the Poisson distribution(s) described by rate.
            </summary>
        <returns>
              A tensor with shape `shape + shape(rate)`. Each slice
              `[:, ..., :, i0, i1, ...iN]` contains the samples drawn for
              `rate[i0, i1, ...iN]`. The dtype of the output matches the dtype of
              rate.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op uses two algorithms, depending on rate. If rate &amp;gt;= 10, then
              the algorithm by Hormann is used to acquire samples via
              transformation-rejection.
              See http://www.sciencedirect.com/science/article/pii/0167668793909974.
              
              Otherwise, Knuth's algorithm is used to acquire samples via multiplying uniform
              random variables.
              See Donald E. Knuth (1969). Seminumerical Algorithms. The Art of Computer
              Programming, Volume 2. Addison Wesley
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RandomShuffle">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RandomShuffle (TensorFlow.TFOutput value, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RandomShuffle(valuetype TensorFlow.TFOutput value, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
              The tensor to be shuffled.
            </param>
        <param name="seed">
              Optional argument
              If either `seed` or `seed2` are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              A second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RandomShuffle'.
            </param>
        <summary>
              Randomly shuffles a tensor along its first dimension.
            </summary>
        <returns>
              A tensor of same shape and type as `value`, shuffled along its first
              dimension.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
                The tensor is shuffled along dimension 0, such that each `value[j]` is mapped
                to one and only one `output[i]`. For example, a mapping that might occur for a
                3x2 tensor is:
              
              ```
              [[1, 2],       [[5, 6],
               [3, 4],  ==&amp;gt;   [1, 2],
               [5, 6]]        [3, 4]]
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RandomShuffleQueueV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RandomShuffleQueueV2 (TensorFlow.TFDataType[] component_types, TensorFlow.TFShape[] shapes = null, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; min_after_dequeue = null, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RandomShuffleQueueV2(valuetype TensorFlow.TFDataType[] component_types, class TensorFlow.TFShape[] shapes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; min_after_dequeue, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="min_after_dequeue" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="component_types">
              The type of each component in a value.
            </param>
        <param name="shapes">
              Optional argument
              The shape of each component in a value. The length of this attr must
              be either 0 or the same as the length of component_types. If the length of
              this attr is 0, the shapes of queue elements are not constrained, and
              only one element may be dequeued at a time.
            </param>
        <param name="capacity">
              Optional argument
              The upper bound on the number of elements in this queue.
              Negative numbers mean no limit.
            </param>
        <param name="min_after_dequeue">
              Optional argument
              Dequeue will block unless there would be this
              many elements after the dequeue or the queue is closed. This
              ensures a minimum level of mixing of elements.
            </param>
        <param name="seed">
              Optional argument
              If either seed or seed2 is set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, a random seed is used.
            </param>
        <param name="seed2">
              Optional argument
              A second seed to avoid seed collision.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this queue is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this queue will be shared under the given name
              across multiple sessions.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RandomShuffleQueueV2'.
            </param>
        <summary>
              A queue that randomizes the order of elements.
            </summary>
        <returns>
              The handle to the queue.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RandomStandardNormal">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RandomStandardNormal (TensorFlow.TFOutput shape, TensorFlow.TFDataType dtype, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RandomStandardNormal(valuetype TensorFlow.TFOutput shape, valuetype TensorFlow.TFDataType dtype, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shape">
              The shape of the output tensor.
            </param>
        <param name="dtype">
              The type of the output.
            </param>
        <param name="seed">
              Optional argument
              If either `seed` or `seed2` are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              A second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RandomStandardNormal'.
            </param>
        <summary>
              Outputs random values from a normal distribution.
            </summary>
        <returns>
              A tensor of the specified shape filled with random normal values.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The generated values will have mean 0 and standard deviation 1.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RandomUniform">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RandomUniform (TensorFlow.TFOutput shape, TensorFlow.TFDataType dtype, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RandomUniform(valuetype TensorFlow.TFOutput shape, valuetype TensorFlow.TFDataType dtype, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shape">
              The shape of the output tensor.
            </param>
        <param name="dtype">
              The type of the output.
            </param>
        <param name="seed">
              Optional argument
              If either `seed` or `seed2` are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              A second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RandomUniform'.
            </param>
        <summary>
              Outputs random values from a uniform distribution.
            </summary>
        <returns>
              A tensor of the specified shape filled with uniform random values.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The generated values follow a uniform distribution in the range `[0, 1)`. The
              lower bound 0 is included in the range, while the upper bound 1 is excluded.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RandomUniformInt">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RandomUniformInt (TensorFlow.TFOutput shape, TensorFlow.TFOutput minval, TensorFlow.TFOutput maxval, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RandomUniformInt(valuetype TensorFlow.TFOutput shape, valuetype TensorFlow.TFOutput minval, valuetype TensorFlow.TFOutput maxval, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="minval" Type="TensorFlow.TFOutput" />
        <Parameter Name="maxval" Type="TensorFlow.TFOutput" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shape">
              The shape of the output tensor.
            </param>
        <param name="minval">
              0-D.  Inclusive lower bound on the generated integers.
            </param>
        <param name="maxval">
              0-D.  Exclusive upper bound on the generated integers.
            </param>
        <param name="seed">
              Optional argument
              If either `seed` or `seed2` are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              A second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RandomUniformInt'.
            </param>
        <summary>
              Outputs random integers from a uniform distribution.
            </summary>
        <returns>
              A tensor of the specified shape filled with uniform random integers.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The generated values are uniform integers in the range `[minval, maxval)`.
              The lower bound `minval` is included in the range, while the upper bound
              `maxval` is excluded.
              
              The random integers are slightly biased unless `maxval - minval` is an exact
              power of two.  The bias is small for values of `maxval - minval` significantly
              smaller than the range of the output (either `2^32` or `2^64`).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Range">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Range (TensorFlow.TFOutput start, TensorFlow.TFOutput limit, TensorFlow.TFOutput delta, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Range(valuetype TensorFlow.TFOutput start, valuetype TensorFlow.TFOutput limit, valuetype TensorFlow.TFOutput delta, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="TensorFlow.TFOutput" />
        <Parameter Name="limit" Type="TensorFlow.TFOutput" />
        <Parameter Name="delta" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="start">
              0-D (scalar). First entry in the sequence.
            </param>
        <param name="limit">
              0-D (scalar). Upper limit of sequence, exclusive.
            </param>
        <param name="delta">
              0-D (scalar). Optional. Default is 1. Number that increments `start`.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Range'.
            </param>
        <summary>
              Creates a sequence of numbers.
            </summary>
        <returns>
              1-D.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation creates a sequence of numbers that begins at `start` and
              extends by increments of `delta` up to but not including `limit`.
              
              For example:
              
              ```
              # 'start' is 3
              # 'limit' is 18
              # 'delta' is 3
              tf.range(start, limit, delta) ==&amp;gt; [3, 6, 9, 12, 15]
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RangeDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RangeDataset (TensorFlow.TFOutput start, TensorFlow.TFOutput stop, TensorFlow.TFOutput step, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RangeDataset(valuetype TensorFlow.TFOutput start, valuetype TensorFlow.TFOutput stop, valuetype TensorFlow.TFOutput step, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="TensorFlow.TFOutput" />
        <Parameter Name="stop" Type="TensorFlow.TFOutput" />
        <Parameter Name="step" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="start">
              corresponds to start in python's xrange().
            </param>
        <param name="stop">
              corresponds to stop in python's xrange().
            </param>
        <param name="step">
              corresponds to step in python's xrange().
            </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RangeDataset'.
            </param>
        <summary>
              Creates a dataset with a range of values. Corresponds to python's xrange.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Rank (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Rank(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Rank'.
            </param>
        <summary>
              Returns the rank of a tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation returns an integer representing the rank of `input`.
              
              For example:
              
              ```
              # 't' is [[[1, 1, 1], [2, 2, 2]], [[3, 3, 3], [4, 4, 4]]]
              # shape of tensor 't' is [2, 2, 3]
              rank(t) ==&amp;gt; 3
              ```
              
              **Note**: The rank of a tensor is not the same as the rank of a matrix. The rank
              of a tensor is the number of indices required to uniquely select each element
              of the tensor. Rank is also known as "order", "degree", or "ndims."
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReaderNumRecordsProducedV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ReaderNumRecordsProducedV2 (TensorFlow.TFOutput reader_handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ReaderNumRecordsProducedV2(valuetype TensorFlow.TFOutput reader_handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reader_handle">
              Handle to a Reader.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReaderNumRecordsProducedV2'.
            </param>
        <summary>
              Returns the number of records this Reader has produced.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This is the same as the number of ReaderRead executions that have
              succeeded.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReaderNumWorkUnitsCompletedV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ReaderNumWorkUnitsCompletedV2 (TensorFlow.TFOutput reader_handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ReaderNumWorkUnitsCompletedV2(valuetype TensorFlow.TFOutput reader_handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reader_handle">
              Handle to a Reader.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReaderNumWorkUnitsCompletedV2'.
            </param>
        <summary>
              Returns the number of work units this Reader has finished processing.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReaderReadUpToV2">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; ReaderReadUpToV2 (TensorFlow.TFOutput reader_handle, TensorFlow.TFOutput queue_handle, TensorFlow.TFOutput num_records, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; ReaderReadUpToV2(valuetype TensorFlow.TFOutput reader_handle, valuetype TensorFlow.TFOutput queue_handle, valuetype TensorFlow.TFOutput num_records, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="queue_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_records" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reader_handle">
              Handle to a `Reader`.
            </param>
        <param name="queue_handle">
              Handle to a `Queue`, with string work items.
            </param>
        <param name="num_records">
              number of records to read from `Reader`.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReaderReadUpToV2'.
            </param>
        <summary>
              Returns up to `num_records` (key, value) pairs produced by a Reader.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              keys: A 1-D tensor.
              values: A 1-D tensor.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Will dequeue from the input queue if necessary (e.g. when the
              Reader needs to start reading from a new file since it has finished
              with the previous file).
              It may return less than `num_records` even before the last batch.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReaderReadV2">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; ReaderReadV2 (TensorFlow.TFOutput reader_handle, TensorFlow.TFOutput queue_handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; ReaderReadV2(valuetype TensorFlow.TFOutput reader_handle, valuetype TensorFlow.TFOutput queue_handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="queue_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reader_handle">
              Handle to a Reader.
            </param>
        <param name="queue_handle">
              Handle to a Queue, with string work items.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReaderReadV2'.
            </param>
        <summary>
              Returns the next record (key, value pair) produced by a Reader.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              key: A scalar.
              value: A scalar.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Will dequeue from the input queue if necessary (e.g. when the
              Reader needs to start reading from a new file since it has finished
              with the previous file).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReaderResetV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ReaderResetV2 (TensorFlow.TFOutput reader_handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ReaderResetV2(valuetype TensorFlow.TFOutput reader_handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reader_handle">
              Handle to a Reader.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReaderResetV2'.
            </param>
        <summary>
              Restore a Reader to its initial clean state.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReaderRestoreStateV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ReaderRestoreStateV2 (TensorFlow.TFOutput reader_handle, TensorFlow.TFOutput state, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ReaderRestoreStateV2(valuetype TensorFlow.TFOutput reader_handle, valuetype TensorFlow.TFOutput state, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="state" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reader_handle">
              Handle to a Reader.
            </param>
        <param name="state">
              Result of a ReaderSerializeState of a Reader with type
              matching reader_handle.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReaderRestoreStateV2'.
            </param>
        <summary>
              Restore a reader to a previously saved state.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              Not all Readers support being restored, so this can produce an
              Unimplemented error.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReaderSerializeStateV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ReaderSerializeStateV2 (TensorFlow.TFOutput reader_handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ReaderSerializeStateV2(valuetype TensorFlow.TFOutput reader_handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader_handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reader_handle">
              Handle to a Reader.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReaderSerializeStateV2'.
            </param>
        <summary>
              Produce a string tensor that encodes the state of a Reader.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Not all Readers support being serialized, so this can produce an
              Unimplemented error.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadFile">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ReadFile (TensorFlow.TFOutput filename, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ReadFile(valuetype TensorFlow.TFOutput filename, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReadFile'.
            </param>
        <summary>
              Reads and outputs the entire contents of the input filename.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadVariableOp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ReadVariableOp (TensorFlow.TFOutput resource, TensorFlow.TFDataType dtype, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ReadVariableOp(valuetype TensorFlow.TFOutput resource, valuetype TensorFlow.TFDataType dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">
              handle to the resource in which to store the variable.
            </param>
        <param name="dtype">
              the dtype of the value.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReadVariableOp'.
            </param>
        <summary>
              Reads the value of a variable.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The tensor returned by this operation is immutable.
              
              The value returned by this operation is guaranteed to be influenced by all the
              writes on which this operation depends directly or indirectly, and to not be
              influenced by any of the writes which depend directly or indirectly on this
              operation.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Real">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Real (TensorFlow.TFOutput input, Nullable&lt;TensorFlow.TFDataType&gt; Tout = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Real(valuetype TensorFlow.TFOutput input, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; Tout, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="Tout" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="Tout">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Real'.
            </param>
        <summary>
              Returns the real part of a complex number.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given a tensor `input` of complex numbers, this operation returns a tensor of
              type `float` that is the real part of each element in `input`. All elements in
              `input` must be complex numbers of the form \\(a + bj\\), where *a* is the real
               part returned by this operation and *b* is the imaginary part.
              
              For example:
              
              ```
              # tensor 'input' is [-2.25 + 4.75j, 3.25 + 5.75j]
              tf.real(input) ==&amp;gt; [-2.25, 3.25]
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RealDiv">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RealDiv (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RealDiv(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RealDiv'.
            </param>
        <summary>
              Returns x / y element-wise for real types.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              If `x` and `y` are reals, this will return the floating-point division.
              
              *NOTE*: `Div` supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reciprocal">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Reciprocal (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Reciprocal(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Reciprocal'.
            </param>
        <summary>
              Computes the reciprocal of x element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              I.e., \\(y = 1 / x\\).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReciprocalGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ReciprocalGrad (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ReciprocalGrad(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReciprocalGrad'.
            </param>
        <summary>
              Computes the gradient for the inverse of `x` wrt its input.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Specifically, `grad = -dy * y*y`, where `y = 1/x`, and `dy`
              is the corresponding input gradient.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RecordInput">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RecordInput (string file_pattern, Nullable&lt;long&gt; file_random_seed = null, Nullable&lt;float&gt; file_shuffle_shift_ratio = null, Nullable&lt;long&gt; file_buffer_size = null, Nullable&lt;long&gt; file_parallelism = null, Nullable&lt;long&gt; batch_size = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RecordInput(string file_pattern, valuetype System.Nullable`1&lt;int64&gt; file_random_seed, valuetype System.Nullable`1&lt;float32&gt; file_shuffle_shift_ratio, valuetype System.Nullable`1&lt;int64&gt; file_buffer_size, valuetype System.Nullable`1&lt;int64&gt; file_parallelism, valuetype System.Nullable`1&lt;int64&gt; batch_size, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file_pattern" Type="System.String" />
        <Parameter Name="file_random_seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="file_shuffle_shift_ratio" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="file_buffer_size" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="file_parallelism" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="batch_size" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file_pattern">
              Glob pattern for the data files.
            </param>
        <param name="file_random_seed">
              Optional argument
              Random seeds used to produce randomized records.
            </param>
        <param name="file_shuffle_shift_ratio">
              Optional argument
              Shifts the list of files after the list is randomly
              shuffled.
            </param>
        <param name="file_buffer_size">
              Optional argument
              The randomization shuffling buffer.
            </param>
        <param name="file_parallelism">
              Optional argument
              How many sstables are opened and concurrently iterated over.
            </param>
        <param name="batch_size">
              Optional argument
              The batch size.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RecordInput'.
            </param>
        <summary>
              Emits randomized records.
            </summary>
        <returns>
              A tensor of shape [batch_size].
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReduceJoin">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ReduceJoin (TensorFlow.TFOutput inputs, TensorFlow.TFOutput reduction_indices, Nullable&lt;bool&gt; keep_dims = null, string separator = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ReduceJoin(valuetype TensorFlow.TFOutput inputs, valuetype TensorFlow.TFOutput reduction_indices, valuetype System.Nullable`1&lt;bool&gt; keep_dims, string separator, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput" />
        <Parameter Name="reduction_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="keep_dims" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="separator" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputs">
              The input to be joined.  All reduced indices must have non-zero size.
            </param>
        <param name="reduction_indices">
              The dimensions to reduce over.  Dimensions are reduced in the
              order specified.  Omitting `reduction_indices` is equivalent to passing
              `[n-1, n-2, ..., 0]`.  Negative indices from `-n` to `-1` are supported.
            </param>
        <param name="keep_dims">
              Optional argument
              If `True`, retain reduced dimensions with length `1`.
            </param>
        <param name="separator">
              Optional argument
              The separator to use when joining.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReduceJoin'.
            </param>
        <summary>
              Joins a string Tensor across the given dimensions.
            </summary>
        <returns>
              Has shape equal to that of the input with reduced dimensions removed or
              set to `1` depending on `keep_dims`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Computes the string join across dimensions in the given string Tensor of shape
              `[d_0, d_1, ..., d_n-1]`.  Returns a new Tensor created by joining the input
              strings with the given separator (default: empty string).  Negative indices are
              counted backwards from the end, with `-1` being equivalent to `n - 1`.
              
              For example:
              
              ```python
              # tensor `a` is [["a", "b"], ["c", "d"]]
              tf.reduce_join(a, 0) ==&amp;gt; ["ac", "bd"]
              tf.reduce_join(a, 1) ==&amp;gt; ["ab", "cd"]
              tf.reduce_join(a, -2) = tf.reduce_join(a, 0) ==&amp;gt; ["ac", "bd"]
              tf.reduce_join(a, -1) = tf.reduce_join(a, 1) ==&amp;gt; ["ab", "cd"]
              tf.reduce_join(a, 0, keep_dims=True) ==&amp;gt; [["ac", "bd"]]
              tf.reduce_join(a, 1, keep_dims=True) ==&amp;gt; [["ab"], ["cd"]]
              tf.reduce_join(a, 0, separator=".") ==&amp;gt; ["a.c", "b.d"]
              tf.reduce_join(a, [0, 1]) ==&amp;gt; ["acbd"]
              tf.reduce_join(a, [1, 0]) ==&amp;gt; ["abcd"]
              tf.reduce_join(a, []) ==&amp;gt; ["abcd"]
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReduceSum">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ReduceSum (TensorFlow.TFOutput input, Nullable&lt;TensorFlow.TFOutput&gt; axis = null, Nullable&lt;bool&gt; keep_dims = false, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ReduceSum(valuetype TensorFlow.TFOutput input, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFOutput&gt; axis, valuetype System.Nullable`1&lt;bool&gt; keep_dims, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="axis" Type="System.Nullable&lt;TensorFlow.TFOutput&gt;" />
        <Parameter Name="keep_dims" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">The tensor to reduce. Should have numeric type.</param>
        <param name="axis">The dimensions to reduce. If not se (the default), reduces all dimensions.</param>
        <param name="keep_dims">If set to <c>true</c> retains reduced dimensions with length 1.</param>
        <param name="operName">A name for the operation, optional.</param>
        <summary>
            Computes the sum of elements across dimensions of a tensor.
            </summary>
        <returns>The reduced tensor.</returns>
        <remarks>
              Reduces input_tensor along the dimensions given in axis.
            Unless keep_dims is true, the rank of the tensor is reduced by 1 for each
            entry in axis. If keep_dims is true, the reduced dimensions
            are retained with length 1.
            
            If axis has no entries, all dimensions are reduced, and a
            tensor with a single element is returned.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Relu">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Relu (TensorFlow.TFOutput features, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Relu(valuetype TensorFlow.TFOutput features, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="features" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="features">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Relu'.
            </param>
        <summary>
              Computes rectified linear: `max(features, 0)`.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Relu6">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Relu6 (TensorFlow.TFOutput features, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Relu6(valuetype TensorFlow.TFOutput features, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="features" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="features">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Relu6'.
            </param>
        <summary>
              Computes rectified linear 6: `min(max(features, 0), 6)`.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Relu6Grad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Relu6Grad (TensorFlow.TFOutput gradients, TensorFlow.TFOutput features, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Relu6Grad(valuetype TensorFlow.TFOutput gradients, valuetype TensorFlow.TFOutput features, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gradients" Type="TensorFlow.TFOutput" />
        <Parameter Name="features" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="gradients">
              The backpropagated gradients to the corresponding Relu6 operation.
            </param>
        <param name="features">
              The features passed as input to the corresponding Relu6 operation.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Relu6Grad'.
            </param>
        <summary>
              Computes rectified linear 6 gradients for a Relu6 operation.
            </summary>
        <returns>
              The gradients:
              `gradients * (features &amp;gt; 0) * (features &amp;lt; 6)`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReluGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ReluGrad (TensorFlow.TFOutput gradients, TensorFlow.TFOutput features, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ReluGrad(valuetype TensorFlow.TFOutput gradients, valuetype TensorFlow.TFOutput features, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gradients" Type="TensorFlow.TFOutput" />
        <Parameter Name="features" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="gradients">
              The backpropagated gradients to the corresponding Relu operation.
            </param>
        <param name="features">
              The features passed as input to the corresponding Relu operation, OR
              the outputs of that operation (both work equivalently).
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReluGrad'.
            </param>
        <summary>
              Computes rectified linear gradients for a Relu operation.
            </summary>
        <returns>
              `gradients * (features &amp;gt; 0)`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoteFusedGraphExecute">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] RemoteFusedGraphExecute (TensorFlow.TFOutput[] inputs, TensorFlow.TFDataType[] Toutputs, string serialized_remote_fused_graph_execute_info, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] RemoteFusedGraphExecute(valuetype TensorFlow.TFOutput[] inputs, valuetype TensorFlow.TFDataType[] Toutputs, string serialized_remote_fused_graph_execute_info, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="Toutputs" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="serialized_remote_fused_graph_execute_info" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputs">
              Arbitrary number of tensors with arbitrary data types
            </param>
        <param name="Toutputs">
        </param>
        <param name="serialized_remote_fused_graph_execute_info">
              Serialized protocol buffer
              of RemoteFusedGraphExecuteInfo which contains graph specifications.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RemoteFusedGraphExecute'.
            </param>
        <summary>
              Execute a sub graph on a remote processor.
            </summary>
        <returns>
              Arbitrary number of tensors with arbitrary data types
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The graph specifications(such as graph itself, input tensors and output names)
              are stored as a serialized protocol buffer of RemoteFusedGraphExecuteInfo
              as serialized_remote_fused_graph_execute_info.
              The specifications will be passed to a dedicated registered
              remote fused graph executor.  The executor will send the graph specifications
              to a remote processor and execute that graph.  The execution results
              will be passed to consumer nodes as outputs of this node.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RepeatDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RepeatDataset (TensorFlow.TFOutput input_dataset, TensorFlow.TFOutput count, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RepeatDataset(valuetype TensorFlow.TFOutput input_dataset, valuetype TensorFlow.TFOutput count, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_dataset" Type="TensorFlow.TFOutput" />
        <Parameter Name="count" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_dataset">
        </param>
        <param name="count">
              A scalar representing the number of times that `input_dataset` should
              be repeated. A value of `-1` indicates that it should be repeated infinitely.
            </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RepeatDataset'.
            </param>
        <summary>
              Creates a dataset that emits the outputs of `input_dataset` `count` times.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequantizationRange">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; RequantizationRange (TensorFlow.TFOutput input, TensorFlow.TFOutput input_min, TensorFlow.TFOutput input_max, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; RequantizationRange(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput input_min, valuetype TensorFlow.TFOutput input_max, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_min" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_max" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="input_min">
              The float value that the minimum quantized input value represents.
            </param>
        <param name="input_max">
              The float value that the maximum quantized input value represents.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RequantizationRange'.
            </param>
        <summary>
              Given a quantized tensor described by (input, input_min, input_max), outputs a
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output_min: The computed min output.
              output_max: the computed max output.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              range that covers the actual values present in that tensor.  This op is
              typically used to produce the requested_output_min and requested_output_max for
              Requantize.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Requantize">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; Requantize (TensorFlow.TFOutput input, TensorFlow.TFOutput input_min, TensorFlow.TFOutput input_max, TensorFlow.TFOutput requested_output_min, TensorFlow.TFOutput requested_output_max, TensorFlow.TFDataType out_type, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; Requantize(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput input_min, valuetype TensorFlow.TFOutput input_max, valuetype TensorFlow.TFOutput requested_output_min, valuetype TensorFlow.TFOutput requested_output_max, valuetype TensorFlow.TFDataType out_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_min" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_max" Type="TensorFlow.TFOutput" />
        <Parameter Name="requested_output_min" Type="TensorFlow.TFOutput" />
        <Parameter Name="requested_output_max" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_type" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="input_min">
              The float value that the minimum quantized input value represents.
            </param>
        <param name="input_max">
              The float value that the maximum quantized input value represents.
            </param>
        <param name="requested_output_min">
              The float value that the minimum quantized output value represents.
            </param>
        <param name="requested_output_max">
              The float value that the maximum quantized output value represents.
            </param>
        <param name="out_type">
              The type of the output. Should be a lower bit depth than Tinput.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Requantize'.
            </param>
        <summary>
              Convert the quantized 'input' tensor into a lower-precision 'output', using the
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output: 
              output_min: The requested_output_min value is copied into this output.
              output_max: The requested_output_max value is copied into this output.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              output range specified with 'requested_output_min' and 'requested_output_max'.
              
              [input_min, input_max] are scalar floats that specify the range for the float
              interpretation of the 'input' data. For example, if input_min is -1.0f and
              input_max is 1.0f, and we are dealing with quint16 quantized data, then a 0
              value in the 16-bit data should be interpreted as -1.0f, and a 65535 means 1.0f.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reshape">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Reshape (TensorFlow.TFOutput tensor, TensorFlow.TFOutput shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Reshape(valuetype TensorFlow.TFOutput tensor, valuetype TensorFlow.TFOutput shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tensor" Type="TensorFlow.TFOutput" />
        <Parameter Name="shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tensor">
        </param>
        <param name="shape">
              Defines the shape of the output tensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Reshape'.
            </param>
        <summary>
              Reshapes a tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given `tensor`, this operation returns a tensor that has the same values
              as `tensor` with shape `shape`.
              
              If one component of `shape` is the special value -1, the size of that dimension
              is computed so that the total size remains constant.  In particular, a `shape`
              of `[-1]` flattens into 1-D.  At most one component of `shape` can be -1.
              
              If `shape` is 1-D or higher, then the operation returns a tensor with shape
              `shape` filled with the values of `tensor`. In this case, the number of elements
              implied by `shape` must be the same as the number of elements in `tensor`.
              
              For example:
              
              ```
              # tensor 't' is [1, 2, 3, 4, 5, 6, 7, 8, 9]
              # tensor 't' has shape [9]
              reshape(t, [3, 3]) ==&amp;gt; [[1, 2, 3],
                                      [4, 5, 6],
                                      [7, 8, 9]]
              
              # tensor 't' is [[[1, 1], [2, 2]],
              #                [[3, 3], [4, 4]]]
              # tensor 't' has shape [2, 2, 2]
              reshape(t, [2, 4]) ==&amp;gt; [[1, 1, 2, 2],
                                      [3, 3, 4, 4]]
              
              # tensor 't' is [[[1, 1, 1],
              #                 [2, 2, 2]],
              #                [[3, 3, 3],
              #                 [4, 4, 4]],
              #                [[5, 5, 5],
              #                 [6, 6, 6]]]
              # tensor 't' has shape [3, 2, 3]
              # pass '[-1]' to flatten 't'
              reshape(t, [-1]) ==&amp;gt; [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6]
              
              # -1 can also be used to infer the shape
              
              # -1 is inferred to be 9:
              reshape(t, [2, -1]) ==&amp;gt; [[1, 1, 1, 2, 2, 2, 3, 3, 3],
                                       [4, 4, 4, 5, 5, 5, 6, 6, 6]]
              # -1 is inferred to be 2:
              reshape(t, [-1, 9]) ==&amp;gt; [[1, 1, 1, 2, 2, 2, 3, 3, 3],
                                       [4, 4, 4, 5, 5, 5, 6, 6, 6]]
              # -1 is inferred to be 3:
              reshape(t, [ 2, -1, 3]) ==&amp;gt; [[[1, 1, 1],
                                            [2, 2, 2],
                                            [3, 3, 3]],
                                           [[4, 4, 4],
                                            [5, 5, 5],
                                            [6, 6, 6]]]
              
              # tensor 't' is [7]
              # shape `[]` reshapes to a scalar
              reshape(t, []) ==&amp;gt; 7
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResizeArea">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ResizeArea (TensorFlow.TFOutput images, TensorFlow.TFOutput size, Nullable&lt;bool&gt; align_corners = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ResizeArea(valuetype TensorFlow.TFOutput images, valuetype TensorFlow.TFOutput size, valuetype System.Nullable`1&lt;bool&gt; align_corners, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="images" Type="TensorFlow.TFOutput" />
        <Parameter Name="size" Type="TensorFlow.TFOutput" />
        <Parameter Name="align_corners" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="images">
              4-D with shape `[batch, height, width, channels]`.
            </param>
        <param name="size">
              = A 1-D int32 Tensor of 2 elements: `new_height, new_width`.  The
              new size for the images.
            </param>
        <param name="align_corners">
              Optional argument
              If true, rescale input by (new_height - 1) / (height - 1), which
              exactly aligns the 4 corners of images and resized images. If false, rescale
              by new_height / height. Treat similarly the width dimension.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResizeArea'.
            </param>
        <summary>
              Resize `images` to `size` using area interpolation.
            </summary>
        <returns>
              4-D with shape
              `[batch, new_height, new_width, channels]`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Input images can be of different types but output images are always float.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResizeBicubic">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ResizeBicubic (TensorFlow.TFOutput images, TensorFlow.TFOutput size, Nullable&lt;bool&gt; align_corners = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ResizeBicubic(valuetype TensorFlow.TFOutput images, valuetype TensorFlow.TFOutput size, valuetype System.Nullable`1&lt;bool&gt; align_corners, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="images" Type="TensorFlow.TFOutput" />
        <Parameter Name="size" Type="TensorFlow.TFOutput" />
        <Parameter Name="align_corners" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="images">
              4-D with shape `[batch, height, width, channels]`.
            </param>
        <param name="size">
              = A 1-D int32 Tensor of 2 elements: `new_height, new_width`.  The
              new size for the images.
            </param>
        <param name="align_corners">
              Optional argument
              If true, rescale input by (new_height - 1) / (height - 1), which
              exactly aligns the 4 corners of images and resized images. If false, rescale
              by new_height / height. Treat similarly the width dimension.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResizeBicubic'.
            </param>
        <summary>
              Resize `images` to `size` using bicubic interpolation.
            </summary>
        <returns>
              4-D with shape
              `[batch, new_height, new_width, channels]`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Input images can be of different types but output images are always float.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResizeBilinear">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ResizeBilinear (TensorFlow.TFOutput images, TensorFlow.TFOutput size, Nullable&lt;bool&gt; align_corners = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ResizeBilinear(valuetype TensorFlow.TFOutput images, valuetype TensorFlow.TFOutput size, valuetype System.Nullable`1&lt;bool&gt; align_corners, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="images" Type="TensorFlow.TFOutput" />
        <Parameter Name="size" Type="TensorFlow.TFOutput" />
        <Parameter Name="align_corners" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="images">
              4-D with shape `[batch, height, width, channels]`.
            </param>
        <param name="size">
              = A 1-D int32 Tensor of 2 elements: `new_height, new_width`.  The
              new size for the images.
            </param>
        <param name="align_corners">
              Optional argument
              If true, rescale input by (new_height - 1) / (height - 1), which
              exactly aligns the 4 corners of images and resized images. If false, rescale
              by new_height / height. Treat similarly the width dimension.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResizeBilinear'.
            </param>
        <summary>
              Resize `images` to `size` using bilinear interpolation.
            </summary>
        <returns>
              4-D with shape
              `[batch, new_height, new_width, channels]`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Input images can be of different types but output images are always float.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResizeBilinearGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ResizeBilinearGrad (TensorFlow.TFOutput grads, TensorFlow.TFOutput original_image, Nullable&lt;bool&gt; align_corners = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ResizeBilinearGrad(valuetype TensorFlow.TFOutput grads, valuetype TensorFlow.TFOutput original_image, valuetype System.Nullable`1&lt;bool&gt; align_corners, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grads" Type="TensorFlow.TFOutput" />
        <Parameter Name="original_image" Type="TensorFlow.TFOutput" />
        <Parameter Name="align_corners" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="grads">
              4-D with shape `[batch, height, width, channels]`.
            </param>
        <param name="original_image">
              4-D with shape `[batch, orig_height, orig_width, channels]`,
              The image tensor that was resized.
            </param>
        <param name="align_corners">
              Optional argument
              If true, rescale grads by (orig_height - 1) / (height - 1), which
              exactly aligns the 4 corners of grads and original_image. If false, rescale by
              orig_height / height. Treat similarly the width dimension.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResizeBilinearGrad'.
            </param>
        <summary>
              Computes the gradient of bilinear interpolation.
            </summary>
        <returns>
              4-D with shape `[batch, orig_height, orig_width, channels]`.
              Gradients with respect to the input image. Input image must have been
              float or double.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResizeNearestNeighbor">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ResizeNearestNeighbor (TensorFlow.TFOutput images, TensorFlow.TFOutput size, Nullable&lt;bool&gt; align_corners = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ResizeNearestNeighbor(valuetype TensorFlow.TFOutput images, valuetype TensorFlow.TFOutput size, valuetype System.Nullable`1&lt;bool&gt; align_corners, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="images" Type="TensorFlow.TFOutput" />
        <Parameter Name="size" Type="TensorFlow.TFOutput" />
        <Parameter Name="align_corners" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="images">
              4-D with shape `[batch, height, width, channels]`.
            </param>
        <param name="size">
              = A 1-D int32 Tensor of 2 elements: `new_height, new_width`.  The
              new size for the images.
            </param>
        <param name="align_corners">
              Optional argument
              If true, rescale input by (new_height - 1) / (height - 1), which
              exactly aligns the 4 corners of images and resized images. If false, rescale
              by new_height / height. Treat similarly the width dimension.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResizeNearestNeighbor'.
            </param>
        <summary>
              Resize `images` to `size` using nearest neighbor interpolation.
            </summary>
        <returns>
              4-D with shape
              `[batch, new_height, new_width, channels]`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResizeNearestNeighborGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ResizeNearestNeighborGrad (TensorFlow.TFOutput grads, TensorFlow.TFOutput size, Nullable&lt;bool&gt; align_corners = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ResizeNearestNeighborGrad(valuetype TensorFlow.TFOutput grads, valuetype TensorFlow.TFOutput size, valuetype System.Nullable`1&lt;bool&gt; align_corners, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grads" Type="TensorFlow.TFOutput" />
        <Parameter Name="size" Type="TensorFlow.TFOutput" />
        <Parameter Name="align_corners" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="grads">
              4-D with shape `[batch, height, width, channels]`.
            </param>
        <param name="size">
              = A 1-D int32 Tensor of 2 elements: `orig_height, orig_width`. The
              original input size.
            </param>
        <param name="align_corners">
              Optional argument
              If true, rescale grads by (orig_height - 1) / (height - 1), which
              exactly aligns the 4 corners of grads and original_image. If false, rescale by
              orig_height / height. Treat similarly the width dimension.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResizeNearestNeighborGrad'.
            </param>
        <summary>
              Computes the gradient of nearest neighbor interpolation.
            </summary>
        <returns>
              4-D with shape `[batch, orig_height, orig_width, channels]`. Gradients
              with respect to the input image.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceApplyAdadelta">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceApplyAdadelta (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput accum_update, TensorFlow.TFOutput lr, TensorFlow.TFOutput rho, TensorFlow.TFOutput epsilon, TensorFlow.TFOutput grad, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceApplyAdadelta(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput accum, valuetype TensorFlow.TFOutput accum_update, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput rho, valuetype TensorFlow.TFOutput epsilon, valuetype TensorFlow.TFOutput grad, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum_update" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="rho" Type="TensorFlow.TFOutput" />
        <Parameter Name="epsilon" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="accum">
              Should be from a Variable().
            </param>
        <param name="accum_update">
              Should be from a Variable().
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="rho">
              Decay factor. Must be a scalar.
            </param>
        <param name="epsilon">
              Constant factor. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="use_locking">
              Optional argument
              If True, updating of the var, accum and update_accum tensors will be protected by
              a lock; otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyAdadelta'.
            </param>
        <summary>
              Update '*var' according to the adadelta scheme.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              accum = rho() * accum + (1 - rho()) * grad.square();
              update = (update_accum + epsilon).sqrt() * (accum + epsilon()).rsqrt() * grad;
              update_accum = rho() * update_accum + (1 - rho()) * update.square();
              var -= update;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceApplyAdagrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceApplyAdagrad (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput lr, TensorFlow.TFOutput grad, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceApplyAdagrad(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput accum, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput grad, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="accum">
              Should be from a Variable().
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="use_locking">
              Optional argument
              If `True`, updating of the var and accum tensors will be protected
              by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyAdagrad'.
            </param>
        <summary>
              Update '*var' according to the adagrad scheme.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              accum += grad * grad
              var -= lr * grad * (1 / sqrt(accum))
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceApplyAdagradDA">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceApplyAdagradDA (TensorFlow.TFOutput var, TensorFlow.TFOutput gradient_accumulator, TensorFlow.TFOutput gradient_squared_accumulator, TensorFlow.TFOutput grad, TensorFlow.TFOutput lr, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput global_step, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceApplyAdagradDA(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput gradient_accumulator, valuetype TensorFlow.TFOutput gradient_squared_accumulator, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput l1, valuetype TensorFlow.TFOutput l2, valuetype TensorFlow.TFOutput global_step, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="gradient_accumulator" Type="TensorFlow.TFOutput" />
        <Parameter Name="gradient_squared_accumulator" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="l1" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2" Type="TensorFlow.TFOutput" />
        <Parameter Name="global_step" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="gradient_accumulator">
              Should be from a Variable().
            </param>
        <param name="gradient_squared_accumulator">
              Should be from a Variable().
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="l1">
              L1 regularization. Must be a scalar.
            </param>
        <param name="l2">
              L2 regularization. Must be a scalar.
            </param>
        <param name="global_step">
              Training step number. Must be a scalar.
            </param>
        <param name="use_locking">
              Optional argument
              If True, updating of the var and accum tensors will be protected by
              a lock; otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyAdagradDA'.
            </param>
        <summary>
              Update '*var' according to the proximal adagrad scheme.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceApplyAdam">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceApplyAdam (TensorFlow.TFOutput var, TensorFlow.TFOutput m, TensorFlow.TFOutput v, TensorFlow.TFOutput beta1_power, TensorFlow.TFOutput beta2_power, TensorFlow.TFOutput lr, TensorFlow.TFOutput beta1, TensorFlow.TFOutput beta2, TensorFlow.TFOutput epsilon, TensorFlow.TFOutput grad, Nullable&lt;bool&gt; use_locking = null, Nullable&lt;bool&gt; use_nesterov = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceApplyAdam(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput m, valuetype TensorFlow.TFOutput v, valuetype TensorFlow.TFOutput beta1_power, valuetype TensorFlow.TFOutput beta2_power, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput beta1, valuetype TensorFlow.TFOutput beta2, valuetype TensorFlow.TFOutput epsilon, valuetype TensorFlow.TFOutput grad, valuetype System.Nullable`1&lt;bool&gt; use_locking, valuetype System.Nullable`1&lt;bool&gt; use_nesterov, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="m" Type="TensorFlow.TFOutput" />
        <Parameter Name="v" Type="TensorFlow.TFOutput" />
        <Parameter Name="beta1_power" Type="TensorFlow.TFOutput" />
        <Parameter Name="beta2_power" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="beta1" Type="TensorFlow.TFOutput" />
        <Parameter Name="beta2" Type="TensorFlow.TFOutput" />
        <Parameter Name="epsilon" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="use_nesterov" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="m">
              Should be from a Variable().
            </param>
        <param name="v">
              Should be from a Variable().
            </param>
        <param name="beta1_power">
              Must be a scalar.
            </param>
        <param name="beta2_power">
              Must be a scalar.
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="beta1">
              Momentum factor. Must be a scalar.
            </param>
        <param name="beta2">
              Momentum factor. Must be a scalar.
            </param>
        <param name="epsilon">
              Ridge term. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="use_locking">
              Optional argument
              If `True`, updating of the var, m, and v tensors will be protected
              by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="use_nesterov">
              Optional argument
              If `True`, uses the nesterov update.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyAdam'.
            </param>
        <summary>
              Update '*var' according to the Adam algorithm.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              lr_t &amp;lt;- learning_rate * sqrt(1 - beta2^t) / (1 - beta1^t)
              m_t &amp;lt;- beta1 * m_{t-1} + (1 - beta1) * g_t
              v_t &amp;lt;- beta2 * v_{t-1} + (1 - beta2) * g_t * g_t
              variable &amp;lt;- variable - lr_t * m_t / (sqrt(v_t) + epsilon)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceApplyCenteredRMSProp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceApplyCenteredRMSProp (TensorFlow.TFOutput var, TensorFlow.TFOutput mg, TensorFlow.TFOutput ms, TensorFlow.TFOutput mom, TensorFlow.TFOutput lr, TensorFlow.TFOutput rho, TensorFlow.TFOutput momentum, TensorFlow.TFOutput epsilon, TensorFlow.TFOutput grad, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceApplyCenteredRMSProp(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput mg, valuetype TensorFlow.TFOutput ms, valuetype TensorFlow.TFOutput mom, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput rho, valuetype TensorFlow.TFOutput momentum, valuetype TensorFlow.TFOutput epsilon, valuetype TensorFlow.TFOutput grad, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="mg" Type="TensorFlow.TFOutput" />
        <Parameter Name="ms" Type="TensorFlow.TFOutput" />
        <Parameter Name="mom" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="rho" Type="TensorFlow.TFOutput" />
        <Parameter Name="momentum" Type="TensorFlow.TFOutput" />
        <Parameter Name="epsilon" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="mg">
              Should be from a Variable().
            </param>
        <param name="ms">
              Should be from a Variable().
            </param>
        <param name="mom">
              Should be from a Variable().
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="rho">
              Decay rate. Must be a scalar.
            </param>
        <param name="momentum">
        </param>
        <param name="epsilon">
              Ridge term. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="use_locking">
              Optional argument
              If `True`, updating of the var, mg, ms, and mom tensors is
              protected by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyCenteredRMSProp'.
            </param>
        <summary>
              Update '*var' according to the centered RMSProp algorithm.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              The centered RMSProp algorithm uses an estimate of the centered second moment
              (i.e., the variance) for normalization, as opposed to regular RMSProp, which
              uses the (uncentered) second moment. This often helps with training, but is
              slightly more expensive in terms of computation and memory.
              
              Note that in dense implementation of this algorithm, mg, ms, and mom will
              update even if the grad is zero, but in this sparse implementation, mg, ms,
              and mom will not update in iterations during which the grad is zero.
              
              mean_square = decay * mean_square + (1-decay) * gradient ** 2
              mean_grad = decay * mean_grad + (1-decay) * gradient
              
              Delta = learning_rate * gradient / sqrt(mean_square + epsilon - mean_grad ** 2)
              
              mg &amp;lt;- rho * mg_{t-1} + (1-rho) * grad
              ms &amp;lt;- rho * ms_{t-1} + (1-rho) * grad * grad
              mom &amp;lt;- momentum * mom_{t-1} + lr * grad / sqrt(ms - mg * mg + epsilon)
              var &amp;lt;- var - mom
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceApplyFtrl">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceApplyFtrl (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput linear, TensorFlow.TFOutput grad, TensorFlow.TFOutput lr, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput lr_power, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceApplyFtrl(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput accum, valuetype TensorFlow.TFOutput linear, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput l1, valuetype TensorFlow.TFOutput l2, valuetype TensorFlow.TFOutput lr_power, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum" Type="TensorFlow.TFOutput" />
        <Parameter Name="linear" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="l1" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr_power" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="accum">
              Should be from a Variable().
            </param>
        <param name="linear">
              Should be from a Variable().
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="l1">
              L1 regulariation. Must be a scalar.
            </param>
        <param name="l2">
              L2 regulariation. Must be a scalar.
            </param>
        <param name="lr_power">
              Scaling factor. Must be a scalar.
            </param>
        <param name="use_locking">
              Optional argument
              If `True`, updating of the var and accum tensors will be protected
              by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyFtrl'.
            </param>
        <summary>
              Update '*var' according to the Ftrl-proximal scheme.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              accum_new = accum + grad * grad
              linear += grad - (accum_new^(-lr_power) - accum^(-lr_power)) / lr * var
              quadratic = 1.0 / (accum_new^(lr_power) * lr) + 2 * l2
              var = (sign(linear) * l1 - linear) / quadratic if |linear| &amp;gt; l1 else 0.0
              accum = accum_new
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceApplyGradientDescent">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceApplyGradientDescent (TensorFlow.TFOutput var, TensorFlow.TFOutput alpha, TensorFlow.TFOutput delta, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceApplyGradientDescent(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput alpha, valuetype TensorFlow.TFOutput delta, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="alpha" Type="TensorFlow.TFOutput" />
        <Parameter Name="delta" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="alpha">
              Scaling factor. Must be a scalar.
            </param>
        <param name="delta">
              The change.
            </param>
        <param name="use_locking">
              Optional argument
              If `True`, the subtraction will be protected by a lock;
              otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyGradientDescent'.
            </param>
        <summary>
              Update '*var' by subtracting 'alpha' * 'delta' from it.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceApplyMomentum">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceApplyMomentum (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput lr, TensorFlow.TFOutput grad, TensorFlow.TFOutput momentum, Nullable&lt;bool&gt; use_locking = null, Nullable&lt;bool&gt; use_nesterov = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceApplyMomentum(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput accum, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput momentum, valuetype System.Nullable`1&lt;bool&gt; use_locking, valuetype System.Nullable`1&lt;bool&gt; use_nesterov, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="momentum" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="use_nesterov" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="accum">
              Should be from a Variable().
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="momentum">
              Momentum. Must be a scalar.
            </param>
        <param name="use_locking">
              Optional argument
              If `True`, updating of the var and accum tensors will be protected
              by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="use_nesterov">
              Optional argument
              If `True`, the tensor passed to compute grad will be
              var - lr * momentum * accum, so in the end, the var you get is actually
              var - lr * momentum * accum.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyMomentum'.
            </param>
        <summary>
              Update '*var' according to the momentum scheme. Set use_nesterov = True if you
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              want to use Nesterov momentum.
              
              accum = accum * momentum + grad
              var -= lr * accum
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceApplyProximalAdagrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceApplyProximalAdagrad (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput lr, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput grad, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceApplyProximalAdagrad(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput accum, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput l1, valuetype TensorFlow.TFOutput l2, valuetype TensorFlow.TFOutput grad, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="l1" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="accum">
              Should be from a Variable().
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="l1">
              L1 regularization. Must be a scalar.
            </param>
        <param name="l2">
              L2 regularization. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="use_locking">
              Optional argument
              If True, updating of the var and accum tensors will be protected by
              a lock; otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyProximalAdagrad'.
            </param>
        <summary>
              Update '*var' and '*accum' according to FOBOS with Adagrad learning rate.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              accum += grad * grad
              prox_v = var - lr * grad * (1 / sqrt(accum))
              var = sign(prox_v)/(1+lr*l2) * max{|prox_v|-lr*l1,0}
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceApplyProximalGradientDescent">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceApplyProximalGradientDescent (TensorFlow.TFOutput var, TensorFlow.TFOutput alpha, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput delta, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceApplyProximalGradientDescent(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput alpha, valuetype TensorFlow.TFOutput l1, valuetype TensorFlow.TFOutput l2, valuetype TensorFlow.TFOutput delta, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="alpha" Type="TensorFlow.TFOutput" />
        <Parameter Name="l1" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2" Type="TensorFlow.TFOutput" />
        <Parameter Name="delta" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="alpha">
              Scaling factor. Must be a scalar.
            </param>
        <param name="l1">
              L1 regularization. Must be a scalar.
            </param>
        <param name="l2">
              L2 regularization. Must be a scalar.
            </param>
        <param name="delta">
              The change.
            </param>
        <param name="use_locking">
              Optional argument
              If True, the subtraction will be protected by a lock;
              otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyProximalGradientDescent'.
            </param>
        <summary>
              Update '*var' as FOBOS algorithm with fixed learning rate.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              prox_v = var - alpha * delta
              var = sign(prox_v)/(1+alpha*l2) * max{|prox_v|-alpha*l1,0}
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceApplyRMSProp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceApplyRMSProp (TensorFlow.TFOutput var, TensorFlow.TFOutput ms, TensorFlow.TFOutput mom, TensorFlow.TFOutput lr, TensorFlow.TFOutput rho, TensorFlow.TFOutput momentum, TensorFlow.TFOutput epsilon, TensorFlow.TFOutput grad, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceApplyRMSProp(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput ms, valuetype TensorFlow.TFOutput mom, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput rho, valuetype TensorFlow.TFOutput momentum, valuetype TensorFlow.TFOutput epsilon, valuetype TensorFlow.TFOutput grad, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="ms" Type="TensorFlow.TFOutput" />
        <Parameter Name="mom" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="rho" Type="TensorFlow.TFOutput" />
        <Parameter Name="momentum" Type="TensorFlow.TFOutput" />
        <Parameter Name="epsilon" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="ms">
              Should be from a Variable().
            </param>
        <param name="mom">
              Should be from a Variable().
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="rho">
              Decay rate. Must be a scalar.
            </param>
        <param name="momentum">
        </param>
        <param name="epsilon">
              Ridge term. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="use_locking">
              Optional argument
              If `True`, updating of the var, ms, and mom tensors is protected
              by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceApplyRMSProp'.
            </param>
        <summary>
              Update '*var' according to the RMSProp algorithm.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              Note that in dense implementation of this algorithm, ms and mom will
              update even if the grad is zero, but in this sparse implementation, ms
              and mom will not update in iterations during which the grad is zero.
              
              mean_square = decay * mean_square + (1-decay) * gradient ** 2
              Delta = learning_rate * gradient / sqrt(mean_square + epsilon)
              
              ms &amp;lt;- rho * ms_{t-1} + (1-rho) * grad * grad
              mom &amp;lt;- momentum * mom_{t-1} + lr * grad / sqrt(ms + epsilon)
              var &amp;lt;- var - mom
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceGather">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ResourceGather (TensorFlow.TFOutput resource, TensorFlow.TFOutput indices, TensorFlow.TFDataType dtype, Nullable&lt;bool&gt; validate_indices = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ResourceGather(valuetype TensorFlow.TFOutput resource, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFDataType dtype, valuetype System.Nullable`1&lt;bool&gt; validate_indices, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="validate_indices" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">
        </param>
        <param name="indices">
        </param>
        <param name="dtype">
        </param>
        <param name="validate_indices">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceGather'.
            </param>
        <summary>
              Gather slices from the variable pointed to by `resource` according to `indices`.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              `indices` must be an integer tensor of any dimension (usually 0-D or 1-D).
              Produces an output tensor with shape `indices.shape + params.shape[1:]` where:
              
              ```python
                  # Scalar indices
                  output[:, ..., :] = params[indices, :, ... :]
              
                  # Vector indices
                  output[i, :, ..., :] = params[indices[i], :, ... :]
              
                  # Higher rank indices
                  output[i, ..., j, :, ... :] = params[indices[i, ..., j], :, ..., :]
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceScatterAdd">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceScatterAdd (TensorFlow.TFOutput resource, TensorFlow.TFOutput indices, TensorFlow.TFOutput updates, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceScatterAdd(valuetype TensorFlow.TFOutput resource, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput updates, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="updates" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">
              Should be from a `Variable` node.
            </param>
        <param name="indices">
              A tensor of indices into the first dimension of `ref`.
            </param>
        <param name="updates">
              A tensor of updated values to add to `ref`.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceScatterAdd'.
            </param>
        <summary>
              Adds sparse updates to the variable referenced by `resource`.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              This operation computes
              
                  # Scalar indices
                  ref[indices, ...] += updates[...]
              
                  # Vector indices (for each i)
                  ref[indices[i], ...] += updates[i, ...]
              
                  # High rank indices (for each i, ..., j)
                  ref[indices[i, ..., j], ...] += updates[i, ..., j, ...]
              
              Duplicate entries are handled correctly: if multiple `indices` reference
              the same location, their contributions add.
              
              Requires `updates.shape = indices.shape + ref.shape[1:]`.
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src="https://www.tensorflow.org/images/ScatterAdd.png" alt&amp;gt;
              &amp;lt;/div&amp;gt;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceSparseApplyAdadelta">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceSparseApplyAdadelta (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput accum_update, TensorFlow.TFOutput lr, TensorFlow.TFOutput rho, TensorFlow.TFOutput epsilon, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceSparseApplyAdadelta(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput accum, valuetype TensorFlow.TFOutput accum_update, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput rho, valuetype TensorFlow.TFOutput epsilon, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput indices, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum_update" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="rho" Type="TensorFlow.TFOutput" />
        <Parameter Name="epsilon" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
        </param>
        <param name="accum">
              Should be from a Variable().
            </param>
        <param name="accum_update">
              : Should be from a Variable().
            </param>
        <param name="lr">
              Learning rate. Must be a scalar.
            </param>
        <param name="rho">
              Decay factor. Must be a scalar.
            </param>
        <param name="epsilon">
              Constant factor. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="indices">
              A vector of indices into the first dimension of var and accum.
            </param>
        <param name="use_locking">
              Optional argument
              If True, updating of the var and accum tensors will be protected by
              a lock; otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceSparseApplyAdadelta'.
            </param>
        <summary>
              var: Should be from a Variable().
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceSparseApplyAdagrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceSparseApplyAdagrad (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput lr, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceSparseApplyAdagrad(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput accum, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput indices, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="accum">
              Should be from a Variable().
            </param>
        <param name="lr">
              Learning rate. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="indices">
              A vector of indices into the first dimension of var and accum.
            </param>
        <param name="use_locking">
              Optional argument
              If `True`, updating of the var and accum tensors will be protected
              by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceSparseApplyAdagrad'.
            </param>
        <summary>
              Update relevant entries in '*var' and '*accum' according to the adagrad scheme.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              That is for rows we have grad for, we update var and accum as follows:
              accum += grad * grad
              var -= lr * grad * (1 / sqrt(accum))
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceSparseApplyAdagradDA">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceSparseApplyAdagradDA (TensorFlow.TFOutput var, TensorFlow.TFOutput gradient_accumulator, TensorFlow.TFOutput gradient_squared_accumulator, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, TensorFlow.TFOutput lr, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput global_step, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceSparseApplyAdagradDA(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput gradient_accumulator, valuetype TensorFlow.TFOutput gradient_squared_accumulator, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput l1, valuetype TensorFlow.TFOutput l2, valuetype TensorFlow.TFOutput global_step, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="gradient_accumulator" Type="TensorFlow.TFOutput" />
        <Parameter Name="gradient_squared_accumulator" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="l1" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2" Type="TensorFlow.TFOutput" />
        <Parameter Name="global_step" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="gradient_accumulator">
              Should be from a Variable().
            </param>
        <param name="gradient_squared_accumulator">
              Should be from a Variable().
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="indices">
              A vector of indices into the first dimension of var and accum.
            </param>
        <param name="lr">
              Learning rate. Must be a scalar.
            </param>
        <param name="l1">
              L1 regularization. Must be a scalar.
            </param>
        <param name="l2">
              L2 regularization. Must be a scalar.
            </param>
        <param name="global_step">
              Training step number. Must be a scalar.
            </param>
        <param name="use_locking">
              Optional argument
              If True, updating of the var and accum tensors will be protected by
              a lock; otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceSparseApplyAdagradDA'.
            </param>
        <summary>
              Update entries in '*var' and '*accum' according to the proximal adagrad scheme.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceSparseApplyCenteredRMSProp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceSparseApplyCenteredRMSProp (TensorFlow.TFOutput var, TensorFlow.TFOutput mg, TensorFlow.TFOutput ms, TensorFlow.TFOutput mom, TensorFlow.TFOutput lr, TensorFlow.TFOutput rho, TensorFlow.TFOutput momentum, TensorFlow.TFOutput epsilon, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceSparseApplyCenteredRMSProp(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput mg, valuetype TensorFlow.TFOutput ms, valuetype TensorFlow.TFOutput mom, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput rho, valuetype TensorFlow.TFOutput momentum, valuetype TensorFlow.TFOutput epsilon, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput indices, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="mg" Type="TensorFlow.TFOutput" />
        <Parameter Name="ms" Type="TensorFlow.TFOutput" />
        <Parameter Name="mom" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="rho" Type="TensorFlow.TFOutput" />
        <Parameter Name="momentum" Type="TensorFlow.TFOutput" />
        <Parameter Name="epsilon" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="mg">
              Should be from a Variable().
            </param>
        <param name="ms">
              Should be from a Variable().
            </param>
        <param name="mom">
              Should be from a Variable().
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="rho">
              Decay rate. Must be a scalar.
            </param>
        <param name="momentum">
        </param>
        <param name="epsilon">
              Ridge term. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="indices">
              A vector of indices into the first dimension of var, ms and mom.
            </param>
        <param name="use_locking">
              Optional argument
              If `True`, updating of the var, mg, ms, and mom tensors is
              protected by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceSparseApplyCenteredRMSProp'.
            </param>
        <summary>
              Update '*var' according to the centered RMSProp algorithm.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              The centered RMSProp algorithm uses an estimate of the centered second moment
              (i.e., the variance) for normalization, as opposed to regular RMSProp, which
              uses the (uncentered) second moment. This often helps with training, but is
              slightly more expensive in terms of computation and memory.
              
              Note that in dense implementation of this algorithm, mg, ms, and mom will
              update even if the grad is zero, but in this sparse implementation, mg, ms,
              and mom will not update in iterations during which the grad is zero.
              
              mean_square = decay * mean_square + (1-decay) * gradient ** 2
              mean_grad = decay * mean_grad + (1-decay) * gradient
              Delta = learning_rate * gradient / sqrt(mean_square + epsilon - mean_grad ** 2)
              
              ms &amp;lt;- rho * ms_{t-1} + (1-rho) * grad * grad
              mom &amp;lt;- momentum * mom_{t-1} + lr * grad / sqrt(ms + epsilon)
              var &amp;lt;- var - mom
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceSparseApplyFtrl">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceSparseApplyFtrl (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput linear, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, TensorFlow.TFOutput lr, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput lr_power, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceSparseApplyFtrl(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput accum, valuetype TensorFlow.TFOutput linear, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput l1, valuetype TensorFlow.TFOutput l2, valuetype TensorFlow.TFOutput lr_power, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum" Type="TensorFlow.TFOutput" />
        <Parameter Name="linear" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="l1" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr_power" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="accum">
              Should be from a Variable().
            </param>
        <param name="linear">
              Should be from a Variable().
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="indices">
              A vector of indices into the first dimension of var and accum.
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="l1">
              L1 regularization. Must be a scalar.
            </param>
        <param name="l2">
              L2 regularization. Must be a scalar.
            </param>
        <param name="lr_power">
              Scaling factor. Must be a scalar.
            </param>
        <param name="use_locking">
              Optional argument
              If `True`, updating of the var and accum tensors will be protected
              by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceSparseApplyFtrl'.
            </param>
        <summary>
              Update relevant entries in '*var' according to the Ftrl-proximal scheme.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              That is for rows we have grad for, we update var, accum and linear as follows:
              accum_new = accum + grad * grad
              linear += grad + (accum_new^(-lr_power) - accum^(-lr_power)) / lr * var
              quadratic = 1.0 / (accum_new^(lr_power) * lr) + 2 * l2
              var = (sign(linear) * l1 - linear) / quadratic if |linear| &amp;gt; l1 else 0.0
              accum = accum_new
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceSparseApplyMomentum">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceSparseApplyMomentum (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput lr, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, TensorFlow.TFOutput momentum, Nullable&lt;bool&gt; use_locking = null, Nullable&lt;bool&gt; use_nesterov = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceSparseApplyMomentum(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput accum, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput momentum, valuetype System.Nullable`1&lt;bool&gt; use_locking, valuetype System.Nullable`1&lt;bool&gt; use_nesterov, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="momentum" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="use_nesterov" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="accum">
              Should be from a Variable().
            </param>
        <param name="lr">
              Learning rate. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="indices">
              A vector of indices into the first dimension of var and accum.
            </param>
        <param name="momentum">
              Momentum. Must be a scalar.
            </param>
        <param name="use_locking">
              Optional argument
              If `True`, updating of the var and accum tensors will be protected
              by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="use_nesterov">
              Optional argument
              If `True`, the tensor passed to compute grad will be
              var - lr * momentum * accum, so in the end, the var you get is actually
              var - lr * momentum * accum.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceSparseApplyMomentum'.
            </param>
        <summary>
              Update relevant entries in '*var' and '*accum' according to the momentum scheme.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              Set use_nesterov = True if you want to use Nesterov momentum.
              
              That is for rows we have grad for, we update var and accum as follows:
              
              accum = accum * momentum + grad
              var -= lr * accum
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceSparseApplyProximalAdagrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceSparseApplyProximalAdagrad (TensorFlow.TFOutput var, TensorFlow.TFOutput accum, TensorFlow.TFOutput lr, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceSparseApplyProximalAdagrad(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput accum, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput l1, valuetype TensorFlow.TFOutput l2, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput indices, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="accum" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="l1" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="accum">
              Should be from a Variable().
            </param>
        <param name="lr">
              Learning rate. Must be a scalar.
            </param>
        <param name="l1">
              L1 regularization. Must be a scalar.
            </param>
        <param name="l2">
              L2 regularization. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="indices">
              A vector of indices into the first dimension of var and accum.
            </param>
        <param name="use_locking">
              Optional argument
              If True, updating of the var and accum tensors will be protected by
              a lock; otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceSparseApplyProximalAdagrad'.
            </param>
        <summary>
              Sparse update entries in '*var' and '*accum' according to FOBOS algorithm.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              That is for rows we have grad for, we update var and accum as follows:
              accum += grad * grad
              prox_v = var
              prox_v -= lr * grad * (1 / sqrt(accum))
              var = sign(prox_v)/(1+lr*l2) * max{|prox_v|-lr*l1,0}
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceSparseApplyProximalGradientDescent">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceSparseApplyProximalGradientDescent (TensorFlow.TFOutput var, TensorFlow.TFOutput alpha, TensorFlow.TFOutput l1, TensorFlow.TFOutput l2, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceSparseApplyProximalGradientDescent(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput alpha, valuetype TensorFlow.TFOutput l1, valuetype TensorFlow.TFOutput l2, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput indices, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="alpha" Type="TensorFlow.TFOutput" />
        <Parameter Name="l1" Type="TensorFlow.TFOutput" />
        <Parameter Name="l2" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="alpha">
              Scaling factor. Must be a scalar.
            </param>
        <param name="l1">
              L1 regularization. Must be a scalar.
            </param>
        <param name="l2">
              L2 regularization. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="indices">
              A vector of indices into the first dimension of var and accum.
            </param>
        <param name="use_locking">
              Optional argument
              If True, the subtraction will be protected by a lock;
              otherwise the behavior is undefined, but may exhibit less contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceSparseApplyProximalGradientDescent'.
            </param>
        <summary>
              Sparse update '*var' as FOBOS algorithm with fixed learning rate.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              That is for rows we have grad for, we update var as follows:
              prox_v = var - alpha * grad
              var = sign(prox_v)/(1+alpha*l2) * max{|prox_v|-alpha*l1,0}
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceSparseApplyRMSProp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceSparseApplyRMSProp (TensorFlow.TFOutput var, TensorFlow.TFOutput ms, TensorFlow.TFOutput mom, TensorFlow.TFOutput lr, TensorFlow.TFOutput rho, TensorFlow.TFOutput momentum, TensorFlow.TFOutput epsilon, TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, Nullable&lt;bool&gt; use_locking = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceSparseApplyRMSProp(valuetype TensorFlow.TFOutput var, valuetype TensorFlow.TFOutput ms, valuetype TensorFlow.TFOutput mom, valuetype TensorFlow.TFOutput lr, valuetype TensorFlow.TFOutput rho, valuetype TensorFlow.TFOutput momentum, valuetype TensorFlow.TFOutput epsilon, valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput indices, valuetype System.Nullable`1&lt;bool&gt; use_locking, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="var" Type="TensorFlow.TFOutput" />
        <Parameter Name="ms" Type="TensorFlow.TFOutput" />
        <Parameter Name="mom" Type="TensorFlow.TFOutput" />
        <Parameter Name="lr" Type="TensorFlow.TFOutput" />
        <Parameter Name="rho" Type="TensorFlow.TFOutput" />
        <Parameter Name="momentum" Type="TensorFlow.TFOutput" />
        <Parameter Name="epsilon" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="use_locking" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="var">
              Should be from a Variable().
            </param>
        <param name="ms">
              Should be from a Variable().
            </param>
        <param name="mom">
              Should be from a Variable().
            </param>
        <param name="lr">
              Scaling factor. Must be a scalar.
            </param>
        <param name="rho">
              Decay rate. Must be a scalar.
            </param>
        <param name="momentum">
        </param>
        <param name="epsilon">
              Ridge term. Must be a scalar.
            </param>
        <param name="grad">
              The gradient.
            </param>
        <param name="indices">
              A vector of indices into the first dimension of var, ms and mom.
            </param>
        <param name="use_locking">
              Optional argument
              If `True`, updating of the var, ms, and mom tensors is protected
              by a lock; otherwise the behavior is undefined, but may exhibit less
              contention.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceSparseApplyRMSProp'.
            </param>
        <summary>
              Update '*var' according to the RMSProp algorithm.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              Note that in dense implementation of this algorithm, ms and mom will
              update even if the grad is zero, but in this sparse implementation, ms
              and mom will not update in iterations during which the grad is zero.
              
              mean_square = decay * mean_square + (1-decay) * gradient ** 2
              Delta = learning_rate * gradient / sqrt(mean_square + epsilon)
              
              ms &amp;lt;- rho * ms_{t-1} + (1-rho) * grad * grad
              mom &amp;lt;- momentum * mom_{t-1} + lr * grad / sqrt(ms + epsilon)
              var &amp;lt;- var - mom
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceStridedSliceAssign">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation ResourceStridedSliceAssign (TensorFlow.TFOutput reference, TensorFlow.TFOutput begin, TensorFlow.TFOutput end, TensorFlow.TFOutput strides, TensorFlow.TFOutput value, Nullable&lt;long&gt; begin_mask = null, Nullable&lt;long&gt; end_mask = null, Nullable&lt;long&gt; ellipsis_mask = null, Nullable&lt;long&gt; new_axis_mask = null, Nullable&lt;long&gt; shrink_axis_mask = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation ResourceStridedSliceAssign(valuetype TensorFlow.TFOutput reference, valuetype TensorFlow.TFOutput begin, valuetype TensorFlow.TFOutput end, valuetype TensorFlow.TFOutput strides, valuetype TensorFlow.TFOutput value, valuetype System.Nullable`1&lt;int64&gt; begin_mask, valuetype System.Nullable`1&lt;int64&gt; end_mask, valuetype System.Nullable`1&lt;int64&gt; ellipsis_mask, valuetype System.Nullable`1&lt;int64&gt; new_axis_mask, valuetype System.Nullable`1&lt;int64&gt; shrink_axis_mask, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="TensorFlow.TFOutput" />
        <Parameter Name="begin" Type="TensorFlow.TFOutput" />
        <Parameter Name="end" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="TensorFlow.TFOutput" />
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="begin_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="end_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="ellipsis_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="new_axis_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="shrink_axis_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reference">
        </param>
        <param name="begin">
        </param>
        <param name="end">
        </param>
        <param name="strides">
        </param>
        <param name="value">
        </param>
        <param name="begin_mask">
              Optional argument
            </param>
        <param name="end_mask">
              Optional argument
            </param>
        <param name="ellipsis_mask">
              Optional argument
            </param>
        <param name="new_axis_mask">
              Optional argument
            </param>
        <param name="shrink_axis_mask">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ResourceStridedSliceAssign'.
            </param>
        <summary>
              Assign `value` to the sliced l-value reference of `ref`.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              The values of `value` are assigned to the positions in the variable
              `ref` that are selected by the slice parameters. The slice parameters
              `begin, `end`, `strides`, etc. work exactly as in `StridedSlice`.
              
              NOTE this op currently does not support broadcasting and so `value`'s
              shape must be exactly the shape produced by the slice of `ref`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Restore">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Restore (TensorFlow.TFOutput file_pattern, TensorFlow.TFOutput tensor_name, TensorFlow.TFDataType dt, Nullable&lt;long&gt; preferred_shard = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Restore(valuetype TensorFlow.TFOutput file_pattern, valuetype TensorFlow.TFOutput tensor_name, valuetype TensorFlow.TFDataType dt, valuetype System.Nullable`1&lt;int64&gt; preferred_shard, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file_pattern" Type="TensorFlow.TFOutput" />
        <Parameter Name="tensor_name" Type="TensorFlow.TFOutput" />
        <Parameter Name="dt" Type="TensorFlow.TFDataType" />
        <Parameter Name="preferred_shard" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file_pattern">
              Must have a single element. The pattern of the files from
              which we read the tensor.
            </param>
        <param name="tensor_name">
              Must have a single element. The name of the tensor to be
              restored.
            </param>
        <param name="dt">
              The type of the tensor to be restored.
            </param>
        <param name="preferred_shard">
              Optional argument
              Index of file to open first if multiple files match
              `file_pattern`.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Restore'.
            </param>
        <summary>
              Restores a tensor from checkpoint files.
            </summary>
        <returns>
              The restored tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Reads a tensor stored in one or several files. If there are several files (for
              instance because a tensor was saved as slices), `file_pattern` may contain
              wildcard symbols (`*` and `?`) in the filename portion only, not in the
              directory portion.
              
              If a `file_pattern` matches several files, `preferred_shard` can be used to hint
              in which file the requested tensor is likely to be found. This op will first
              open the file at index `preferred_shard` in the list of matching files and try
              to restore tensors from that file.  Only if some tensors or tensor slices are
              not found in that first file, then the Op opens all the files. Setting
              `preferred_shard` to match the value passed as the `shard` input
              of a matching `Save` Op may speed up Restore.  This attribute only affects
              performance, not correctness.  The default value -1 means files are processed in
              order.
              
              See also `RestoreSlice`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RestoreSlice">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RestoreSlice (TensorFlow.TFOutput file_pattern, TensorFlow.TFOutput tensor_name, TensorFlow.TFOutput shape_and_slice, TensorFlow.TFDataType dt, Nullable&lt;long&gt; preferred_shard = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RestoreSlice(valuetype TensorFlow.TFOutput file_pattern, valuetype TensorFlow.TFOutput tensor_name, valuetype TensorFlow.TFOutput shape_and_slice, valuetype TensorFlow.TFDataType dt, valuetype System.Nullable`1&lt;int64&gt; preferred_shard, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file_pattern" Type="TensorFlow.TFOutput" />
        <Parameter Name="tensor_name" Type="TensorFlow.TFOutput" />
        <Parameter Name="shape_and_slice" Type="TensorFlow.TFOutput" />
        <Parameter Name="dt" Type="TensorFlow.TFDataType" />
        <Parameter Name="preferred_shard" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file_pattern">
              Must have a single element. The pattern of the files from
              which we read the tensor.
            </param>
        <param name="tensor_name">
              Must have a single element. The name of the tensor to be
              restored.
            </param>
        <param name="shape_and_slice">
              Scalar. The shapes and slice specifications to use when
              restoring a tensors.
            </param>
        <param name="dt">
              The type of the tensor to be restored.
            </param>
        <param name="preferred_shard">
              Optional argument
              Index of file to open first if multiple files match
              `file_pattern`. See the documentation for `Restore`.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RestoreSlice'.
            </param>
        <summary>
              Restores a tensor from checkpoint files.
            </summary>
        <returns>
              The restored tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This is like `Restore` except that restored tensor can be listed as filling
              only a slice of a larger tensor.  `shape_and_slice` specifies the shape of the
              larger tensor and the slice that the restored tensor covers.
              
              The `shape_and_slice` input has the same format as the
              elements of the `shapes_and_slices` input of the `SaveSlices` op.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RestoreV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] RestoreV2 (TensorFlow.TFOutput prefix, TensorFlow.TFOutput tensor_names, TensorFlow.TFOutput shape_and_slices, TensorFlow.TFDataType[] dtypes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] RestoreV2(valuetype TensorFlow.TFOutput prefix, valuetype TensorFlow.TFOutput tensor_names, valuetype TensorFlow.TFOutput shape_and_slices, valuetype TensorFlow.TFDataType[] dtypes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="TensorFlow.TFOutput" />
        <Parameter Name="tensor_names" Type="TensorFlow.TFOutput" />
        <Parameter Name="shape_and_slices" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">
              Must have a single element.  The prefix of a V2 checkpoint.
            </param>
        <param name="tensor_names">
              shape {N}.  The names of the tensors to be restored.
            </param>
        <param name="shape_and_slices">
              shape {N}.  The slice specs of the tensors to be restored.
              Empty strings indicate that they are non-partitioned tensors.
            </param>
        <param name="dtypes">
              shape {N}.  The list of expected dtype for the tensors.  Must match
              those stored in the checkpoint.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RestoreV2'.
            </param>
        <summary>
              Restores tensors from a V2 checkpoint.
            </summary>
        <returns>
              shape {N}.  The restored tensors, whose shapes are read from the
              checkpoint directly.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              For backward compatibility with the V1 format, this Op currently allows
              restoring from a V1 checkpoint as well:
                - This Op first attempts to find the V2 index file pointed to by "prefix", and
                  if found proceed to read it as a V2 checkpoint;
                - Otherwise the V1 read path is invoked.
              Relying on this behavior is not recommended, as the ability to fall back to read
              V1 might be deprecated and eventually removed.
              
              By default, restores the named tensors in full.  If the caller wishes to restore
              specific slices of stored tensors, "shape_and_slices" should be non-empty
              strings and correspondingly well-formed.
              
              Callers must ensure all the named tensors are indeed stored in the checkpoint.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Reverse (TensorFlow.TFOutput tensor, TensorFlow.TFOutput dims, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Reverse(valuetype TensorFlow.TFOutput tensor, valuetype TensorFlow.TFOutput dims, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tensor" Type="TensorFlow.TFOutput" />
        <Parameter Name="dims" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tensor">
              Up to 8-D.
            </param>
        <param name="dims">
              1-D. The dimensions to reverse.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Reverse'.
            </param>
        <summary>
              Reverses specific dimensions of a tensor.
            </summary>
        <returns>
              The same shape as `tensor`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given a `tensor`, and a `bool` tensor `dims` representing the dimensions
              of `tensor`, this operation reverses each dimension i of `tensor` where
              `dims[i]` is `True`.
              
              `tensor` can have up to 8 dimensions. The number of dimensions
              of `tensor` must equal the number of elements in `dims`. In other words:
              
              `rank(tensor) = size(dims)`
              
              For example:
              
              ```
              # tensor 't' is [[[[ 0,  1,  2,  3],
              #                  [ 4,  5,  6,  7],
              #                  [ 8,  9, 10, 11]],
              #                 [[12, 13, 14, 15],
              #                  [16, 17, 18, 19],
              #                  [20, 21, 22, 23]]]]
              # tensor 't' shape is [1, 2, 3, 4]
              
              # 'dims' is [False, False, False, True]
              reverse(t, dims) ==&amp;gt; [[[[ 3,  2,  1,  0],
                                      [ 7,  6,  5,  4],
                                      [ 11, 10, 9, 8]],
                                     [[15, 14, 13, 12],
                                      [19, 18, 17, 16],
                                      [23, 22, 21, 20]]]]
              
              # 'dims' is [False, True, False, False]
              reverse(t, dims) ==&amp;gt; [[[[12, 13, 14, 15],
                                      [16, 17, 18, 19],
                                      [20, 21, 22, 23]
                                     [[ 0,  1,  2,  3],
                                      [ 4,  5,  6,  7],
                                      [ 8,  9, 10, 11]]]]
              
              # 'dims' is [False, False, True, False]
              reverse(t, dims) ==&amp;gt; [[[[8, 9, 10, 11],
                                      [4, 5, 6, 7],
                                      [0, 1, 2, 3]]
                                     [[20, 21, 22, 23],
                                      [16, 17, 18, 19],
                                      [12, 13, 14, 15]]]]
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReverseSequence">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ReverseSequence (TensorFlow.TFOutput input, TensorFlow.TFOutput seq_lengths, long seq_dim, Nullable&lt;long&gt; batch_dim = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ReverseSequence(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput seq_lengths, int64 seq_dim, valuetype System.Nullable`1&lt;int64&gt; batch_dim, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="seq_lengths" Type="TensorFlow.TFOutput" />
        <Parameter Name="seq_dim" Type="System.Int64" />
        <Parameter Name="batch_dim" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The input to reverse.
            </param>
        <param name="seq_lengths">
              1-D with length `input.dims(batch_dim)` and
              `max(seq_lengths) &amp;lt;= input.dims(seq_dim)`
            </param>
        <param name="seq_dim">
              The dimension which is partially reversed.
            </param>
        <param name="batch_dim">
              Optional argument
              The dimension along which reversal is performed.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReverseSequence'.
            </param>
        <summary>
              Reverses variable length slices.
            </summary>
        <returns>
              The partially reversed input. It has the same shape as `input`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op first slices `input` along the dimension `batch_dim`, and for each
              slice `i`, reverses the first `seq_lengths[i]` elements along
              the dimension `seq_dim`.
              
              The elements of `seq_lengths` must obey `seq_lengths[i] &amp;lt;= input.dims[seq_dim]`,
              and `seq_lengths` must be a vector of length `input.dims[batch_dim]`.
              
              The output slice `i` along dimension `batch_dim` is then given by input
              slice `i`, with the first `seq_lengths[i]` slices along dimension
              `seq_dim` reversed.
              
              For example:
              
              ```
              # Given this:
              batch_dim = 0
              seq_dim = 1
              input.dims = (4, 8, ...)
              seq_lengths = [7, 2, 3, 5]
              
              # then slices of input are reversed on seq_dim, but only up to seq_lengths:
              output[0, 0:7, :, ...] = input[0, 7:0:-1, :, ...]
              output[1, 0:2, :, ...] = input[1, 2:0:-1, :, ...]
              output[2, 0:3, :, ...] = input[2, 3:0:-1, :, ...]
              output[3, 0:5, :, ...] = input[3, 5:0:-1, :, ...]
              
              # while entries past seq_lens are copied through:
              output[0, 7:, :, ...] = input[0, 7:, :, ...]
              output[1, 2:, :, ...] = input[1, 2:, :, ...]
              output[2, 3:, :, ...] = input[2, 3:, :, ...]
              output[3, 2:, :, ...] = input[3, 2:, :, ...]
              ```
              
              In contrast, if:
              
              ```
              # Given this:
              batch_dim = 2
              seq_dim = 0
              input.dims = (8, ?, 4, ...)
              seq_lengths = [7, 2, 3, 5]
              
              # then slices of input are reversed on seq_dim, but only up to seq_lengths:
              output[0:7, :, 0, :, ...] = input[7:0:-1, :, 0, :, ...]
              output[0:2, :, 1, :, ...] = input[2:0:-1, :, 1, :, ...]
              output[0:3, :, 2, :, ...] = input[3:0:-1, :, 2, :, ...]
              output[0:5, :, 3, :, ...] = input[5:0:-1, :, 3, :, ...]
              
              # while entries past seq_lens are copied through:
              output[7:, :, 0, :, ...] = input[7:, :, 0, :, ...]
              output[2:, :, 1, :, ...] = input[2:, :, 1, :, ...]
              output[3:, :, 2, :, ...] = input[3:, :, 2, :, ...]
              output[2:, :, 3, :, ...] = input[2:, :, 3, :, ...]
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReverseV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ReverseV2 (TensorFlow.TFOutput tensor, TensorFlow.TFOutput axis, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ReverseV2(valuetype TensorFlow.TFOutput tensor, valuetype TensorFlow.TFOutput axis, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tensor" Type="TensorFlow.TFOutput" />
        <Parameter Name="axis" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tensor">
              Up to 8-D.
            </param>
        <param name="axis">
              1-D. The indices of the dimensions to reverse.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ReverseV2'.
            </param>
        <summary>
              Reverses specific dimensions of a tensor.
            </summary>
        <returns>
              The same shape as `tensor`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              NOTE `tf.reverse` has now changed behavior in preparation for 1.0.
              `tf.reverse_v2` is currently an alias that will be deprecated before TF 1.0.
              
              Given a `tensor`, and a `int32` tensor `axis` representing the set of
              dimensions of `tensor` to reverse. This operation reverses each dimension
              `i` for which there exists `j` s.t. `axis[j] == i`.
              
              `tensor` can have up to 8 dimensions. The number of dimensions specified
              in `axis` may be 0 or more entries. If an index is specified more than
              once, a InvalidArgument error is raised.
              
              For example:
              
              ```
              # tensor 't' is [[[[ 0,  1,  2,  3],
              #                  [ 4,  5,  6,  7],
              #                  [ 8,  9, 10, 11]],
              #                 [[12, 13, 14, 15],
              #                  [16, 17, 18, 19],
              #                  [20, 21, 22, 23]]]]
              # tensor 't' shape is [1, 2, 3, 4]
              
              # 'dims' is [3] or 'dims' is -1
              reverse(t, dims) ==&amp;gt; [[[[ 3,  2,  1,  0],
                                      [ 7,  6,  5,  4],
                                      [ 11, 10, 9, 8]],
                                     [[15, 14, 13, 12],
                                      [19, 18, 17, 16],
                                      [23, 22, 21, 20]]]]
              
              # 'dims' is '[1]' (or 'dims' is '[-3]')
              reverse(t, dims) ==&amp;gt; [[[[12, 13, 14, 15],
                                      [16, 17, 18, 19],
                                      [20, 21, 22, 23]
                                     [[ 0,  1,  2,  3],
                                      [ 4,  5,  6,  7],
                                      [ 8,  9, 10, 11]]]]
              
              # 'dims' is '[2]' (or 'dims' is '[-2]')
              reverse(t, dims) ==&amp;gt; [[[[8, 9, 10, 11],
                                      [4, 5, 6, 7],
                                      [0, 1, 2, 3]]
                                     [[20, 21, 22, 23],
                                      [16, 17, 18, 19],
                                      [12, 13, 14, 15]]]]
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RFFT">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RFFT (TensorFlow.TFOutput input, TensorFlow.TFOutput fft_length, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RFFT(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput fft_length, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="fft_length" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A float32 tensor.
            </param>
        <param name="fft_length">
              An int32 tensor of shape [1]. The FFT length.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RFFT'.
            </param>
        <summary>
              Real-valued fast Fourier transform.
            </summary>
        <returns>
              A complex64 tensor of the same rank as `input`. The inner-most
                dimension of `input` is replaced with the `fft_length / 2 + 1` unique
                frequency components of its 1D Fourier transform.
              
              @compatibility(numpy)
              Equivalent to np.fft.rfft
              @end_compatibility
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Computes the 1-dimensional discrete Fourier transform of a real-valued signal
              over the inner-most dimension of `input`.
              
              Since the DFT of a real signal is Hermitian-symmetric, `RFFT` only returns the
              `fft_length / 2 + 1` unique components of the FFT: the zero-frequency term,
              followed by the `fft_length / 2` positive-frequency terms.
              
              Along the axis `RFFT` is computed on, if `fft_length` is smaller than the
              corresponding dimension of `input`, the dimension is cropped. If it is larger,
              the dimension is padded with zeros.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RFFT2D">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RFFT2D (TensorFlow.TFOutput input, TensorFlow.TFOutput fft_length, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RFFT2D(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput fft_length, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="fft_length" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A float32 tensor.
            </param>
        <param name="fft_length">
              An int32 tensor of shape [2]. The FFT length for each dimension.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RFFT2D'.
            </param>
        <summary>
              2D real-valued fast Fourier transform.
            </summary>
        <returns>
              A complex64 tensor of the same rank as `input`. The inner-most 2
                dimensions of `input` are replaced with their 2D Fourier transform. The
                inner-most dimension contains `fft_length / 2 + 1` unique frequency
                components.
              
              @compatibility(numpy)
              Equivalent to np.fft.rfft2
              @end_compatibility
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Computes the 2-dimensional discrete Fourier transform of a real-valued signal
              over the inner-most 2 dimensions of `input`.
              
              Since the DFT of a real signal is Hermitian-symmetric, `RFFT2D` only returns the
              `fft_length / 2 + 1` unique components of the FFT for the inner-most dimension
              of `output`: the zero-frequency term, followed by the `fft_length / 2`
              positive-frequency terms.
              
              Along each axis `RFFT2D` is computed on, if `fft_length` is smaller than the
              corresponding dimension of `input`, the dimension is cropped. If it is larger,
              the dimension is padded with zeros.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RFFT3D">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RFFT3D (TensorFlow.TFOutput input, TensorFlow.TFOutput fft_length, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RFFT3D(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput fft_length, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="fft_length" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A float32 tensor.
            </param>
        <param name="fft_length">
              An int32 tensor of shape [3]. The FFT length for each dimension.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RFFT3D'.
            </param>
        <summary>
              3D real-valued fast Fourier transform.
            </summary>
        <returns>
              A complex64 tensor of the same rank as `input`. The inner-most 3
                dimensions of `input` are replaced with the their 3D Fourier transform. The
                inner-most dimension contains `fft_length / 2 + 1` unique frequency
                components.
              
              @compatibility(numpy)
              Equivalent to np.fft.rfftn with 3 dimensions.
              @end_compatibility
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Computes the 3-dimensional discrete Fourier transform of a real-valued signal
              over the inner-most 3 dimensions of `input`.
              
              Since the DFT of a real signal is Hermitian-symmetric, `RFFT3D` only returns the
              `fft_length / 2 + 1` unique components of the FFT for the inner-most dimension
              of `output`: the zero-frequency term, followed by the `fft_length / 2`
              positive-frequency terms.
              
              Along each axis `RFFT3D` is computed on, if `fft_length` is smaller than the
              corresponding dimension of `input`, the dimension is cropped. If it is larger,
              the dimension is padded with zeros.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RGBToHSV">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RGBToHSV (TensorFlow.TFOutput images, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RGBToHSV(valuetype TensorFlow.TFOutput images, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="images" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="images">
              1-D or higher rank. RGB data to convert. Last dimension must be size 3.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RGBToHSV'.
            </param>
        <summary>
              Converts one or more images from RGB to HSV.
            </summary>
        <returns>
              `images` converted to HSV.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Outputs a tensor of the same shape as the `images` tensor, containing the HSV
              value of the pixels. The output is only well defined if the value in `images`
              are in `[0,1]`.
              
              `output[..., 0]` contains hue, `output[..., 1]` contains saturation, and
              `output[..., 2]` contains value. All HSV values are in `[0,1]`. A hue of 0
              corresponds to pure red, hue 1/3 is pure green, and 2/3 is pure blue.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rint">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Rint (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Rint(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Rint'.
            </param>
        <summary>
              Returns element-wise integer closest to x.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              If the result is midway between two representable values,
              the even representable is chosen.
              For example:
              
              ```
              rint(-1.5) ==&amp;gt; -2.0
              rint(0.5000001) ==&amp;gt; 1.0
              rint([-1.7, -1.5, -0.2, 0.2, 1.5, 1.7, 2.0]) ==&amp;gt; [-2., -2., -0., 0., 2., 2., 2.]
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Round (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Round(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Round'.
            </param>
        <summary>
              Rounds the values of a tensor to the nearest integer, element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Rounds half to even.  Also known as bankers rounding. If you want to round
              according to the current system rounding mode use std::cint.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rsqrt">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Rsqrt (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Rsqrt(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Rsqrt'.
            </param>
        <summary>
              Computes reciprocal of square root of x element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              I.e., \\(y = 1 / \sqrt{x}\\).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RsqrtGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput RsqrtGrad (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput RsqrtGrad(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'RsqrtGrad'.
            </param>
        <summary>
              Computes the gradient for the rsqrt of `x` wrt its input.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Specifically, `grad = dy * -0.5 * y^3`, where `y = rsqrt(x)`, and `dy`
              is the corresponding input gradient.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SampleDistortedBoundingBox">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SampleDistortedBoundingBox (TensorFlow.TFOutput image_size, TensorFlow.TFOutput bounding_boxes, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, Nullable&lt;float&gt; min_object_covered = null, float[] aspect_ratio_range = null, float[] area_range = null, Nullable&lt;long&gt; max_attempts = null, Nullable&lt;bool&gt; use_image_if_no_bounding_boxes = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SampleDistortedBoundingBox(valuetype TensorFlow.TFOutput image_size, valuetype TensorFlow.TFOutput bounding_boxes, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, valuetype System.Nullable`1&lt;float32&gt; min_object_covered, float32[] aspect_ratio_range, float32[] area_range, valuetype System.Nullable`1&lt;int64&gt; max_attempts, valuetype System.Nullable`1&lt;bool&gt; use_image_if_no_bounding_boxes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="bounding_boxes" Type="TensorFlow.TFOutput" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="min_object_covered" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="aspect_ratio_range" Type="System.Single[]" />
        <Parameter Name="area_range" Type="System.Single[]" />
        <Parameter Name="max_attempts" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="use_image_if_no_bounding_boxes" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="image_size">
              1-D, containing `[height, width, channels]`.
            </param>
        <param name="bounding_boxes">
              3-D with shape `[batch, N, 4]` describing the N bounding boxes
              associated with the image.
            </param>
        <param name="seed">
              Optional argument
              If either `seed` or `seed2` are set to non-zero, the random number
              generator is seeded by the given `seed`.  Otherwise, it is seeded by a random
              seed.
            </param>
        <param name="seed2">
              Optional argument
              A second seed to avoid seed collision.
            </param>
        <param name="min_object_covered">
              Optional argument
              The cropped area of the image must contain at least this
              fraction of any bounding box supplied. The value of this parameter should be
              non-negative. In the case of 0, the cropped area does not need to overlap
              any of the bounding boxes supplied.
            </param>
        <param name="aspect_ratio_range">
              Optional argument
              The cropped area of the image must have an aspect ratio =
              width / height within this range.
            </param>
        <param name="area_range">
              Optional argument
              The cropped area of the image must contain a fraction of the
              supplied image within in this range.
            </param>
        <param name="max_attempts">
              Optional argument
              Number of attempts at generating a cropped region of the image
              of the specified constraints. After `max_attempts` failures, return the entire
              image.
            </param>
        <param name="use_image_if_no_bounding_boxes">
              Optional argument
              Controls behavior if no bounding boxes supplied.
              If true, assume an implicit bounding box covering the whole input. If false,
              raise an error.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SampleDistortedBoundingBox'.
            </param>
        <summary>
              Generate a single randomly distorted bounding box for an image.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              begin: 1-D, containing `[offset_height, offset_width, 0]`. Provide as input to
              `tf.slice`.
              size: 1-D, containing `[target_height, target_width, -1]`. Provide as input to
              `tf.slice`.
              bboxes: 3-D with shape `[1, 1, 4]` containing the distorted bounding box.
              Provide as input to `tf.image.draw_bounding_boxes`.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Bounding box annotations are often supplied in addition to ground-truth labels
              in image recognition or object localization tasks. A common technique for
              training such a system is to randomly distort an image while preserving
              its content, i.e. *data augmentation*. This Op outputs a randomly distorted
              localization of an object, i.e. bounding box, given an `image_size`,
              `bounding_boxes` and a series of constraints.
              
              The output of this Op is a single bounding box that may be used to crop the
              original image. The output is returned as 3 tensors: `begin`, `size` and
              `bboxes`. The first 2 tensors can be fed directly into `tf.slice` to crop the
              image. The latter may be supplied to `tf.image.draw_bounding_boxes` to visualize
              what the bounding box looks like.
              
              Bounding boxes are supplied and returned as `[y_min, x_min, y_max, x_max]`. The
              bounding box coordinates are floats in `[0.0, 1.0]` relative to the width and
              height of the underlying image.
              
              For example,
              
              ```python
                  # Generate a single distorted bounding box.
                  begin, size, bbox_for_draw = tf.image.sample_distorted_bounding_box(
                      tf.shape(image),
                      bounding_boxes=bounding_boxes)
              
                  # Draw the bounding box in an image summary.
                  image_with_box = tf.image.draw_bounding_boxes(tf.expand_dims(image, 0),
                                                                bbox_for_draw)
                  tf.image_summary('images_with_box', image_with_box)
              
                  # Employ the bounding box to distort the image.
                  distorted_image = tf.slice(image, begin, size)
              ```
              
              Note that if no bounding box information is available, setting
              `use_image_if_no_bounding_boxes = true` will assume there is a single implicit
              bounding box covering the whole image. If `use_image_if_no_bounding_boxes` is
              false and no bounding boxes are supplied, an error is raised.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation Save (TensorFlow.TFOutput filename, TensorFlow.TFOutput tensor_names, TensorFlow.TFOutput[] data, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation Save(valuetype TensorFlow.TFOutput filename, valuetype TensorFlow.TFOutput tensor_names, valuetype TensorFlow.TFOutput[] data, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="TensorFlow.TFOutput" />
        <Parameter Name="tensor_names" Type="TensorFlow.TFOutput" />
        <Parameter Name="data" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">
              Must have a single element. The name of the file to which we write
              the tensor.
            </param>
        <param name="tensor_names">
              Shape `[N]`. The names of the tensors to be saved.
            </param>
        <param name="data">
              `N` tensors to save.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Save'.
            </param>
        <summary>
              Saves the input tensors to disk.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              The size of `tensor_names` must match the number of tensors in `data`. `data[i]`
              is written to `filename` with name `tensor_names[i]`.
              
              See also `SaveSlices`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveSlices">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation SaveSlices (TensorFlow.TFOutput filename, TensorFlow.TFOutput tensor_names, TensorFlow.TFOutput shapes_and_slices, TensorFlow.TFOutput[] data, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation SaveSlices(valuetype TensorFlow.TFOutput filename, valuetype TensorFlow.TFOutput tensor_names, valuetype TensorFlow.TFOutput shapes_and_slices, valuetype TensorFlow.TFOutput[] data, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="TensorFlow.TFOutput" />
        <Parameter Name="tensor_names" Type="TensorFlow.TFOutput" />
        <Parameter Name="shapes_and_slices" Type="TensorFlow.TFOutput" />
        <Parameter Name="data" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">
              Must have a single element. The name of the file to which we write the
              tensor.
            </param>
        <param name="tensor_names">
              Shape `[N]`. The names of the tensors to be saved.
            </param>
        <param name="shapes_and_slices">
              Shape `[N]`.  The shapes and slice specifications to use when
              saving the tensors.
            </param>
        <param name="data">
              `N` tensors to save.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SaveSlices'.
            </param>
        <summary>
              Saves input tensors slices to disk.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              This is like `Save` except that tensors can be listed in the saved file as being
              a slice of a larger tensor.  `shapes_and_slices` specifies the shape of the
              larger tensor and the slice that this tensor covers. `shapes_and_slices` must
              have as many elements as `tensor_names`.
              
              Elements of the `shapes_and_slices` input must either be:
              
              *  The empty string, in which case the corresponding tensor is
                 saved normally.
              *  A string of the form `dim0 dim1 ... dimN-1 slice-spec` where the
                 `dimI` are the dimensions of the larger tensor and `slice-spec`
                 specifies what part is covered by the tensor to save.
              
              `slice-spec` itself is a `:`-separated list: `slice0:slice1:...:sliceN-1`
              where each `sliceI` is either:
              
              *  The string `-` meaning that the slice covers all indices of this dimension
              *  `start,length` where `start` and `length` are integers.  In that
                 case the slice covers `length` indices starting at `start`.
              
              See also `Save`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation SaveV2 (TensorFlow.TFOutput prefix, TensorFlow.TFOutput tensor_names, TensorFlow.TFOutput shape_and_slices, TensorFlow.TFOutput[] tensors, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation SaveV2(valuetype TensorFlow.TFOutput prefix, valuetype TensorFlow.TFOutput tensor_names, valuetype TensorFlow.TFOutput shape_and_slices, valuetype TensorFlow.TFOutput[] tensors, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="TensorFlow.TFOutput" />
        <Parameter Name="tensor_names" Type="TensorFlow.TFOutput" />
        <Parameter Name="shape_and_slices" Type="TensorFlow.TFOutput" />
        <Parameter Name="tensors" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">
              Must have a single element. The prefix of the V2 checkpoint to which we
              write the tensors.
            </param>
        <param name="tensor_names">
              shape {N}. The names of the tensors to be saved.
            </param>
        <param name="shape_and_slices">
              shape {N}.  The slice specs of the tensors to be saved.
              Empty strings indicate that they are non-partitioned tensors.
            </param>
        <param name="tensors">
              `N` tensors to save.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SaveV2'.
            </param>
        <summary>
              Saves tensors in V2 checkpoint format.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              By default, saves the named tensors in full.  If the caller wishes to save
              specific slices of full tensors, "shape_and_slices" should be non-empty strings
              and correspondingly well-formed.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScalarSummary">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ScalarSummary (TensorFlow.TFOutput tags, TensorFlow.TFOutput values, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ScalarSummary(valuetype TensorFlow.TFOutput tags, valuetype TensorFlow.TFOutput values, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tags" Type="TensorFlow.TFOutput" />
        <Parameter Name="values" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tags">
              Tags for the summary.
            </param>
        <param name="values">
              Same shape as `tags.  Values for the summary.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ScalarSummary'.
            </param>
        <summary>
              Outputs a `Summary` protocol buffer with scalar values.
            </summary>
        <returns>
              Scalar.  Serialized `Summary` protocol buffer.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The input `tags` and `values` must have the same shape.  The generated summary
              has a summary value for each tag-value pair in `tags` and `values`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScatterNd">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ScatterNd (TensorFlow.TFOutput indices, TensorFlow.TFOutput updates, TensorFlow.TFOutput shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ScatterNd(valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput updates, valuetype TensorFlow.TFOutput shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="updates" Type="TensorFlow.TFOutput" />
        <Parameter Name="shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="indices">
              Index tensor.
            </param>
        <param name="updates">
              Updates to scatter into output.
            </param>
        <param name="shape">
              1-D. The shape of the resulting tensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ScatterNd'.
            </param>
        <summary>
              Scatter `updates` into a new (initially zero) tensor according to `indices`.
            </summary>
        <returns>
              A new tensor with the given shape and updates applied according
              to the indices.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Creates a new tensor by applying sparse `updates` to individual
              values or slices within a zero tensor of the given `shape` according to
              indices.  This operator is the inverse of the [tf.gather_nd](#gather_nd)
              operator which extracts values or slices from a given tensor.
              
              **WARNING**: The order in which updates are applied is nondeterministic, so the
              output will be nondeterministic if `indices` contains duplicates.
              
              `indices` is an integer tensor containing indices into a new tensor of shape
              `shape`.  The last dimension of `indices` can be at most the rank of `shape`:
              
                  indices.shape[-1] &amp;lt;= shape.rank
              
              The last dimension of `indices` corresponds to indices into elements
              (if `indices.shape[-1] = shape.rank`) or slices
              (if `indices.shape[-1] &amp;lt; shape.rank`) along dimension `indices.shape[-1]` of
              `shape`.  `updates` is a tensor with shape
              
                  indices.shape[:-1] + shape[indices.shape[-1]:]
              
              The simplest form of scatter is to insert individual elements in a tensor by
              index. For example, say we want to insert 4 scattered elements in a rank-1
              tensor with 8 elements.
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src="https://www.tensorflow.org/images/ScatterNd1.png" alt&amp;gt;
              &amp;lt;/div&amp;gt;
              
              In Python, this scatter operation would look like this:
              
              ```python
                  indices = tf.constant([[4], [3], [1], [7]])
                  updates = tf.constant([9, 10, 11, 12])
                  shape = tf.constant([8])
                  scatter = tf.scatter_nd(indices, updates, shape)
                  with tf.Session() as sess:
                    print(sess.run(scatter))
              ```
              
              The resulting tensor would look like this:
              
                  [0, 11, 0, 10, 9, 0, 0, 12]
              
              We can also, insert entire slices of a higher rank tensor all at once. For
              example, if we wanted to insert two slices in the first dimension of a
              rank-3 tensor with two matrices of new values.
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src="https://www.tensorflow.org/images/ScatterNd2.png" alt&amp;gt;
              &amp;lt;/div&amp;gt;
              
              In Python, this scatter operation would look like this:
              
              ```python
                  indices = tf.constant([[0], [2]])
                  updates = tf.constant([[[5, 5, 5, 5], [6, 6, 6, 6],
                                          [7, 7, 7, 7], [8, 8, 8, 8]],
                                         [[5, 5, 5, 5], [6, 6, 6, 6],
                                          [7, 7, 7, 7], [8, 8, 8, 8]]])
                  shape = tf.constant([4, 4, 4])
                  scatter = tf.scatter_nd(indices, updates, shape)
                  with tf.Session() as sess:
                    print(sess.run(scatter))
              ```
              
              The resulting tensor would look like this:
              
                  [[[5, 5, 5, 5], [6, 6, 6, 6], [7, 7, 7, 7], [8, 8, 8, 8]],
                   [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
                   [[5, 5, 5, 5], [6, 6, 6, 6], [7, 7, 7, 7], [8, 8, 8, 8]],
                   [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SdcaFprint">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SdcaFprint (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SdcaFprint(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              vector of strings to compute fingerprints on.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SdcaFprint'.
            </param>
        <summary>
              Computes fingerprints of the input strings.
            </summary>
        <returns>
              a (N,2) shaped matrix where N is the number of elements in the input
              vector. Each row contains the low and high parts of the fingerprint.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SdcaOptimizer">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFOutput[]&gt; SdcaOptimizer (TensorFlow.TFOutput[] sparse_example_indices, TensorFlow.TFOutput[] sparse_feature_indices, TensorFlow.TFOutput[] sparse_feature_values, TensorFlow.TFOutput[] dense_features, TensorFlow.TFOutput example_weights, TensorFlow.TFOutput example_labels, TensorFlow.TFOutput[] sparse_indices, TensorFlow.TFOutput[] sparse_weights, TensorFlow.TFOutput[] dense_weights, TensorFlow.TFOutput example_state_data, string loss_type, float l1, float l2, long num_loss_partitions, long num_inner_iterations, Nullable&lt;bool&gt; adaptative = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[]&gt; SdcaOptimizer(valuetype TensorFlow.TFOutput[] sparse_example_indices, valuetype TensorFlow.TFOutput[] sparse_feature_indices, valuetype TensorFlow.TFOutput[] sparse_feature_values, valuetype TensorFlow.TFOutput[] dense_features, valuetype TensorFlow.TFOutput example_weights, valuetype TensorFlow.TFOutput example_labels, valuetype TensorFlow.TFOutput[] sparse_indices, valuetype TensorFlow.TFOutput[] sparse_weights, valuetype TensorFlow.TFOutput[] dense_weights, valuetype TensorFlow.TFOutput example_state_data, string loss_type, float32 l1, float32 l2, int64 num_loss_partitions, int64 num_inner_iterations, valuetype System.Nullable`1&lt;bool&gt; adaptative, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput[],TensorFlow.TFOutput[]&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sparse_example_indices" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="sparse_feature_indices" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="sparse_feature_values" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="dense_features" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="example_weights" Type="TensorFlow.TFOutput" />
        <Parameter Name="example_labels" Type="TensorFlow.TFOutput" />
        <Parameter Name="sparse_indices" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="sparse_weights" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="dense_weights" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="example_state_data" Type="TensorFlow.TFOutput" />
        <Parameter Name="loss_type" Type="System.String" />
        <Parameter Name="l1" Type="System.Single" />
        <Parameter Name="l2" Type="System.Single" />
        <Parameter Name="num_loss_partitions" Type="System.Int64" />
        <Parameter Name="num_inner_iterations" Type="System.Int64" />
        <Parameter Name="adaptative" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sparse_example_indices">
              a list of vectors which contain example indices.
            </param>
        <param name="sparse_feature_indices">
              a list of vectors which contain feature indices.
            </param>
        <param name="sparse_feature_values">
              a list of vectors which contains feature value
              associated with each feature group.
            </param>
        <param name="dense_features">
              a list of matrices which contains the dense feature values.
            </param>
        <param name="example_weights">
              a vector which contains the weight associated with each
              example.
            </param>
        <param name="example_labels">
              a vector which contains the label/target associated with each
              example.
            </param>
        <param name="sparse_indices">
              a list of vectors where each value is the indices which has
              corresponding weights in sparse_weights. This field maybe omitted for the
              dense approach.
            </param>
        <param name="sparse_weights">
              a list of vectors where each value is the weight associated with
              a sparse feature group.
            </param>
        <param name="dense_weights">
              a list of vectors where the values are the weights associated
              with a dense feature group.
            </param>
        <param name="example_state_data">
              a list of vectors containing the example state data.
            </param>
        <param name="loss_type">
              Type of the primal loss. Currently SdcaSolver supports logistic,
              squared and hinge losses.
            </param>
        <param name="l1">
              Symmetric l1 regularization strength.
            </param>
        <param name="l2">
              Symmetric l2 regularization strength.
            </param>
        <param name="num_loss_partitions">
              Number of partitions of the global loss function.
            </param>
        <param name="num_inner_iterations">
              Number of iterations per mini-batch.
            </param>
        <param name="adaptative">
              Optional argument
              Whether to use Adapative SDCA for the inner loop.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SdcaOptimizer'.
            </param>
        <summary>
              Distributed version of Stochastic Dual Coordinate Ascent (SDCA) optimizer for
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              out_example_state_data: a list of vectors containing the updated example state
              data.
              out_delta_sparse_weights: a list of vectors where each value is the delta
              weights associated with a sparse feature group.
              out_delta_dense_weights: a list of vectors where the values are the delta
              weights associated with a dense feature group.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              linear models with L1 + L2 regularization. As global optimization objective is
              strongly-convex, the optimizer optimizes the dual objective at each step. The
              optimizer applies each update one example at a time. Examples are sampled
              uniformly, and the optimizer is learning rate free and enjoys linear convergence
              rate.
              
              [Proximal Stochastic Dual Coordinate Ascent](http://arxiv.org/pdf/1211.2717v1.pdf).&amp;lt;br&amp;gt;
              Shai Shalev-Shwartz, Tong Zhang. 2012
              
              $$Loss Objective = \sum f_{i} (wx_{i}) + (l2 / 2) * |w|^2 + l1 * |w|$$
              
              [Adding vs. Averaging in Distributed Primal-Dual Optimization](http://arxiv.org/abs/1502.03508).&amp;lt;br&amp;gt;
              Chenxin Ma, Virginia Smith, Martin Jaggi, Michael I. Jordan,
              Peter Richtarik, Martin Takac. 2015
              
              [Stochastic Dual Coordinate Ascent with Adaptive Probabilities](https://arxiv.org/abs/1502.08053).&amp;lt;br&amp;gt;
              Dominik Csiba, Zheng Qu, Peter Richtarik. 2015
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seed">
      <MemberSignature Language="C#" Value="public Nullable&lt;int&gt; Seed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; Seed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets or sets the graph random seed, see remarks for details.
             </summary>
        <value>The seed.</value>
        <remarks>
              Operations that rely on a random seed actually derive it from two seeds:
              the graph-level and operation-level seeds.This sets the graph-level seed.
            
             Its interactions with operation-level seeds is as follows:
             1. If neither the graph-level nor the operation seed is set:
                A random seed is used for this op.
             2. If the graph-level seed is set, but the operation seed is not:
                The system deterministically picks an operation seed in conjunction
                with the graph-level seed so that it gets a unique random sequence.
             3. If the graph-level seed is not set, but the operation seed is set:
                A default graph-level seed and the specified operation seed are used to
                determine the random sequence.
             4. If both the graph-level and the operation seed are set:
                Both seeds are used in conjunction to determine the random sequence.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="SegmentMax">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SegmentMax (TensorFlow.TFOutput data, TensorFlow.TFOutput segment_ids, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SegmentMax(valuetype TensorFlow.TFOutput data, valuetype TensorFlow.TFOutput segment_ids, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="segment_ids" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
        </param>
        <param name="segment_ids">
              A 1-D tensor whose rank is equal to the rank of `data`'s
              first dimension.  Values should be sorted and can be repeated.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SegmentMax'.
            </param>
        <summary>
              Computes the maximum along segments of a tensor.
            </summary>
        <returns>
              Has same shape as data, except for dimension 0 which
              has size `k`, the number of segments.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Read @{$math_ops#segmentation$the section on segmentation} for an explanation of
              segments.
              
              Computes a tensor such that
              \\(output_i = \max_j(data_j)\\) where `max` is over `j` such
              that `segment_ids[j] == i`.
              
              If the max is empty for a given segment ID `i`, `output[i] = 0`.
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src="https://www.tensorflow.org/images/SegmentMax.png" alt&amp;gt;
              &amp;lt;/div&amp;gt;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SegmentMean">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SegmentMean (TensorFlow.TFOutput data, TensorFlow.TFOutput segment_ids, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SegmentMean(valuetype TensorFlow.TFOutput data, valuetype TensorFlow.TFOutput segment_ids, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="segment_ids" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
        </param>
        <param name="segment_ids">
              A 1-D tensor whose rank is equal to the rank of `data`'s
              first dimension.  Values should be sorted and can be repeated.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SegmentMean'.
            </param>
        <summary>
              Computes the mean along segments of a tensor.
            </summary>
        <returns>
              Has same shape as data, except for dimension 0 which
              has size `k`, the number of segments.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Read @{$math_ops#segmentation$the section on segmentation} for an explanation of
              segments.
              
              Computes a tensor such that
              \\(output_i = \frac{\sum_j data_j}{N}\\) where `mean` is
              over `j` such that `segment_ids[j] == i` and `N` is the total number of
              values summed.
              
              If the mean is empty for a given segment ID `i`, `output[i] = 0`.
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src="https://www.tensorflow.org/images/SegmentMean.png" alt&amp;gt;
              &amp;lt;/div&amp;gt;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SegmentMin">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SegmentMin (TensorFlow.TFOutput data, TensorFlow.TFOutput segment_ids, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SegmentMin(valuetype TensorFlow.TFOutput data, valuetype TensorFlow.TFOutput segment_ids, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="segment_ids" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
        </param>
        <param name="segment_ids">
              A 1-D tensor whose rank is equal to the rank of `data`'s
              first dimension.  Values should be sorted and can be repeated.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SegmentMin'.
            </param>
        <summary>
              Computes the minimum along segments of a tensor.
            </summary>
        <returns>
              Has same shape as data, except for dimension 0 which
              has size `k`, the number of segments.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Read @{$math_ops#segmentation$the section on segmentation} for an explanation of
              segments.
              
              Computes a tensor such that
              \\(output_i = \min_j(data_j)\\) where `min` is over `j` such
              that `segment_ids[j] == i`.
              
              If the min is empty for a given segment ID `i`, `output[i] = 0`.
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src="https://www.tensorflow.org/images/SegmentMin.png" alt&amp;gt;
              &amp;lt;/div&amp;gt;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SegmentProd">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SegmentProd (TensorFlow.TFOutput data, TensorFlow.TFOutput segment_ids, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SegmentProd(valuetype TensorFlow.TFOutput data, valuetype TensorFlow.TFOutput segment_ids, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="segment_ids" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
        </param>
        <param name="segment_ids">
              A 1-D tensor whose rank is equal to the rank of `data`'s
              first dimension.  Values should be sorted and can be repeated.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SegmentProd'.
            </param>
        <summary>
              Computes the product along segments of a tensor.
            </summary>
        <returns>
              Has same shape as data, except for dimension 0 which
              has size `k`, the number of segments.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Read @{$math_ops#segmentation$the section on segmentation} for an explanation of
              segments.
              
              Computes a tensor such that
              \\(output_i = \prod_j data_j\\) where the product is over `j` such
              that `segment_ids[j] == i`.
              
              If the product is empty for a given segment ID `i`, `output[i] = 1`.
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src="https://www.tensorflow.org/images/SegmentProd.png" alt&amp;gt;
              &amp;lt;/div&amp;gt;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SegmentSum">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SegmentSum (TensorFlow.TFOutput data, TensorFlow.TFOutput segment_ids, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SegmentSum(valuetype TensorFlow.TFOutput data, valuetype TensorFlow.TFOutput segment_ids, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="segment_ids" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
        </param>
        <param name="segment_ids">
              A 1-D tensor whose rank is equal to the rank of `data`'s
              first dimension.  Values should be sorted and can be repeated.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SegmentSum'.
            </param>
        <summary>
              Computes the sum along segments of a tensor.
            </summary>
        <returns>
              Has same shape as data, except for dimension 0 which
              has size `k`, the number of segments.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Read @{$math_ops#segmentation$the section on segmentation} for an explanation of
              segments.
              
              Computes a tensor such that
              \\(output_i = \sum_j data_j\\) where sum is over `j` such
              that `segment_ids[j] == i`.
              
              If the sum is empty for a given segment ID `i`, `output[i] = 0`.
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src="https://www.tensorflow.org/images/SegmentSum.png" alt&amp;gt;
              &amp;lt;/div&amp;gt;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Select (TensorFlow.TFOutput condition, TensorFlow.TFOutput t, TensorFlow.TFOutput e, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Select(valuetype TensorFlow.TFOutput condition, valuetype TensorFlow.TFOutput t, valuetype TensorFlow.TFOutput e, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="TensorFlow.TFOutput" />
        <Parameter Name="t" Type="TensorFlow.TFOutput" />
        <Parameter Name="e" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
        </param>
        <param name="t">
              = A `Tensor` which may have the same shape as `condition`.
              If `condition` is rank 1, `t` may have higher rank,
              but its first dimension must match the size of `condition`.
            </param>
        <param name="e">
              = A `Tensor` with the same type and shape as `t`.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Select'.
            </param>
        <summary>
              Selects elements from `t` or `e`, depending on `condition`.
            </summary>
        <returns>
              = A `Tensor` with the same type and shape as `t` and `e`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The `t`, and `e` tensors must all have the same shape, and the
              output will also have that shape.
              
              The `condition` tensor must be a scalar if `t` and `e` are scalars.
              If `t` and `e` are vectors or higher rank, then `condition` must be either a
              scalar, a vector with size matching the first dimension of `t`, or must have
              the same shape as `t`.
              
              The `condition` tensor acts as a mask that chooses, based on the value at each
              element, whether the corresponding element / row in the output should be
              taken from `t` (if true) or `e` (if false).
              
              If `condition` is a vector and `t` and `e` are higher rank matrices, then
              it chooses which row (outer dimension) to copy from `t` and `e`.
              If `condition` has the same shape as `t` and `e`, then it chooses which
              element to copy from `t` and `e`.
              
              For example:
              
              ```python
              # 'condition' tensor is [[True,  False]
              #                        [False, True]]
              # 't' is [[1, 2],
              #         [3, 4]]
              # 'e' is [[5, 6],
              #         [7, 8]]
              select(condition, t, e)  # =&amp;gt; [[1, 6], [7, 4]]
              
              
              # 'condition' tensor is [True, False]
              # 't' is [[1, 2],
              #         [3, 4]]
              # 'e' is [[5, 6],
              #         [7, 8]]
              select(condition, t, e) ==&amp;gt; [[1, 2],
                                           [7, 8]]
              
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelfAdjointEig">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SelfAdjointEig (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SelfAdjointEig(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Shape is `[..., M, M]`.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SelfAdjointEig'.
            </param>
        <summary>
              Computes the Eigen Decomposition of a batch of square self-adjoint matrices.
            </summary>
        <returns>
              Shape is `[..., M+1, M]`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The input is a tensor of shape `[..., M, M]` whose inner-most 2 dimensions
              form square matrices, with the same constraints as the single matrix
              SelfAdjointEig.
              
              The result is a [..., M+1, M] matrix with [..., 0,:] containing the
              eigenvalues, and subsequent [...,1:, :] containing the eigenvectors.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelfAdjointEigV2">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SelfAdjointEigV2 (TensorFlow.TFOutput input, Nullable&lt;bool&gt; compute_v = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SelfAdjointEigV2(valuetype TensorFlow.TFOutput input, valuetype System.Nullable`1&lt;bool&gt; compute_v, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="compute_v" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              `Tensor` input of shape `[N, N]`.
            </param>
        <param name="compute_v">
              Optional argument
              If `True` then eigenvectors will be computed and returned in `v`.
              Otherwise, only the eigenvalues will be computed.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SelfAdjointEigV2'.
            </param>
        <summary>
              Computes the eigen decomposition of one or more square self-adjoint matrices.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              e: Eigenvalues. Shape is `[N]`.
              v: Eigenvectors. Shape is `[N, N]`.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Computes the eigenvalues and (optionally) eigenvectors of each inner matrix in
              `input` such that `input[..., :, :] = v[..., :, :] * diag(e[..., :])`.
              
              ```python
              # a is a tensor.
              # e is a tensor of eigenvalues.
              # v is a tensor of eigenvectors.
              e, v = self_adjoint_eig(a)
              e = self_adjoint_eig(a, compute_v=False)
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeManySparse">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SerializeManySparse (TensorFlow.TFOutput sparse_indices, TensorFlow.TFOutput sparse_values, TensorFlow.TFOutput sparse_shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SerializeManySparse(valuetype TensorFlow.TFOutput sparse_indices, valuetype TensorFlow.TFOutput sparse_values, valuetype TensorFlow.TFOutput sparse_shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sparse_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="sparse_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="sparse_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sparse_indices">
              2-D.  The `indices` of the minibatch `SparseTensor`.
            </param>
        <param name="sparse_values">
              1-D.  The `values` of the minibatch `SparseTensor`.
            </param>
        <param name="sparse_shape">
              1-D.  The `shape` of the minibatch `SparseTensor`.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SerializeManySparse'.
            </param>
        <summary>
              Serialize an `N`-minibatch `SparseTensor` into an `[N, 3]` string `Tensor`.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The `SparseTensor` must have rank `R` greater than 1, and the first dimension
              is treated as the minibatch dimension.  Elements of the `SparseTensor`
              must be sorted in increasing order of this first dimension.  The serialized
              `SparseTensor` objects going into each row of `serialized_sparse` will have
              rank `R-1`.
              
              The minibatch size `N` is extracted from `sparse_shape[0]`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeSparse">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SerializeSparse (TensorFlow.TFOutput sparse_indices, TensorFlow.TFOutput sparse_values, TensorFlow.TFOutput sparse_shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SerializeSparse(valuetype TensorFlow.TFOutput sparse_indices, valuetype TensorFlow.TFOutput sparse_values, valuetype TensorFlow.TFOutput sparse_shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sparse_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="sparse_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="sparse_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sparse_indices">
              2-D.  The `indices` of the `SparseTensor`.
            </param>
        <param name="sparse_values">
              1-D.  The `values` of the `SparseTensor`.
            </param>
        <param name="sparse_shape">
              1-D.  The `shape` of the `SparseTensor`.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SerializeSparse'.
            </param>
        <summary>
              Serialize a `SparseTensor` into a string 3-vector (1-D `Tensor`) object.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSize">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SetSize (TensorFlow.TFOutput set_indices, TensorFlow.TFOutput set_values, TensorFlow.TFOutput set_shape, Nullable&lt;bool&gt; validate_indices = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SetSize(valuetype TensorFlow.TFOutput set_indices, valuetype TensorFlow.TFOutput set_values, valuetype TensorFlow.TFOutput set_shape, valuetype System.Nullable`1&lt;bool&gt; validate_indices, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="set_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="set_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="set_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="validate_indices" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="set_indices">
              2D `Tensor`, indices of a `SparseTensor`.
            </param>
        <param name="set_values">
              1D `Tensor`, values of a `SparseTensor`.
            </param>
        <param name="set_shape">
              1D `Tensor`, shape of a `SparseTensor`.
            </param>
        <param name="validate_indices">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SetSize'.
            </param>
        <summary>
              Number of unique elements along last dimension of input `set`.
            </summary>
        <returns>
              For `set` ranked `n`, this is a `Tensor` with rank `n-1`, and the same 1st
              `n-1` dimensions as `set`. Each value is the number of unique elements in
              the corresponding `[0...n-1]` dimension of `set`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Input `set` is a `SparseTensor` represented by `set_indices`, `set_values`,
              and `set_shape`. The last dimension contains values in a set, duplicates are
              allowed but ignored.
              
              If `validate_indices` is `True`, this op validates the order and range of `set`
              indices.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTensorShape">
      <MemberSignature Language="C#" Value="public void SetTensorShape (TensorFlow.TFOutput output, long[] dims, TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetTensorShape(valuetype TensorFlow.TFOutput output, int64[] dims, class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="TensorFlow.TFOutput" />
        <Parameter Name="dims" Type="System.Int64[]" />
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="output">The tensor on which this method will operate in the graph.</param>
        <param name="dims">The tensor shape, specified as an array of dimensions.</param>
        <param name="status">Status buffer, if specified a status code will be left here, if not specified, a <see cref="T:TensorFlow.TFException" /> exception is raised if there is an error.</param>
        <summary>
            Sets the tensor shape of the tensor referenced by <paramref name="output" /> to the shape described by <paramref name="dims" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Shape">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Shape (TensorFlow.TFOutput input, Nullable&lt;TensorFlow.TFDataType&gt; out_type = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Shape(valuetype TensorFlow.TFOutput input, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; out_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_type" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="out_type">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Shape'.
            </param>
        <summary>
              Returns the shape of a tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation returns a 1-D integer tensor representing the shape of `input`.
              
              For example:
              
              ```
              # 't' is [[[1, 1, 1], [2, 2, 2]], [[3, 3, 3], [4, 4, 4]]]
              shape(t) ==&amp;gt; [2, 2, 3]
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShapeN">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] ShapeN (TensorFlow.TFOutput[] input, Nullable&lt;TensorFlow.TFDataType&gt; out_type = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] ShapeN(valuetype TensorFlow.TFOutput[] input, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; out_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="out_type" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="out_type">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ShapeN'.
            </param>
        <summary>
              Returns shape of tensors.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation returns N 1-D integer tensors representing shape of `input[i]s`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShardedFilename">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ShardedFilename (TensorFlow.TFOutput basename, TensorFlow.TFOutput shard, TensorFlow.TFOutput num_shards, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ShardedFilename(valuetype TensorFlow.TFOutput basename, valuetype TensorFlow.TFOutput shard, valuetype TensorFlow.TFOutput num_shards, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="basename" Type="TensorFlow.TFOutput" />
        <Parameter Name="shard" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_shards" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="basename">
        </param>
        <param name="shard">
        </param>
        <param name="num_shards">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ShardedFilename'.
            </param>
        <summary>
              Generate a sharded filename. The filename is printf formatted as
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
                 %s-%05d-of-%05d, basename, shard, num_shards.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShardedFilespec">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ShardedFilespec (TensorFlow.TFOutput basename, TensorFlow.TFOutput num_shards, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ShardedFilespec(valuetype TensorFlow.TFOutput basename, valuetype TensorFlow.TFOutput num_shards, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="basename" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_shards" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="basename">
        </param>
        <param name="num_shards">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ShardedFilespec'.
            </param>
        <summary>
              Generate a glob pattern matching all sharded file names.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShuffleDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ShuffleDataset (TensorFlow.TFOutput input_dataset, TensorFlow.TFOutput buffer_size, TensorFlow.TFOutput seed, TensorFlow.TFOutput seed2, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ShuffleDataset(valuetype TensorFlow.TFOutput input_dataset, valuetype TensorFlow.TFOutput buffer_size, valuetype TensorFlow.TFOutput seed, valuetype TensorFlow.TFOutput seed2, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_dataset" Type="TensorFlow.TFOutput" />
        <Parameter Name="buffer_size" Type="TensorFlow.TFOutput" />
        <Parameter Name="seed" Type="TensorFlow.TFOutput" />
        <Parameter Name="seed2" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_dataset">
        </param>
        <param name="buffer_size">
              The number of output elements to buffer in an iterator over
              this dataset. Compare with the `min_after_dequeue` attr when creating a
              `RandomShuffleQueue`.
            </param>
        <param name="seed">
              A scalar seed for the random number generator. If either seed or
              seed2 is set to be non-zero, the random number generator is seeded
              by the given seed.  Otherwise, a random seed is used.
            </param>
        <param name="seed2">
              A second scalar seed to avoid seed collision.
            </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ShuffleDataset'.
            </param>
        <summary>
              Creates a dataset that shuffles elements from `input_dataset` pseudorandomly.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sigmoid">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Sigmoid (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Sigmoid(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Sigmoid'.
            </param>
        <summary>
              Computes sigmoid of `x` element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Specifically, `y = 1 / (1 + exp(-x))`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SigmoidGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SigmoidGrad (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SigmoidGrad(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SigmoidGrad'.
            </param>
        <summary>
              Computes the gradient of the sigmoid of `x` wrt its input.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Specifically, `grad = dy * y * (1 - y)`, where `y = sigmoid(x)`, and
              `dy` is the corresponding input gradient.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Sign (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Sign(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Sign'.
            </param>
        <summary>
              Returns an element-wise indication of the sign of a number.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              `y = sign(x) = -1` if `x &amp;lt; 0`; 0 if `x == 0`; 1 if `x &amp;gt; 0`.
              
              For complex numbers, `y = sign(x) = x / |x|` if `x != 0`, otherwise `y = 0`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sin">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Sin (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Sin(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Sin'.
            </param>
        <summary>
              Computes sin of x element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sinh">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Sinh (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Sinh(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Sinh'.
            </param>
        <summary>
              Computes hyperbolic sine of x element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Size (TensorFlow.TFOutput input, Nullable&lt;TensorFlow.TFDataType&gt; out_type = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Size(valuetype TensorFlow.TFOutput input, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; out_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_type" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="out_type">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Size'.
            </param>
        <summary>
              Returns the size of a tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation returns an integer representing the number of elements in
              `input`.
              
              For example:
              
              ```
              # 't' is [[[1, 1,, 1], [2, 2, 2]], [[3, 3, 3], [4, 4, 4]]]]
              size(t) ==&amp;gt; 12
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SkipDataset (TensorFlow.TFOutput input_dataset, TensorFlow.TFOutput count, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SkipDataset(valuetype TensorFlow.TFOutput input_dataset, valuetype TensorFlow.TFOutput count, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_dataset" Type="TensorFlow.TFOutput" />
        <Parameter Name="count" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_dataset">
        </param>
        <param name="count">
              A scalar representing the number of elements from the `input_dataset`
              that should be skipped.  If count is -1, skips everything.
            </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SkipDataset'.
            </param>
        <summary>
              Creates a dataset that skips `count` elements from the `input_dataset`.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Skipgram">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; Skipgram (string filename, long batch_size, Nullable&lt;long&gt; window_size = null, Nullable&lt;long&gt; min_count = null, Nullable&lt;float&gt; subsample = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`7&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; Skipgram(string filename, int64 batch_size, valuetype System.Nullable`1&lt;int64&gt; window_size, valuetype System.Nullable`1&lt;int64&gt; min_count, valuetype System.Nullable`1&lt;float32&gt; subsample, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="batch_size" Type="System.Int64" />
        <Parameter Name="window_size" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="min_count" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="subsample" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">
              The corpus's text file name.
            </param>
        <param name="batch_size">
              The size of produced batch.
            </param>
        <param name="window_size">
              Optional argument
              The number of words to predict to the left and right of the target.
            </param>
        <param name="min_count">
              Optional argument
              The minimum number of word occurrences for it to be included in the
              vocabulary.
            </param>
        <param name="subsample">
              Optional argument
              Threshold for word occurrence. Words that appear with higher
              frequency will be randomly down-sampled. Set to 0 to disable.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Skipgram'.
            </param>
        <summary>
              Parses a text file and creates a batch of examples.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              vocab_word: A vector of words in the corpus.
              vocab_freq: Frequencies of words. Sorted in the non-ascending order.
              words_per_epoch: Number of words per epoch in the data file.
              current_epoch: The current epoch number.
              total_words_processed: The total number of words processed so far.
              examples: A vector of word ids.
              labels: A vector of word ids.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Slice (TensorFlow.TFOutput input, TensorFlow.TFOutput begin, TensorFlow.TFOutput size, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Slice(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput begin, valuetype TensorFlow.TFOutput size, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="begin" Type="TensorFlow.TFOutput" />
        <Parameter Name="size" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="begin">
              begin[i] specifies the offset into the 'i'th dimension of
              'input' to slice from.
            </param>
        <param name="size">
              size[i] specifies the number of elements of the 'i'th dimension
              of 'input' to slice. If size[i] is -1, all remaining elements in dimension
              i are included in the slice (i.e. this is equivalent to setting
              size[i] = input.dim_size(i) - begin[i]).
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Slice'.
            </param>
        <summary>
              Return a slice from 'input'.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The output tensor is a tensor with dimensions described by 'size'
              whose values are extracted from 'input' starting at the offsets in
              'begin'.
              
              *Requirements*:
                0 &amp;lt;= begin[i] &amp;lt;= begin[i] + size[i] &amp;lt;= Di  for i in [0, n)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Softmax">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Softmax (TensorFlow.TFOutput logits, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Softmax(valuetype TensorFlow.TFOutput logits, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logits" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logits">
              2-D with shape `[batch_size, num_classes]`.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Softmax'.
            </param>
        <summary>
              Computes softmax activations.
            </summary>
        <returns>
              Same shape as `logits`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              For each batch `i` and class `j` we have
              
                  softmax[i, j] = exp(logits[i, j]) / sum_j(exp(logits[i, j]))
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SoftmaxCrossEntropyWithLogits">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SoftmaxCrossEntropyWithLogits (TensorFlow.TFOutput features, TensorFlow.TFOutput labels, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SoftmaxCrossEntropyWithLogits(valuetype TensorFlow.TFOutput features, valuetype TensorFlow.TFOutput labels, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="features" Type="TensorFlow.TFOutput" />
        <Parameter Name="labels" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="features">
              batch_size x num_classes matrix
            </param>
        <param name="labels">
              batch_size x num_classes matrix
              The caller must ensure that each batch of labels represents a valid
              probability distribution.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SoftmaxCrossEntropyWithLogits'.
            </param>
        <summary>
              Computes softmax cross entropy cost and gradients to backpropagate.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              loss: Per example loss (batch_size vector).
              backprop: backpropagated gradients (batch_size x num_classes matrix).
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Inputs are the logits, not probabilities.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Softplus">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Softplus (TensorFlow.TFOutput features, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Softplus(valuetype TensorFlow.TFOutput features, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="features" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="features">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Softplus'.
            </param>
        <summary>
              Computes softplus: `log(exp(features) + 1)`.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SoftplusGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SoftplusGrad (TensorFlow.TFOutput gradients, TensorFlow.TFOutput features, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SoftplusGrad(valuetype TensorFlow.TFOutput gradients, valuetype TensorFlow.TFOutput features, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gradients" Type="TensorFlow.TFOutput" />
        <Parameter Name="features" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="gradients">
              The backpropagated gradients to the corresponding softplus operation.
            </param>
        <param name="features">
              The features passed as input to the corresponding softplus operation.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SoftplusGrad'.
            </param>
        <summary>
              Computes softplus gradients for a softplus operation.
            </summary>
        <returns>
              The gradients: `gradients / (1 + exp(-features))`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Softsign">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Softsign (TensorFlow.TFOutput features, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Softsign(valuetype TensorFlow.TFOutput features, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="features" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="features">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Softsign'.
            </param>
        <summary>
              Computes softsign: `features / (abs(features) + 1)`.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SoftsignGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SoftsignGrad (TensorFlow.TFOutput gradients, TensorFlow.TFOutput features, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SoftsignGrad(valuetype TensorFlow.TFOutput gradients, valuetype TensorFlow.TFOutput features, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gradients" Type="TensorFlow.TFOutput" />
        <Parameter Name="features" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="gradients">
              The backpropagated gradients to the corresponding softsign operation.
            </param>
        <param name="features">
              The features passed as input to the corresponding softsign operation.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SoftsignGrad'.
            </param>
        <summary>
              Computes softsign gradients for a softsign operation.
            </summary>
        <returns>
              The gradients: `gradients / (1 + abs(-features)) ** 2`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SpaceToBatch">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SpaceToBatch (TensorFlow.TFOutput input, TensorFlow.TFOutput paddings, long block_size, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SpaceToBatch(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput paddings, int64 block_size, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="paddings" Type="TensorFlow.TFOutput" />
        <Parameter Name="block_size" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              4-D with shape `[batch, height, width, depth]`.
            </param>
        <param name="paddings">
              2-D tensor of non-negative integers with shape `[2, 2]`. It specifies
                the padding of the input with zeros across the spatial dimensions as follows:
              
                    paddings = [[pad_top, pad_bottom], [pad_left, pad_right]]
              
                The effective spatial dimensions of the zero-padded input tensor will be:
              
                    height_pad = pad_top + height + pad_bottom
                    width_pad = pad_left + width + pad_right
              
              The attr `block_size` must be greater than one. It indicates the block size.
              
                * Non-overlapping blocks of size `block_size x block size` in the height and
                  width dimensions are rearranged into the batch dimension at each location.
                * The batch of the output tensor is `batch * block_size * block_size`.
                * Both height_pad and width_pad must be divisible by block_size.
              
              The shape of the output will be:
              
                  [batch*block_size*block_size, height_pad/block_size, width_pad/block_size,
                   depth]
              
              Some examples:
              
              (1) For the following input of shape `[1, 2, 2, 1]` and block_size of 2:
              
              ```
              x = [[[[1], [2]], [[3], [4]]]]
              ```
              
              The output tensor has shape `[4, 1, 1, 1]` and value:
              
              ```
              [[[[1]]], [[[2]]], [[[3]]], [[[4]]]]
              ```
              
              (2) For the following input of shape `[1, 2, 2, 3]` and block_size of 2:
              
              ```
              x = [[[[1, 2, 3], [4, 5, 6]],
                    [[7, 8, 9], [10, 11, 12]]]]
              ```
              
              The output tensor has shape `[4, 1, 1, 3]` and value:
              
              ```
              [[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]
              ```
              
              (3) For the following input of shape `[1, 4, 4, 1]` and block_size of 2:
              
              ```
              x = [[[[1],   [2],  [3],  [4]],
                    [[5],   [6],  [7],  [8]],
                    [[9],  [10], [11],  [12]],
                    [[13], [14], [15],  [16]]]]
              ```
              
              The output tensor has shape `[4, 2, 2, 1]` and value:
              
              ```
              x = [[[[1], [3]], [[9], [11]]],
                   [[[2], [4]], [[10], [12]]],
                   [[[5], [7]], [[13], [15]]],
                   [[[6], [8]], [[14], [16]]]]
              ```
              
              (4) For the following input of shape `[2, 2, 4, 1]` and block_size of 2:
              
              ```
              x = [[[[1],   [2],  [3],  [4]],
                    [[5],   [6],  [7],  [8]]],
                   [[[9],  [10], [11],  [12]],
                    [[13], [14], [15],  [16]]]]
              ```
              
              The output tensor has shape `[8, 1, 2, 1]` and value:
              
              ```
              x = [[[[1], [3]]], [[[9], [11]]], [[[2], [4]]], [[[10], [12]]],
                   [[[5], [7]]], [[[13], [15]]], [[[6], [8]]], [[[14], [16]]]]
              ```
              
              Among others, this operation is useful for reducing atrous convolution into
              regular convolution.
            </param>
        <param name="block_size">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SpaceToBatch'.
            </param>
        <summary>
              SpaceToBatch for 4-D tensors of type T.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This is a legacy version of the more general SpaceToBatchND.
              
              Zero-pads and then rearranges (permutes) blocks of spatial data into batch.
              More specifically, this op outputs a copy of the input tensor where values from
              the `height` and `width` dimensions are moved to the `batch` dimension. After
              the zero-padding, both `height` and `width` of the input must be divisible by the
              block size.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpaceToBatchND">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SpaceToBatchND (TensorFlow.TFOutput input, TensorFlow.TFOutput block_shape, TensorFlow.TFOutput paddings, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SpaceToBatchND(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput block_shape, valuetype TensorFlow.TFOutput paddings, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="block_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="paddings" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              N-D with shape `input_shape = [batch] + spatial_shape + remaining_shape`,
              where spatial_shape has `M` dimensions.
            </param>
        <param name="block_shape">
              1-D with shape `[M]`, all values must be &amp;gt;= 1.
            </param>
        <param name="paddings">
              2-D with shape `[M, 2]`, all values must be &amp;gt;= 0.
                `paddings[i] = [pad_start, pad_end]` specifies the padding for input dimension
                `i + 1`, which corresponds to spatial dimension `i`.  It is required that
                `block_shape[i]` divides `input_shape[i + 1] + pad_start + pad_end`.
              
              This operation is equivalent to the following steps:
              
              1. Zero-pad the start and end of dimensions `[1, ..., M]` of the
                 input according to `paddings` to produce `padded` of shape `padded_shape`.
              
              2. Reshape `padded` to `reshaped_padded` of shape:
              
                   [batch] +
                   [padded_shape[1] / block_shape[0],
                     block_shape[0],
                    ...,
                    padded_shape[M] / block_shape[M-1],
                    block_shape[M-1]] +
                   remaining_shape
              
              3. Permute dimensions of `reshaped_padded` to produce
                 `permuted_reshaped_padded` of shape:
              
                   block_shape +
                   [batch] +
                   [padded_shape[1] / block_shape[0],
                    ...,
                    padded_shape[M] / block_shape[M-1]] +
                   remaining_shape
              
              4. Reshape `permuted_reshaped_padded` to flatten `block_shape` into the batch
                 dimension, producing an output tensor of shape:
              
                   [batch * prod(block_shape)] +
                   [padded_shape[1] / block_shape[0],
                    ...,
                    padded_shape[M] / block_shape[M-1]] +
                   remaining_shape
              
              Some examples:
              
              (1) For the following input of shape `[1, 2, 2, 1]`, `block_shape = [2, 2]`, and
                  `paddings = [[0, 0], [0, 0]]`:
              
              ```
              x = [[[[1], [2]], [[3], [4]]]]
              ```
              
              The output tensor has shape `[4, 1, 1, 1]` and value:
              
              ```
              [[[[1]]], [[[2]]], [[[3]]], [[[4]]]]
              ```
              
              (2) For the following input of shape `[1, 2, 2, 3]`, `block_shape = [2, 2]`, and
                  `paddings = [[0, 0], [0, 0]]`:
              
              ```
              x = [[[[1, 2, 3], [4, 5, 6]],
                    [[7, 8, 9], [10, 11, 12]]]]
              ```
              
              The output tensor has shape `[4, 1, 1, 3]` and value:
              
              ```
              [[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]
              ```
              
              (3) For the following input of shape `[1, 4, 4, 1]`, `block_shape = [2, 2]`, and
                  `paddings = [[0, 0], [0, 0]]`:
              
              ```
              x = [[[[1],   [2],  [3],  [4]],
                    [[5],   [6],  [7],  [8]],
                    [[9],  [10], [11],  [12]],
                    [[13], [14], [15],  [16]]]]
              ```
              
              The output tensor has shape `[4, 2, 2, 1]` and value:
              
              ```
              x = [[[[1], [3]], [[9], [11]]],
                   [[[2], [4]], [[10], [12]]],
                   [[[5], [7]], [[13], [15]]],
                   [[[6], [8]], [[14], [16]]]]
              ```
              
              (4) For the following input of shape `[2, 2, 4, 1]`, block_shape = `[2, 2]`, and
                  paddings = `[[0, 0], [2, 0]]`:
              
              ```
              x = [[[[1],   [2],  [3],  [4]],
                    [[5],   [6],  [7],  [8]]],
                   [[[9],  [10], [11],  [12]],
                    [[13], [14], [15],  [16]]]]
              ```
              
              The output tensor has shape `[8, 1, 3, 1]` and value:
              
              ```
              x = [[[[0], [1], [3]]], [[[0], [9], [11]]],
                   [[[0], [2], [4]]], [[[0], [10], [12]]],
                   [[[0], [5], [7]]], [[[0], [13], [15]]],
                   [[[0], [6], [8]]], [[[0], [14], [16]]]]
              ```
              
              Among others, this operation is useful for reducing atrous convolution into
              regular convolution.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SpaceToBatchND'.
            </param>
        <summary>
              SpaceToBatch for N-D tensors of type T.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation divides "spatial" dimensions `[1, ..., M]` of the input into a
              grid of blocks of shape `block_shape`, and interleaves these blocks with the
              "batch" dimension (0) such that in the output, the spatial dimensions
              `[1, ..., M]` correspond to the position within the grid, and the batch
              dimension combines both the position within a spatial block and the original
              batch position.  Prior to division into blocks, the spatial dimensions of the
              input are optionally zero padded according to `paddings`.  See below for a
              precise description.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpaceToDepth">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SpaceToDepth (TensorFlow.TFOutput input, long block_size, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SpaceToDepth(valuetype TensorFlow.TFOutput input, int64 block_size, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="block_size" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="block_size">
              The size of the spatial block.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SpaceToDepth'.
            </param>
        <summary>
              SpaceToDepth for tensors of type T.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Rearranges blocks of spatial data, into depth. More specifically,
              this op outputs a copy of the input tensor where values from the `height`
              and `width` dimensions are moved to the `depth` dimension.
              The attr `block_size` indicates the input block size and how the data is moved.
              
                * Non-overlapping blocks of size `block_size x block size` are rearranged
                  into depth at each location.
                * The depth of the output tensor is `input_depth * block_size * block_size`.
                * The input tensor's height and width must be divisible by block_size.
              
              That is, assuming the input is in the shape:
              `[batch, height, width, depth]`,
              the shape of the output will be:
              `[batch, height/block_size, width/block_size, depth*block_size*block_size]`
              
              This operation requires that the input tensor be of rank 4, and that
              `block_size` be &amp;gt;=1 and a divisor of both the input `height` and `width`.
              
              This operation is useful for resizing the activations between convolutions
              (but keeping all data), e.g. instead of pooling. It is also useful for training
              purely convolutional models.
              
              For example, given this input of shape `[1, 2, 2, 1]`, and block_size of 2:
              
              ```
              x = [[[[1], [2]],
                    [[3], [4]]]]
              ```
              
              This operation will output a tensor of shape `[1, 1, 1, 4]`:
              
              ```
              [[[[1, 2, 3, 4]]]]
              ```
              
              Here, the input has a batch of 1 and each batch element has shape `[2, 2, 1]`,
              the corresponding output will have a single element (i.e. width and height are
              both 1) and will have a depth of 4 channels (1 * block_size * block_size).
              The output element shape is `[1, 1, 4]`.
              
              For an input tensor with larger depth, here of shape `[1, 2, 2, 3]`, e.g.
              
              ```
              x = [[[[1, 2, 3], [4, 5, 6]],
                    [[7, 8, 9], [10, 11, 12]]]]
              ```
              
              This operation, for block_size of 2, will return the following tensor of shape
              `[1, 1, 1, 12]`
              
              ```
              [[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]]]]
              ```
              
              Similarly, for the following input of shape `[1 4 4 1]`, and a block size of 2:
              
              ```
              x = [[[[1],   [2],  [5],  [6]],
                    [[3],   [4],  [7],  [8]],
                    [[9],  [10], [13],  [14]],
                    [[11], [12], [15],  [16]]]]
              ```
              
              the operator will return the following tensor of shape `[1 2 2 4]`:
              
              ```
              x = [[[[1, 2, 3, 4],
                     [5, 6, 7, 8]],
                    [[9, 10, 11, 12],
                     [13, 14, 15, 16]]]]
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseAdd">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SparseAdd (TensorFlow.TFOutput a_indices, TensorFlow.TFOutput a_values, TensorFlow.TFOutput a_shape, TensorFlow.TFOutput b_indices, TensorFlow.TFOutput b_values, TensorFlow.TFOutput b_shape, TensorFlow.TFOutput thresh, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SparseAdd(valuetype TensorFlow.TFOutput a_indices, valuetype TensorFlow.TFOutput a_values, valuetype TensorFlow.TFOutput a_shape, valuetype TensorFlow.TFOutput b_indices, valuetype TensorFlow.TFOutput b_values, valuetype TensorFlow.TFOutput b_shape, valuetype TensorFlow.TFOutput thresh, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="a_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="a_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="b_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="b_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="b_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="thresh" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a_indices">
              2-D.  The `indices` of the first `SparseTensor`, size `[nnz, ndims]` Matrix.
            </param>
        <param name="a_values">
              1-D.  The `values` of the first `SparseTensor`, size `[nnz]` Vector.
            </param>
        <param name="a_shape">
              1-D.  The `shape` of the first `SparseTensor`, size `[ndims]` Vector.
            </param>
        <param name="b_indices">
              2-D.  The `indices` of the second `SparseTensor`, size `[nnz, ndims]` Matrix.
            </param>
        <param name="b_values">
              1-D.  The `values` of the second `SparseTensor`, size `[nnz]` Vector.
            </param>
        <param name="b_shape">
              1-D.  The `shape` of the second `SparseTensor`, size `[ndims]` Vector.
            </param>
        <param name="thresh">
              0-D.  The magnitude threshold that determines if an output value/index
              pair takes space.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseAdd'.
            </param>
        <summary>
              Adds two `SparseTensor` objects to produce another `SparseTensor`.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              sum_indices: 
              sum_values: 
              sum_shape: 
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              The input `SparseTensor` objects' indices are assumed ordered in standard
              lexicographic order.  If this is not the case, before this step run
              `SparseReorder` to restore index ordering.
              
              By default, if two values sum to zero at some index, the output `SparseTensor`
              would still include that particular location in its index, storing a zero in the
              corresponding value slot.  To override this, callers can specify `thresh`,
              indicating that if the sum has a magnitude strictly smaller than `thresh`, its
              corresponding value and index would then not be included.  In particular,
              `thresh == 0` (default) means everything is kept and actual thresholding happens
              only for a positive value.
              
              In the following shapes, `nnz` is the count after taking `thresh` into account.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseAddGrad">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SparseAddGrad (TensorFlow.TFOutput backprop_val_grad, TensorFlow.TFOutput a_indices, TensorFlow.TFOutput b_indices, TensorFlow.TFOutput sum_indices, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SparseAddGrad(valuetype TensorFlow.TFOutput backprop_val_grad, valuetype TensorFlow.TFOutput a_indices, valuetype TensorFlow.TFOutput b_indices, valuetype TensorFlow.TFOutput sum_indices, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backprop_val_grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="a_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="b_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="sum_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="backprop_val_grad">
              1-D with shape `[nnz(sum)]`.  The gradient with respect to
              the non-empty values of the sum.
            </param>
        <param name="a_indices">
              2-D.  The `indices` of the `SparseTensor` A, size `[nnz(A), ndims]`.
            </param>
        <param name="b_indices">
              2-D.  The `indices` of the `SparseTensor` B, size `[nnz(B), ndims]`.
            </param>
        <param name="sum_indices">
              2-D.  The `indices` of the sum `SparseTensor`, size
              `[nnz(sum), ndims]`.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseAddGrad'.
            </param>
        <summary>
              The gradient operator for the SparseAdd op.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              a_val_grad: 1-D with shape `[nnz(A)]`. The gradient with respect to the
              non-empty values of A.
              b_val_grad: 1-D with shape `[nnz(B)]`. The gradient with respect to the
              non-empty values of B.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              The SparseAdd op calculates A + B, where A, B, and the sum are all represented
              as `SparseTensor` objects.  This op takes in the upstream gradient w.r.t.
              non-empty values of the sum, and outputs the gradients w.r.t. the non-empty
              values of A and B.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseConcat">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SparseConcat (TensorFlow.TFOutput[] indices, TensorFlow.TFOutput[] values, TensorFlow.TFOutput[] shapes, long concat_dim, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SparseConcat(valuetype TensorFlow.TFOutput[] indices, valuetype TensorFlow.TFOutput[] values, valuetype TensorFlow.TFOutput[] shapes, int64 concat_dim, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indices" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="values" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="shapes" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="concat_dim" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="indices">
              2-D.  Indices of each input `SparseTensor`.
            </param>
        <param name="values">
              1-D.  Non-empty values of each `SparseTensor`.
            </param>
        <param name="shapes">
              1-D.  Shapes of each `SparseTensor`.
            </param>
        <param name="concat_dim">
              Dimension to concatenate along. Must be in range [-rank, rank),
              where rank is the number of dimensions in each input `SparseTensor`.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseConcat'.
            </param>
        <summary>
              Concatenates a list of `SparseTensor` along the specified dimension.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output_indices: 2-D.  Indices of the concatenated `SparseTensor`.
              output_values: 1-D.  Non-empty values of the concatenated `SparseTensor`.
              output_shape: 1-D.  Shape of the concatenated `SparseTensor`.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Concatenation is with respect to the dense versions of these sparse tensors.
              It is assumed that each input is a `SparseTensor` whose elements are ordered
              along increasing dimension number.
              
              All inputs' shapes must match, except for the concat dimension.  The
              `indices`, `values`, and `shapes` lists must have the same length.
              
              The output shape is identical to the inputs', except along the concat
              dimension, where it is the sum of the inputs' sizes along that dimension.
              
              The output elements will be resorted to preserve the sort order along
              increasing dimension number.
              
              This op runs in `O(M log M)` time, where `M` is the total number of non-empty
              values across all inputs. This is due to the need for an internal sort in
              order to concatenate efficiently across an arbitrary dimension.
              
              For example, if `concat_dim = 1` and the inputs are
              
                  sp_inputs[0]: shape = [2, 3]
                  [0, 2]: "a"
                  [1, 0]: "b"
                  [1, 1]: "c"
              
                  sp_inputs[1]: shape = [2, 4]
                  [0, 1]: "d"
                  [0, 2]: "e"
              
              then the output will be
              
                  shape = [2, 7]
                  [0, 2]: "a"
                  [0, 4]: "d"
                  [0, 5]: "e"
                  [1, 0]: "b"
                  [1, 1]: "c"
              
              Graphically this is equivalent to doing
              
                  [    a] concat [  d e  ] = [    a   d e  ]
                  [b c  ]        [       ]   [b c          ]
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseCross">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SparseCross (TensorFlow.TFOutput[] indices, TensorFlow.TFOutput[] values, TensorFlow.TFOutput[] shapes, TensorFlow.TFOutput[] dense_inputs, bool hashed_output, long num_buckets, long hash_key, TensorFlow.TFDataType out_type, TensorFlow.TFDataType internal_type, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SparseCross(valuetype TensorFlow.TFOutput[] indices, valuetype TensorFlow.TFOutput[] values, valuetype TensorFlow.TFOutput[] shapes, valuetype TensorFlow.TFOutput[] dense_inputs, bool hashed_output, int64 num_buckets, int64 hash_key, valuetype TensorFlow.TFDataType out_type, valuetype TensorFlow.TFDataType internal_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indices" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="values" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="shapes" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="dense_inputs" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="hashed_output" Type="System.Boolean" />
        <Parameter Name="num_buckets" Type="System.Int64" />
        <Parameter Name="hash_key" Type="System.Int64" />
        <Parameter Name="out_type" Type="TensorFlow.TFDataType" />
        <Parameter Name="internal_type" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="indices">
              2-D.  Indices of each input `SparseTensor`.
            </param>
        <param name="values">
              1-D.   values of each `SparseTensor`.
            </param>
        <param name="shapes">
              1-D.   Shapes of each `SparseTensor`.
            </param>
        <param name="dense_inputs">
              2-D.    Columns represented by dense `Tensor`.
            </param>
        <param name="hashed_output">
              If true, returns the hash of the cross instead of the string.
              This will allow us avoiding string manipulations.
            </param>
        <param name="num_buckets">
              It is used if hashed_output is true.
              output = hashed_value%num_buckets if num_buckets &amp;gt; 0 else hashed_value.
            </param>
        <param name="hash_key">
              Specify the hash_key that will be used by the `FingerprintCat64`
              function to combine the crosses fingerprints.
            </param>
        <param name="out_type">
        </param>
        <param name="internal_type">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseCross'.
            </param>
        <summary>
              Generates sparse cross from a list of sparse and dense tensors.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output_indices: 2-D.  Indices of the concatenated `SparseTensor`.
              output_values: 1-D.  Non-empty values of the concatenated or hashed
              `SparseTensor`.
              output_shape: 1-D.  Shape of the concatenated `SparseTensor`.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              The op takes two lists, one of 2D `SparseTensor` and one of 2D `Tensor`, each
              representing features of one feature column. It outputs a 2D `SparseTensor` with
              the batchwise crosses of these features.
              
              For example, if the inputs are
              
                  inputs[0]: SparseTensor with shape = [2, 2]
                  [0, 0]: "a"
                  [1, 0]: "b"
                  [1, 1]: "c"
              
                  inputs[1]: SparseTensor with shape = [2, 1]
                  [0, 0]: "d"
                  [1, 0]: "e"
              
                  inputs[2]: Tensor [["f"], ["g"]]
              
              then the output will be
              
                  shape = [2, 2]
                  [0, 0]: "a_X_d_X_f"
                  [1, 0]: "b_X_e_X_g"
                  [1, 1]: "c_X_e_X_g"
              
              if hashed_output=true then the output will be
              
                  shape = [2, 2]
                  [0, 0]: FingerprintCat64(
                              Fingerprint64("f"), FingerprintCat64(
                                  Fingerprint64("d"), Fingerprint64("a")))
                  [1, 0]: FingerprintCat64(
                              Fingerprint64("g"), FingerprintCat64(
                                  Fingerprint64("e"), Fingerprint64("b")))
                  [1, 1]: FingerprintCat64(
                              Fingerprint64("g"), FingerprintCat64(
                                  Fingerprint64("e"), Fingerprint64("c")))
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseDenseCwiseAdd">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseDenseCwiseAdd (TensorFlow.TFOutput sp_indices, TensorFlow.TFOutput sp_values, TensorFlow.TFOutput sp_shape, TensorFlow.TFOutput dense, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseDenseCwiseAdd(valuetype TensorFlow.TFOutput sp_indices, valuetype TensorFlow.TFOutput sp_values, valuetype TensorFlow.TFOutput sp_shape, valuetype TensorFlow.TFOutput dense, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sp_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="sp_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="sp_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="dense" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sp_indices">
              2-D.  `N x R` matrix with the indices of non-empty values in a
              SparseTensor, possibly not in canonical ordering.
            </param>
        <param name="sp_values">
              1-D.  `N` non-empty values corresponding to `sp_indices`.
            </param>
        <param name="sp_shape">
              1-D.  Shape of the input SparseTensor.
            </param>
        <param name="dense">
              `R`-D.  The dense Tensor operand.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseDenseCwiseAdd'.
            </param>
        <summary>
              Adds up a SparseTensor and a dense Tensor, using these special rules:
            </summary>
        <returns>
              1-D.  The `N` values that are operated on.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              (1) Broadcasts the dense side to have the same shape as the sparse side, if
                  eligible;
              (2) Then, only the dense values pointed to by the indices of the SparseTensor
                  participate in the cwise addition.
              
              By these rules, the result is a logical SparseTensor with exactly the same
              indices and shape, but possibly with different non-zero values.  The output of
              this Op is the resultant non-zero values.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseDenseCwiseDiv">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseDenseCwiseDiv (TensorFlow.TFOutput sp_indices, TensorFlow.TFOutput sp_values, TensorFlow.TFOutput sp_shape, TensorFlow.TFOutput dense, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseDenseCwiseDiv(valuetype TensorFlow.TFOutput sp_indices, valuetype TensorFlow.TFOutput sp_values, valuetype TensorFlow.TFOutput sp_shape, valuetype TensorFlow.TFOutput dense, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sp_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="sp_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="sp_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="dense" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sp_indices">
              2-D.  `N x R` matrix with the indices of non-empty values in a
              SparseTensor, possibly not in canonical ordering.
            </param>
        <param name="sp_values">
              1-D.  `N` non-empty values corresponding to `sp_indices`.
            </param>
        <param name="sp_shape">
              1-D.  Shape of the input SparseTensor.
            </param>
        <param name="dense">
              `R`-D.  The dense Tensor operand.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseDenseCwiseDiv'.
            </param>
        <summary>
              Component-wise divides a SparseTensor by a dense Tensor.
            </summary>
        <returns>
              1-D.  The `N` values that are operated on.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *Limitation*: this Op only broadcasts the dense side to the sparse side, but not
              the other direction.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseDenseCwiseMul">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseDenseCwiseMul (TensorFlow.TFOutput sp_indices, TensorFlow.TFOutput sp_values, TensorFlow.TFOutput sp_shape, TensorFlow.TFOutput dense, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseDenseCwiseMul(valuetype TensorFlow.TFOutput sp_indices, valuetype TensorFlow.TFOutput sp_values, valuetype TensorFlow.TFOutput sp_shape, valuetype TensorFlow.TFOutput dense, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sp_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="sp_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="sp_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="dense" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sp_indices">
              2-D.  `N x R` matrix with the indices of non-empty values in a
              SparseTensor, possibly not in canonical ordering.
            </param>
        <param name="sp_values">
              1-D.  `N` non-empty values corresponding to `sp_indices`.
            </param>
        <param name="sp_shape">
              1-D.  Shape of the input SparseTensor.
            </param>
        <param name="dense">
              `R`-D.  The dense Tensor operand.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseDenseCwiseMul'.
            </param>
        <summary>
              Component-wise multiplies a SparseTensor by a dense Tensor.
            </summary>
        <returns>
              1-D.  The `N` values that are operated on.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The output locations corresponding to the implicitly zero elements in the sparse
              tensor will be zero (i.e., will not take up storage space), regardless of the
              contents of the dense tensor (even if it's +/-INF and that INF*0 == NaN).
              
              *Limitation*: this Op only broadcasts the dense side to the sparse side, but not
              the other direction.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseFillEmptyRows">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SparseFillEmptyRows (TensorFlow.TFOutput indices, TensorFlow.TFOutput values, TensorFlow.TFOutput dense_shape, TensorFlow.TFOutput default_value, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`4&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SparseFillEmptyRows(valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput values, valuetype TensorFlow.TFOutput dense_shape, valuetype TensorFlow.TFOutput default_value, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="values" Type="TensorFlow.TFOutput" />
        <Parameter Name="dense_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="default_value" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="indices">
              2-D. the indices of the sparse tensor.
            </param>
        <param name="values">
              1-D. the values of the sparse tensor.
            </param>
        <param name="dense_shape">
              1-D. the shape of the sparse tensor.
            </param>
        <param name="default_value">
              0-D. default value to insert into location `[row, 0, ..., 0]`
                for rows missing from the input sparse tensor.
              output indices: 2-D. the indices of the filled sparse tensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseFillEmptyRows'.
            </param>
        <summary>
              Fills empty rows in the input 2-D `SparseTensor` with a default value.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output_indices: 
              output_values: 1-D. the values of the filled sparse tensor.
              empty_row_indicator: 1-D. whether the dense row was missing in the
              input sparse tensor.
              reverse_index_map: 1-D. a map from the input indices to the output indices.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              The input `SparseTensor` is represented via the tuple of inputs
              (`indices`, `values`, `dense_shape`).  The output `SparseTensor` has the
              same `dense_shape` but with indices `output_indices` and values
              `output_values`.
              
              This op inserts a single entry for every row that doesn't have any values.
              The index is created as `[row, 0, ..., 0]` and the inserted value
              is `default_value`.
              
              For example, suppose `sp_input` has shape `[5, 6]` and non-empty values:
              
                  [0, 1]: a
                  [0, 3]: b
                  [2, 0]: c
                  [3, 1]: d
              
              Rows 1 and 4 are empty, so the output will be of shape `[5, 6]` with values:
              
                  [0, 1]: a
                  [0, 3]: b
                  [1, 0]: default_value
                  [2, 0]: c
                  [3, 1]: d
                  [4, 0]: default_value
              
              The output `SparseTensor` will be in row-major order and will have the
              same shape as the input.
              
              This op also returns an indicator vector shaped `[dense_shape[0]]` such that
              
                  empty_row_indicator[i] = True iff row i was an empty row.
              
              And a reverse index map vector shaped `[indices.shape[0]]` that is used during
              backpropagation,
              
                  reverse_index_map[j] = out_j s.t. indices[j, :] == output_indices[out_j, :]
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseFillEmptyRowsGrad">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SparseFillEmptyRowsGrad (TensorFlow.TFOutput reverse_index_map, TensorFlow.TFOutput grad_values, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SparseFillEmptyRowsGrad(valuetype TensorFlow.TFOutput reverse_index_map, valuetype TensorFlow.TFOutput grad_values, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reverse_index_map" Type="TensorFlow.TFOutput" />
        <Parameter Name="grad_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reverse_index_map">
              1-D.  The reverse index map from SparseFillEmptyRows.
            </param>
        <param name="grad_values">
              1-D.  The gradients from backprop.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseFillEmptyRowsGrad'.
            </param>
        <summary>
              The gradient of SparseFillEmptyRows.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              d_values: 1-D.  The backprop into values.
              d_default_value: 0-D.  The backprop into default_value.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Takes vectors reverse_index_map, shaped `[N]`, and grad_values,
              shaped `[N_full]`, where `N_full &amp;gt;= N` and copies data into either
              `d_values` or `d_default_value`.  Here `d_values` is shaped `[N]` and
              `d_default_value` is a scalar.
              
                d_values[j] = grad_values[reverse_index_map[j]]
                d_default_value = sum_{k : 0 .. N_full - 1} (
                   grad_values[k] * 1{k not in reverse_index_map})
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseMatMul">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseMatMul (TensorFlow.TFOutput a, TensorFlow.TFOutput b, Nullable&lt;bool&gt; transpose_a = null, Nullable&lt;bool&gt; transpose_b = null, Nullable&lt;bool&gt; a_is_sparse = null, Nullable&lt;bool&gt; b_is_sparse = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseMatMul(valuetype TensorFlow.TFOutput a, valuetype TensorFlow.TFOutput b, valuetype System.Nullable`1&lt;bool&gt; transpose_a, valuetype System.Nullable`1&lt;bool&gt; transpose_b, valuetype System.Nullable`1&lt;bool&gt; a_is_sparse, valuetype System.Nullable`1&lt;bool&gt; b_is_sparse, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="TensorFlow.TFOutput" />
        <Parameter Name="b" Type="TensorFlow.TFOutput" />
        <Parameter Name="transpose_a" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="transpose_b" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="a_is_sparse" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="b_is_sparse" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a">
        </param>
        <param name="b">
        </param>
        <param name="transpose_a">
              Optional argument
            </param>
        <param name="transpose_b">
              Optional argument
            </param>
        <param name="a_is_sparse">
              Optional argument
            </param>
        <param name="b_is_sparse">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseMatMul'.
            </param>
        <summary>
              Multiply matrix "a" by matrix "b".
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The inputs must be two-dimensional matrices and the inner dimension of "a" must
              match the outer dimension of "b". This op is optimized for the case where at
              least one of "a" or "b" is sparse. The breakeven for using this versus a dense
              matrix multiply on one platform was 30% zero values in the sparse matrix.
              
              The gradient computation of this operation will only take advantage of sparsity
              in the input gradient when that gradient comes from a Relu.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseReduceMax">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseReduceMax (TensorFlow.TFOutput input_indices, TensorFlow.TFOutput input_values, TensorFlow.TFOutput input_shape, TensorFlow.TFOutput reduction_axes, Nullable&lt;bool&gt; keep_dims = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseReduceMax(valuetype TensorFlow.TFOutput input_indices, valuetype TensorFlow.TFOutput input_values, valuetype TensorFlow.TFOutput input_shape, valuetype TensorFlow.TFOutput reduction_axes, valuetype System.Nullable`1&lt;bool&gt; keep_dims, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="reduction_axes" Type="TensorFlow.TFOutput" />
        <Parameter Name="keep_dims" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_indices">
              2-D.  `N x R` matrix with the indices of non-empty values in a
              SparseTensor, possibly not in canonical ordering.
            </param>
        <param name="input_values">
              1-D.  `N` non-empty values corresponding to `input_indices`.
            </param>
        <param name="input_shape">
              1-D.  Shape of the input SparseTensor.
            </param>
        <param name="reduction_axes">
              1-D.  Length-`K` vector containing the reduction axes.
            </param>
        <param name="keep_dims">
              Optional argument
              If true, retain reduced dimensions with length 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseReduceMax'.
            </param>
        <summary>
              Computes the max of elements across dimensions of a SparseTensor.
            </summary>
        <returns>
              `R-K`-D.  The reduced Tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This Op takes a SparseTensor and is the sparse counterpart to
              `tf.reduce_max()`.  In particular, this Op also returns a dense `Tensor`
              instead of a sparse one.
              
              Reduces `sp_input` along the dimensions given in `reduction_axes`.  Unless
              `keep_dims` is true, the rank of the tensor is reduced by 1 for each entry in
              `reduction_axes`. If `keep_dims` is true, the reduced dimensions are retained
              with length 1.
              
              If `reduction_axes` has no entries, all dimensions are reduced, and a tensor
              with a single element is returned.  Additionally, the axes can be negative,
              which are interpreted according to the indexing rules in Python.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseReduceMaxSparse">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SparseReduceMaxSparse (TensorFlow.TFOutput input_indices, TensorFlow.TFOutput input_values, TensorFlow.TFOutput input_shape, TensorFlow.TFOutput reduction_axes, Nullable&lt;bool&gt; keep_dims = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SparseReduceMaxSparse(valuetype TensorFlow.TFOutput input_indices, valuetype TensorFlow.TFOutput input_values, valuetype TensorFlow.TFOutput input_shape, valuetype TensorFlow.TFOutput reduction_axes, valuetype System.Nullable`1&lt;bool&gt; keep_dims, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="reduction_axes" Type="TensorFlow.TFOutput" />
        <Parameter Name="keep_dims" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_indices">
              2-D.  `N x R` matrix with the indices of non-empty values in a
              SparseTensor, possibly not in canonical ordering.
            </param>
        <param name="input_values">
              1-D.  `N` non-empty values corresponding to `input_indices`.
            </param>
        <param name="input_shape">
              1-D.  Shape of the input SparseTensor.
            </param>
        <param name="reduction_axes">
              1-D.  Length-`K` vector containing the reduction axes.
            </param>
        <param name="keep_dims">
              Optional argument
              If true, retain reduced dimensions with length 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseReduceMaxSparse'.
            </param>
        <summary>
              Computes the max of elements across dimensions of a SparseTensor.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output_indices: 
              output_values: 
              output_shape: 
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              This Op takes a SparseTensor and is the sparse counterpart to
              `tf.reduce_max()`.  In contrast to SparseReduceMax, this Op returns a
              SparseTensor.
              
              Reduces `sp_input` along the dimensions given in `reduction_axes`.  Unless
              `keep_dims` is true, the rank of the tensor is reduced by 1 for each entry in
              `reduction_axes`. If `keep_dims` is true, the reduced dimensions are retained
              with length 1.
              
              If `reduction_axes` has no entries, all dimensions are reduced, and a tensor
              with a single element is returned.  Additionally, the axes can be negative,
              which are interpreted according to the indexing rules in Python.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseReduceSum">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseReduceSum (TensorFlow.TFOutput input_indices, TensorFlow.TFOutput input_values, TensorFlow.TFOutput input_shape, TensorFlow.TFOutput reduction_axes, Nullable&lt;bool&gt; keep_dims = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseReduceSum(valuetype TensorFlow.TFOutput input_indices, valuetype TensorFlow.TFOutput input_values, valuetype TensorFlow.TFOutput input_shape, valuetype TensorFlow.TFOutput reduction_axes, valuetype System.Nullable`1&lt;bool&gt; keep_dims, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="reduction_axes" Type="TensorFlow.TFOutput" />
        <Parameter Name="keep_dims" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_indices">
              2-D.  `N x R` matrix with the indices of non-empty values in a
              SparseTensor, possibly not in canonical ordering.
            </param>
        <param name="input_values">
              1-D.  `N` non-empty values corresponding to `input_indices`.
            </param>
        <param name="input_shape">
              1-D.  Shape of the input SparseTensor.
            </param>
        <param name="reduction_axes">
              1-D.  Length-`K` vector containing the reduction axes.
            </param>
        <param name="keep_dims">
              Optional argument
              If true, retain reduced dimensions with length 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseReduceSum'.
            </param>
        <summary>
              Computes the sum of elements across dimensions of a SparseTensor.
            </summary>
        <returns>
              `R-K`-D.  The reduced Tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This Op takes a SparseTensor and is the sparse counterpart to
              `tf.reduce_sum()`.  In particular, this Op also returns a dense `Tensor`
              instead of a sparse one.
              
              Reduces `sp_input` along the dimensions given in `reduction_axes`.  Unless
              `keep_dims` is true, the rank of the tensor is reduced by 1 for each entry in
              `reduction_axes`. If `keep_dims` is true, the reduced dimensions are retained
              with length 1.
              
              If `reduction_axes` has no entries, all dimensions are reduced, and a tensor
              with a single element is returned.  Additionally, the axes can be negative,
              which are interpreted according to the indexing rules in Python.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseReduceSumSparse">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SparseReduceSumSparse (TensorFlow.TFOutput input_indices, TensorFlow.TFOutput input_values, TensorFlow.TFOutput input_shape, TensorFlow.TFOutput reduction_axes, Nullable&lt;bool&gt; keep_dims = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SparseReduceSumSparse(valuetype TensorFlow.TFOutput input_indices, valuetype TensorFlow.TFOutput input_values, valuetype TensorFlow.TFOutput input_shape, valuetype TensorFlow.TFOutput reduction_axes, valuetype System.Nullable`1&lt;bool&gt; keep_dims, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="reduction_axes" Type="TensorFlow.TFOutput" />
        <Parameter Name="keep_dims" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_indices">
              2-D.  `N x R` matrix with the indices of non-empty values in a
              SparseTensor, possibly not in canonical ordering.
            </param>
        <param name="input_values">
              1-D.  `N` non-empty values corresponding to `input_indices`.
            </param>
        <param name="input_shape">
              1-D.  Shape of the input SparseTensor.
            </param>
        <param name="reduction_axes">
              1-D.  Length-`K` vector containing the reduction axes.
            </param>
        <param name="keep_dims">
              Optional argument
              If true, retain reduced dimensions with length 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseReduceSumSparse'.
            </param>
        <summary>
              Computes the sum of elements across dimensions of a SparseTensor.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output_indices: 
              output_values: 
              output_shape: 
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              This Op takes a SparseTensor and is the sparse counterpart to
              `tf.reduce_sum()`.  In contrast to SparseReduceSum, this Op returns a
              SparseTensor.
              
              Reduces `sp_input` along the dimensions given in `reduction_axes`.  Unless
              `keep_dims` is true, the rank of the tensor is reduced by 1 for each entry in
              `reduction_axes`. If `keep_dims` is true, the reduced dimensions are retained
              with length 1.
              
              If `reduction_axes` has no entries, all dimensions are reduced, and a tensor
              with a single element is returned.  Additionally, the axes can be negative,
              which are interpreted according to the indexing rules in Python.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseReorder">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SparseReorder (TensorFlow.TFOutput input_indices, TensorFlow.TFOutput input_values, TensorFlow.TFOutput input_shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SparseReorder(valuetype TensorFlow.TFOutput input_indices, valuetype TensorFlow.TFOutput input_values, valuetype TensorFlow.TFOutput input_shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_indices">
              2-D.  `N x R` matrix with the indices of non-empty values in a
              SparseTensor, possibly not in canonical ordering.
            </param>
        <param name="input_values">
              1-D.  `N` non-empty values corresponding to `input_indices`.
            </param>
        <param name="input_shape">
              1-D.  Shape of the input SparseTensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseReorder'.
            </param>
        <summary>
              Reorders a SparseTensor into the canonical, row-major ordering.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output_indices: 2-D.  `N x R` matrix with the same indices as input_indices, but
              in canonical row-major ordering.
              output_values: 1-D.  `N` non-empty values corresponding to `output_indices`.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Note that by convention, all sparse ops preserve the canonical ordering along
              increasing dimension number. The only time ordering can be violated is during
              manual manipulation of the indices and values vectors to add entries.
              
              Reordering does not affect the shape of the SparseTensor.
              
              If the tensor has rank `R` and `N` non-empty values, `input_indices` has
              shape `[N, R]`, input_values has length `N`, and input_shape has length `R`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseReshape">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SparseReshape (TensorFlow.TFOutput input_indices, TensorFlow.TFOutput input_shape, TensorFlow.TFOutput new_shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SparseReshape(valuetype TensorFlow.TFOutput input_indices, valuetype TensorFlow.TFOutput input_shape, valuetype TensorFlow.TFOutput new_shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="input_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="new_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_indices">
              2-D.  `N x R_in` matrix with the indices of non-empty values in a
              SparseTensor.
            </param>
        <param name="input_shape">
              1-D.  `R_in` vector with the input SparseTensor's dense shape.
            </param>
        <param name="new_shape">
              1-D.  `R_out` vector with the requested new dense shape.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseReshape'.
            </param>
        <summary>
              Reshapes a SparseTensor to represent values in a new dense shape.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output_indices: 2-D.  `N x R_out` matrix with the updated indices of non-empty
              values in the output SparseTensor.
              output_shape: 1-D.  `R_out` vector with the full dense shape of the output
              SparseTensor.  This is the same as `new_shape` but with any -1 dimensions
              filled in.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              This operation has the same semantics as reshape on the represented dense
              tensor.  The `input_indices` are recomputed based on the requested `new_shape`.
              
              If one component of `new_shape` is the special value -1, the size of that
              dimension is computed so that the total dense size remains constant.  At
              most one component of `new_shape` can be -1.  The number of dense elements
              implied by `new_shape` must be the same as the number of dense elements
              originally implied by `input_shape`.
              
              Reshaping does not affect the order of values in the SparseTensor.
              
              If the input tensor has rank `R_in` and `N` non-empty values, and `new_shape`
              has length `R_out`, then `input_indices` has shape `[N, R_in]`,
              `input_shape` has length `R_in`, `output_indices` has shape `[N, R_out]`, and
              `output_shape` has length `R_out`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseSegmentMean">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseSegmentMean (TensorFlow.TFOutput data, TensorFlow.TFOutput indices, TensorFlow.TFOutput segment_ids, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseSegmentMean(valuetype TensorFlow.TFOutput data, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput segment_ids, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="segment_ids" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
        </param>
        <param name="indices">
              A 1-D tensor. Has same rank as `segment_ids`.
            </param>
        <param name="segment_ids">
              A 1-D tensor. Values should be sorted and can be repeated.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSegmentMean'.
            </param>
        <summary>
              Computes the mean along sparse segments of a tensor.
            </summary>
        <returns>
              Has same shape as data, except for dimension 0 which
              has size `k`, the number of segments.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Read @{$math_ops#segmentation$the section on segmentation} for an explanation of
              segments.
              
              Like `SegmentMean`, but `segment_ids` can have rank less than `data`'s first
              dimension, selecting a subset of dimension 0, specified by `indices`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseSegmentMeanGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseSegmentMeanGrad (TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, TensorFlow.TFOutput segment_ids, TensorFlow.TFOutput output_dim0, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseSegmentMeanGrad(valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput segment_ids, valuetype TensorFlow.TFOutput output_dim0, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="segment_ids" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_dim0" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="grad">
              gradient propagated to the SparseSegmentMean op.
            </param>
        <param name="indices">
              indices passed to the corresponding SparseSegmentMean op.
            </param>
        <param name="segment_ids">
              segment_ids passed to the corresponding SparseSegmentMean op.
            </param>
        <param name="output_dim0">
              dimension 0 of "data" passed to SparseSegmentMean op.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSegmentMeanGrad'.
            </param>
        <summary>
              Computes gradients for SparseSegmentMean.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Returns tensor "output" with same shape as grad, except for dimension 0 whose
              value is output_dim0.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseSegmentSqrtN">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseSegmentSqrtN (TensorFlow.TFOutput data, TensorFlow.TFOutput indices, TensorFlow.TFOutput segment_ids, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseSegmentSqrtN(valuetype TensorFlow.TFOutput data, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput segment_ids, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="segment_ids" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
        </param>
        <param name="indices">
              A 1-D tensor. Has same rank as `segment_ids`.
            </param>
        <param name="segment_ids">
              A 1-D tensor. Values should be sorted and can be repeated.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSegmentSqrtN'.
            </param>
        <summary>
              Computes the sum along sparse segments of a tensor divided by the sqrt of N.
            </summary>
        <returns>
              Has same shape as data, except for dimension 0 which
              has size `k`, the number of segments.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              N is the size of the segment being reduced.
              
              Read @{$math_ops#segmentation$the section on segmentation} for an explanation of
              segments.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseSegmentSqrtNGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseSegmentSqrtNGrad (TensorFlow.TFOutput grad, TensorFlow.TFOutput indices, TensorFlow.TFOutput segment_ids, TensorFlow.TFOutput output_dim0, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseSegmentSqrtNGrad(valuetype TensorFlow.TFOutput grad, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput segment_ids, valuetype TensorFlow.TFOutput output_dim0, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grad" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="segment_ids" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_dim0" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="grad">
              gradient propagated to the SparseSegmentSqrtN op.
            </param>
        <param name="indices">
              indices passed to the corresponding SparseSegmentSqrtN op.
            </param>
        <param name="segment_ids">
              segment_ids passed to the corresponding SparseSegmentSqrtN op.
            </param>
        <param name="output_dim0">
              dimension 0 of "data" passed to SparseSegmentSqrtN op.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSegmentSqrtNGrad'.
            </param>
        <summary>
              Computes gradients for SparseSegmentSqrtN.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Returns tensor "output" with same shape as grad, except for dimension 0 whose
              value is output_dim0.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseSegmentSum">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseSegmentSum (TensorFlow.TFOutput data, TensorFlow.TFOutput indices, TensorFlow.TFOutput segment_ids, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseSegmentSum(valuetype TensorFlow.TFOutput data, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput segment_ids, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="segment_ids" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
        </param>
        <param name="indices">
              A 1-D tensor. Has same rank as `segment_ids`.
            </param>
        <param name="segment_ids">
              A 1-D tensor. Values should be sorted and can be repeated.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSegmentSum'.
            </param>
        <summary>
              Computes the sum along sparse segments of a tensor.
            </summary>
        <returns>
              Has same shape as data, except for dimension 0 which
              has size `k`, the number of segments.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Read @{$math_ops#segmentation$the section on segmentation} for an explanation of
              segments.
              
              Like `SegmentSum`, but `segment_ids` can have rank less than `data`'s first
              dimension, selecting a subset of dimension 0, specified by `indices`.
              
              For example:
              
              ```python
              c = tf.constant([[1,2,3,4], [-1,-2,-3,-4], [5,6,7,8]])
              
              # Select two rows, one segment.
              tf.sparse_segment_sum(c, tf.constant([0, 1]), tf.constant([0, 0]))
              # =&amp;gt; [[0 0 0 0]]
              
              # Select two rows, two segment.
              tf.sparse_segment_sum(c, tf.constant([0, 1]), tf.constant([0, 1]))
              # =&amp;gt; [[ 1  2  3  4]
              #     [-1 -2 -3 -4]]
              
              # Select all rows, two segments.
              tf.sparse_segment_sum(c, tf.constant([0, 1, 2]), tf.constant([0, 0, 1]))
              # =&amp;gt; [[0 0 0 0]
              #     [5 6 7 8]]
              
              # Which is equivalent to:
              tf.segment_sum(c, tf.constant([0, 0, 1]))
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseSoftmax">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseSoftmax (TensorFlow.TFOutput sp_indices, TensorFlow.TFOutput sp_values, TensorFlow.TFOutput sp_shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseSoftmax(valuetype TensorFlow.TFOutput sp_indices, valuetype TensorFlow.TFOutput sp_values, valuetype TensorFlow.TFOutput sp_shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sp_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="sp_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="sp_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sp_indices">
              2-D.  `NNZ x R` matrix with the indices of non-empty values in a
              SparseTensor, in canonical ordering.
            </param>
        <param name="sp_values">
              1-D.  `NNZ` non-empty values corresponding to `sp_indices`.
            </param>
        <param name="sp_shape">
              1-D.  Shape of the input SparseTensor.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSoftmax'.
            </param>
        <summary>
              Applies softmax to a batched N-D `SparseTensor`.
            </summary>
        <returns>
              1-D.  The `NNZ` values for the result `SparseTensor`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The inputs represent an N-D SparseTensor  with logical shape `[..., B, C]`
              (where `N &amp;gt;= 2`), and with indices sorted in the canonical lexicographic order.
              
              This op is equivalent to applying the normal `tf.nn.softmax()` to each innermost
              logical submatrix with shape `[B, C]`, but with the catch that *the implicitly
              zero elements do not participate*.  Specifically, the algorithm is equivalent
              to the following:
              
                (1) Applies `tf.nn.softmax()` to a densified view of each innermost submatrix
                    with shape `[B, C]`, along the size-C dimension;
                (2) Masks out the original implicitly-zero locations;
                (3) Renormalizes the remaining elements.
              
              Hence, the `SparseTensor` result has exactly the same non-zero indices and
              shape.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseSoftmaxCrossEntropyWithLogits">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SparseSoftmaxCrossEntropyWithLogits (TensorFlow.TFOutput features, TensorFlow.TFOutput labels, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SparseSoftmaxCrossEntropyWithLogits(valuetype TensorFlow.TFOutput features, valuetype TensorFlow.TFOutput labels, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="features" Type="TensorFlow.TFOutput" />
        <Parameter Name="labels" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="features">
              batch_size x num_classes matrix
            </param>
        <param name="labels">
              batch_size vector with values in [0, num_classes).
              This is the label for the given minibatch entry.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSoftmaxCrossEntropyWithLogits'.
            </param>
        <summary>
              Computes softmax cross entropy cost and gradients to backpropagate.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              loss: Per example loss (batch_size vector).
              backprop: backpropagated gradients (batch_size x num_classes matrix).
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Unlike `SoftmaxCrossEntropyWithLogits`, this operation does not accept
              a matrix of label probabilities, but rather a single label per row
              of features.  This label is considered to have probability 1.0 for the
              given row.
              
              Inputs are the logits, not probabilities.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseSparseMaximum">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SparseSparseMaximum (TensorFlow.TFOutput a_indices, TensorFlow.TFOutput a_values, TensorFlow.TFOutput a_shape, TensorFlow.TFOutput b_indices, TensorFlow.TFOutput b_values, TensorFlow.TFOutput b_shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SparseSparseMaximum(valuetype TensorFlow.TFOutput a_indices, valuetype TensorFlow.TFOutput a_values, valuetype TensorFlow.TFOutput a_shape, valuetype TensorFlow.TFOutput b_indices, valuetype TensorFlow.TFOutput b_values, valuetype TensorFlow.TFOutput b_shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="a_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="a_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="b_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="b_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="b_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a_indices">
              2-D.  `N x R` matrix with the indices of non-empty values in a
              SparseTensor, in the canonical lexicographic ordering.
            </param>
        <param name="a_values">
              1-D.  `N` non-empty values corresponding to `a_indices`.
            </param>
        <param name="a_shape">
              1-D.  Shape of the input SparseTensor.
            </param>
        <param name="b_indices">
              counterpart to `a_indices` for the other operand.
            </param>
        <param name="b_values">
              counterpart to `a_values` for the other operand; must be of the same dtype.
            </param>
        <param name="b_shape">
              counterpart to `a_shape` for the other operand; the two shapes must be equal.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSparseMaximum'.
            </param>
        <summary>
              Returns the element-wise max of two SparseTensors.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output_indices: 2-D.  The indices of the output SparseTensor.
              output_values: 1-D.  The values of the output SparseTensor.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Assumes the two SparseTensors have the same shape, i.e., no broadcasting.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseSparseMinimum">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SparseSparseMinimum (TensorFlow.TFOutput a_indices, TensorFlow.TFOutput a_values, TensorFlow.TFOutput a_shape, TensorFlow.TFOutput b_indices, TensorFlow.TFOutput b_values, TensorFlow.TFOutput b_shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SparseSparseMinimum(valuetype TensorFlow.TFOutput a_indices, valuetype TensorFlow.TFOutput a_values, valuetype TensorFlow.TFOutput a_shape, valuetype TensorFlow.TFOutput b_indices, valuetype TensorFlow.TFOutput b_values, valuetype TensorFlow.TFOutput b_shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="a_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="a_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="b_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="b_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="b_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a_indices">
              2-D.  `N x R` matrix with the indices of non-empty values in a
              SparseTensor, in the canonical lexicographic ordering.
            </param>
        <param name="a_values">
              1-D.  `N` non-empty values corresponding to `a_indices`.
            </param>
        <param name="a_shape">
              1-D.  Shape of the input SparseTensor.
            </param>
        <param name="b_indices">
              counterpart to `a_indices` for the other operand.
            </param>
        <param name="b_values">
              counterpart to `a_values` for the other operand; must be of the same dtype.
            </param>
        <param name="b_shape">
              counterpart to `a_shape` for the other operand; the two shapes must be equal.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSparseMinimum'.
            </param>
        <summary>
              Returns the element-wise min of two SparseTensors.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output_indices: 2-D.  The indices of the output SparseTensor.
              output_values: 1-D.  The values of the output SparseTensor.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Assumes the two SparseTensors have the same shape, i.e., no broadcasting.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseSplit">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[]&gt; SparseSplit (TensorFlow.TFOutput split_dim, TensorFlow.TFOutput indices, TensorFlow.TFOutput values, TensorFlow.TFOutput shape, long num_split, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[], valuetype TensorFlow.TFOutput[]&gt; SparseSplit(valuetype TensorFlow.TFOutput split_dim, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput values, valuetype TensorFlow.TFOutput shape, int64 num_split, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput[],TensorFlow.TFOutput[],TensorFlow.TFOutput[]&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="split_dim" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="values" Type="TensorFlow.TFOutput" />
        <Parameter Name="shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_split" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="split_dim">
              0-D.  The dimension along which to split.  Must be in the range
              `[0, rank(shape))`.
            </param>
        <param name="indices">
              2-D tensor represents the indices of the sparse tensor.
            </param>
        <param name="values">
              1-D tensor represents the values of the sparse tensor.
            </param>
        <param name="shape">
              1-D. tensor represents the shape of the sparse tensor.
              output indices: A list of 1-D tensors represents the indices of the output
              sparse tensors.
            </param>
        <param name="num_split">
              The number of ways to split.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseSplit'.
            </param>
        <summary>
              Split a `SparseTensor` into `num_split` tensors along one dimension.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output_indices: 
              output_values: A list of 1-D tensors represents the values of the output sparse
              tensors.
              output_shape: A list of 1-D tensors represents the shape of the output sparse
              tensors.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              If the `shape[split_dim]` is not an integer multiple of `num_split`. Slices
              `[0 : shape[split_dim] % num_split]` gets one extra dimension.
              For example, if `split_dim = 1` and `num_split = 2` and the input is
              
                  input_tensor = shape = [2, 7]
                  [    a   d e  ]
                  [b c          ]
              
              Graphically the output tensors are:
              
                  output_tensor[0] = shape = [2, 4]
                  [    a  ]
                  [b c    ]
              
                  output_tensor[1] = shape = [2, 3]
                  [ d e  ]
                  [      ]
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseTensorDenseAdd">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseTensorDenseAdd (TensorFlow.TFOutput a_indices, TensorFlow.TFOutput a_values, TensorFlow.TFOutput a_shape, TensorFlow.TFOutput b, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseTensorDenseAdd(valuetype TensorFlow.TFOutput a_indices, valuetype TensorFlow.TFOutput a_values, valuetype TensorFlow.TFOutput a_shape, valuetype TensorFlow.TFOutput b, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="a_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="a_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="b" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a_indices">
              2-D.  The `indices` of the `SparseTensor`, with shape `[nnz, ndims]`.
            </param>
        <param name="a_values">
              1-D.  The `values` of the `SparseTensor`, with shape `[nnz]`.
            </param>
        <param name="a_shape">
              1-D.  The `shape` of the `SparseTensor`, with shape `[ndims]`.
            </param>
        <param name="b">
              `ndims`-D Tensor.  With shape `a_shape`.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseTensorDenseAdd'.
            </param>
        <summary>
              Adds up a `SparseTensor` and a dense `Tensor`, producing a dense `Tensor`.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This Op does not require `a_indices` be sorted in standard lexicographic order.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseTensorDenseMatMul">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseTensorDenseMatMul (TensorFlow.TFOutput a_indices, TensorFlow.TFOutput a_values, TensorFlow.TFOutput a_shape, TensorFlow.TFOutput b, Nullable&lt;bool&gt; adjoint_a = null, Nullable&lt;bool&gt; adjoint_b = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseTensorDenseMatMul(valuetype TensorFlow.TFOutput a_indices, valuetype TensorFlow.TFOutput a_values, valuetype TensorFlow.TFOutput a_shape, valuetype TensorFlow.TFOutput b, valuetype System.Nullable`1&lt;bool&gt; adjoint_a, valuetype System.Nullable`1&lt;bool&gt; adjoint_b, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="a_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="a_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="b" Type="TensorFlow.TFOutput" />
        <Parameter Name="adjoint_a" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="adjoint_b" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a_indices">
              2-D.  The `indices` of the `SparseTensor`, size `[nnz, 2]` Matrix.
            </param>
        <param name="a_values">
              1-D.  The `values` of the `SparseTensor`, size `[nnz]` Vector.
            </param>
        <param name="a_shape">
              1-D.  The `shape` of the `SparseTensor`, size `[2]` Vector.
            </param>
        <param name="b">
              2-D.  A dense Matrix.
            </param>
        <param name="adjoint_a">
              Optional argument
              Use the adjoint of A in the matrix multiply.  If A is complex, this
              is transpose(conj(A)).  Otherwise it's transpose(A).
            </param>
        <param name="adjoint_b">
              Optional argument
              Use the adjoint of B in the matrix multiply.  If B is complex, this
              is transpose(conj(B)).  Otherwise it's transpose(B).
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseTensorDenseMatMul'.
            </param>
        <summary>
              Multiply SparseTensor (of rank 2) "A" by dense matrix "B".
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              No validity checking is performed on the indices of A.  However, the following
              input format is recommended for optimal behavior:
              
              if adjoint_a == false:
                A should be sorted in lexicographically increasing order.  Use SparseReorder
                if you're not sure.
              if adjoint_a == true:
                A should be sorted in order of increasing dimension 1 (i.e., "column major"
                order instead of "row major" order).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseTensorSliceDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseTensorSliceDataset (TensorFlow.TFOutput indices, TensorFlow.TFOutput values, TensorFlow.TFOutput dense_shape, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseTensorSliceDataset(valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput values, valuetype TensorFlow.TFOutput dense_shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="values" Type="TensorFlow.TFOutput" />
        <Parameter Name="dense_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="indices">
        </param>
        <param name="values">
        </param>
        <param name="dense_shape">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseTensorSliceDataset'.
            </param>
        <summary>
              Creates a dataset that splits a SparseTensor into elements row-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseToDense">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SparseToDense (TensorFlow.TFOutput sparse_indices, TensorFlow.TFOutput output_shape, TensorFlow.TFOutput sparse_values, TensorFlow.TFOutput default_value, Nullable&lt;bool&gt; validate_indices = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SparseToDense(valuetype TensorFlow.TFOutput sparse_indices, valuetype TensorFlow.TFOutput output_shape, valuetype TensorFlow.TFOutput sparse_values, valuetype TensorFlow.TFOutput default_value, valuetype System.Nullable`1&lt;bool&gt; validate_indices, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sparse_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="sparse_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="default_value" Type="TensorFlow.TFOutput" />
        <Parameter Name="validate_indices" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sparse_indices">
              0-D, 1-D, or 2-D.  `sparse_indices[i]` contains the complete
              index where `sparse_values[i]` will be placed.
            </param>
        <param name="output_shape">
              1-D.  Shape of the dense output tensor.
            </param>
        <param name="sparse_values">
              1-D.  Values corresponding to each row of `sparse_indices`,
              or a scalar value to be used for all sparse indices.
            </param>
        <param name="default_value">
              Scalar value to set for indices not specified in
              `sparse_indices`.
            </param>
        <param name="validate_indices">
              Optional argument
              If true, indices are checked to make sure they are sorted in
              lexicographic order and that there are no repeats.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseToDense'.
            </param>
        <summary>
              Converts a sparse representation into a dense tensor.
            </summary>
        <returns>
              Dense output tensor of shape `output_shape`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Builds an array `dense` with shape `output_shape` such that
              
              ```
              # If sparse_indices is scalar
              dense[i] = (i == sparse_indices ? sparse_values : default_value)
              
              # If sparse_indices is a vector, then for each i
              dense[sparse_indices[i]] = sparse_values[i]
              
              # If sparse_indices is an n by d matrix, then for each i in [0, n)
              dense[sparse_indices[i][0], ..., sparse_indices[i][d-1]] = sparse_values[i]
              ```
              
              All other values in `dense` are set to `default_value`.  If `sparse_values` is a
              scalar, all sparse indices are set to this single value.
              
              Indices should be sorted in lexicographic order, and indices must not
              contain any repeats. If `validate_indices` is true, these properties
              are checked during execution.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparseToSparseSetOperation">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; SparseToSparseSetOperation (TensorFlow.TFOutput set1_indices, TensorFlow.TFOutput set1_values, TensorFlow.TFOutput set1_shape, TensorFlow.TFOutput set2_indices, TensorFlow.TFOutput set2_values, TensorFlow.TFOutput set2_shape, string set_operation, Nullable&lt;bool&gt; validate_indices = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; SparseToSparseSetOperation(valuetype TensorFlow.TFOutput set1_indices, valuetype TensorFlow.TFOutput set1_values, valuetype TensorFlow.TFOutput set1_shape, valuetype TensorFlow.TFOutput set2_indices, valuetype TensorFlow.TFOutput set2_values, valuetype TensorFlow.TFOutput set2_shape, string set_operation, valuetype System.Nullable`1&lt;bool&gt; validate_indices, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="set1_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="set1_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="set1_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="set2_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="set2_values" Type="TensorFlow.TFOutput" />
        <Parameter Name="set2_shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="set_operation" Type="System.String" />
        <Parameter Name="validate_indices" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="set1_indices">
              2D `Tensor`, indices of a `SparseTensor`. Must be in row-major
              order.
            </param>
        <param name="set1_values">
              1D `Tensor`, values of a `SparseTensor`. Must be in row-major
              order.
            </param>
        <param name="set1_shape">
              1D `Tensor`, shape of a `SparseTensor`. `set1_shape[0...n-1]` must
              be the same as `set2_shape[0...n-1]`, `set1_shape[n]` is the
              max set size across `0...n-1` dimensions.
            </param>
        <param name="set2_indices">
              2D `Tensor`, indices of a `SparseTensor`. Must be in row-major
              order.
            </param>
        <param name="set2_values">
              1D `Tensor`, values of a `SparseTensor`. Must be in row-major
              order.
            </param>
        <param name="set2_shape">
              1D `Tensor`, shape of a `SparseTensor`. `set2_shape[0...n-1]` must
              be the same as `set1_shape[0...n-1]`, `set2_shape[n]` is the
              max set size across `0...n-1` dimensions.
            </param>
        <param name="set_operation">
        </param>
        <param name="validate_indices">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SparseToSparseSetOperation'.
            </param>
        <summary>
              Applies set operation along last dimension of 2 `SparseTensor` inputs.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              result_indices: 2D indices of a `SparseTensor`.
              result_values: 1D values of a `SparseTensor`.
              result_shape: 1D `Tensor` shape of a `SparseTensor`. `result_shape[0...n-1]` is
              the same as the 1st `n-1` dimensions of `set1` and `set2`, `result_shape[n]`
              is the max result set size across all `0...n-1` dimensions.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              See SetOperationOp::SetOperationFromContext for values of `set_operation`.
              
              If `validate_indices` is `True`, `SparseToSparseSetOperation` validates the
              order and range of `set1` and `set2` indices.
              
              Input `set1` is a `SparseTensor` represented by `set1_indices`, `set1_values`,
              and `set1_shape`. For `set1` ranked `n`, 1st `n-1` dimensions must be the same
              as `set2`. Dimension `n` contains values in a set, duplicates are allowed but
              ignored.
              
              Input `set2` is a `SparseTensor` represented by `set2_indices`, `set2_values`,
              and `set2_shape`. For `set2` ranked `n`, 1st `n-1` dimensions must be the same
              as `set1`. Dimension `n` contains values in a set, duplicates are allowed but
              ignored.
              
              If `validate_indices` is `True`, this op validates the order and range of `set1`
              and `set2` indices.
              
              Output `result` is a `SparseTensor` represented by `result_indices`,
              `result_values`, and `result_shape`. For `set1` and `set2` ranked `n`, this
              has rank `n` and the same 1st `n-1` dimensions as `set1` and `set2`. The `nth`
              dimension contains the result of `set_operation` applied to the corresponding
              `[0...n-1]` dimension of `set`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] Split (TensorFlow.TFOutput split_dim, TensorFlow.TFOutput value, long num_split, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] Split(valuetype TensorFlow.TFOutput split_dim, valuetype TensorFlow.TFOutput value, int64 num_split, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="split_dim" Type="TensorFlow.TFOutput" />
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_split" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="split_dim">
              0-D.  The dimension along which to split.  Must be in the range
              `[-rank(value), rank(value))`.
            </param>
        <param name="value">
              The tensor to split.
            </param>
        <param name="num_split">
              The number of ways to split.  Must evenly divide
              `value.shape[split_dim]`.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Split'.
            </param>
        <summary>
              Splits a tensor into `num_split` tensors along one dimension.
            </summary>
        <returns>
              They are identically shaped tensors, whose shape matches that of `value`
              except along `split_dim`, where their sizes are
              `values.shape[split_dim] / num_split`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SplitV">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] SplitV (TensorFlow.TFOutput value, TensorFlow.TFOutput size_splits, TensorFlow.TFOutput split_dim, long num_split, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] SplitV(valuetype TensorFlow.TFOutput value, valuetype TensorFlow.TFOutput size_splits, valuetype TensorFlow.TFOutput split_dim, int64 num_split, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="size_splits" Type="TensorFlow.TFOutput" />
        <Parameter Name="split_dim" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_split" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
              The tensor to split.
            </param>
        <param name="size_splits">
              list containing the sizes of each output tensor along the split
              dimension. Must sum to the dimension of value along split_dim.
              Can contain one -1 indicating that dimension is to be inferred.
            </param>
        <param name="split_dim">
              0-D.  The dimension along which to split.  Must be in the range
              `[-rank(value), rank(value))`.
            </param>
        <param name="num_split">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SplitV'.
            </param>
        <summary>
              Splits a tensor into `num_split` tensors along one dimension.
            </summary>
        <returns>
              Tensors whose shape matches that of `value`
              except along `split_dim`, where their sizes are
              `size_splits[i]`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sqrt">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Sqrt (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Sqrt(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Sqrt'.
            </param>
        <summary>
              Computes square root of x element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              I.e., \\(y = \sqrt{x} = x^{1/2}\\).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SqrtGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SqrtGrad (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SqrtGrad(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SqrtGrad'.
            </param>
        <summary>
              Computes the gradient for the sqrt of `x` wrt its input.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Specifically, `grad = dy * 0.5 / y`, where `y = sqrt(x)`, and `dy`
              is the corresponding input gradient.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Square">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Square (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Square(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Square'.
            </param>
        <summary>
              Computes square of x element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              I.e., \\(y = x * x = x^2\\).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SquaredDifference">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput SquaredDifference (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput SquaredDifference(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'SquaredDifference'.
            </param>
        <summary>
              Returns (x - y)(x - y) element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *NOTE*: `SquaredDifference` supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Squeeze">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Squeeze (TensorFlow.TFOutput input, long[] squeeze_dims = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Squeeze(valuetype TensorFlow.TFOutput input, int64[] squeeze_dims, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="squeeze_dims" Type="System.Int64[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The `input` to squeeze.
            </param>
        <param name="squeeze_dims">
              Optional argument
              If specified, only squeezes the dimensions listed. The dimension
              index starts at 0. It is an error to squeeze a dimension that is not 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Squeeze'.
            </param>
        <summary>
              Removes dimensions of size 1 from the shape of a tensor.
            </summary>
        <returns>
              Contains the same data as `input`, but has one or more dimensions of
              size 1 removed.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Given a tensor `input`, this operation returns a tensor of the same type with
              all dimensions of size 1 removed. If you don't want to remove all size 1
              dimensions, you can remove specific size 1 dimensions by specifying
              `squeeze_dims`.
              
              For example:
              
              ```
              # 't' is a tensor of shape [1, 2, 1, 3, 1, 1]
              shape(squeeze(t)) ==&amp;gt; [2, 3]
              ```
              
              Or, to remove specific size 1 dimensions:
              
              ```
              # 't' is a tensor of shape [1, 2, 1, 3, 1, 1]
              shape(squeeze(t, [2, 4])) ==&amp;gt; [1, 2, 3, 1]
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stage">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation Stage (TensorFlow.TFOutput[] values, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation Stage(valuetype TensorFlow.TFOutput[] values, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="values">
              a list of tensors
            </param>
        <param name="container">
              Optional argument
              If non-empty, this queue is placed in the given container. Otherwise,
              a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              It is necessary to match this name to the matching Unstage Op.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Stage'.
            </param>
        <summary>
              Stage values similar to a lightweight Enqueue.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              The basic functionality of this Op is similar to a queue with many
              fewer capabilities and options.  This Op is optimized for performance.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stage">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation Stage (TensorFlow.TFOutput[] values, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation Stage(valuetype TensorFlow.TFOutput[] values, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="values">
              a list of tensors
              dtypes A list of data types that inserted values should adhere to.
            </param>
        <param name="capacity">
              Optional argument
              Maximum number of elements in the Staging Area. If &amp;gt; 0, inserts
              on the container will block when the capacity is reached.
            </param>
        <param name="memory_limit">
              Optional argument
              The maximum number of bytes allowed for Tensors in the Staging Area.
              If &amp;gt; 0, inserts will block until sufficient space is available.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this queue is placed in the given container. Otherwise,
              a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              It is necessary to match this name to the matching Unstage Op.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Stage'.
            </param>
        <summary>
              Stage values similar to a lightweight Enqueue.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              The basic functionality of this Op is similar to a queue with many
              fewer capabilities and options.  This Op is optimized for performance.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StageClear">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation StageClear (TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation StageClear(valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StageClear'.
            </param>
        <summary>
              Op removes all elements in the underlying container.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StagePeek">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] StagePeek (TensorFlow.TFOutput index, TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] StagePeek(valuetype TensorFlow.TFOutput index, valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index">
        </param>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StagePeek'.
            </param>
        <summary>
              Op peeks at the values at the specified index.  If the
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              underlying container does not contain sufficient elements
              this op will block until it does.   This Op is optimized for
              performance.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StageSize">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StageSize (TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StageSize(valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StageSize'.
            </param>
        <summary>
              Op returns the number of elements in the underlying container.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StatelessRandomNormal">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StatelessRandomNormal (TensorFlow.TFOutput shape, TensorFlow.TFOutput seed, Nullable&lt;TensorFlow.TFDataType&gt; dtype = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StatelessRandomNormal(valuetype TensorFlow.TFOutput shape, valuetype TensorFlow.TFOutput seed, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="seed" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shape">
              The shape of the output tensor.
            </param>
        <param name="seed">
              2 seeds (shape [2]).
            </param>
        <param name="dtype">
              Optional argument
              The type of the output.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StatelessRandomNormal'.
            </param>
        <summary>
              Outputs deterministic pseudorandom values from a normal distribution.
            </summary>
        <returns>
              Random values with specified shape.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The generated values will have mean 0 and standard deviation 1.
              
              The outputs are a deterministic function of `shape` and `seed`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StatelessRandomUniform">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StatelessRandomUniform (TensorFlow.TFOutput shape, TensorFlow.TFOutput seed, Nullable&lt;TensorFlow.TFDataType&gt; dtype = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StatelessRandomUniform(valuetype TensorFlow.TFOutput shape, valuetype TensorFlow.TFOutput seed, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="seed" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shape">
              The shape of the output tensor.
            </param>
        <param name="seed">
              2 seeds (shape [2]).
            </param>
        <param name="dtype">
              Optional argument
              The type of the output.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StatelessRandomUniform'.
            </param>
        <summary>
              Outputs deterministic pseudorandom random values from a uniform distribution.
            </summary>
        <returns>
              Random values with specified shape.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The generated values follow a uniform distribution in the range `[0, 1)`. The
              lower bound 0 is included in the range, while the upper bound 1 is excluded.
              
              The outputs are a deterministic function of `shape` and `seed`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StatelessTruncatedNormal">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StatelessTruncatedNormal (TensorFlow.TFOutput shape, TensorFlow.TFOutput seed, Nullable&lt;TensorFlow.TFDataType&gt; dtype = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StatelessTruncatedNormal(valuetype TensorFlow.TFOutput shape, valuetype TensorFlow.TFOutput seed, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="seed" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shape">
              The shape of the output tensor.
            </param>
        <param name="seed">
              2 seeds (shape [2]).
            </param>
        <param name="dtype">
              Optional argument
              The type of the output.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StatelessTruncatedNormal'.
            </param>
        <summary>
              Outputs deterministic pseudorandom values from a truncated normal distribution.
            </summary>
        <returns>
              Random values with specified shape.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The generated values follow a normal distribution with mean 0 and standard
              deviation 1, except that values whose magnitude is more than 2 standard
              deviations from the mean are dropped and re-picked.
              
              The outputs are a deterministic function of `shape` and `seed`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopGradient">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StopGradient (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StopGradient(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StopGradient'.
            </param>
        <summary>
              Stops gradient computation.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              When executed in a graph, this op outputs its input tensor as-is.
              
              When building ops to compute gradients, this op prevents the contribution of
              its inputs to be taken into account.  Normally, the gradient generator adds ops
              to a graph to compute the derivatives of a specified 'loss' by recursively
              finding out inputs that contributed to its computation.  If you insert this op
              in the graph it inputs are masked from the gradient generator.  They are not
              taken into account for computing gradients.
              
              This is useful any time you want to compute a value with TensorFlow but need
              to pretend that the value was a constant. Some examples include:
              
              *  The *EM* algorithm where the *M-step* should not involve backpropagation
                 through the output of the *E-step*.
              *  Contrastive divergence training of Boltzmann machines where, when
                 differentiating the energy function, the training must not backpropagate
                 through the graph that generated the samples from the model.
              *  Adversarial training, where no backprop should happen through the adversarial
                 example generation process.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StridedSlice">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StridedSlice (TensorFlow.TFOutput input, TensorFlow.TFOutput begin, TensorFlow.TFOutput end, TensorFlow.TFOutput strides, Nullable&lt;long&gt; begin_mask = null, Nullable&lt;long&gt; end_mask = null, Nullable&lt;long&gt; ellipsis_mask = null, Nullable&lt;long&gt; new_axis_mask = null, Nullable&lt;long&gt; shrink_axis_mask = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StridedSlice(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput begin, valuetype TensorFlow.TFOutput end, valuetype TensorFlow.TFOutput strides, valuetype System.Nullable`1&lt;int64&gt; begin_mask, valuetype System.Nullable`1&lt;int64&gt; end_mask, valuetype System.Nullable`1&lt;int64&gt; ellipsis_mask, valuetype System.Nullable`1&lt;int64&gt; new_axis_mask, valuetype System.Nullable`1&lt;int64&gt; shrink_axis_mask, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="begin" Type="TensorFlow.TFOutput" />
        <Parameter Name="end" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="TensorFlow.TFOutput" />
        <Parameter Name="begin_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="end_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="ellipsis_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="new_axis_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="shrink_axis_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="begin">
              `begin[k]` specifies the offset into the `k`th range specification.
              The exact dimension this corresponds to will be determined by context.
              Out-of-bounds values will be silently clamped. If the `k`th bit of
              `begin_mask` then `begin[k]` is ignored and the full range of the
              appropriate dimension is used instead. Negative values causes indexing
              to start from the highest element e.g. If `foo==[1,2,3]` then `foo[-1]==3`.
            </param>
        <param name="end">
              `end[i]` is like `begin` with the exception that `end_mask` is
              used to determine full ranges.
            </param>
        <param name="strides">
              `strides[i]` specifies the increment in the `i`th specification
              after extracting a given element. Negative indices will reverse
              the original order. Out or range values are
              clamped to `[0,dim[i]) if slice[i]&amp;gt;0` or `[-1,dim[i]-1] if slice[i] &amp;lt; 0`
            </param>
        <param name="begin_mask">
              Optional argument
              a bitmask where a bit i being 1 means to ignore the begin
              value and instead use the largest interval possible. At runtime
              begin[i] will be replaced with `[0, n-1) if `stride[i] &amp;gt; 0` or
              `[-1, n-1]` if `stride[i] &amp;lt; 0`
            </param>
        <param name="end_mask">
              Optional argument
              analogous to `begin_mask`
            </param>
        <param name="ellipsis_mask">
              Optional argument
              a bitmask where bit `i` being 1 means the `i`th
              position is actually an ellipsis. One bit at most can be 1.
              If `ellipsis_mask == 0`, then an implicit ellipsis mask of `1 &amp;lt;&amp;lt; (m+1)`
              is provided. This means that `foo[3:5] == foo[3:5, ...]`. An ellipsis
              implicitly creates as many range specifications as necessary to fully
              specify the sliced range for every dimension. For example for a 4-dimensional
              tensor `foo` the slice `foo[2, ..., 5:8]` implies `foo[2, :, :, 5:8]`.
            </param>
        <param name="new_axis_mask">
              Optional argument
              a bitmask where bit `i` being 1 means the `i`th
              specification creates a new shape 1 dimension. For example
              `foo[:4, tf.newaxis, :2]` would produce a shape `(4, 1, 2)` tensor.
            </param>
        <param name="shrink_axis_mask">
              Optional argument
              a bitmask where bit `i` implies that the `i`th
              specification should shrink the dimensionality. begin and end
              must imply a slice of size 1 in the dimension. For example in
              python one might do `foo[:, 3, :]` which would result in
              `shrink_axis_mask` being 2.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StridedSlice'.
            </param>
        <summary>
              Return a strided slice from `input`.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Note, most python users will want to use the Python `Tensor.__getitem__`
              or `Variable.__getitem__` rather than this op directly.
              
              The goal of this op is to produce a new tensor with a subset of
              the elements from the `n` dimensional `input` tensor. The subset is chosen using
              a sequence of `m` sparse range specifications encoded into the arguments
              of this function. Note, in some cases
              `m` could be equal to `n`, but this need not be the case. Each
              range specification entry can be one of the following:
              
              - An ellipsis (...). Ellipses are used to imply zero or more
                dimensions of full-dimension selection and are produced using
                `ellipsis_mask`. For example, `foo[...]` is the identity slice.
              
              - A new axis. This is used to insert a new shape=1 dimension and is
                produced using `new_axis_mask`. For example, `foo[:, ...]` where
                `foo` is shape `(3, 4)` produces a `(1, 3, 4)` tensor.
              
              
              - A range `begin:end:stride`. This is used to specify how much to choose from
                a given dimension. `stride` can be any integer but 0.  `begin` is an integer
                which represents the index of the first value to select while `end` represents
                the index of the last value to select. The number of values selected in each
                dimension is `end - begin` if `stride &amp;gt; 0` and `begin - end` if `stride &amp;lt; 0`.
                `begin` and `end` can be negative where `-1` is the last element, `-2` is
                the second to last. `begin_mask` controls whether to replace the explicitly
                given `begin` with an implicit effective value of `0` if `stride &amp;gt; 0` and
                `-1` if `stride &amp;lt; 0`. `end_mask` is analogous but produces the number
                required to create the largest open interval. For example, given a shape
                `(3,)` tensor `foo[:]`, the effective `begin` and `end` are `0` and `3`. Do
                not assume this is equivalent to `foo[0:-1]` which has an effective `begin`
                and `end` of `0` and `2`. Another example is `foo[-2::-1]` which reverses the
                first dimension of a tensor while dropping the last two (in the original
                order elements). For example `foo = [1,2,3,4]; foo[-2::-1]` is `[4,3]`.
              
              - A single index. This is used to keep only elements that have a given
                index. For example (`foo[2, :]` on a shape `(5,6)` tensor produces a
                shape `(6,)` tensor. This is encoded in `begin` and `end` and
                `shrink_axis_mask`.
              
              Each conceptual range specification is encoded in the op's argument. This
              encoding is best understand by considering a non-trivial example. In
              particular,
              `foo[1, 2:4, None, ..., :-3:-1, :]` will be encoded as
              
              ```
              begin = [1, 2, x, x, 0, x] # x denotes don't care (usually 0)
              end = [2, 4, x, x, -3, x]
              strides = [1, 1, x, x, -1, 1]
              begin_mask = 1&amp;lt;&amp;lt;4 | 1 &amp;lt;&amp;lt; 5 = 48
              end_mask = 1&amp;lt;&amp;lt;5 = 32
              ellipsis_mask = 1&amp;lt;&amp;lt;3 = 8
              new_axis_mask = 1&amp;lt;&amp;lt;2 4
              shrink_axis_mask = 1&amp;lt;&amp;lt;0
              ```
              
              In this case if `foo.shape` is (5, 5, 5, 5, 5, 5) the final shape of
              the slice becomes (2, 1, 5, 5, 2, 5).
              Let us walk step by step through each argument specification.
              
              1.  The first argument in the example slice is turned into `begin = 1` and
              `end = begin + 1 = 2`. To disambiguate from the original spec `2:4` we
              also set the appropriate bit in `shrink_axis_mask`.
              
              2. `2:4` is contributes 2, 4, 1 to begin, end, and stride. All masks have
              zero bits contributed.
              
              3. None is a synonym for `tf.newaxis`. This means insert a dimension of size 1
              dimension in the final shape. Dummy values are contributed to begin,
              end and stride, while the new_axis_mask bit is set.
              
              4. `...` grab the full ranges from as many dimensions as needed to
              fully specify a slice for every dimension of the input shape.
              
              5. `:-3:-1` shows the use of negative indices. A negative index `i` associated
              with a dimension that has shape `s` is converted to a positive index
              `s + i`. So `-1` becomes `s-1` (i.e. the last element). This conversion
              is done internally so begin, end and strides receive x, -3, and -1.
              The appropriate begin_mask bit is set to indicate the start range is the
              full range (ignoring the x).
              
              6. `:` indicates that the entire contents of the corresponding dimension
              is selected. This is equivalent to `::` or `0::1`. begin, end, and strides
              receive 0, 0, and 1, respectively. The appropriate bits in `begin_mask` and
              `end_mask` are also set.
              
              *Requirements*:
                `0 != strides[i] for i in [0, m)`
                `ellipsis_mask must be a power of two (only one ellipsis)`
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StridedSliceGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StridedSliceGrad (TensorFlow.TFOutput shape, TensorFlow.TFOutput begin, TensorFlow.TFOutput end, TensorFlow.TFOutput strides, TensorFlow.TFOutput dy, Nullable&lt;long&gt; begin_mask = null, Nullable&lt;long&gt; end_mask = null, Nullable&lt;long&gt; ellipsis_mask = null, Nullable&lt;long&gt; new_axis_mask = null, Nullable&lt;long&gt; shrink_axis_mask = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StridedSliceGrad(valuetype TensorFlow.TFOutput shape, valuetype TensorFlow.TFOutput begin, valuetype TensorFlow.TFOutput end, valuetype TensorFlow.TFOutput strides, valuetype TensorFlow.TFOutput dy, valuetype System.Nullable`1&lt;int64&gt; begin_mask, valuetype System.Nullable`1&lt;int64&gt; end_mask, valuetype System.Nullable`1&lt;int64&gt; ellipsis_mask, valuetype System.Nullable`1&lt;int64&gt; new_axis_mask, valuetype System.Nullable`1&lt;int64&gt; shrink_axis_mask, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="begin" Type="TensorFlow.TFOutput" />
        <Parameter Name="end" Type="TensorFlow.TFOutput" />
        <Parameter Name="strides" Type="TensorFlow.TFOutput" />
        <Parameter Name="dy" Type="TensorFlow.TFOutput" />
        <Parameter Name="begin_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="end_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="ellipsis_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="new_axis_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="shrink_axis_mask" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shape">
        </param>
        <param name="begin">
        </param>
        <param name="end">
        </param>
        <param name="strides">
        </param>
        <param name="dy">
        </param>
        <param name="begin_mask">
              Optional argument
            </param>
        <param name="end_mask">
              Optional argument
            </param>
        <param name="ellipsis_mask">
              Optional argument
            </param>
        <param name="new_axis_mask">
              Optional argument
            </param>
        <param name="shrink_axis_mask">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StridedSliceGrad'.
            </param>
        <summary>
              Returns the gradient of `StridedSlice`.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Since `StridedSlice` cuts out pieces of its `input` which is size
              `shape`, its gradient will have the same shape (which is passed here
              as `shape`). The gradient will be zero in any element that the slice
              does not select.
              
              Arguments are the same as StridedSliceGrad with the exception that
              `dy` is the input gradient to be propagated and `shape` is the
              shape of `StridedSlice`'s `input`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StringJoin">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StringJoin (TensorFlow.TFOutput[] inputs, string separator = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StringJoin(valuetype TensorFlow.TFOutput[] inputs, string separator, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="separator" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputs">
              A list of string tensors.  The tensors must all have the same shape,
              or be scalars.  Scalars may be mixed in; these will be broadcast to the shape
              of non-scalar inputs.
            </param>
        <param name="separator">
              Optional argument
              string, an optional join separator.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StringJoin'.
            </param>
        <summary>
              Joins the strings in the given list of string tensors into one tensor;
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              with the given separator (default is an empty separator).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StringSplit">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; StringSplit (TensorFlow.TFOutput input, TensorFlow.TFOutput delimiter, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; StringSplit(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput delimiter, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="delimiter" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              1-D. Strings to split.
            </param>
        <param name="delimiter">
              0-D. Delimiter characters (bytes), or empty string.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StringSplit'.
            </param>
        <summary>
              Split elements of `input` based on `delimiter` into a `SparseTensor`.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              indices: A dense matrix of int64 representing the indices of the sparse tensor.
              values: A vector of strings corresponding to the splited values.
              shape: a length-2 vector of int64 representing the shape of the sparse
              tensor, where the first value is N and the second value is the maximum number
              of tokens in a single input entry.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Let N be the size of source (typically N will be the batch size). Split each
              element of `input` based on `delimiter` and return a `SparseTensor`
              containing the splitted tokens. Empty tokens are ignored.
              
              `delimiter` can be empty, or a string of split characters. If `delimiter` is an
               empty string, each element of `input` is split into individual single-byte
               character strings, including splitting of UTF-8 multibyte sequences. Otherwise
               every character of `delimiter` is a potential split point.
              
              For example:
                N = 2, input[0] is 'hello world' and input[1] is 'a b c', then the output
                will be
              
                indices = [0, 0;
                           0, 1;
                           1, 0;
                           1, 1;
                           1, 2]
                shape = [2, 3]
                values = ['hello', 'world', 'a', 'b', 'c']
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StringToHashBucket">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StringToHashBucket (TensorFlow.TFOutput string_tensor, long num_buckets, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StringToHashBucket(valuetype TensorFlow.TFOutput string_tensor, int64 num_buckets, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string_tensor" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_buckets" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="string_tensor">
        </param>
        <param name="num_buckets">
              The number of buckets.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StringToHashBucket'.
            </param>
        <summary>
              Converts each string in the input Tensor to its hash mod by a number of buckets.
            </summary>
        <returns>
              A Tensor of the same shape as the input `string_tensor`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The hash function is deterministic on the content of the string within the
              process.
              
              Note that the hash function may change from time to time.
              This functionality will be deprecated and it's recommended to use
              `tf.string_to_hash_bucket_fast()` or `tf.string_to_hash_bucket_strong()`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StringToHashBucketFast">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StringToHashBucketFast (TensorFlow.TFOutput input, long num_buckets, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StringToHashBucketFast(valuetype TensorFlow.TFOutput input, int64 num_buckets, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_buckets" Type="System.Int64" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The strings to assign a hash bucket.
            </param>
        <param name="num_buckets">
              The number of buckets.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StringToHashBucketFast'.
            </param>
        <summary>
              Converts each string in the input Tensor to its hash mod by a number of buckets.
            </summary>
        <returns>
              A Tensor of the same shape as the input `string_tensor`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The hash function is deterministic on the content of the string within the
              process and will never change. However, it is not suitable for cryptography.
              This function may be used when CPU time is scarce and inputs are trusted or
              unimportant. There is a risk of adversaries constructing inputs that all hash
              to the same bucket. To prevent this problem, use a strong hash function with
              `tf.string_to_hash_bucket_strong`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StringToHashBucketStrong">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StringToHashBucketStrong (TensorFlow.TFOutput input, long num_buckets, long[] key, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StringToHashBucketStrong(valuetype TensorFlow.TFOutput input, int64 num_buckets, int64[] key, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_buckets" Type="System.Int64" />
        <Parameter Name="key" Type="System.Int64[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The strings to assign a hash bucket.
            </param>
        <param name="num_buckets">
              The number of buckets.
            </param>
        <param name="key">
              The key for the keyed hash function passed as a list of two uint64
              elements.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StringToHashBucketStrong'.
            </param>
        <summary>
              Converts each string in the input Tensor to its hash mod by a number of buckets.
            </summary>
        <returns>
              A Tensor of the same shape as the input `string_tensor`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The hash function is deterministic on the content of the string within the
              process. The hash function is a keyed hash function, where attribute `key`
              defines the key of the hash function. `key` is an array of 2 elements.
              
              A strong hash is important when inputs may be malicious, e.g. URLs with
              additional components. Adversaries could try to make their inputs hash to the
              same bucket for a denial-of-service attack or to skew the results. A strong
              hash prevents this by making it difficult, if not infeasible, to compute inputs
              that hash to the same bucket. This comes at a cost of roughly 4x higher compute
              time than `tf.string_to_hash_bucket_fast`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StringToNumber">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput StringToNumber (TensorFlow.TFOutput string_tensor, Nullable&lt;TensorFlow.TFDataType&gt; out_type = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput StringToNumber(valuetype TensorFlow.TFOutput string_tensor, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; out_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string_tensor" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_type" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="string_tensor">
        </param>
        <param name="out_type">
              Optional argument
              The numeric type to interpret each string in `string_tensor` as.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'StringToNumber'.
            </param>
        <summary>
              Converts each string in the input Tensor to the specified numeric type.
            </summary>
        <returns>
              A Tensor of the same shape as the input `string_tensor`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              (Note that int32 overflow results in an error while float overflow
              results in a rounded value.)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Sub (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Sub(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Sub'.
            </param>
        <summary>
              Returns x - y element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              *NOTE*: `Sub` supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Substr">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Substr (TensorFlow.TFOutput input, TensorFlow.TFOutput pos, TensorFlow.TFOutput len, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Substr(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput pos, valuetype TensorFlow.TFOutput len, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="pos" Type="TensorFlow.TFOutput" />
        <Parameter Name="len" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              Tensor of strings
            </param>
        <param name="pos">
              Scalar defining the position of first character in each substring
            </param>
        <param name="len">
              Scalar defining the number of characters to include in each substring
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Substr'.
            </param>
        <summary>
              Return substrings from `Tensor` of strings.
            </summary>
        <returns>
              Tensor of substrings
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              For each string in the input `Tensor`, creates a substring starting at index
              `pos` with a total length of `len`.
              
              If `len` defines a substring that would extend beyond the length of the input
              string, then as many characters as possible are used.
              
              If `pos` is negative or specifies a character index larger than any of the input
              strings, then an `InvalidArgumentError` is thrown.
              
              `pos` and `len` must have the same shape, otherwise a `ValueError` is thrown on
              Op creation.
              
              *NOTE*: `Substr` supports broadcasting up to two dimensions. More about
              broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
              
              ---
              
              Examples
              
              Using scalar `pos` and `len`:
              
              ```python
              input = [b'Hello', b'World']
              position = 1
              length = 3
              
              output = [b'ell', b'orl']
              ```
              
              Using `pos` and `len` with same shape as `input`:
              
              ```python
              input = [[b'ten', b'eleven', b'twelve'],
                       [b'thirteen', b'fourteen', b'fifteen'],
                       [b'sixteen', b'seventeen', b'eighteen']]
              position = [[1, 2, 3],
                          [1, 2, 3],
                          [1, 2, 3]]
              length =   [[2, 3, 4],
                          [4, 3, 2],
                          [5, 5, 5]]
              
              output = [[b'en', b'eve', b'lve'],
                        [b'hirt', b'urt', b'te'],
                        [b'ixtee', b'vente', b'hteen']]
              ```
              
              Broadcasting `pos` and `len` onto `input`:
              
              ```
              input = [[b'ten', b'eleven', b'twelve'],
                       [b'thirteen', b'fourteen', b'fifteen'],
                       [b'sixteen', b'seventeen', b'eighteen'],
                       [b'nineteen', b'twenty', b'twentyone']]
              position = [1, 2, 3]
              length =   [1, 2, 3]
              
              output = [[b'e', b'ev', b'lve'],
                        [b'h', b'ur', b'tee'],
                        [b'i', b've', b'hte'],
                        [b'i', b'en', b'nty']]
              ```
              
              Broadcasting `input` onto `pos` and `len`:
              
              ```
              input = b'thirteen'
              position = [1, 5, 7]
              length =   [3, 2, 1]
              
              output = [b'hir', b'ee', b'n"]
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Sum (TensorFlow.TFOutput input, TensorFlow.TFOutput reduction_indices, Nullable&lt;bool&gt; keep_dims = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Sum(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput reduction_indices, valuetype System.Nullable`1&lt;bool&gt; keep_dims, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="reduction_indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="keep_dims" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              The tensor to reduce.
            </param>
        <param name="reduction_indices">
              The dimensions to reduce.
            </param>
        <param name="keep_dims">
              Optional argument
              If true, retain reduced dimensions with length 1.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Sum'.
            </param>
        <summary>
              Computes the sum of elements across dimensions of a tensor.
            </summary>
        <returns>
              The reduced tensor.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Reduces `input` along the dimensions given in `reduction_indices`. Unless
              `keep_dims` is true, the rank of the tensor is reduced by 1 for each entry in
              `reduction_indices`. If `keep_dims` is true, the reduced dimensions are
              retained with length 1.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Svd">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; Svd (TensorFlow.TFOutput input, Nullable&lt;bool&gt; compute_uv = null, Nullable&lt;bool&gt; full_matrices = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; Svd(valuetype TensorFlow.TFOutput input, valuetype System.Nullable`1&lt;bool&gt; compute_uv, valuetype System.Nullable`1&lt;bool&gt; full_matrices, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="compute_uv" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="full_matrices" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              A tensor of shape `[..., M, N]` whose inner-most 2 dimensions
              form matrices of size `[M, N]`. Let `P` be the minimum of `M` and `N`.
            </param>
        <param name="compute_uv">
              Optional argument
              If true, left and right singular vectors will be
              computed and returned in `u` and `v`, respectively.
              If false, `u` and `v` are not set and should never referenced.
            </param>
        <param name="full_matrices">
              Optional argument
              If true, compute full-sized `u` and `v`. If false
              (the default), compute only the leading `P` singular vectors.
              Ignored if `compute_uv` is `False`.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Svd'.
            </param>
        <summary>
              Computes the singular value decompositions of one or more matrices.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              s: Singular values. Shape is `[..., P]`.
              u: Left singular vectors. If `full_matrices` is `False` then shape is
              `[..., M, P]`; if `full_matrices` is `True` then shape is
              `[..., M, M]`. Undefined if `compute_uv` is `False`.
              v: Left singular vectors. If `full_matrices` is `False` then shape is
              `[..., N, P]`. If `full_matrices` is `True` then shape is `[..., N, N]`.
              Undefined if `compute_uv` is false.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Computes the SVD of each inner matrix in `input` such that
              `input[..., :, :] = u[..., :, :] * diag(s[..., :, :]) * transpose(v[..., :, :])`
              
              ```python
              # a is a tensor containing a batch of matrices.
              # s is a tensor of singular values for each matrix.
              # u is the tensor containing of left singular vectors for each matrix.
              # v is the tensor containing of right singular vectors for each matrix.
              s, u, v = svd(a)
              s, _, _ = svd(a, compute_uv=False)
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; Switch (TensorFlow.TFOutput data, TensorFlow.TFOutput pred, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; Switch(valuetype TensorFlow.TFOutput data, valuetype TensorFlow.TFOutput pred, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="pred" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
              The tensor to be forwarded to the appropriate output.
            </param>
        <param name="pred">
              A scalar that specifies which output port will receive data.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Switch'.
            </param>
        <summary>
              Forwards `data` to the output port determined by `pred`.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              output_false: If `pred` is false, data will be forwarded to this output.
              output_true: If `pred` is true, data will be forwarded to this output.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              If `pred` is true, the `data` input is forwarded to `output_true`. Otherwise,
              the data goes to `output_false`.
              
              See also `RefSwitch` and `Merge`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TakeDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TakeDataset (TensorFlow.TFOutput input_dataset, TensorFlow.TFOutput count, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TakeDataset(valuetype TensorFlow.TFOutput input_dataset, valuetype TensorFlow.TFOutput count, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_dataset" Type="TensorFlow.TFOutput" />
        <Parameter Name="count" Type="TensorFlow.TFOutput" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_dataset">
        </param>
        <param name="count">
              A scalar representing the number of elements from the `input_dataset`
              that should be taken. A value of `-1` indicates that all of `input_dataset`
              is taken.
            </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TakeDataset'.
            </param>
        <summary>
              Creates a dataset that contains `count` elements from the `input_dataset`.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TakeManySparseFromTensorsMap">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; TakeManySparseFromTensorsMap (TensorFlow.TFOutput sparse_handles, TensorFlow.TFDataType dtype, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; TakeManySparseFromTensorsMap(valuetype TensorFlow.TFOutput sparse_handles, valuetype TensorFlow.TFDataType dtype, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sparse_handles" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sparse_handles">
              1-D, The `N` serialized `SparseTensor` objects.
              Shape: `[N]`.
            </param>
        <param name="dtype">
              The `dtype` of the `SparseTensor` objects stored in the
              `SparseTensorsMap`.
            </param>
        <param name="container">
              Optional argument
              The container name for the `SparseTensorsMap` read by this op.
            </param>
        <param name="shared_name">
              Optional argument
              The shared name for the `SparseTensorsMap` read by this op.
              It should not be blank; rather the `shared_name` or unique Operation name
              of the Op that created the original `SparseTensorsMap` should be used.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TakeManySparseFromTensorsMap'.
            </param>
        <summary>
              Read `SparseTensors` from a `SparseTensorsMap` and concatenate them.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              sparse_indices: 2-D.  The `indices` of the minibatch `SparseTensor`.
              sparse_values: 1-D.  The `values` of the minibatch `SparseTensor`.
              sparse_shape: 1-D.  The `shape` of the minibatch `SparseTensor`.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              The input `sparse_handles` must be an `int64` matrix of shape `[N, 1]` where
              `N` is the minibatch size and the rows correspond to the output handles of
              `AddSparseToTensorsMap` or `AddManySparseToTensorsMap`.  The ranks of the
              original `SparseTensor` objects that went into the given input ops must all
              match.  When the final `SparseTensor` is created, it has rank one
              higher than the ranks of the incoming `SparseTensor` objects
              (they have been concatenated along a new row dimension on the left).
              
              The output `SparseTensor` object's shape values for all dimensions but the
              first are the max across the input `SparseTensor` objects' shape values
              for the corresponding dimensions.  Its first shape value is `N`, the minibatch
              size.
              
              The input `SparseTensor` objects' indices are assumed ordered in
              standard lexicographic order.  If this is not the case, after this
              step run `SparseReorder` to restore index ordering.
              
              For example, if the handles represent an input, which is a `[2, 3]` matrix
              representing two original `SparseTensor` objects:
              
              ```
                  index = [ 0]
                          [10]
                          [20]
                  values = [1, 2, 3]
                  shape = [50]
              ```
              
              and
              
              ```
                  index = [ 2]
                          [10]
                  values = [4, 5]
                  shape = [30]
              ```
              
              then the final `SparseTensor` will be:
              
              ```
                  index = [0  0]
                          [0 10]
                          [0 20]
                          [1  2]
                          [1 10]
                  values = [1, 2, 3, 4, 5]
                  shape = [2 50]
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tan">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Tan (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Tan(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Tan'.
            </param>
        <summary>
              Computes tan of x element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tanh">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Tanh (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Tanh(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Tanh'.
            </param>
        <summary>
              Computes hyperbolic tangent of `x` element-wise.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TanhGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TanhGrad (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TanhGrad(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TanhGrad'.
            </param>
        <summary>
              Computes the gradient for the tanh of `x` wrt its input.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Specifically, `grad = dy * (1 - y*y)`, where `y = tanh(x)`, and `dy`
              is the corresponding input gradient.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArrayCloseV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation TensorArrayCloseV2 (TensorFlow.TFOutput handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation TensorArrayCloseV2(valuetype TensorFlow.TFOutput handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayCloseV2'.
            </param>
        <summary>
              Deprecated. Use TensorArrayCloseV3
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArrayCloseV3">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation TensorArrayCloseV3 (TensorFlow.TFOutput handle, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation TensorArrayCloseV3(valuetype TensorFlow.TFOutput handle, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a TensorArray (output of TensorArray or TensorArrayGrad).
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayCloseV3'.
            </param>
        <summary>
              Delete the TensorArray from its resource container.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>
              This enables the user to close and release the resource in the middle
              of a step/run.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArrayConcatV2">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; TensorArrayConcatV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput flow_in, TensorFlow.TFDataType dtype, TensorFlow.TFShape element_shape_except0 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; TensorArrayConcatV2(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput flow_in, valuetype TensorFlow.TFDataType dtype, class TensorFlow.TFShape element_shape_except0, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="flow_in" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="element_shape_except0" Type="TensorFlow.TFShape" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
        </param>
        <param name="flow_in">
        </param>
        <param name="dtype">
        </param>
        <param name="element_shape_except0">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayConcatV2'.
            </param>
        <summary>
              Deprecated. Use TensorArrayConcatV3
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              value: 
              lengths: 
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArrayConcatV3">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; TensorArrayConcatV3 (TensorFlow.TFOutput handle, TensorFlow.TFOutput flow_in, TensorFlow.TFDataType dtype, TensorFlow.TFShape element_shape_except0 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; TensorArrayConcatV3(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput flow_in, valuetype TensorFlow.TFDataType dtype, class TensorFlow.TFShape element_shape_except0, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="flow_in" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="element_shape_except0" Type="TensorFlow.TFShape" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a TensorArray.
            </param>
        <param name="flow_in">
              A float scalar that enforces proper chaining of operations.
            </param>
        <param name="dtype">
              The type of the elem that is returned.
            </param>
        <param name="element_shape_except0">
              Optional argument
              The expected shape of an element, if known,
              excluding the first dimension. Used to validate the shapes of
              TensorArray elements. If this shape is not fully specified, concatenating
              zero-size TensorArrays is an error.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayConcatV3'.
            </param>
        <summary>
              Concat the elements from the TensorArray into value `value`.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              value: All of the elements in the TensorArray, concatenated along the first
              axis.
              lengths: A vector of the row sizes of the original T elements in the
              value output.  In the example above, this would be the values:
              `(n1, n2, ..., n(T-1))`.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Takes `T` elements of shapes
              
                ```
                (n0 x d0 x d1 x ...), (n1 x d0 x d1 x ...), ..., (n(T-1) x d0 x d1 x ...)
                ```
              
              and concatenates them into a Tensor of shape:
              
                ```(n0 + n1 + ... + n(T-1) x d0 x d1 x ...)```
              
              All elements must have the same shape (excepting the first dimension).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArrayGatherV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorArrayGatherV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput indices, TensorFlow.TFOutput flow_in, TensorFlow.TFDataType dtype, TensorFlow.TFShape element_shape = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorArrayGatherV2(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput flow_in, valuetype TensorFlow.TFDataType dtype, class TensorFlow.TFShape element_shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="flow_in" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="element_shape" Type="TensorFlow.TFShape" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
        </param>
        <param name="indices">
        </param>
        <param name="flow_in">
        </param>
        <param name="dtype">
        </param>
        <param name="element_shape">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayGatherV2'.
            </param>
        <summary>
              Deprecated. Use TensorArrayGatherV3
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArrayGatherV3">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorArrayGatherV3 (TensorFlow.TFOutput handle, TensorFlow.TFOutput indices, TensorFlow.TFOutput flow_in, TensorFlow.TFDataType dtype, TensorFlow.TFShape element_shape = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorArrayGatherV3(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput flow_in, valuetype TensorFlow.TFDataType dtype, class TensorFlow.TFShape element_shape, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="flow_in" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="element_shape" Type="TensorFlow.TFShape" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a TensorArray.
            </param>
        <param name="indices">
              The locations in the TensorArray from which to read tensor elements.
            </param>
        <param name="flow_in">
              A float scalar that enforces proper chaining of operations.
            </param>
        <param name="dtype">
              The type of the elem that is returned.
            </param>
        <param name="element_shape">
              Optional argument
              The expected shape of an element, if known. Used to
              validate the shapes of TensorArray elements. If this shape is not
              fully specified, gathering zero-size TensorArrays is an error.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayGatherV3'.
            </param>
        <summary>
              Gather specific elements from the TensorArray into output `value`.
            </summary>
        <returns>
              All of the elements in the TensorArray, concatenated along a new
              axis (the new dimension 0).
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              All elements selected by `indices` must have the same shape.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArrayGradV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorArrayGradV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput flow_in, string source, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorArrayGradV2(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput flow_in, string source, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="flow_in" Type="TensorFlow.TFOutput" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
        </param>
        <param name="flow_in">
        </param>
        <param name="source">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayGradV2'.
            </param>
        <summary>
              Deprecated. Use TensorArrayGradV3
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArrayGradV3">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; TensorArrayGradV3 (TensorFlow.TFOutput handle, TensorFlow.TFOutput flow_in, string source, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; TensorArrayGradV3(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput flow_in, string source, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="flow_in" Type="TensorFlow.TFOutput" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to the forward TensorArray.
            </param>
        <param name="flow_in">
              A float scalar that enforces proper chaining of operations.
            </param>
        <param name="source">
              The gradient source string, used to decide which gradient TensorArray
              to return.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayGradV3'.
            </param>
        <summary>
              Creates a TensorArray for storing the gradients of values in the given handle.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              grad_handle: 
              flow_out: 
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              If the given TensorArray gradient already exists, returns a reference to it.
              
              Locks the size of the original TensorArray by disabling its dynamic size flag.
              
              **A note about the input flow_in:**
              
              The handle flow_in forces the execution of the gradient lookup to occur
              only after certain other operations have occurred.  For example, when
              the forward TensorArray is dynamically sized, writes to this TensorArray
              may resize the object.  The gradient TensorArray is statically sized based
              on the size of the forward TensorArray when this operation executes.
              Furthermore, the size of the forward TensorArray is frozen by this call.
              As a result, the flow is used to ensure that the call to generate the gradient
              TensorArray only happens after all writes are executed.
              
              In the case of dynamically sized TensorArrays, gradient computation should
              only be performed on read operations that have themselves been chained via
              flow to occur only after all writes have executed. That way the final size
              of the forward TensorArray is known when this operation is called.
              
              **A note about the source attribute:**
              
              TensorArray gradient calls use an accumulator TensorArray object.  If
              multiple gradients are calculated and run in the same session, the multiple
              gradient nodes may accidentally flow through the same accumulator TensorArray.
              This double counts and generally breaks the TensorArray gradient flow.
              
              The solution is to identify which gradient call this particular
              TensorArray gradient is being called in.  This is performed by identifying
              a unique string (e.g. "gradients", "gradients_1", ...) from the input
              gradient Tensor's name.  This string is used as a suffix when creating
              the TensorArray gradient object here (the attribute `source`).
              
              The attribute `source` is added as a suffix to the forward TensorArray's
              name when performing the creation / lookup, so that each separate gradient
              calculation gets its own TensorArray accumulator.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArrayReadV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorArrayReadV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput index, TensorFlow.TFOutput flow_in, TensorFlow.TFDataType dtype, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorArrayReadV2(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput index, valuetype TensorFlow.TFOutput flow_in, valuetype TensorFlow.TFDataType dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="index" Type="TensorFlow.TFOutput" />
        <Parameter Name="flow_in" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
        </param>
        <param name="index">
        </param>
        <param name="flow_in">
        </param>
        <param name="dtype">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayReadV2'.
            </param>
        <summary>
              Deprecated. Use TensorArrayReadV3
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArrayReadV3">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorArrayReadV3 (TensorFlow.TFOutput handle, TensorFlow.TFOutput index, TensorFlow.TFOutput flow_in, TensorFlow.TFDataType dtype, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorArrayReadV3(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput index, valuetype TensorFlow.TFOutput flow_in, valuetype TensorFlow.TFDataType dtype, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="index" Type="TensorFlow.TFOutput" />
        <Parameter Name="flow_in" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a TensorArray.
            </param>
        <param name="index">
        </param>
        <param name="flow_in">
              A float scalar that enforces proper chaining of operations.
            </param>
        <param name="dtype">
              The type of the elem that is returned.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayReadV3'.
            </param>
        <summary>
              Read an element from the TensorArray into output `value`.
            </summary>
        <returns>
              The tensor that is read from the TensorArray.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArrayScatterV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorArrayScatterV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput indices, TensorFlow.TFOutput value, TensorFlow.TFOutput flow_in, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorArrayScatterV2(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput value, valuetype TensorFlow.TFOutput flow_in, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="flow_in" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
        </param>
        <param name="indices">
        </param>
        <param name="value">
        </param>
        <param name="flow_in">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayScatterV2'.
            </param>
        <summary>
              Deprecated. Use TensorArrayScatterV3
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArrayScatterV3">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorArrayScatterV3 (TensorFlow.TFOutput handle, TensorFlow.TFOutput indices, TensorFlow.TFOutput value, TensorFlow.TFOutput flow_in, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorArrayScatterV3(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput indices, valuetype TensorFlow.TFOutput value, valuetype TensorFlow.TFOutput flow_in, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="indices" Type="TensorFlow.TFOutput" />
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="flow_in" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a TensorArray.
            </param>
        <param name="indices">
              The locations at which to write the tensor elements.
            </param>
        <param name="value">
              The concatenated tensor to write to the TensorArray.
            </param>
        <param name="flow_in">
              A float scalar that enforces proper chaining of operations.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayScatterV3'.
            </param>
        <summary>
              Scatter the data from the input value into specific TensorArray elements.
            </summary>
        <returns>
              A float scalar that enforces proper chaining of operations.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              `indices` must be a vector, its length must match the first dim of `value`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArraySizeV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorArraySizeV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput flow_in, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorArraySizeV2(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput flow_in, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="flow_in" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
        </param>
        <param name="flow_in">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArraySizeV2'.
            </param>
        <summary>
              Deprecated. Use TensorArraySizeV3
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArraySizeV3">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorArraySizeV3 (TensorFlow.TFOutput handle, TensorFlow.TFOutput flow_in, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorArraySizeV3(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput flow_in, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="flow_in" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a TensorArray (output of TensorArray or TensorArrayGrad).
            </param>
        <param name="flow_in">
              A float scalar that enforces proper chaining of operations.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArraySizeV3'.
            </param>
        <summary>
              Get the current size of the TensorArray.
            </summary>
        <returns>
              The current size of the TensorArray.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArraySplitV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorArraySplitV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput value, TensorFlow.TFOutput lengths, TensorFlow.TFOutput flow_in, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorArraySplitV2(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput value, valuetype TensorFlow.TFOutput lengths, valuetype TensorFlow.TFOutput flow_in, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="lengths" Type="TensorFlow.TFOutput" />
        <Parameter Name="flow_in" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
        </param>
        <param name="value">
        </param>
        <param name="lengths">
        </param>
        <param name="flow_in">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArraySplitV2'.
            </param>
        <summary>
              Deprecated. Use TensorArraySplitV3
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArraySplitV3">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorArraySplitV3 (TensorFlow.TFOutput handle, TensorFlow.TFOutput value, TensorFlow.TFOutput lengths, TensorFlow.TFOutput flow_in, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorArraySplitV3(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput value, valuetype TensorFlow.TFOutput lengths, valuetype TensorFlow.TFOutput flow_in, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="lengths" Type="TensorFlow.TFOutput" />
        <Parameter Name="flow_in" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a TensorArray.
            </param>
        <param name="value">
              The concatenated tensor to write to the TensorArray.
            </param>
        <param name="lengths">
              The vector of lengths, how to split the rows of value into the
              TensorArray.
            </param>
        <param name="flow_in">
              A float scalar that enforces proper chaining of operations.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArraySplitV3'.
            </param>
        <summary>
              Split the data from the input value into TensorArray elements.
            </summary>
        <returns>
              A float scalar that enforces proper chaining of operations.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Assuming that `lengths` takes on values
              
                ```(n0, n1, ..., n(T-1))```
              
              and that `value` has shape
              
                ```(n0 + n1 + ... + n(T-1) x d0 x d1 x ...)```,
              
              this splits values into a TensorArray with T tensors.
              
              TensorArray index t will be the subtensor of values with starting position
              
                ```(n0 + n1 + ... + n(t-1), 0, 0, ...)```
              
              and having size
              
                ```nt x d0 x d1 x ...```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArrayV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorArrayV2 (TensorFlow.TFOutput size, TensorFlow.TFDataType dtype, TensorFlow.TFShape element_shape = null, Nullable&lt;bool&gt; dynamic_size = null, Nullable&lt;bool&gt; clear_after_read = null, string tensor_array_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorArrayV2(valuetype TensorFlow.TFOutput size, valuetype TensorFlow.TFDataType dtype, class TensorFlow.TFShape element_shape, valuetype System.Nullable`1&lt;bool&gt; dynamic_size, valuetype System.Nullable`1&lt;bool&gt; clear_after_read, string tensor_array_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="element_shape" Type="TensorFlow.TFShape" />
        <Parameter Name="dynamic_size" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="clear_after_read" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="tensor_array_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="size">
        </param>
        <param name="dtype">
        </param>
        <param name="element_shape">
              Optional argument
            </param>
        <param name="dynamic_size">
              Optional argument
            </param>
        <param name="clear_after_read">
              Optional argument
            </param>
        <param name="tensor_array_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayV2'.
            </param>
        <summary>
              Deprecated. Use TensorArrayV3
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArrayV3">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; TensorArrayV3 (TensorFlow.TFOutput size, TensorFlow.TFDataType dtype, TensorFlow.TFShape element_shape = null, Nullable&lt;bool&gt; dynamic_size = null, Nullable&lt;bool&gt; clear_after_read = null, string tensor_array_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; TensorArrayV3(valuetype TensorFlow.TFOutput size, valuetype TensorFlow.TFDataType dtype, class TensorFlow.TFShape element_shape, valuetype System.Nullable`1&lt;bool&gt; dynamic_size, valuetype System.Nullable`1&lt;bool&gt; clear_after_read, string tensor_array_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="element_shape" Type="TensorFlow.TFShape" />
        <Parameter Name="dynamic_size" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="clear_after_read" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="tensor_array_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="size">
              The size of the array.
            </param>
        <param name="dtype">
              The type of the elements on the tensor_array.
            </param>
        <param name="element_shape">
              Optional argument
              The expected shape of an element, if known. Used to
              validate the shapes of TensorArray elements. If this shape is not
              fully specified, gathering zero-size TensorArrays is an error.
            </param>
        <param name="dynamic_size">
              Optional argument
              A boolean that determines whether writes to the TensorArray
              are allowed to grow the size.  By default, this is not allowed.
            </param>
        <param name="clear_after_read">
              Optional argument
              If true (default), Tensors in the TensorArray are cleared
              after being read.  This disables multiple read semantics but allows early
              release of memory.
            </param>
        <param name="tensor_array_name">
              Optional argument
              Overrides the name used for the temporary tensor_array
              resource. Default value is the name of the 'TensorArray' op (which
              is guaranteed unique).
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayV3'.
            </param>
        <summary>
              An array of Tensors of given size.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              handle: The handle to the TensorArray.
              flow: A scalar used to control gradient flow.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              Write data via Write and read via Read or Pack.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArrayWriteV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorArrayWriteV2 (TensorFlow.TFOutput handle, TensorFlow.TFOutput index, TensorFlow.TFOutput value, TensorFlow.TFOutput flow_in, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorArrayWriteV2(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput index, valuetype TensorFlow.TFOutput value, valuetype TensorFlow.TFOutput flow_in, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="index" Type="TensorFlow.TFOutput" />
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="flow_in" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
        </param>
        <param name="index">
        </param>
        <param name="value">
        </param>
        <param name="flow_in">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayWriteV2'.
            </param>
        <summary>
              Deprecated. Use TensorArrayGradV3
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorArrayWriteV3">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorArrayWriteV3 (TensorFlow.TFOutput handle, TensorFlow.TFOutput index, TensorFlow.TFOutput value, TensorFlow.TFOutput flow_in, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorArrayWriteV3(valuetype TensorFlow.TFOutput handle, valuetype TensorFlow.TFOutput index, valuetype TensorFlow.TFOutput value, valuetype TensorFlow.TFOutput flow_in, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="TensorFlow.TFOutput" />
        <Parameter Name="index" Type="TensorFlow.TFOutput" />
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="flow_in" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">
              The handle to a TensorArray.
            </param>
        <param name="index">
              The position to write to inside the TensorArray.
            </param>
        <param name="value">
              The tensor to write to the TensorArray.
            </param>
        <param name="flow_in">
              A float scalar that enforces proper chaining of operations.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorArrayWriteV3'.
            </param>
        <summary>
              Push an element onto the tensor_array.
            </summary>
        <returns>
              A float scalar that enforces proper chaining of operations.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorDataset (TensorFlow.TFOutput[] components, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorDataset(valuetype TensorFlow.TFOutput[] components, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="components" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="components">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorDataset'.
            </param>
        <summary>
              Creates a dataset that emits `components` as a tuple of tensors once.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorSliceDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorSliceDataset (TensorFlow.TFOutput[] components, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorSliceDataset(valuetype TensorFlow.TFOutput[] components, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="components" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="components">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorSliceDataset'.
            </param>
        <summary>
              Creates a dataset that emits each dim-0 slice of `components` once.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorSummary">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorSummary (TensorFlow.TFOutput tensor, string description = null, string[] labels = null, string display_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorSummary(valuetype TensorFlow.TFOutput tensor, string description, string[] labels, string display_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tensor" Type="TensorFlow.TFOutput" />
        <Parameter Name="description" Type="System.String" />
        <Parameter Name="labels" Type="System.String[]" />
        <Parameter Name="display_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tensor">
              A tensor to serialize.
            </param>
        <param name="description">
              Optional argument
              A json-encoded SummaryDescription proto.
            </param>
        <param name="labels">
              Optional argument
              An unused list of strings.
            </param>
        <param name="display_name">
              Optional argument
              An unused string.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorSummary'.
            </param>
        <summary>
              Outputs a `Summary` protocol buffer with a tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This op is being phased out in favor of TensorSummaryV2, which lets callers pass
              a tag as well as a serialized SummaryMetadata proto string that contains
              plugin-specific data. We will keep this op to maintain backwards compatibility.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TensorSummaryV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TensorSummaryV2 (TensorFlow.TFOutput tag, TensorFlow.TFOutput tensor, TensorFlow.TFOutput serialized_summary_metadata, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TensorSummaryV2(valuetype TensorFlow.TFOutput tag, valuetype TensorFlow.TFOutput tensor, valuetype TensorFlow.TFOutput serialized_summary_metadata, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="TensorFlow.TFOutput" />
        <Parameter Name="tensor" Type="TensorFlow.TFOutput" />
        <Parameter Name="serialized_summary_metadata" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tag">
              A string attached to this summary. Used for organization in TensorBoard.
            </param>
        <param name="tensor">
              A tensor to serialize.
            </param>
        <param name="serialized_summary_metadata">
              A serialized SummaryMetadata proto. Contains plugin
              data.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TensorSummaryV2'.
            </param>
        <summary>
              Outputs a `Summary` protocol buffer with a tensor and per-plugin data.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextLineDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TextLineDataset (TensorFlow.TFOutput filenames, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TextLineDataset(valuetype TensorFlow.TFOutput filenames, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filenames" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filenames">
              A scalar or a vector containing the name(s) of the file(s) to be
              read.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TextLineDataset'.
            </param>
        <summary>
              Creates a dataset that emits the lines of one or more text files.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextLineReaderV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TextLineReaderV2 (Nullable&lt;long&gt; skip_header_lines = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TextLineReaderV2(valuetype System.Nullable`1&lt;int64&gt; skip_header_lines, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skip_header_lines" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="skip_header_lines">
              Optional argument
              Number of lines to skip from the beginning of every file.
            </param>
        <param name="container">
              Optional argument
              If non-empty, this reader is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this reader is named in the given bucket
              with this shared_name. Otherwise, the node name is used instead.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TextLineReaderV2'.
            </param>
        <summary>
              A Reader that outputs the lines of a file delimited by '\n'.
            </summary>
        <returns>
              The handle to reference the Reader.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TFRecordDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TFRecordDataset (TensorFlow.TFOutput filenames, TensorFlow.TFOutput compression_type, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TFRecordDataset(valuetype TensorFlow.TFOutput filenames, valuetype TensorFlow.TFOutput compression_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filenames" Type="TensorFlow.TFOutput" />
        <Parameter Name="compression_type" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filenames">
              A scalar or vector containing the name(s) of the file(s) to be
              read.
            </param>
        <param name="compression_type">
              A scalar containing either (i) the empty string (no
              compression), (ii) "ZLIB", or (iii) "GZIP".
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TFRecordDataset'.
            </param>
        <summary>
              Creates a dataset that emits the records from one or more TFRecord files.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TFRecordReaderV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TFRecordReaderV2 (string container = null, string shared_name = null, string compression_type = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TFRecordReaderV2(string container, string shared_name, string compression_type, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="compression_type" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="container">
              Optional argument
              If non-empty, this reader is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this reader is named in the given bucket
              with this shared_name. Otherwise, the node name is used instead.
            </param>
        <param name="compression_type">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TFRecordReaderV2'.
            </param>
        <summary>
              A Reader that outputs the records from a TensorFlow Records file.
            </summary>
        <returns>
              The handle to reference the Reader.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThreadUnsafeUnigramCandidateSampler">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; ThreadUnsafeUnigramCandidateSampler (TensorFlow.TFOutput true_classes, long num_true, long num_sampled, bool unique, long range_max, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; ThreadUnsafeUnigramCandidateSampler(valuetype TensorFlow.TFOutput true_classes, int64 num_true, int64 num_sampled, bool unique, int64 range_max, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="true_classes" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_true" Type="System.Int64" />
        <Parameter Name="num_sampled" Type="System.Int64" />
        <Parameter Name="unique" Type="System.Boolean" />
        <Parameter Name="range_max" Type="System.Int64" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="true_classes">
              A batch_size * num_true matrix, in which each row contains the
              IDs of the num_true target_classes in the corresponding original label.
            </param>
        <param name="num_true">
              Number of true labels per context.
            </param>
        <param name="num_sampled">
              Number of candidates to randomly sample.
            </param>
        <param name="unique">
              If unique is true, we sample with rejection, so that all sampled
              candidates in a batch are unique. This requires some approximation to
              estimate the post-rejection sampling probabilities.
            </param>
        <param name="range_max">
              The sampler will sample integers from the interval [0, range_max).
            </param>
        <param name="seed">
              Optional argument
              If either seed or seed2 are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              An second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ThreadUnsafeUnigramCandidateSampler'.
            </param>
        <summary>
              Generates labels for candidate sampling with a learned unigram distribution.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              sampled_candidates: A vector of length num_sampled, in which each element is
              the ID of a sampled candidate.
              true_expected_count: A batch_size * num_true matrix, representing
              the number of times each candidate is expected to occur in a batch
              of sampled candidates. If unique=true, then this is a probability.
              sampled_expected_count: A vector of length num_sampled, for each sampled
              candidate representing the number of times the candidate is expected
              to occur in a batch of sampled candidates.  If unique=true, then this is a
              probability.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              See explanations of candidate sampling and the data formats at
              go/candidate-sampling.
              
              For each batch, this op picks a single set of sampled candidate labels.
              
              The advantages of sampling candidates per-batch are simplicity and the
              possibility of efficient dense matrix multiplication. The disadvantage is that
              the sampled candidates must be chosen independently of the context and of the
              true labels.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tile">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Tile (TensorFlow.TFOutput input, TensorFlow.TFOutput multiples, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Tile(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput multiples, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="multiples" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              1-D or higher.
            </param>
        <param name="multiples">
              1-D. Length must be the same as the number of dimensions in `input`
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Tile'.
            </param>
        <summary>
              Constructs a tensor by tiling a given tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation creates a new tensor by replicating `input` `multiples` times.
              The output tensor's i'th dimension has `input.dims(i) * multiples[i]` elements,
              and the values of `input` are replicated `multiples[i]` times along the 'i'th
              dimension. For example, tiling `[a b c d]` by `[2]` produces
              `[a b c d a b c d]`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TileGrad">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TileGrad (TensorFlow.TFOutput input, TensorFlow.TFOutput multiples, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TileGrad(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput multiples, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="multiples" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="multiples">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TileGrad'.
            </param>
        <summary>
              Returns the gradient of `Tile`.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Since `Tile` takes an input and repeats the input `multiples` times
              along each dimension, `TileGrad` takes in `multiples` and aggregates
              each repeated tile of `input` into `output`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToGraphDef">
      <MemberSignature Language="C#" Value="public void ToGraphDef (TensorFlow.TFBuffer outputGraphDef, TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ToGraphDef(class TensorFlow.TFBuffer outputGraphDef, class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputGraphDef" Type="TensorFlow.TFBuffer" />
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="outputGraphDef">Target buffer where the graphs is serialized into.</param>
        <param name="status">Status buffer, if specified a status code will be left here, if not specified, a <see cref="T:TensorFlow.TFException" /> exception is raised if there is an error.</param>
        <summary>
            Write out a serialized representation of the graph (as a GraphDef protocol buffer message) into <paramref name="outputGraphDef" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TopK">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; TopK (TensorFlow.TFOutput input, long k, Nullable&lt;bool&gt; sorted = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; TopK(valuetype TensorFlow.TFOutput input, int64 k, valuetype System.Nullable`1&lt;bool&gt; sorted, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="k" Type="System.Int64" />
        <Parameter Name="sorted" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              1-D or higher with last dimension at least `k`.
            </param>
        <param name="k">
              Number of top elements to look for along the last dimension (along each
              row for matrices).
            </param>
        <param name="sorted">
              Optional argument
              If true the resulting `k` elements will be sorted by the values in
              descending order.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TopK'.
            </param>
        <summary>
              Finds values and indices of the `k` largest elements for the last dimension.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              values: The `k` largest elements along each last dimensional slice.
              indices: The indices of `values` within the last dimension of `input`.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              If the input is a vector (rank-1), finds the `k` largest entries in the vector
              and outputs their values and indices as vectors.  Thus `values[j]` is the
              `j`-th largest entry in `input`, and its index is `indices[j]`.
              
              For matrices (resp. higher rank input), computes the top `k` entries in each
              row (resp. vector along the last dimension).  Thus,
              
                  values.shape = indices.shape = input.shape[:-1] + [k]
              
              If two elements are equal, the lower-index element appears first.
              
              If `k` varies dynamically, use `TopKV2` below.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TopKV2">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; TopKV2 (TensorFlow.TFOutput input, TensorFlow.TFOutput k, Nullable&lt;bool&gt; sorted = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; TopKV2(valuetype TensorFlow.TFOutput input, valuetype TensorFlow.TFOutput k, valuetype System.Nullable`1&lt;bool&gt; sorted, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="k" Type="TensorFlow.TFOutput" />
        <Parameter Name="sorted" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
              1-D or higher with last dimension at least `k`.
            </param>
        <param name="k">
              0-D.  Number of top elements to look for along the last dimension (along each
              row for matrices).
            </param>
        <param name="sorted">
              Optional argument
              If true the resulting `k` elements will be sorted by the values in
              descending order.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TopKV2'.
            </param>
        <summary>
              Finds values and indices of the `k` largest elements for the last dimension.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              values: The `k` largest elements along each last dimensional slice.
              indices: The indices of `values` within the last dimension of `input`.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              If the input is a vector (rank-1), finds the `k` largest entries in the vector
              and outputs their values and indices as vectors.  Thus `values[j]` is the
              `j`-th largest entry in `input`, and its index is `indices[j]`.
              
              For matrices (resp. higher rank input), computes the top `k` entries in each
              row (resp. vector along the last dimension).  Thus,
              
                  values.shape = indices.shape = input.shape[:-1] + [k]
              
              If two elements are equal, the lower-index element appears first.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transpose">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Transpose (TensorFlow.TFOutput x, TensorFlow.TFOutput perm, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Transpose(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput perm, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="perm" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="perm">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Transpose'.
            </param>
        <summary>
              Shuffle dimensions of x according to a permutation.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The output `y` has the same rank as `x`. The shapes of `x` and `y` satisfy:
                `y.shape[i] == x.shape[perm[i]] for i in [0, 1, ..., rank(x) - 1]`
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TruncateDiv">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TruncateDiv (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TruncateDiv(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TruncateDiv'.
            </param>
        <summary>
              Returns x / y element-wise for integer types.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Truncation designates that negative numbers will round fractional quantities
              toward zero. I.e. -7 / 5 = 1. This matches C semantics but it is different
              than Python semantics. See `FloorDiv` for a division function that matches
              Python Semantics.
              
              *NOTE*: `TruncateDiv` supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TruncatedNormal">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TruncatedNormal (TensorFlow.TFOutput shape, TensorFlow.TFDataType dtype, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TruncatedNormal(valuetype TensorFlow.TFOutput shape, valuetype TensorFlow.TFDataType dtype, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape" Type="TensorFlow.TFOutput" />
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="shape">
              The shape of the output tensor.
            </param>
        <param name="dtype">
              The type of the output.
            </param>
        <param name="seed">
              Optional argument
              If either `seed` or `seed2` are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              A second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TruncatedNormal'.
            </param>
        <summary>
              Outputs random values from a truncated normal distribution.
            </summary>
        <returns>
              A tensor of the specified shape filled with random truncated normal
              values.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The generated values follow a normal distribution with mean 0 and standard
              deviation 1, except that values whose magnitude is more than 2 standard
              deviations from the mean are dropped and re-picked.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TruncateMod">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput TruncateMod (TensorFlow.TFOutput x, TensorFlow.TFOutput y, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput TruncateMod(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput y, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="y" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'TruncateMod'.
            </param>
        <summary>
              Returns element-wise remainder of division. This emulates C semantics in that
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              the result here is consistent with a truncating divide. E.g. `truncate(x / y) *
              y + truncate_mod(x, y) = x`.
              
              *NOTE*: `TruncateMod` supports broadcasting. More about broadcasting
              [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UniformCandidateSampler">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; UniformCandidateSampler (TensorFlow.TFOutput true_classes, long num_true, long num_sampled, bool unique, long range_max, Nullable&lt;long&gt; seed = null, Nullable&lt;long&gt; seed2 = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; UniformCandidateSampler(valuetype TensorFlow.TFOutput true_classes, int64 num_true, int64 num_sampled, bool unique, int64 range_max, valuetype System.Nullable`1&lt;int64&gt; seed, valuetype System.Nullable`1&lt;int64&gt; seed2, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="true_classes" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_true" Type="System.Int64" />
        <Parameter Name="num_sampled" Type="System.Int64" />
        <Parameter Name="unique" Type="System.Boolean" />
        <Parameter Name="range_max" Type="System.Int64" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="seed2" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="true_classes">
              A batch_size * num_true matrix, in which each row contains the
              IDs of the num_true target_classes in the corresponding original label.
            </param>
        <param name="num_true">
              Number of true labels per context.
            </param>
        <param name="num_sampled">
              Number of candidates to randomly sample.
            </param>
        <param name="unique">
              If unique is true, we sample with rejection, so that all sampled
              candidates in a batch are unique. This requires some approximation to
              estimate the post-rejection sampling probabilities.
            </param>
        <param name="range_max">
              The sampler will sample integers from the interval [0, range_max).
            </param>
        <param name="seed">
              Optional argument
              If either seed or seed2 are set to be non-zero, the random number
              generator is seeded by the given seed.  Otherwise, it is seeded by a
              random seed.
            </param>
        <param name="seed2">
              Optional argument
              An second seed to avoid seed collision.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'UniformCandidateSampler'.
            </param>
        <summary>
              Generates labels for candidate sampling with a uniform distribution.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              sampled_candidates: A vector of length num_sampled, in which each element is
              the ID of a sampled candidate.
              true_expected_count: A batch_size * num_true matrix, representing
              the number of times each candidate is expected to occur in a batch
              of sampled candidates. If unique=true, then this is a probability.
              sampled_expected_count: A vector of length num_sampled, for each sampled
              candidate representing the number of times the candidate is expected
              to occur in a batch of sampled candidates.  If unique=true, then this is a
              probability.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              See explanations of candidate sampling and the data formats at
              go/candidate-sampling.
              
              For each batch, this op picks a single set of sampled candidate labels.
              
              The advantages of sampling candidates per-batch are simplicity and the
              possibility of efficient dense matrix multiplication. The disadvantage is that
              the sampled candidates must be chosen independently of the context and of the
              true labels.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unique">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt; Unique (TensorFlow.TFOutput x, Nullable&lt;TensorFlow.TFDataType&gt; out_idx = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`2&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; Unique(valuetype TensorFlow.TFOutput x, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; out_idx, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_idx" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
              1-D.
            </param>
        <param name="out_idx">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Unique'.
            </param>
        <summary>
              Finds unique elements in a 1-D tensor.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              y: 1-D.
              idx: 1-D.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              This operation returns a tensor `y` containing all of the unique elements of `x`
              sorted in the same order that they occur in `x`. This operation also returns a
              tensor `idx` the same size as `x` that contains the index of each value of `x`
              in the unique output `y`. In other words:
              
              `y[idx[i]] = x[i] for i in [0, 1,...,rank(x) - 1]`
              
              For example:
              
              ```
              # tensor 'x' is [1, 1, 2, 4, 4, 4, 7, 8, 8]
              y, idx = unique(x)
              y ==&amp;gt; [1, 2, 4, 7, 8]
              idx ==&amp;gt; [0, 0, 1, 2, 2, 2, 3, 4, 4]
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UniqueWithCounts">
      <MemberSignature Language="C#" Value="public ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt; UniqueWithCounts (TensorFlow.TFOutput x, Nullable&lt;TensorFlow.TFDataType&gt; out_idx = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ValueTuple`3&lt;valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput, valuetype TensorFlow.TFOutput&gt; UniqueWithCounts(valuetype TensorFlow.TFOutput x, valuetype System.Nullable`1&lt;valuetype TensorFlow.TFDataType&gt; out_idx, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;TensorFlow.TFOutput,TensorFlow.TFOutput,TensorFlow.TFOutput&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="out_idx" Type="System.Nullable&lt;TensorFlow.TFDataType&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
              1-D.
            </param>
        <param name="out_idx">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'UniqueWithCounts'.
            </param>
        <summary>
              Finds unique elements in a 1-D tensor.
            </summary>
        <returns>
              Returns a tuple with multiple values, as follows:
              y: 1-D.
              idx: 1-D.
              count: 1-D.
              The TFOperation can be fetched from any of the TFOutputs returned in the tuple values, by fethching the Operation property.
            </returns>
        <remarks>
              This operation returns a tensor `y` containing all of the unique elements of `x`
              sorted in the same order that they occur in `x`. This operation also returns a
              tensor `idx` the same size as `x` that contains the index of each value of `x`
              in the unique output `y`. Finally, it returns a third tensor `count` that
              contains the count of each element of `y` in `x`. In other words:
              
              `y[idx[i]] = x[i] for i in [0, 1,...,rank(x) - 1]`
              
              For example:
              
              ```
              # tensor 'x' is [1, 1, 2, 4, 4, 4, 7, 8, 8]
              y, idx, count = unique_with_counts(x)
              y ==&amp;gt; [1, 2, 4, 7, 8]
              idx ==&amp;gt; [0, 0, 1, 2, 2, 2, 3, 4, 4]
              count ==&amp;gt; [2, 1, 3, 1, 2]
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unpack">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] Unpack (TensorFlow.TFOutput value, long num, Nullable&lt;long&gt; axis = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] Unpack(valuetype TensorFlow.TFOutput value, int64 num, valuetype System.Nullable`1&lt;int64&gt; axis, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TensorFlow.TFOutput" />
        <Parameter Name="num" Type="System.Int64" />
        <Parameter Name="axis" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
              1-D or higher, with `axis` dimension size equal to `num`.
            </param>
        <param name="num">
        </param>
        <param name="axis">
              Optional argument
              Dimension along which to unpack.  Negative values wrap around, so the
              valid range is `[-R, R)`.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Unpack'.
            </param>
        <summary>
              Unpacks a given dimension of a rank-`R` tensor into `num` rank-`(R-1)` tensors.
            </summary>
        <returns>
              The list of tensors unpacked from `value`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Unpacks `num` tensors from `value` by chipping it along the `axis` dimension.
              For example, given a tensor of shape `(A, B, C, D)`;
              
              If `axis == 0` then the i'th tensor in `output` is the slice `value[i, :, :, :]`
                and each tensor in `output` will have shape `(B, C, D)`. (Note that the
                dimension unpacked along is gone, unlike `split`).
              
              If `axis == 1` then the i'th tensor in `output` is the slice `value[:, i, :, :]`
                and each tensor in `output` will have shape `(A, C, D)`.
              Etc.
              
              This is the opposite of `pack`.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnsortedSegmentMax">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput UnsortedSegmentMax (TensorFlow.TFOutput data, TensorFlow.TFOutput segment_ids, TensorFlow.TFOutput num_segments, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput UnsortedSegmentMax(valuetype TensorFlow.TFOutput data, valuetype TensorFlow.TFOutput segment_ids, valuetype TensorFlow.TFOutput num_segments, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="segment_ids" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_segments" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
        </param>
        <param name="segment_ids">
              A 1-D tensor whose rank is equal to the rank of `data`'s
              first dimension.
            </param>
        <param name="num_segments">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'UnsortedSegmentMax'.
            </param>
        <summary>
              Computes the Max along segments of a tensor.
            </summary>
        <returns>
              Has same shape as data, except for dimension 0 which
              has size `num_segments`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Read @{$math_ops#segmentation$the section on segmentation} for an explanation of
              segments.
              
              This operator is similar to the [unsorted segment sum operator](../../../api_docs/python/math_ops.md#UnsortedSegmentSum).
              Instead of computing the sum over segments, it computes the maximum
              such that:
              
              \\(output_i = \max_j data_j\\) where max is over `j` such
              that `segment_ids[j] == i`.
              
              If the maximum is empty for a given segment ID `i`, it outputs the smallest possible value for specific numeric type,
               `output[i] = numeric_limits&amp;lt;T&amp;gt;::min()`.
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src="https://www.tensorflow.org/images/UnsortedSegmentSum.png" alt&amp;gt;
              &amp;lt;/div&amp;gt;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnsortedSegmentSum">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput UnsortedSegmentSum (TensorFlow.TFOutput data, TensorFlow.TFOutput segment_ids, TensorFlow.TFOutput num_segments, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput UnsortedSegmentSum(valuetype TensorFlow.TFOutput data, valuetype TensorFlow.TFOutput segment_ids, valuetype TensorFlow.TFOutput num_segments, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TensorFlow.TFOutput" />
        <Parameter Name="segment_ids" Type="TensorFlow.TFOutput" />
        <Parameter Name="num_segments" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
        </param>
        <param name="segment_ids">
              A tensor whose shape is a prefix of `data.shape`.
            </param>
        <param name="num_segments">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'UnsortedSegmentSum'.
            </param>
        <summary>
              Computes the sum along segments of a tensor.
            </summary>
        <returns>
              Has same shape as data, except for the first `segment_ids.rank`
              dimensions, which are replaced with a single dimension which has size
              `num_segments`.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              Read @{$math_ops#segmentation$the section on segmentation} for an explanation of
              segments.
              
              Computes a tensor such that
              `(output[i] = sum_{j...} data[j...]` where the sum is over tuples `j...` such
              that `segment_ids[j...] == i`.  Unlike `SegmentSum`, `segment_ids`
              need not be sorted and need not cover all values in the full
              range of valid values.
              
              If the sum is empty for a given segment ID `i`, `output[i] = 0`.
              
              `num_segments` should equal the number of distinct segment IDs.
              
              &amp;lt;div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;"&amp;gt;
              &amp;lt;img style="width:100%" src="https://www.tensorflow.org/images/UnsortedSegmentSum.png" alt&amp;gt;
              &amp;lt;/div&amp;gt;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unstage">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] Unstage (TensorFlow.TFDataType[] dtypes, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] Unstage(valuetype TensorFlow.TFDataType[] dtypes, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dtypes">
        </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Unstage'.
            </param>
        <summary>
              Op is similar to a lightweight Dequeue.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The basic funtionality is similar to dequeue with many fewer
              capabilities and options.  This Op is optimized for performance.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unstage">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] Unstage (TensorFlow.TFDataType[] dtypes, Nullable&lt;long&gt; capacity = null, Nullable&lt;long&gt; memory_limit = null, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] Unstage(valuetype TensorFlow.TFDataType[] dtypes, valuetype System.Nullable`1&lt;int64&gt; capacity, valuetype System.Nullable`1&lt;int64&gt; memory_limit, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtypes" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="capacity" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="memory_limit" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dtypes">
        </param>
        <param name="capacity">
              Optional argument
            </param>
        <param name="memory_limit">
              Optional argument
            </param>
        <param name="container">
              Optional argument
            </param>
        <param name="shared_name">
              Optional argument
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Unstage'.
            </param>
        <summary>
              Op is similar to a lightweight Dequeue.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The basic functionality is similar to dequeue with many fewer
              capabilities and options.  This Op is optimized for performance.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="VarHandleOp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput VarHandleOp (TensorFlow.TFDataType dtype, TensorFlow.TFShape shape, string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput VarHandleOp(valuetype TensorFlow.TFDataType dtype, class TensorFlow.TFShape shape, string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtype" Type="TensorFlow.TFDataType" />
        <Parameter Name="shape" Type="TensorFlow.TFShape" />
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dtype">
              the type of this variable. Must agree with the dtypes
              of all ops using this variable.
            </param>
        <param name="shape">
              The (possibly partially specified) shape of this variable.
            </param>
        <param name="container">
              Optional argument
              the container this variable is placed in.
            </param>
        <param name="shared_name">
              Optional argument
              the name by which this variable is referred to.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'VarHandleOp'.
            </param>
        <summary>
              Creates a handle to a Variable resource.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Variable">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Variable (TensorFlow.TFOutput initialValue, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Variable(valuetype TensorFlow.TFOutput initialValue, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initialValue" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="initialValue">Initial value.</param>
        <param name="operName">Operation name, optional.</param>
        <summary>
            Variable node, with a starting initial value.  Convenience that registers the init variable to a global queue.
            </summary>
        <returns>The returning TFOutput returns the handle to the variable.</returns>
        <remarks>
            Variables need to be initialized before the main execution so you will typically want to
            run the session on the variable.
            
            The init sequence for the variable is stored in the graph, you must manually initialize 
            those by running the session on the global variables.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Variable">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Variable (TensorFlow.TFOutput initialValue, out TensorFlow.TFOutput value, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Variable(valuetype TensorFlow.TFOutput initialValue, valuetype TensorFlow.TFOutput value, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initialValue" Type="TensorFlow.TFOutput" />
        <Parameter Name="value" Type="TensorFlow.TFOutput&amp;" RefType="out" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="initialValue">Initial value.</param>
        <param name="value">Returns the value of the variable.</param>
        <param name="operName">Operation name, optional.</param>
        <summary>
            Variable node, with a starting initial value.  Convenience that registers the init variable to a global queue.
            </summary>
        <returns>The returning TFOutput returns the handle to the variable.</returns>
        <remarks>
            Variables need to be initialized before the main execution so you will typically want to
            run the session on the variable.
            
            The init sequence for the variable is stored in the graph, you must manually initialize 
            those by running the session on the global variables.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Variable">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Variable (TensorFlow.TFOutput initialValue, out TensorFlow.TFOperation init, out TensorFlow.TFOutput value, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Variable(valuetype TensorFlow.TFOutput initialValue, class TensorFlow.TFOperation init, valuetype TensorFlow.TFOutput value, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initialValue" Type="TensorFlow.TFOutput" />
        <Parameter Name="init" Type="TensorFlow.TFOperation&amp;" RefType="out" />
        <Parameter Name="value" Type="TensorFlow.TFOutput&amp;" RefType="out" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="initialValue">Initial value.</param>
        <param name="init">Returns the operation that initializes the value of the variable.</param>
        <param name="value">Returns the value of the variable.</param>
        <param name="operName">Operation name, optional.</param>
        <summary>
            Variable node, with a starting initial value.
            </summary>
        <returns>The returning TFOutput returns the handle to the variable.</returns>
        <remarks>
            Variables need to be initialized before the main execution so you will typically want to
            run the session on the variable
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="VarIsInitializedOp">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput VarIsInitializedOp (TensorFlow.TFOutput resource, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput VarIsInitializedOp(valuetype TensorFlow.TFOutput resource, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">
              the input resource handle.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'VarIsInitializedOp'.
            </param>
        <summary>
              Checks whether a resource handle-based variable has been initialized.
            </summary>
        <returns>
              a scalar boolean which is true if the variable has been
              initialized.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Where">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Where (TensorFlow.TFOutput input, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Where(valuetype TensorFlow.TFOutput input, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Where'.
            </param>
        <summary>
              Returns locations of true values in a boolean tensor.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              This operation returns the coordinates of true elements in `input`. The
              coordinates are returned in a 2-D tensor where the first dimension (rows)
              represents the number of true elements, and the second dimension (columns)
              represents the coordinates of the true elements. Keep in mind, the shape of
              the output tensor can vary depending on how many true values there are in
              `input`. Indices are output in row-major order.
              
              For example:
              
              ```
              # 'input' tensor is [[True, False]
              #                    [True, False]]
              # 'input' has two true values, so output has two coordinates.
              # 'input' has rank of 2, so coordinates have two indices.
              where(input) ==&amp;gt; [[0, 0],
                                [1, 0]]
              
              # `input` tensor is [[[True, False]
              #                     [True, False]]
              #                    [[False, True]
              #                     [False, True]]
              #                    [[False, False]
              #                     [False, True]]]
              # 'input' has 5 true values, so output has 5 coordinates.
              # 'input' has rank of 3, so coordinates have three indices.
              where(input) ==&amp;gt; [[0, 0, 0],
                                [0, 1, 0],
                                [1, 0, 1],
                                [1, 1, 1],
                                [2, 1, 1]]
              ```
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="While">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput[] While (TensorFlow.TFOutput[] inputs, TensorFlow.TFGraph.WhileConstructor constructor, TensorFlow.TFStatus status = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput[] While(valuetype TensorFlow.TFOutput[] inputs, class TensorFlow.TFGraph/WhileConstructor constructor, class TensorFlow.TFStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="constructor" Type="TensorFlow.TFGraph+WhileConstructor" />
        <Parameter Name="status" Type="TensorFlow.TFStatus" />
      </Parameters>
      <Docs>
        <param name="inputs">Inputs.</param>
        <param name="constructor">Callback method that fills out the various while loop parameters.</param>
        <param name="status">Status buffer, if specified a status code will be left here, if not specified, a <see cref="T:TensorFlow.TFException" /> exception is raised if there is an error.</param>
        <summary>
            Constructs a while loop with the specified inputs and a callback that composes the while loop
            </summary>
        <returns>
            An array of TFOutputs from creating the While loop, or null if there is an error creating the 
            while loop, or if the constructor raised an exception when it was invoked.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WholeFileReaderV2">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput WholeFileReaderV2 (string container = null, string shared_name = null, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput WholeFileReaderV2(string container, string shared_name, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.String" />
        <Parameter Name="shared_name" Type="System.String" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="container">
              Optional argument
              If non-empty, this reader is placed in the given container.
              Otherwise, a default container is used.
            </param>
        <param name="shared_name">
              Optional argument
              If non-empty, this reader is named in the given bucket
              with this shared_name. Otherwise, the node name is used instead.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'WholeFileReaderV2'.
            </param>
        <summary>
              A Reader that outputs the entire contents of a file as a value.
            </summary>
        <returns>
              The handle to reference the Reader.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              To use, enqueue filenames in a Queue.  The output of ReaderRead will
              be a filename (key) and the contents of that file (value).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="WithScope">
      <MemberSignature Language="C#" Value="public TensorFlow.TFScope WithScope (string nameScopeDesc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFScope WithScope(string nameScopeDesc) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFScope</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nameScopeDesc" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="nameScopeDesc">The namescope description, if the value is null, this
            will reset the toplevel namescope to be the empty value. </param>
        <summary>
            Creates a new namescope by setting the scope to the description provided.
            </summary>
        <returns>A new scope that will remain in use until the return TFScope is disposed.</returns>
        <remarks>
          <para>
            To more easily name your operations and group then, you can use the
            WithScope method to set a current name scope that alter the complete name
            of an operation added to the graph.
            </para>
          <para>
            The graph starts with a scope set to the empty string, you can introduce new
            scopes by calling WithScope, and can be conveniently used with the C# using
            statement, like this:
            </para>
          <code>
            Assert (graph.CurrentNamescope, "");
            using (var nested = graph.WithScope ("nested")){
               Assert (graph.CurrentNameScope, "nested");
               using (var inner = graph.WithScope ("inner")){
                   Assert (graph.CurrentNameScope, "nested/inner");
               }
            }
            </code>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteFile">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOperation WriteFile (TensorFlow.TFOutput filename, TensorFlow.TFOutput contents, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class TensorFlow.TFOperation WriteFile(valuetype TensorFlow.TFOutput filename, valuetype TensorFlow.TFOutput contents, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="TensorFlow.TFOutput" />
        <Parameter Name="contents" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">
              scalar. The name of the file to which we write the contents.
            </param>
        <param name="contents">
              scalar. The content to be written to the output file.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'WriteFile'.
            </param>
        <summary>
              Writes contents to the file at input filename. Creates file if not existing.
            </summary>
        <returns>
              Returns the description of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZerosLike">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ZerosLike (TensorFlow.TFOutput x, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ZerosLike(valuetype TensorFlow.TFOutput x, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
              a tensor of type T.
            </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ZerosLike'.
            </param>
        <summary>
              Returns a tensor of zeros with the same shape and type as x.
            </summary>
        <returns>
              a tensor of the same shape and type as x but filled with zeros.
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Zeta">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput Zeta (TensorFlow.TFOutput x, TensorFlow.TFOutput q, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput Zeta(valuetype TensorFlow.TFOutput x, valuetype TensorFlow.TFOutput q, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TensorFlow.TFOutput" />
        <Parameter Name="q" Type="TensorFlow.TFOutput" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">
        </param>
        <param name="q">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'Zeta'.
            </param>
        <summary>
              Compute the Hurwitz zeta function \\(\zeta(x, q)\\).
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>
              The Hurwitz zeta function is defined as:
              
              
              \\(\zeta(x, q) = \sum_{n=0}^{\infty} (q + n)^{-x}\\)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ZipDataset">
      <MemberSignature Language="C#" Value="public TensorFlow.TFOutput ZipDataset (TensorFlow.TFOutput[] input_datasets, TensorFlow.TFDataType[] output_types, TensorFlow.TFShape[] output_shapes, string operName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype TensorFlow.TFOutput ZipDataset(valuetype TensorFlow.TFOutput[] input_datasets, valuetype TensorFlow.TFDataType[] output_types, class TensorFlow.TFShape[] output_shapes, string operName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TensorFlow.TFOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input_datasets" Type="TensorFlow.TFOutput[]" />
        <Parameter Name="output_types" Type="TensorFlow.TFDataType[]" />
        <Parameter Name="output_shapes" Type="TensorFlow.TFShape[]" />
        <Parameter Name="operName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input_datasets">
        </param>
        <param name="output_types">
        </param>
        <param name="output_shapes">
        </param>
        <param name="operName">
              If specified, the created operation in the graph will be this one, otherwise it will be named 'ZipDataset'.
            </param>
        <summary>
              Creates a dataset that zips together `input_datasets`.
            </summary>
        <returns>
              The TFOperation can be fetched from the resulting TFOutput, by fethching the Operation property from the result.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
